<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <AvailableItemName Include="SyntaxDefinition" />
    <AvailableItemName Include="SyntaxTestDefinition" />
    <AvailableItemName Include="BoundTreeDefinition" />
  </ItemGroup>
  <ItemDefinitionGroup>
    <SyntaxDefinition>
      <GenerateSource>True</GenerateSource>
      <GenerateTests>False</GenerateTests>
    </SyntaxDefinition>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <CompileDependsOn>
      GenerateSyntaxModel;
      GenerateSyntaxModelGetText;
      GenerateSyntaxModelTests;
      GenerateBoundTree;
      GenerateErrorFacts;
      $(CompileDependsOn)
    </CompileDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <CleanDependsOn>
      CleanSyntaxModel;
      CleanSyntaxModelGetText;
      CleanSyntaxModelTests;
      CleanBoundTree;
      CleanErrorFacts;
      $(CleanDependsOn)
    </CleanDependsOn>
  </PropertyGroup>

  <PropertyGroup>
	<MonoPrefix Condition="'$(OS)' != 'Windows_NT'">mono </MonoPrefix>
  </PropertyGroup>
  
  <Target
    Name="GenerateSyntaxModel"
    Inputs="@(SyntaxDefinition);$(VBSyntaxGeneratorToolPath);$(CSharpSyntaxGeneratorToolPath)"
    Outputs="@(SyntaxDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')"
    Condition="'$(BuildingProject)' == 'true' AND ('$(Language)' == 'VB' or '$(Language)' == 'C#')"
  >
    <PropertyGroup>
      <SyntaxGenerator Condition="'$(Language)' == 'VB'">$(MonoPrefix) "$(VBSyntaxGeneratorToolPath)"</SyntaxGenerator>
      <SyntaxGenerator Condition="'$(Language)' == 'C#'">$(MonoPrefix) "$(CSharpSyntaxGeneratorToolPath)"</SyntaxGenerator>
      <GeneratedSyntaxModel>@(SyntaxDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModel>
    </PropertyGroup>

    <Exec
      Command='$(SyntaxGenerator) "@(SyntaxDefinition)" "$(GeneratedSyntaxModel)"'
      Outputs="$(GeneratedSyntaxModel)"
    >
      <Output TaskParameter="Outputs" ItemName="FileWrites" />
    </Exec>

  </Target>
  
  <Target
    Name="CleanSyntaxModel"
  >
    <PropertyGroup>
      <GeneratedSyntaxModel>@(SyntaxDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModel>
    </PropertyGroup>

    <Delete Files="$(GeneratedSyntaxModel)" />
  </Target>

  <Target
    Name="GenerateSyntaxModelGetText"
    Inputs="@(SyntaxGetTextDefinition);$(VBSyntaxGeneratorToolPath)"
    Outputs="@(SyntaxGetTextDefinition -> '$(IntermediateOutputPath)\%(FileName)%(Extension).Generated$(DefaultLanguageSourceExtension)')"
    Condition="'$(BuildingProject)' == 'true' AND '$(Language)' == 'VB'"
  >
    <PropertyGroup>
      <SyntaxGenerator>"$(VBSyntaxGeneratorToolPath)"</SyntaxGenerator>
      <GeneratedSyntaxModelGetText>@(SyntaxGetTextDefinition -> '$(IntermediateOutputPath)\%(FileName)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModelGetText>
    </PropertyGroup>

    <Exec
      Command='$(SyntaxGenerator) &quot;@(SyntaxGetTextDefinition)&quot; &quot;$(GeneratedSyntaxModelGetText)&quot; /gettext'
      Outputs="$(GeneratedSyntaxModelGetText)"
    >
      <Output TaskParameter="Outputs" ItemName="FileWrites" />
    </Exec>

  </Target>

  <Target
    Name="CleanSyntaxModelGetText"
    Condition="'$(Language)' == 'VB'"
  >
    <PropertyGroup>
      <GeneratedSyntaxModelGetText>@(SyntaxGetTextDefinition -> '$(IntermediateOutputPath)\%(FileName)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModelGetText>
    </PropertyGroup>

    <Delete Files="$(GeneratedSyntaxModelGetText)" />
  </Target>

  <Target
    Name="GenerateSyntaxModelTests"
    Inputs="@(SyntaxTestDefinition);$(VBSyntaxGeneratorToolPath);$(CSharpSyntaxGeneratorToolPath)"
    Outputs="@(SyntaxTestDefinition -> '$(IntermediateOutputPath)\%(FileName)%(Extension).Generated$(DefaultLanguageSourceExtension)')"
    Condition="'$(BuildingProject)' == 'true' AND ('$(Language)' == 'VB' or '$(Language)' == 'C#')"
  >
    <PropertyGroup>
      <SyntaxGenerator Condition="'$(Language)' == 'VB'">$(MonoPrefix) "$(VBSyntaxGeneratorToolPath)"</SyntaxGenerator>
      <SyntaxGenerator Condition="'$(Language)' == 'C#'">$(MonoPrefix) "$(CSharpSyntaxGeneratorToolPath)"</SyntaxGenerator>
      <GeneratedSyntaxModelTests>@(SyntaxTestDefinition -> '$(IntermediateOutputPath)\%(FileName)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModelTests>
    </PropertyGroup>

    <Exec
      Command='$(SyntaxGenerator) &quot;@(SyntaxTestDefinition)&quot; &quot;$(GeneratedSyntaxModelTests)&quot; /test'
      Outputs="$(GeneratedSyntaxModelTests)"
    >
      <Output TaskParameter="Outputs" ItemName="FileWrites" />
    </Exec>

  </Target>

  <Target
    Name="CleanSyntaxModelTests"
    Condition="'$(Language)' == 'VB' or '$(Language)' == 'C#'"
  >
    <PropertyGroup>
      <GeneratedSyntaxModelTests>@(SyntaxTestDefinition -> '$(IntermediateOutputPath)\%(FileName)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModelTests>
    </PropertyGroup>

    <Delete Files="$(GeneratedSyntaxModelTests)" />
  </Target>

  <Target
    Name="GenerateBoundTree"
    Inputs="@(BoundTreeDefinition);$(BoundTreeGeneratorToolPath)"
    Outputs="@(BoundTreeDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')"
    Condition="'$(BuildingProject)' == 'true' AND ('$(Language)' == 'VB' or '$(Language)' == 'C#')"
  >
    <PropertyGroup>
      <BoundTreeGenerator>$(MonoPrefix) "$(BoundTreeGeneratorToolPath)"</BoundTreeGenerator>
      <GeneratedBoundTree>@(BoundTreeDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedBoundTree>
    </PropertyGroup>

    <Exec
      Command='$(BoundTreeGenerator) $(Language) "@(BoundTreeDefinition)" "$(GeneratedBoundTree)"'
      Outputs="$(GeneratedBoundTree)"
    >
      <Output TaskParameter="Outputs" ItemName="FileWrites" />
    </Exec>
  </Target>

  <Target
    Name="CleanBoundTree"
    Condition="'$(Language)' == 'VB' or '$(Language)' == 'C#'"
  >
    <PropertyGroup>
      <GeneratedBoundTree>@(BoundTreeDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedBoundTree>
    </PropertyGroup>

    <Delete Files="$(GeneratedBoundTree)" />
  </Target>

  <ItemDefinitionGroup>
    <ErrorCode>
      <Visible>false</Visible>
    </ErrorCode>
  </ItemDefinitionGroup>

  <Target
    Name="GenerateErrorFacts"
    Inputs="@(ErrorCode);$(CSharpErrorFactsGeneratorToolPath);$(VBErrorFactsGeneratorToolPath)"
    Outputs="@(ErrorCode -> '$(IntermediateOutputPath)ErrorFacts.Generated$(DefaultLanguageSourceExtension)')"
    Condition="'$(BuildingProject)' == 'true' AND ('$(Language)' == 'VB' or '$(Language)' == 'C#')"
  >
    <PropertyGroup>
      <ErrorFactsGenerator Condition="'$(Language)' == 'VB'">$(MonoPrefix) "$(VBErrorFactsGeneratorToolPath)"</ErrorFactsGenerator>
      <ErrorFactsGenerator Condition="'$(Language)' == 'C#'">$(MonoPrefix) "$(CSharpErrorFactsGeneratorToolPath)"</ErrorFactsGenerator>
      <GeneratedErrorFacts>@(ErrorCode -> '$(IntermediateOutputPath)ErrorFacts.Generated$(DefaultLanguageSourceExtension)')</GeneratedErrorFacts>
    </PropertyGroup>

    <Exec
      Command='$(ErrorFactsGenerator) "@(ErrorCode)" "$(GeneratedErrorFacts)"'
      Outputs="$(GeneratedErrorFacts)"
    >
      <Output TaskParameter="Outputs" ItemName="FileWrites" />
    </Exec>
  </Target>

  <Target
    Name="CleanErrorFacts"
    Condition="'$(Language)' == 'VB' or '$(Language)' == 'C#'"
  >
    <PropertyGroup>
      <GeneratedErrorFacts>@(ErrorCode -> '$(IntermediateOutputPath)ErrorFacts.Generated$(DefaultLanguageSourceExtension)')</GeneratedErrorFacts>
    </PropertyGroup>

    <Delete Files="$(GeneratedErrorFacts)" />
  </Target>

</Project>
