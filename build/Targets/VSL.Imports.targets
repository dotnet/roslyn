<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->

  <!-- This file is imported by all projects at the end of the project files -->
  <!-- Update common properties -->
  <PropertyGroup>
    <OutputPath>$(OutDir)</OutputPath>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'VB' AND '$(AssemblyName)' != ''">$(AssemblyName).xml</DocumentationFile>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'CSharp' AND '$(AssemblyName)' != ''">$(OutputPath)$(AssemblyName).xml</DocumentationFile>
    <RoslynPublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</RoslynPublicKey>
    <RoslynInternalKey>002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2</RoslynInternalKey>
  </PropertyGroup>

  <PropertyGroup>
    <!-- While UseCommonOutputDirectory will prevent NuGet implementations from being copied, 
         we still need to turn off CopyNuGetImplementations to prevent the build task from complaining about a 
         lack of a runtime section in our project.json. -->

    <CopyNuGetImplementations Condition="'$(UseCommonOutputDirectory)' == 'true'">false</CopyNuGetImplementations>
  </PropertyGroup>

  <!-- If the project hasn't configured a ruleset, set a default ruleset. -->
  <Choose>
    <When Condition="'$(CodeAnalysisRuleSet)' == ''">
      <Choose>
        <!-- We have different default rulesets for Build versus Running Code Analysis. -->
        <When Condition="'$(RunCodeAnalysis)'=='true' OR '$(RunCodeAnalysisOnce)'=='true'">
          <PropertyGroup>
            <DefaultRulesetSuffix>_RunCodeAnalysisRules</DefaultRulesetSuffix>
          </PropertyGroup>
        </When>
        <Otherwise>
          <PropertyGroup>
            <DefaultRulesetSuffix>_BuildRules</DefaultRulesetSuffix>
          </PropertyGroup>
        </Otherwise>
      </Choose>

      <PropertyGroup>
        <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(NonShipping)' == 'true'">$(VSLToolsPath)\Rulesets\NonShippingProject$(DefaultRulesetSuffix).ruleset</CodeAnalysisRuleSet>
        <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(AnalyzerProject)' == 'true'">$(VSLToolsPath)\Rulesets\AnalyzerProject$(DefaultRulesetSuffix).ruleset</CodeAnalysisRuleSet>
        <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == ''">$(VSLToolsPath)\Rulesets\Roslyn$(DefaultRulesetSuffix).ruleset</CodeAnalysisRuleSet>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- Enable IOperation feature for IOperation based analyzers. -->
  <Choose>
    <When Condition="$(Features) == ''">
      <PropertyGroup>
        <Features>IOperation</Features>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <Features>IOperation,$(Features)</Features>
  </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- settings for strong name signing -->
  <PropertyGroup>
    <ShouldSignBuild Condition="'$(RealSignBuild)' == 'true' OR '$(SignType)' == 'real'">true</ShouldSignBuild>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(SignAssembly)' == 'true'">
      <Choose>
        <!-- Shipping binaries in an "official" build are delay-signed with the MS key; later, the signing
             system will finish the strong-name signing. -->
        <When Condition="'$(NonShipping)' != 'true'">
          <Choose>
              <!-- DelaySign if we're real signing, otherwise public sign -->
              <When Condition="'$(ShouldSignBuild)' == 'true'">
                  <PropertyGroup>
                      <DelaySign>true</DelaySign>
                  </PropertyGroup>
              </When>
              <Otherwise>
                  <PropertyGroup>
                      <PublicSign>true</PublicSign>
                  </PropertyGroup>
              </Otherwise>
          </Choose>

          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(VSLToolsPath)\Strong Name Keys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
            <PublicKey>$(RoslynPublicKey)</PublicKey>
            <PublicKeyToken>31BF3856AD364E35</PublicKeyToken>
          </PropertyGroup>
        </When>

        <!-- Non-shipping binaries are simply signed with the Roslyn internal key. -->
        <Otherwise>
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(VSLToolsPath)\Strong Name Keys\RoslynInternalKey.Private.snk</AssemblyOriginatorKeyFile>
            <DelaySign>false</DelaySign>
            <PublicKey>$(RoslynInternalKey)</PublicKey>
            <PublicKeyToken>fc793a00266884fb</PublicKeyToken>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
  </Choose>

  <!-- ====================================================================================

         Generation of binding redirects.

       ==================================================================================== -->
  <ItemGroup Condition="'$(GenerateMSBuildBindingRedirects)' == 'true'">
      <SuggestedBindingRedirects Include="Microsoft.Build, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
        <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
      </SuggestedBindingRedirects>
      <SuggestedBindingRedirects Include="Microsoft.Build.Engine, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
        <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
      </SuggestedBindingRedirects>
      <SuggestedBindingRedirects Include="Microsoft.Build.Framework, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
        <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
      </SuggestedBindingRedirects>
      <SuggestedBindingRedirects Include="Microsoft.Build.Tasks.$(MSBuildAssemblyNameFragment), Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
        <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
      </SuggestedBindingRedirects>
      <SuggestedBindingRedirects Include="Microsoft.Build.Utilities.Core, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
        <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
      </SuggestedBindingRedirects>
  </ItemGroup>
  <PropertyGroup>
    <ForceGenerationOfBindingRedirects Condition="'$(GenerateMSBuildBindingRedirects)' == 'true'">true</ForceGenerationOfBindingRedirects>
    <AutoGenerateBindingRedirects Condition="'$(ForceGenerationOfBindingRedirects)' == 'true'">true</AutoGenerateBindingRedirects>
  </PropertyGroup>

  <Target Name="ForceGenerationOfBindingRedirects"
          AfterTargets="ResolveAssemblyReferences"
          BeforeTargets="GenerateBindingRedirects"
          Condition="'$(ForceGenerationOfBindingRedirects)' == 'true'">

    <PropertyGroup>
      <!-- Needs to be set in a target because it has to be set after the initial evaluation in the common targets -->
      <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
    </PropertyGroup>
  </Target>

  <Choose>
    <When Condition="'$(ProjectLanguage)' == 'VB'">
      <PropertyGroup>
        <MSBuildTargetsLanguageName>VisualBasic</MSBuildTargetsLanguageName>
      </PropertyGroup>
    </When>
    <When Condition="'$(ProjectLanguage)' == 'CSharp'">
      <PropertyGroup>
        <MSBuildTargetsLanguageName>CSharp</MSBuildTargetsLanguageName>
      </PropertyGroup>
    </When>
  </Choose>

  <Choose>
    <When Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable'">
      <PropertyGroup>
        <MSBuildTargetsFilePath>$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.$(MSBuildTargetsLanguageName).targets</MSBuildTargetsFilePath>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <MSBuildTargetsFilePath>$(MSBuildToolsPath)\Microsoft.$(MSBuildTargetsLanguageName).targets</MSBuildTargetsFilePath>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <Import Project="$(MSBuildTargetsFilePath)" />

  <!-- On Mono on *nix the NuGet targets aren't imported by default, so we do that here -->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\NuGet\Microsoft.NuGet.targets"
          Condition="'$(OS)' != 'Windows_NT'" />

  <Choose>
    <When Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable' AND
                     '$(TargetFrameworkVersion)' == 'v5.0'">
      <!-- Treat portable exes as CoreClr-targeting-exes -->
      <PropertyGroup Condition="'$(OutputType)' == 'Exe'">
        <NuGetTargetMoniker>.NETCoreApp,Version=v1.0</NuGetTargetMoniker>
        <BaseNuGetRuntimeIdentifier Condition="'$(OS)' == 'Windows_NT'">win7</BaseNuGetRuntimeIdentifier>
      </PropertyGroup>

      <!-- Upgrade portable projects to .NETStandard 1.3 -->
      <PropertyGroup Condition="'$(OutputType)' == 'Library'">
        <NuGetTargetMoniker>.NETStandard,Version=v1.3</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- It looks like MSBuild has a bug on *nix where they aggressively
       directory separators from '\' to '/', even when the '\'
       is being used as an escape character in a define constant in VB.
       This change works around the bug by removing all quotes from
       define constants after Microsoft.VisualBasic.CurrentVersion adds
       them in our build. This should be OK since none of our constants
       should require quoting. See https://github.com/Microsoft/msbuild/issues/137 -->
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <FinalDefineConstants>$(FinalDefineConstants.Replace('"', ''))</FinalDefineConstants>
  </PropertyGroup>

  <!-- Verify some build flags are correct -->
  <PropertyGroup>
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);VerifyBuildFlags</PrepareForBuildDependsOn>
  </PropertyGroup>

  <Target Name="VerifyBuildFlags">
    <Error 
        Condition="('$(RealSignBuild)' == 'true' OR '$(SignType)' == 'real') AND '$(BuildVersion)' == '42.42.42.42'"
        Text="Must specify a build version in order to real sign a build." />

    <Error 
        Condition="'$(CheckForOverflowUnderflow)' != '' OR '$(RemoveIntegerChecks)' != ''"
        Text="The following properties cannot be set by individual projects: CheckForOverflowUnderflow and RemoveIntegerChecks" />
    
    <PropertyGroup Condition="'$(ProjectLanguage)' == 'CSharp'">
        <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    </PropertyGroup>

    <PropertyGroup Condition="'$(ProjectLanguage)' == 'VB'">
        <RemoveIntegerChecks>true</RemoveIntegerChecks>
    </PropertyGroup>
  </Target>

  <!-- For our projects that specify multiple targets in the project.json to work around https://github.com/dotnet/roslyn/issues/12458,
       we need to also silence a NuGet generated warning -->
  <Target Name="EmitMSBuildWarning"></Target>

  <!-- ====================================================================================

         Support for a IncludeInVSIXLocalOnly Content metadata

       ==================================================================================== -->

  <PropertyGroup>
    <GetVsixSourceItemsDependsOn>$(GetVsixSourceItemsDependsOn);IncludeVsixLocalOnlyItems</GetVsixSourceItemsDependsOn>
  </PropertyGroup>

  <Target Name="IncludeVsixLocalOnlyItems">
    <!-- This is shamelessly ripped from Microsoft.VsSDK.targets -->
    <ItemGroup>
      <VSIXSourceItemLocalOnly Include="@(Content)" Condition="'%(Content.IncludeInVSIXLocalOnly)'=='true' AND '%(Content.VSIXSubPath)'==''">
        <!-- Sets VSIXSubPath for content items that are nonlinked files -->
        <VSIXSubPath Condition="'%(Content.Link)'==''">%(Content.RelativeDir)</VSIXSubPath>
        <!-- Sets VSIXSubPath for content items that are linked files -->
        <VSIXSubPath Condition="'%(Content.Link)'!=''">$([System.IO.Path]::GetDirectoryName(%(Content.Link)))</VSIXSubPath>
      </VSIXSourceItemLocalOnly>

      <VSIXSourceItemLocalOnly Include="@(Content)" Condition="'%(Content.IncludeInVSIXLocalOnly)'=='true' AND '%(Content.VSIXSubPath)'!=''" />
    </ItemGroup>
  </Target>

  <!-- ====================================================================================

         Include some of our NuGet-consumed assets into VSIX projects

         This exists for two reasons:

         1) In some cases, we need to include the contents of a NuGet package that is otherwise
            contained within the SuppressFromVsix list, because we're actually the component
            inside Visual Studio that ships that component
         
         2) The SDK targets don't currently look at the ReferenceCopyLocalPaths produced
            by the NuGet build task.

       ==================================================================================== -->

  <PropertyGroup>
    <GetVsixSourceItemsDependsOn>$(GetVsixSourceItemsDependsOn);IncludeNuGetResolvedAssets</GetVsixSourceItemsDependsOn>
  </PropertyGroup>

  <Target Name="IncludeNuGetResolvedAssets" DependsOnTargets="ResolveNuGetPackageAssets" Condition="'@(NuGetPackageToIncludeInVsix)' != ''">
    <ItemGroup>
      <_ReferenceCopyLocalPathsWithPotentialInclusions Include="@(ReferenceCopyLocalPaths)">
        <NuGetPackageToIncludeInVsix>%(NuGetPackageToIncludeInVsix.Identity)</NuGetPackageToIncludeInVsix>
      </_ReferenceCopyLocalPathsWithPotentialInclusions>

      <VSIXCopyLocalReferenceSourceItem Include="@(_ReferenceCopyLocalPathsWithPotentialInclusions)"
        Condition="'%(_ReferenceCopyLocalPathsWithPotentialInclusions.NuGetPackageId)' == '%(_ReferenceCopyLocalPathsWithPotentialInclusions.NuGetPackageToIncludeInVsix)' and
                   '%(_ReferenceCopyLocalPathsWithPotentialInclusions.Extension)' != '.pdb'">
        <ForceIncludeInVsix>true</ForceIncludeInVsix>
        <Private>true</Private>
      </VSIXCopyLocalReferenceSourceItem>
    </ItemGroup>
  </Target>

  <ItemDefinitionGroup>
    <NuGetPackageToIncludeInVsix>
      <Visible>false</Visible>
    </NuGetPackageToIncludeInVsix>
  </ItemDefinitionGroup>

  <!-- This is a copy of the Microsoft.VisualStudio.SDK.EmbedInteropTypes NuGet package, but only the list of
       assemblies that we need. The package includes things like EnvDTE which are reasonable for consumers, but
       strange since we actually _implement_ DTE and use it as an exchange type with generics in a few places. -->
  <Target Name="LinkVSSDKEmbeddableAssemblies" DependsOnTargets="ResolveReferences" AfterTargets="ResolveReferences">
    <ItemGroup>
      <ReferencePath Condition="
              '%(FileName)' == 'Microsoft.VisualStudio.Shell.Embeddable'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.0'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.1.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.14.0.DesignTime'
           or '%(Filename)' == 'Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.12.1.DesignTime'
           or '%(FileName)' == 'Microsoft.Internal.VisualStudio.Shell.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.ProjectSystem.Interop'
           or '%(FileName)' == 'stdole'
           or '%(FileName)' == 'Microsoft.VisualStudio.CommandBars'
              ">
        <EmbedInteropTypes>true</EmbedInteropTypes>
      </ReferencePath>
    </ItemGroup>
  </Target>

  <!-- ====================================================================================

         Generation of AssemblyVersion attributes from the BuildVersion property

       ==================================================================================== -->

  <Import Project="GenerateAssemblyInfo.targets" Condition="'$(ProjectLanguage)' == 'CSharp' OR '$(ProjectLanguage)' == 'VB'" />

  <!-- ====================================================================================

         Generation of InternalsVisibleTo attributes from the project

       ==================================================================================== -->

  <Import Project="GenerateInternalsVisibleTo.targets" />

  <!-- ====================================================================================

         Generation of syntax models, syntax model tests, and bound trees from xml files

       ==================================================================================== -->

  <Import Project="GenerateCompilerInternals.targets" />

  <!-- ====================================================================================

         VSSDK

       ==================================================================================== -->

  <Import Project="$(VisualStudioBuildToolsNuGetPackagePath)\build\Microsoft.VsSDK.BuildTools.targets" Condition="'$(ImportVSSDKTargets)' == 'true'" />
  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(ImportVSSDKTargets)' == 'true'" />

  <!-- ====================================================================================

         Support for in-place modification of the compiled binary.
         Since there may be more than one post compile modification, we must take care not
         to break incremental builds. A timestemp file is written out when all modification
         targets have completed.
         Note that the targets participating in post compile modification must list the
         sentinel file as one of their outputs, but they should not modify it.

       ==================================================================================== -->

  <PropertyGroup>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
  </PropertyGroup>

  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="ApplyOptimizations"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>

  <!-- ====================================================================================

         Support for rolling optimization data into assemblies.

       ==================================================================================== -->

  <PropertyGroup>
    <OptimizationDataFolderPath>$(MSBuildThisFileDirectory)..\..\..\Closed\OptimizationData</OptimizationDataFolderPath>
    <OptimizationDataFile>$([System.IO.Path]::GetFullPath('$(OptimizationDataFolderPath)\$(TargetName).pgo'))</OptimizationDataFile>
    <IbcMergePath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\..\..\Closed\Tools\ibcmerge\ibcmerge.exe'))</IbcMergePath>
  </PropertyGroup>

  <Target Name="ApplyOptimizations"
          Condition="'$(Configuration)' == 'Release' AND '$(NonShipping)' != 'true' AND '$(SkipApplyOptimizations)' != 'true' AND Exists('$(OptimizationDataFile)')"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <Message Text="Adding optimization data to @(IntermediateAssembly)"/>
    <Exec Command="&quot;$(IbcMergePath)&quot; -q -f -partialNGEN -minify -mo &quot;@(IntermediateAssembly)&quot; -incremental &quot;$(OptimizationDataFile)&quot;" />

  </Target>

  <!-- ====================================================================================

         Support for signing VSIXes

       ==================================================================================== -->


  <PropertyGroup>
	<ProducingSignedVsix Condition="'$(ShouldSignBuild)' == 'true' AND '$(NonShipping)' != 'true' AND '$(CreateVsixContainer)' == 'true'">true</ProducingSignedVsix>
  </PropertyGroup>
</Project>
