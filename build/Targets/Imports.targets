<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Import Project="RepoToolset\Workarounds.targets"/>
  <Import Project="RepoToolset\OptimizationData.targets"/>
  <Import Project="RepoToolset\RepositoryInfo.targets"/>
  <Import Project="VisualStudio.targets"/>

  <PropertyGroup>
    <RoslynPublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</RoslynPublicKey>
    <RoslynInternalKey>002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2</RoslynInternalKey>

    <FileAlignment>512</FileAlignment>
    <HighEntropyVA>true</HighEntropyVA>
    <Deterministic>True</Deterministic>

    <!-- Only generate our runtimeconfig.json files for net core apps. It's unnecessary in desktop projects
         but gets included in lots of output items like VSIX. -->
    <GenerateRuntimeConfigurationFiles Condition="'$(TargetFramework)' != 'netcoreapp1.1' AND '$(TargetFramework)' != 'netcoreapp2.0'">false</GenerateRuntimeConfigurationFiles>

    <MSBuildTargetsFilePath>$(MSBuildToolsPath)\Microsoft.$(MSBuildTargetsLanguageName).targets</MSBuildTargetsFilePath>

    <!-- Disable the message indicating we are using a preview SDK. That is understood and by design -->
    <SuppressNETCoreSdkPreviewMessage>true</SuppressNETCoreSdkPreviewMessage>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="XliffTasks" Version="$(XliffTasksVersion)" PrivateAssets="All" Condition="'$(NonShipping)' != 'true'" />
  </ItemGroup>

  <Choose>
    <When Condition="'$(SignAssembly)' == 'true'">
      <Choose>
        <!-- Shipping binaries are always public signed.  In the case of an official build $(OfficialBuild) the
             binaries will be real signed as a post processing step. -->
        <When Condition="'$(NonShipping)' != 'true'">
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)..\Strong Name Keys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
            <PublicKey>$(RoslynPublicKey)</PublicKey>
            <PublicKeyToken>31BF3856AD364E35</PublicKeyToken>
            <PublicSign>true</PublicSign>
          </PropertyGroup>
        </When>

        <!-- Non-shipping binaries are simply signed with the Roslyn internal key. -->
        <Otherwise>
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)..\Strong Name Keys\RoslynInternalKey.Private.snk</AssemblyOriginatorKeyFile>
            <DelaySign>false</DelaySign>
            <PublicKey>$(RoslynInternalKey)</PublicKey>
            <PublicKeyToken>fc793a00266884fb</PublicKeyToken>
          </PropertyGroup>
          <!-- Real-signing cross-platform currently has a blocking bug:
               https://github.com/dotnet/roslyn/issues/23521 -->
          <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
              <PublicSign>true</PublicSign>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
  </Choose>

  <ItemGroup Condition="'$(ProjectLanguage)' == 'CSharp' AND '$(TargetNetFX20)' == 'true'">
    <_ExplicitReference Include="$(FrameworkPathOverride)\mscorlib.dll" />
  </ItemGroup>

  <!-- Add the UnitTestContainer project capability -->
  <ItemGroup Condition="'$(_IsAnyUnitTest)' == 'true'">
    <ProjectCapability Include="UnitTestContainer" />
  </ItemGroup>

  <ItemDefinitionGroup Condition="'$(_CopyReferences)' == 'false'">
    <Reference>
      <Private>False</Private>
    </Reference>
  </ItemDefinitionGroup>

  <ItemDefinitionGroup Condition="'$(_CopyProjectReferences)' == 'false'">
    <ProjectReference>
      <Private>False</Private>
    </ProjectReference>
  </ItemDefinitionGroup>

  <!--
    Some dependencies bring in references to UIAutomationClient and UIAutomationTypes. These conflict with the faster
    UIAComWrapper implementation used by the Roslyn integration tests. This target sets the alias for the slower
    dependencies so they are not used unintentionally within the Roslyn code base.
  -->
  <Target Name="HideSlowAutomationAssemblies" BeforeTargets="FindReferenceAssembliesForReferences;ResolveReferences" >
    <ItemGroup>
      <ReferencePath Condition="'%(FileName)' == 'UIAutomationClient' OR
                                '%(FileName)' == 'UIAutomationTypes'">
        <Aliases>slowautomation</Aliases>
      </ReferencePath>
    </ItemGroup>
  </Target>

  <Import Project="GenerateAssemblyInfo.targets" Condition="'$(ProjectLanguage)' == 'CSharp' OR '$(ProjectLanguage)' == 'VB'" />
  <Import Project="GenerateInternalsVisibleTo.targets" />

  <Import Project="Roslyn.Toolsets.Xunit.targets" Condition="'$(_IsAnyUnitTest)' == 'true'" />

  <PropertyGroup>
    <PrepareForBuildDependsOn>RestoreToolsetCheck;$(PrepareForBuildDependsOn)</PrepareForBuildDependsOn>
    <TargetFrameworkMonikerAssemblyAttributesPath>$(IntermediateOutputPath)$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)</TargetFrameworkMonikerAssemblyAttributesPath>
  </PropertyGroup>

  <Target Name="RestoreToolsetCheck" Condition="'$(BuildingProject)' == 'true' AND '$(DotNetBuildFromSource)' != 'true'">
      <Error Text="Toolset packages have not been restored, run Restore.cmd before building. Expected '$(RoslynToolsetPropsFilePath)' to exist."
             Condition="!Exists('$(RoslynToolsetPropsFilePath)')" />
      <Error Text="Analyzer packages have not been restored, run Restore.cmd before building. File not found: '$(RoslynDiagnosticsPropsFilePath)'"
             Condition="!Exists('$(RoslynDiagnosticsPropsFilePath)')" />
  </Target>

  <Target Name="CheckBootstrapState"
          Condition="'$(BootstrapBuildPath)' != ''"
          AfterTargets="CoreCompile">
    <ValidateBootstrap BootstrapPath="$(RoslynToolsetDirectory)" />
  </Target>

  <!--
    When running our determinism tests we need to copy the diagnostic file from the intermediate directory
    to the location of the binary.  This ensures .dll and .dll.key are next to each other to be picked up
    by our test scripts
  -->
  <Target Name="CopyDeterministicBuildDiagnosticFile" Condition="'$(DebugDeterminism)' != ''" AfterTargets="CoreCompile">
    <Copy Condition="'$(IsWpfTempProject)' != 'true' and Exists(@(IntermediateAssembly -> '%(fullpath).key'))"
          SourceFiles="@(IntermediateAssembly -> '%(fullpath).key')"
          DestinationFolder="$(OutDir)" />
  </Target>

  <!-- 
    In order to use Test Explorer in Visual Studio as well as leverage LUT testing we need to have both of the follownig packages in 
    our build.  

        - xunit.runner.visualstudio
        - xunit

    Both of these include xunit.abstractions.dll in different forms: None and reference
    respectively.  This creates a double write violation in our build.  The None item
    is unnecessary for us since we reference the xunit package hence remove it here. 

    https://github.com/dotnet/roslyn/issues/18753
  -->
  <ItemGroup>
    <None Remove="$(NuGetPackageRoot)xunit.runner.visualstudio\$(xunitrunnervisualstudioVersion)\build\net20\..\_common\xunit.abstractions.dll" />
  </ItemGroup>

  <!-- We need to run publish on our CoreCLR executables (CscCore and VbcCore) without rebuilding
       since a rebuild may overwrite signed binaries in the output directory with unsigned binaries
       from the intermediate output directory. -->
  <Target Name="PublishWithoutBuilding"
        DependsOnTargets="BuildOnlySettings;
                          PreventProjectReferencesFromBuilding;
                          ResolveReferences;
                          PrepareForPublish;
                          ComputeAndCopyFilesToPublishDirectory;
                          GeneratePublishDependencyFile;
                          GeneratePublishRuntimeConfigurationFile" />

  <Target Name="PreventProjectReferencesFromBuilding">
    <PropertyGroup>
      <BuildProjectReferences>false</BuildProjectReferences>
    </PropertyGroup>
  </Target>

  <!-- Guard against MSBuild picking the wrong SDK version. Its resolver does not always properly enforce
       the SDK specified in global.json 
       
       https://github.com/dotnet/core-setup/issues/3805
       -->
  <Target Name="BeforeBuild" Condition="'$(MSBuildRuntimeType)' != 'Core'">
    <ValidateBuildEnvironment
      MSBuildBinPath="$(MSBuildBinPath)"
      MSBuildMinimumFileVersion="15.7.0"
      MSBuildMinimumDisplayVersion="MSBuild 15.7"
      />
  </Target> 

  <!-- 
      This target is used to copy referenced projects to a sub-directory vs. the direct output 
      directory of the build. Useful when the referenced project is an EXE and the referencing 
      project uses an incompatible targetframework
  -->  
  <Target Name="CopyReferencedProjectsToDependenciesDirectory" Condition="'@(RoslynReferenceToDependencyDirectory)' != ''"  AfterTargets="ResolveProjectReferences">
    <PropertyGroup>
      <_RoslynReferenceOutputPath>@(RoslynReferenceToDependencyDirectory->'%(RootDir)%(Directory)')</_RoslynReferenceOutputPath>
    </PropertyGroup>
    <ItemGroup>
      <_RoslynReferenceContent Include="$(_RoslynReferenceOutputPath)*.*" />
      <Content Include="@(_RoslynReferenceContent)" Link="dependency\%(_RoslynReferenceContent.Filename)%(_RoslynReferenceContent.Extension)" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

  <!-- Count PublicAPIs as AdditionalFiles to get them to analyzers. This is working around
       https://github.com/dotnet/project-system/issues/2160 where AdditionalFileItemNames
       isn't fully supported yet in the new project system. Removal of this hack is tracked
       by https://github.com/dotnet/roslyn/issues/19545. -->
  <ItemGroup>
    <AdditionalFiles Include="@(PublicAPI)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Show launchSettings.json in the project if it exists. -->
    <None Include="$(AppDesignerFolder)\launchSettings.json" Condition="Exists('$(AppDesignerFolder)\launchSettings.json')" />
  </ItemGroup>

  <!-- CPS doesn't show these items by default, but we want to show them. -->
  <ItemGroup>
    <!-- XAML pages and resources -->
    <None Include="@(Page)" />
    <None Include="@(Resource)" />
  </ItemGroup>

  <!-- 
    Prepare inputs for Symbol Store publishing.
     
    The imported targets populate ArtifactsSymStoreDirectory with links to binaries and Windows PDBs produced either 
    directly by the build or converted from Portable PDBs produced by the build.
    In official build the content of ArtifactsSymStoreDirectory is uploaded to a symbol server.
  -->
  <PropertyGroup>
    <PublishOutputToSymStore Condition="'$(Nonshipping)' == 'true'">false</PublishOutputToSymStore>
  </PropertyGroup>

  <!--
    Workaround for not having VS 15.7 on build machines.
    Remove when machines are upgraded.
  -->
  <Target Name="InitializeSourceControlInformation" />
  <PropertyGroup>
    <SourceControlInformationFeatureSupported>true</SourceControlInformationFeatureSupported>
  </PropertyGroup>

  <Import Project="RepoToolset\SymStore.targets" />

  <!--
    Delegates to XliffTasks to validate that all localizable resources have been translated.
    We can't use EnsureAllResoucesTranslated directly because the XliffTasks package is only pulled in by projects that
    produce shipping binaries.
  -->
  <Target Name="CheckLocStatus"
          DependsOnTargets="EnsureAllResourcesTranslated"
          Condition="'$(NonShipping)' != 'true'" />
</Project>
