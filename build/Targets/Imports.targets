<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->

  <Choose>
    <When Condition="'$(RoslynProjectType)' == 'ExeNonDeployment'">
      <!-- Some Exes are not designed to be directly runnable.  Typically for size savings in 
           our build output.  They are made runnable by deployment projects that reference
           them.  --> 
      <PropertyGroup>
        <_CopyReferences>false</_CopyReferences>
        <_CopyProjectReferences>false</_CopyProjectReferences>
        <OutDir>$(OutDir)Exes\$(MSBuildProjectName)\</OutDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'UnitTest'">
      <PropertyGroup>
        <_IsAnyUnitTest>true</_IsAnyUnitTest>
        <OutDir>$(OutDir)UnitTests\$(MSBuildProjectName)\</OutDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'UnitTestPortable' or '$(RoslynProjectType)' == 'UnitTestDesktop'">
      <PropertyGroup>
        <_CopyReferences>false</_CopyReferences>
        <_CopyProjectReferences>false</_CopyProjectReferences>
        <_IsAnyUnitTest>true</_IsAnyUnitTest>
        <OutDir>$(OutDir)Dlls\$(MSBuildProjectName)\</OutDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'CompilerGeneratorTool'">
      <PropertyGroup>
        <_CopyReferences>false</_CopyReferences>
        <OutDir>$(OutDir)Exes\</OutDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'Vsix'">
      <PropertyGroup>
        <_CopyReferences>false</_CopyReferences>
        <OutDir>$(OutDir)Vsix\$(MSBuildProjectName)\</OutDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'DeploymentTest'">
      <!-- Need to include PDB in deployment directory for debugging, and in some cases correctness when
           stack traces are involved -->
      <PropertyGroup>
        <AllowedReferenceRelatedFileExtensions>$(AllowedReferenceRelatedFileExtensions);.pdb</AllowedReferenceRelatedFileExtensions>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'Custom' or $(RoslynProjectType) == 'DeploymentTest'">
      <!-- Do nothing -->
    </When>
    <When Condition="'$(RoslynProjectType)' == '' and '$(OutputType)' == 'Library'">
      <PropertyGroup>
        <_CopyReferences>false</_CopyReferences>
        <_CopyProjectReferences>false</_CopyProjectReferences>
        <OutDir>$(OutDir)Dlls\$(MSBuildProjectName)\</OutDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == '' and '$(OutputType)' == 'Exe'">
      <PropertyGroup>
        <OutDir>$(OutDir)Exes\$(MSBuildProjectName)\</OutDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == '' and '$(OutputType)' == 'WinExe'">
      <PropertyGroup>
        <OutDir>$(OutDir)Exes\$(MSBuildProjectName)\</OutDir>
      </PropertyGroup>
    </When>
  </Choose>

  <Choose>
    <When Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable'">
      <PropertyGroup>
        <MSBuildTargetsFilePath>$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.$(MSBuildTargetsLanguageName).targets</MSBuildTargetsFilePath>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <MSBuildTargetsFilePath>$(MSBuildToolsPath)\Microsoft.$(MSBuildTargetsLanguageName).targets</MSBuildTargetsFilePath>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <OutputPath>$(OutDir)</OutputPath>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'VB' AND '$(AssemblyName)' != ''">$(AssemblyName).xml</DocumentationFile>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'CSharp' AND '$(AssemblyName)' != ''">$(BaseIntermediateOutputPath)$(AssemblyName).xml</DocumentationFile>
    <RoslynPublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</RoslynPublicKey>
    <RoslynInternalKey>002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2</RoslynInternalKey>

    <!-- While UseCommonOutputDirectory will prevent NuGet implementations from being copied, 
         we still need to turn off CopyNuGetImplementations to prevent the build task from complaining about a 
         lack of a runtime section in our project.json. -->
    <CopyNuGetImplementations Condition="'$(UseCommonOutputDirectory)' == 'true'">false</CopyNuGetImplementations>

    <ForceGenerationOfBindingRedirects Condition="'$(GenerateMSBuildBindingRedirects)' == 'true'">true</ForceGenerationOfBindingRedirects>
    <AutoGenerateBindingRedirects Condition="'$(ForceGenerationOfBindingRedirects)' == 'true'">true</AutoGenerateBindingRedirects>

    <FileAlignment>512</FileAlignment>
    <HighEntropyVA>true</HighEntropyVA>
    <Deterministic>True</Deterministic>

    <GetVsixSourceItemsDependsOn>$(GetVsixSourceItemsDependsOn);IncludeVsixLocalOnlyItems</GetVsixSourceItemsDependsOn>
    <GetVsixSourceItemsDependsOn>$(GetVsixSourceItemsDependsOn);IncludeNuGetResolvedAssets</GetVsixSourceItemsDependsOn>
    <ProducingSignedVsix Condition="'$(ShouldSignBuild)' == 'true' AND '$(NonShipping)' != 'true' AND '$(CreateVsixContainer)' == 'true'">true</ProducingSignedVsix>
  </PropertyGroup>

  <!-- If the project hasn't configured a ruleset, set a default ruleset. -->
  <Choose>
    <When Condition="'$(CodeAnalysisRuleSet)' == ''">
      <Choose>
        <!-- We have different default rulesets for Build versus Running Code Analysis. -->
        <When Condition="'$(RunCodeAnalysis)'=='true' OR '$(RunCodeAnalysisOnce)'=='true'">
          <PropertyGroup>
            <DefaultRulesetSuffix>_RunCodeAnalysisRules</DefaultRulesetSuffix>
          </PropertyGroup>
        </When>
        <Otherwise>
          <PropertyGroup>
            <DefaultRulesetSuffix>_BuildRules</DefaultRulesetSuffix>
          </PropertyGroup>
        </Otherwise>
      </Choose>

      <PropertyGroup>
        <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(NonShipping)' == 'true'">$(MSBuildThisFileDirectory)..\Rulesets\NonShippingProject$(DefaultRulesetSuffix).ruleset</CodeAnalysisRuleSet>
        <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(AnalyzerProject)' == 'true'">$(MSBuildThisFileDirectory)..\Rulesets\AnalyzerProject$(DefaultRulesetSuffix).ruleset</CodeAnalysisRuleSet>
        <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == ''">$(MSBuildThisFileDirectory)..\Rulesets\Roslyn$(DefaultRulesetSuffix).ruleset</CodeAnalysisRuleSet>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- Settings for strong name signing -->
  <Choose>
    <When Condition="'$(SignAssembly)' == 'true'">
      <Choose>
        <!-- Shipping binaries are always public signed.  In the case of an official build $(OfficialBuild) the 
             binaries will be real signed as a post processing step. -->
        <When Condition="'$(NonShipping)' != 'true'">
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)..\Strong Name Keys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
            <PublicKey>$(RoslynPublicKey)</PublicKey>
            <PublicKeyToken>31BF3856AD364E35</PublicKeyToken>
            <PublicSign>true</PublicSign>
          </PropertyGroup>
        </When>

        <!-- Non-shipping binaries are simply signed with the Roslyn internal key. -->
        <Otherwise>
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)..\Strong Name Keys\RoslynInternalKey.Private.snk</AssemblyOriginatorKeyFile>
            <DelaySign>false</DelaySign>
            <PublicKey>$(RoslynInternalKey)</PublicKey>
            <PublicKeyToken>fc793a00266884fb</PublicKeyToken>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
  </Choose>

  <ItemDefinitionGroup Condition="'$(_CopyReferences)' == 'false'">
    <Reference>
      <Private>False</Private>
    </Reference>
  </ItemDefinitionGroup>

  <ItemDefinitionGroup Condition="'$(_CopyProjectReferences)' == 'false'">
    <ProjectReference>
      <Private>False</Private>
    </ProjectReference>
  </ItemDefinitionGroup>

  <ItemDefinitionGroup>
    <NuGetPackageToIncludeInVsix>
      <Visible>false</Visible>
    </NuGetPackageToIncludeInVsix>
  </ItemDefinitionGroup>

  <!-- ====================================================================================

         Generation of binding redirects.

       ==================================================================================== -->
  <ItemGroup Condition="'$(GenerateMSBuildBindingRedirects)' == 'true'">
    <SuggestedBindingRedirects Include="Microsoft.Build, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
    </SuggestedBindingRedirects>
    <SuggestedBindingRedirects Include="Microsoft.Build.Engine, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
    </SuggestedBindingRedirects>
    <SuggestedBindingRedirects Include="Microsoft.Build.Framework, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
    </SuggestedBindingRedirects>
    <SuggestedBindingRedirects Include="Microsoft.Build.Tasks.$(MSBuildAssemblyNameFragment), Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
    </SuggestedBindingRedirects>
    <SuggestedBindingRedirects Include="Microsoft.Build.Utilities.Core, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(VisualStudioReferenceAssemblyVersion)</MaxVersion>
    </SuggestedBindingRedirects>
  </ItemGroup>

  <Import Project="$(MSBuildTargetsFilePath)" />

  <!-- On Mono on *nix the NuGet targets aren't imported by default, so we do that here -->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\NuGet\Microsoft.NuGet.targets" Condition="'$(OS)' != 'Windows_NT'" />

  <Choose>
    <When Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable' AND '$(TargetFrameworkVersion)' == 'v5.0'">
      <!-- Treat portable exes as CoreClr-targeting-exes -->
      <PropertyGroup Condition="'$(OutputType)' == 'Exe'">
        <NuGetTargetMoniker>.NETCoreApp,Version=v1.0</NuGetTargetMoniker>
        <BaseNuGetRuntimeIdentifier Condition="'$(OS)' == 'Windows_NT'">win7</BaseNuGetRuntimeIdentifier>
      </PropertyGroup>

      <!-- Upgrade portable projects to .NETStandard 1.3 -->
      <PropertyGroup Condition="'$(OutputType)' == 'Library'">
        <NuGetTargetMoniker>.NETStandard,Version=v1.3</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- It looks like MSBuild has a bug on *nix where they aggressively
       directory separators from '\' to '/', even when the '\'
       is being used as an escape character in a define constant in VB.
       This change works around the bug by removing all quotes from
       define constants after Microsoft.VisualBasic.CurrentVersion adds
       them in our build. This should be OK since none of our constants
       should require quoting. See https://github.com/Microsoft/msbuild/issues/137 -->
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <FinalDefineConstants>$(FinalDefineConstants.Replace('"', ''))</FinalDefineConstants>
  </PropertyGroup>

  <!-- For our projects that specify multiple targets in the project.json to work around https://github.com/dotnet/roslyn/issues/12458,
       we need to also silence a NuGet generated warning -->
  <Target Name="EmitMSBuildWarning">
  </Target>

  <Target Name="IncludeVsixLocalOnlyItems">
    <!-- This is shamelessly ripped from Microsoft.VsSDK.targets -->
    <ItemGroup>
      <VSIXSourceItemLocalOnly Include="@(Content)" Condition="'%(Content.IncludeInVSIXLocalOnly)'=='true' AND '%(Content.VSIXSubPath)'==''">
        <!-- Sets VSIXSubPath for content items that are nonlinked files -->
        <VSIXSubPath Condition="'%(Content.Link)'==''">%(Content.RelativeDir)</VSIXSubPath>
        <!-- Sets VSIXSubPath for content items that are linked files -->
        <VSIXSubPath Condition="'%(Content.Link)'!=''">$([System.IO.Path]::GetDirectoryName(%(Content.Link)))</VSIXSubPath>
      </VSIXSourceItemLocalOnly>

      <VSIXSourceItemLocalOnly Include="@(Content)" Condition="'%(Content.IncludeInVSIXLocalOnly)'=='true' AND '%(Content.VSIXSubPath)'!=''" />
    </ItemGroup>
  </Target>

  <!-- Include some of our NuGet-consumed assets into VSIX projects

       This exists for two reasons:

       1) In some cases, we need to include the contents of a NuGet package that is otherwise
          contained within the SuppressFromVsix list, because we're actually the component
          inside Visual Studio that ships that component
       
       2) The SDK targets don't currently look at the ReferenceCopyLocalPaths produced
          by the NuGet build task. -->

  <Target Name="IncludeNuGetResolvedAssets" DependsOnTargets="ResolveNuGetPackageAssets" Condition="'@(NuGetPackageToIncludeInVsix)' != ''">
    <ItemGroup>
      <_ReferenceCopyLocalPathsWithPotentialInclusions Include="@(ReferenceCopyLocalPaths)">
        <NuGetPackageToIncludeInVsix>%(NuGetPackageToIncludeInVsix.Identity)</NuGetPackageToIncludeInVsix>
      </_ReferenceCopyLocalPathsWithPotentialInclusions>

      <VSIXCopyLocalReferenceSourceItem Include="@(_ReferenceCopyLocalPathsWithPotentialInclusions)"
        Condition="'%(_ReferenceCopyLocalPathsWithPotentialInclusions.NuGetPackageId)' == '%(_ReferenceCopyLocalPathsWithPotentialInclusions.NuGetPackageToIncludeInVsix)' and
                   '%(_ReferenceCopyLocalPathsWithPotentialInclusions.Extension)' != '.pdb'">
        <ForceIncludeInVsix>true</ForceIncludeInVsix>
        <Private>true</Private>
      </VSIXCopyLocalReferenceSourceItem>
    </ItemGroup>
  </Target>

  <ItemDefinitionGroup>
    <NuGetPackageToIncludeInVsix>
      <Visible>false</Visible>
    </NuGetPackageToIncludeInVsix>
  </ItemDefinitionGroup>

  <!-- Currently, the Willow installer can't install vsixes that have a <Prerequisites> element
       but the Dev15 RC SDK packages can NOT install vsixes without them as part of the build.
       To work around this conflict, we include them in our manifest files, but if we're building
       with something older than Dev15 RC (as we do for official builds that we insert into setup)
       we'll run a transform to strip out the <Prerequisites> element. -->
  <Target Name="RewriteVsixManifestOnOfficialBuild"
          BeforeTargets="FindSourceVsixManifest"
          Condition="'$(IsDev15RC)' != 'true'">
    <MakeDir Directories="$(IntermediateOutputPath)" />
    <XslTransformation XslInputPath="$(MSBuildThisFileDirectory)TransformVsixManifest.xslt"
                       XmlInputPaths="source.extension.vsixmanifest"
                       OutputPaths="$(IntermediateOutputPath)\source.extension.vsixmanifest" />
    <ItemGroup>
      <!-- Note that `FindSourceVsixManifest` finds the first item in @None that matches the name.
           Our template projects include other manifests as content that are in @None, so make
           sure we put our tranformed item back at the beginning of the list. -->
      <None Remove="source.extension.vsixmanifest" />
      <_TempNoneForReordering Include="@(None)" />
      <None Remove="@(None)" />
      <None Include="$(IntermediateOutputPath)\source.extension.vsixmanifest;@(_TempNoneForReordering)" />

    </ItemGroup>
  </Target>

  <!-- This is a copy of the Microsoft.VisualStudio.SDK.EmbedInteropTypes NuGet package, but only the list of
       assemblies that we need. The package includes things like EnvDTE which are reasonable for consumers, but
       strange since we actually _implement_ DTE and use it as an exchange type with generics in a few places. -->
  <Target Name="LinkVSSDKEmbeddableAssemblies" DependsOnTargets="ResolveReferences" AfterTargets="ResolveReferences">
    <ItemGroup>
      <ReferencePath Condition="
              '%(FileName)' == 'Microsoft.VisualStudio.Shell.Embeddable'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.0'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.1.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.15.0.DesignTime'
           or '%(Filename)' == 'Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.12.1.DesignTime'
           or '%(FileName)' == 'Microsoft.Internal.VisualStudio.Shell.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.ProjectSystem.Interop'
           or '%(FileName)' == 'stdole'
           or '%(FileName)' == 'Microsoft.VisualStudio.CommandBars'
              ">
        <EmbedInteropTypes>true</EmbedInteropTypes>
      </ReferencePath>
    </ItemGroup>
  </Target>

  <Import Project="GenerateAssemblyInfo.targets" Condition="'$(ProjectLanguage)' == 'CSharp' OR '$(ProjectLanguage)' == 'VB'" />
  <Import Project="GenerateInternalsVisibleTo.targets" />
  <Import Project="GenerateCompilerInternals.targets" />

  <ImportGroup Condition="'$(ImportVSSDKTargets)' == 'true'">
    <Import Project="$(NuGetPackageRoot)\Microsoft.VSSDK.BuildTools\$(VisualStudioBuildToolsVersion)\build\Microsoft.VsSDK.BuildTools.targets" />
    <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" />
  </ImportGroup>

  <Import Project="Roslyn.Toolsets.Xunit.targets" Condition="'$(_IsAnyUnitTest)' == 'true'" />

  <!-- ====================================================================================

         Support for in-place modification of the compiled binary.
         Since there may be more than one post compile modification, we must take care not
         to break incremental builds. A timestemp file is written out when all modification
         targets have completed.
         Note that the targets participating in post compile modification must list the
         sentinel file as one of their outputs, but they should not modify it.

       ==================================================================================== -->

  <PropertyGroup>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
    <OptimizationDataFolderPath>$(NuGetPackageRoot)\RoslynDependencies.OptimizationData\2.0.0-rc-61101-16\content\OptimizationData</OptimizationDataFolderPath>
    <OptimizationDataFile>$([System.IO.Path]::GetFullPath('$(OptimizationDataFolderPath)\$(TargetName).pgo'))</OptimizationDataFile>
  </PropertyGroup>

  <Target Name="RestoreToolsetCheck"
      Condition="'$(BuildingProject)' == 'true'">
      <Error Text="Toolset packages have not been restored, run Restore.cmd before building"
             Condition="!Exists('$(ToolsetCompilerPropsFilePath)')" />
  </Target>

  <Target Name="CheckBootstrapState" Condition="'$(BootstrapBuildPath)' != ''" BeforeTargets="CoreCompile">
    <ValidateBootstrap BootstrapPath="$(BootstrapBuildPath)" />
  </Target>

  <!-- 
    When running our determinism tests we need to copy the diagnostic file from the intermediate directory 
    to the location of the binary.  This ensures .dll and .dll.key are next to each other to be picked up
    by our test scripts
  -->
  <Target Name="CopyDeterministicBuildDiagnosticFile" Condition="'$(DebugDeterminism)' != ''" AfterTargets="CoreCompile">
    <Copy
        Condition="Exists(@(IntermediateAssembly -> '%(fullpath).key'))"
        SourceFiles="@(IntermediateAssembly -> '%(fullpath).key')"
        DestinationFolder="$(OutDir)" />
  </Target>

  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="ApplyOptimizations"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>

  <!-- Support for rolling optimization data into assemblies. -->
  <Target Name="ForceGenerationOfBindingRedirects"
          AfterTargets="ResolveAssemblyReferences"
          BeforeTargets="GenerateBindingRedirects"
          Condition="'$(ForceGenerationOfBindingRedirects)' == 'true'">

    <PropertyGroup>
      <!-- Needs to be set in a target because it has to be set after the initial evaluation in the common targets -->
      <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
    </PropertyGroup>
  </Target>

  <!-- The path to IBCMerge.exe must be specified at build time via $(IbcMergePath).  Typically this is passed as a 
       build definition variable -->
  <Target Name="ApplyOptimizations"
          Condition="'$(OfficialBuild)' == 'true' AND '$(NonShipping)' != 'true' AND '$(SkipApplyOptimizations)' != 'true' AND Exists('$(OptimizationDataFile)') AND Exists('$(IbcMergePath)')"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

      <Message Text="Adding optimization data to @(IntermediateAssembly)" />
      <Exec Command="&quot;$(IbcMergePath)&quot; -q -f -partialNGEN -minify -mo &quot;@(IntermediateAssembly)&quot; -incremental &quot;$(OptimizationDataFile)&quot;"
            ConsoleToMSBuild="true">
        <Output TaskParameter="ConsoleOutput" PropertyName="IbcMergeOutput" />
      </Exec>
      <Message Text="$(IbcMergeOutput)" />

  </Target>

  <!-- Returns the current build version. Used in .vsixmanifests to substitute our build version into them -->
  <Target Name="GetBuildVersion" Outputs="$(VsixVersion)" />
</Project>
