<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Choose>
    <When Condition="'$(RoslynProjectType)' == 'UnitTest'">
      <PropertyGroup>
        <_IsAnyUnitTest>true</_IsAnyUnitTest>
        <CopyNuGetImplementations>true</CopyNuGetImplementations>
        <OutputPath>$(OutputPath)UnitTests\$(MSBuildProjectName)\</OutputPath>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'UnitTestPortable' OR '$(RoslynProjectType)' == 'UnitTestDesktop'">
      <!-- Portable DLLs don't have a supported mechanism for deploying their dependencies
           as a part of a normal build.  This breaks developer workflows like F5, TDD, and
           standard unit testing.

           For developer convenience we use an unsupported way of deploying dependencies.  This
           includes NuGet and standard references.  This is not done on official builds because
           it's not a supported mechanism hence we don't rely on it for official validation.

           This bug tracks getting an official solution out of MSBuild.

           https://github.com/Microsoft/msbuild/issues/1499 -->
      <PropertyGroup>
        <_CopyReferences>$(DeveloperBuild)</_CopyReferences>
        <_CopyProjectReferences>$(DeveloperBuild)</_CopyProjectReferences>
        <_IsAnyUnitTest>true</_IsAnyUnitTest>
        <_IsAnyPortableUnitTest>true</_IsAnyPortableUnitTest>
        <CopyNuGetImplementations>false</CopyNuGetImplementations>
        <OutputPath>$(OutputPath)Dlls\$(MSBuildProjectName)\</OutputPath>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'Vsix'">
      <PropertyGroup>
        <_CopyReferences>false</_CopyReferences>
        <CopyNuGetImplementations>true</CopyNuGetImplementations>
        <OutputPath>$(OutputPath)Vsix\$(MSBuildProjectName)\</OutputPath>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'DeploymentTest'">
      <!-- Need to include PDB in deployment directory for debugging, and in some cases correctness when
           stack traces are involved -->
      <PropertyGroup>
        <AllowedReferenceRelatedFileExtensions>$(AllowedReferenceRelatedFileExtensions);.pdb</AllowedReferenceRelatedFileExtensions>
        <CopyNuGetImplementations>true</CopyNuGetImplementations>
        <OutputPath>$(OutputPath)$(RoslynUnitTestDir)</OutputPath>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == 'Custom'">
      <!-- Do nothing -->
    </When>
    <When Condition="'$(RoslynProjectType)' == '' AND '$(OutputType)' == 'Library'">
      <PropertyGroup>
        <_CopyReferences>false</_CopyReferences>
        <_CopyProjectReferences>false</_CopyProjectReferences>
        <CopyNuGetImplementations>false</CopyNuGetImplementations>
        <OutputPath>$(OutputPath)Dlls\$(MSBuildProjectName)\</OutputPath>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == '' AND '$(OutputType)' == 'Exe'">
      <PropertyGroup>
        <CopyNuGetImplementations>true</CopyNuGetImplementations>
        <OutputPath>$(OutputPath)Exes\$(MSBuildProjectName)\</OutputPath>
      </PropertyGroup>
    </When>
    <When Condition="'$(RoslynProjectType)' == '' AND '$(OutputType)' == 'WinExe'">
      <PropertyGroup>
        <CopyNuGetImplementations>true</CopyNuGetImplementations>
        <OutputPath>$(OutputPath)Exes\$(MSBuildProjectName)\</OutputPath>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- 
    DocumentationFile needs to be set before importing common targets. 
    C# common targets (unlike VB) prefix DocumentationFile path with IntermediateOutputPath.
  -->
  <PropertyGroup Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(AssemblyName)' != ''">
    <DocumentationFile Condition="'$(ProjectLanguage)' == 'VB'">$(AssemblyName).xml</DocumentationFile>
    <DocumentationFile Condition="'$(ProjectLanguage)' == 'CSharp'">$(IntermediateOutputPath)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>
  
  <PropertyGroup>
    <RoslynPublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</RoslynPublicKey>
    <RoslynInternalKey>002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2</RoslynInternalKey>

    <ForceGenerationOfBindingRedirects Condition="'$(GenerateMSBuildBindingRedirects)' != ''">true</ForceGenerationOfBindingRedirects>
    <AutoGenerateBindingRedirects Condition="'$(ForceGenerationOfBindingRedirects)' == 'true'">true</AutoGenerateBindingRedirects>

    <FileAlignment>512</FileAlignment>
    <HighEntropyVA>true</HighEntropyVA>
    <Deterministic>True</Deterministic>
    <UseCommonOutputDirectory>false</UseCommonOutputDirectory>

    <GetVsixSourceItemsDependsOn>$(GetVsixSourceItemsDependsOn);IncludeVsixLocalOnlyItems</GetVsixSourceItemsDependsOn>
    <GetVsixSourceItemsDependsOn>$(GetVsixSourceItemsDependsOn);IncludeNuGetResolvedAssets</GetVsixSourceItemsDependsOn>
    <ProducingSignedVsix Condition="'$(ShouldSignBuild)' == 'true' AND '$(NonShipping)' != 'true' AND '$(CreateVsixContainer)' == 'true'">true</ProducingSignedVsix>

    <!-- The netstandard 1.3 package by default includes Microsoft.CodeAnalysis.  That's a bit
         of a non-starter since we build it.  Using manual references for now -->
    <DisableImplicitFrameworkReferences Condition="'$(DisableImplicitFrameworkReferences)' == ''" >true</DisableImplicitFrameworkReferences>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
      
    <!-- Only generate our runtimeconfig.json files for net core apps. It's unnecessary in desktop projects
         but gets included in lots of output items like VSIX. -->
    <GenerateRuntimeConfigurationFiles Condition="'$(TargetFramework)' != 'netcoreapp1.1' AND '$(TargetFramework)' != 'netcoreapp2.0'">false</GenerateRuntimeConfigurationFiles>

    <IbcMergePath>$(NuGetPackageRoot)\Microsoft.DotNet.IBCMerge\$(MicrosoftDotNetIBCMerge)\lib\net45\ibcmerge.exe</IbcMergePath>
    <MSBuildTargetsFilePath>$(MSBuildToolsPath)\Microsoft.$(MSBuildTargetsLanguageName).targets</MSBuildTargetsFilePath>
  </PropertyGroup>

  <!-- If the project hasn't configured a ruleset, set a default ruleset. -->
  <Choose>
    <When Condition="'$(CodeAnalysisRuleSet)' == ''">
      <Choose>
        <!-- We have different default rulesets for Build versus Running Code Analysis. -->
        <When Condition="'$(RunCodeAnalysis)' == 'true' OR '$(RunCodeAnalysisOnce)' == 'true'">
          <PropertyGroup>
            <DefaultRulesetSuffix>_RunCodeAnalysisRules</DefaultRulesetSuffix>
          </PropertyGroup>
        </When>
        <Otherwise>
          <PropertyGroup>
            <DefaultRulesetSuffix>_BuildRules</DefaultRulesetSuffix>
          </PropertyGroup>
        </Otherwise>
      </Choose>

      <PropertyGroup>
        <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(NonShipping)' == 'true'">$(MSBuildThisFileDirectory)..\Rulesets\NonShippingProject$(DefaultRulesetSuffix).ruleset</CodeAnalysisRuleSet>
        <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(AnalyzerProject)' == 'true'">$(MSBuildThisFileDirectory)..\Rulesets\AnalyzerProject$(DefaultRulesetSuffix).ruleset</CodeAnalysisRuleSet>
        <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == ''">$(MSBuildThisFileDirectory)..\Rulesets\Roslyn$(DefaultRulesetSuffix).ruleset</CodeAnalysisRuleSet>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- Settings for strong name signing -->
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
      <!-- Strong name signing is not supported on non-Windows platforms -->
      <PublicSign>true</PublicSign>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(SignAssembly)' == 'true'">
      <Choose>
        <!-- Shipping binaries are always public signed.  In the case of an official build $(OfficialBuild) the
             binaries will be real signed as a post processing step. -->
        <When Condition="'$(NonShipping)' != 'true'">
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)..\Strong Name Keys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
            <PublicKey>$(RoslynPublicKey)</PublicKey>
            <PublicKeyToken>31BF3856AD364E35</PublicKeyToken>
            <PublicSign>true</PublicSign>
          </PropertyGroup>
        </When>

        <!-- Non-shipping binaries are simply signed with the Roslyn internal key. -->
        <Otherwise>
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)..\Strong Name Keys\RoslynInternalKey.Private.snk</AssemblyOriginatorKeyFile>
            <DelaySign>false</DelaySign>
            <PublicKey>$(RoslynInternalKey)</PublicKey>
            <PublicKeyToken>fc793a00266884fb</PublicKeyToken>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
  </Choose>

  <ItemGroup Condition="'$(ProjectLanguage)' == 'CSharp' AND '$(TargetNetFX20)' == 'true'">
    <_ExplicitReference Include="$(FrameworkPathOverride)\mscorlib.dll" />
  </ItemGroup>

  <!-- Add the UnitTestContainer project capability -->
  <ItemGroup Condition="'$(_IsAnyUnitTest)' == 'true'">
    <ProjectCapability Include="UnitTestContainer" />
  </ItemGroup>

  <ItemDefinitionGroup Condition="'$(_CopyReferences)' == 'false'">
    <Reference>
      <Private>False</Private>
    </Reference>
  </ItemDefinitionGroup>

  <ItemDefinitionGroup Condition="'$(_CopyProjectReferences)' == 'false'">
    <ProjectReference>
      <Private>False</Private>
    </ProjectReference>
  </ItemDefinitionGroup>

  <ItemDefinitionGroup>
    <NuGetPackageToIncludeInVsix>
      <Visible>false</Visible>
    </NuGetPackageToIncludeInVsix>
  </ItemDefinitionGroup>

  <!-- ====================================================================================

         Generation of binding redirects for our MSBuild binaries.  

       ==================================================================================== -->
  <ItemGroup Condition="'$(GenerateMSBuildBindingRedirects)' != ''">
    <SuggestedBindingRedirects Include="Microsoft.Build, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(GenerateMSBuildBindingRedirects)</MaxVersion>
    </SuggestedBindingRedirects>
    <SuggestedBindingRedirects Include="Microsoft.Build.Engine, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(GenerateMSBuildBindingRedirects)</MaxVersion>
    </SuggestedBindingRedirects>
    <SuggestedBindingRedirects Include="Microsoft.Build.Framework, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(GenerateMSBuildBindingRedirects)</MaxVersion>
    </SuggestedBindingRedirects>
    <SuggestedBindingRedirects Include="Microsoft.Build.Tasks.$(MSBuildAssemblyNameFragment), Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(GenerateMSBuildBindingRedirects)</MaxVersion>
    </SuggestedBindingRedirects>
    <SuggestedBindingRedirects Include="Microsoft.Build.Utilities.Core, Version=$(VisualStudioReferenceAssemblyVersion), Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <MaxVersion>$(GenerateMSBuildBindingRedirects)</MaxVersion>
    </SuggestedBindingRedirects>
  </ItemGroup>

  <Import Project="$(MSBuildTargetsFilePath)" Condition="'$(RoslynSdkProject)' != 'true'" />
  <Import Project="$(RoslynNetSdkRootPath)Sdk.targets" Condition="'$(RoslynSdkProject)' == 'true'" />

  <!-- It looks like MSBuild has a bug on *nix where they aggressively
       directory separators from '\'to '/', even when the '\'
       is being used as an escape character in a define constant in VB.
       This change works around the bug by removing all quotes from
       define constants after Microsoft.VisualBasic.CurrentVersion adds
       them in our build. This should be OK since none of our constants
       should require quoting. See https://github.com/Microsoft/msbuild/issues/137 -->
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <FinalDefineConstants>$(FinalDefineConstants.Replace('"', ''))</FinalDefineConstants>
  </PropertyGroup>

  <!-- For our projects that specify multiple targets in the project.json to work around https://github.com/dotnet/roslyn/issues/12458,
       we need to also silence a NuGet generated warning -->
  <Target Name="EmitMSBuildWarning">
  </Target>

  <Target Name="IncludeVsixLocalOnlyItems">
    <!-- This is shamelessly ripped from Microsoft.VsSDK.targets -->
    <ItemGroup>
      <VSIXSourceItemLocalOnly Include="@(Content)" Condition="'%(Content.IncludeInVSIXLocalOnly)' == 'true' AND '%(Content.VSIXSubPath)' == ''">
        <!-- Sets VSIXSubPath for content items that are nonlinked files -->
        <VSIXSubPath Condition="'%(Content.Link)' == ''">%(Content.RelativeDir)</VSIXSubPath>
        <!-- Sets VSIXSubPath for content items that are linked files -->
        <VSIXSubPath Condition="'%(Content.Link)' != ''">$([System.IO.Path]::GetDirectoryName(%(Content.Link)))</VSIXSubPath>
      </VSIXSourceItemLocalOnly>

      <VSIXSourceItemLocalOnly Include="@(Content)" Condition="'%(Content.IncludeInVSIXLocalOnly)' == 'true' AND '%(Content.VSIXSubPath)' != ''" />
    </ItemGroup>
  </Target>

  <!-- Include some of our NuGet-consumed assets into VSIX projects

       This exists for two reasons:

       1) In some cases, we need to include the contents of a NuGet package that is otherwise
          contained within the SuppressFromVsix list, because we're actually the component
          inside Visual Studio that ships that component

       2) The SDK targets don't currently look at the ReferenceCopyLocalPaths produced
          by the NuGet build task. -->

  <Target Name="IncludeNuGetResolvedAssets" DependsOnTargets="ResolvePackageDependenciesForBuild" Condition="'@(NuGetPackageToIncludeInVsix)' != ''">
    <FindNuGetAssetsForVsix
      NuGetPackageRoot="$(NuGetPackageRoot)"
      ReferenceCopyLocalPaths="@(ReferenceCopyLocalPaths)"
      NuGetPackageToIncludeInVsix="@(NuGetPackageToIncludeInVsix)">

      <Output TaskParameter="NuGetAssetsToIncludeInVsix" ItemName="NuGetAssetsToIncludeInVsix" />
    </FindNuGetAssetsForVsix>

    <ItemGroup>
      <VSIXCopyLocalReferenceSourceItem Include="@(NuGetAssetsToIncludeInVsix)">
        <ForceIncludeInVsix>true</ForceIncludeInVsix>
        <Private>true</Private>
      </VSIXCopyLocalReferenceSourceItem>
    </ItemGroup>
  </Target>

  <ItemDefinitionGroup>
    <NuGetPackageToIncludeInVsix>
      <Visible>false</Visible>
    </NuGetPackageToIncludeInVsix>
  </ItemDefinitionGroup>

  <!-- This is a copy of the Microsoft.VisualStudio.SDK.EmbedInteropTypes NuGet package, but only the list of
       assemblies that we need. The package includes things like EnvDTE which are reasonable for consumers, but
       strange since we actually _implement_ DTE and use it as an exchange type with generics in a few places. -->
  <Target Name="LinkVSSDKEmbeddableAssemblies" BeforeTargets="FindReferenceAssembliesForReferences;ResolveReferences" >
    <ItemGroup>
      <ReferencePath Condition="'%(FileName)' == 'Microsoft.VisualStudio.Shell.Embeddable' OR
                                '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.0' OR
                                '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.1.DesignTime' OR
                                '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.14.0.DesignTime' OR
                                '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.15.0.DesignTime' OR
                                '%(Filename)' == 'Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime' OR
                                '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.12.1.DesignTime' OR
                                '%(FileName)' == 'Microsoft.Internal.VisualStudio.Shell.Interop.14.0.DesignTime' OR
                                '%(FileName)' == 'Microsoft.VisualStudio.ProjectSystem.Interop' OR
                                '%(FileName)' == 'stdole' OR
                                '%(FileName)' == 'Microsoft.VisualStudio.CommandBars'">
        <EmbedInteropTypes>true</EmbedInteropTypes>
      </ReferencePath>
    </ItemGroup>
  </Target>

  <Import Project="GenerateAssemblyInfo.targets" Condition="'$(ProjectLanguage)' == 'CSharp' OR '$(ProjectLanguage)' == 'VB'" />
  <Import Project="GenerateInternalsVisibleTo.targets" />
  <Import Project="DisableTransitiveReferences.targets" Condition="'$(RoslynProjectType)' == 'Vsix' AND '$(RoslynSdkProject)' == 'true'" />

  <!-- 
       Work around some UI delays in the new project system

       https://github.com/dotnet/project-system/issues/2297

  --> 
  <ItemGroup>
    <ProjectCapability Remove="DependenciesTree"/>
  </ItemGroup>

  <ItemDefinitionGroup>
    <VSIXSourceItem>
      <Visible>false</Visible>
    </VSIXSourceItem>
  </ItemDefinitionGroup>

  <ImportGroup Condition="'$(ImportVSSDKTargets)' == 'true'">
    <Import Project="$(NuGetPackageRoot)\Microsoft.VSSDK.BuildTools\$(VisualStudioBuildToolsVersion)\build\Microsoft.VsSDK.BuildTools.targets" />
    <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" />
  </ImportGroup>

  <ImportGroup Condition="'$(ImportVSSDKTargets)' == 'true' AND '$(CreateVsixContainer)' == 'false'">
    <Import Project="DisableVsixManifestTargets.targets" />
  </ImportGroup>

  <Import Project="Roslyn.Toolsets.Xunit.targets" Condition="'$(_IsAnyUnitTest)' == 'true'" />

  <!-- ====================================================================================

         Support for in-place modification of the compiled binary.
         Since there may be more than one post compile modification, we must take care not
         to break incremental builds. A timestemp file is written out when all modification
         targets have completed.
         Note that the targets participating in post compile modification must list the
         sentinel file as one of their outputs, but they should not modify it.

       ==================================================================================== -->

  <PropertyGroup>
    <PrepareForBuildDependsOn>RemoveDuplicateXUnitContent;RestoreToolsetCheck;$(PrepareForBuildDependsOn)</PrepareForBuildDependsOn>
    <TargetFrameworkMonikerAssemblyAttributesPath>$(IntermediateOutputPath)$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)</TargetFrameworkMonikerAssemblyAttributesPath>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
    <OptimizationDataFolderPath>$(NuGetPackageRoot)\RoslynDependencies.OptimizationData\$(RoslynDependenciesOptimizationDataVersion)\content\OptimizationData</OptimizationDataFolderPath>
    <OptimizationDataFile>$([System.IO.Path]::GetFullPath('$(OptimizationDataFolderPath)\$(TargetName).pgo'))</OptimizationDataFile>
  </PropertyGroup>

  <Target Name="RestoreToolsetCheck" Condition="'$(BuildingProject)' == 'true'">
      <Error Text="Toolset packages have not been restored, run Restore.cmd before building"
             Condition="!Exists('$(ToolsetCompilerPropsFilePath)')" />
      <Error Text="Analyzer packages have not been restored, run Restore.cmd before building. File not found: '$(RoslynDiagnosticsPropsFilePath)'"
             Condition="!Exists('$(RoslynDiagnosticsPropsFilePath)')" />
  </Target>

  <Target Name="CheckBootstrapState"
          Condition="'$(BootstrapBuildPath)' != ''"
          AfterTargets="CoreCompile">
    <ValidateBootstrap BootstrapPath="$(BootstrapBuildPath)" />
  </Target>

  <!--
    When running our determinism tests we need to copy the diagnostic file from the intermediate directory
    to the location of the binary.  This ensures .dll and .dll.key are next to each other to be picked up
    by our test scripts
  -->
  <Target Name="CopyDeterministicBuildDiagnosticFile" Condition="'$(DebugDeterminism)' != ''" AfterTargets="CoreCompile">
    <Copy Condition="Exists(@(IntermediateAssembly -> '%(fullpath).key'))"
          SourceFiles="@(IntermediateAssembly -> '%(fullpath).key')"
          DestinationFolder="$(OutDir)" />
  </Target>

  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="ApplyOptimizations"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>

  <!-- Support for rolling optimization data into assemblies. -->
  <Target Name="ForceGenerationOfBindingRedirects"
          AfterTargets="ResolveAssemblyReferences"
          BeforeTargets="GenerateBindingRedirects"
          Condition="'$(ForceGenerationOfBindingRedirects)' == 'true'">
    <PropertyGroup>
      <!-- Needs to be set in a target because it has to be set after the initial evaluation in the common targets -->
      <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
    </PropertyGroup>
  </Target>

  <!-- The IBCMerge tool is internal only and hence only available during official Microbuild runs.  This target is 
       specifically not gated on the existance of this file.  During an official build it shoudl always be present and 
       if it's not then an error needs to be raised.

       A local build emulating an official build can pass /p:SkipApplyOptimizations=true to avoid this error.
       -->
  <Target Name="ApplyOptimizations"
          Condition="'$(OfficialBuild)' == 'true' AND '$(NonShipping)' != 'true' AND '$(SkipApplyOptimizations)' != 'true' AND Exists('$(OptimizationDataFile)')"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">
      <Message Text="Adding optimization data to @(IntermediateAssembly)" />

      <Error Text="IBCMerge not found at $(IbcMergePath). Local developer builds should pass /p:SkipApplyOptimizations=true to avoid this"
             Condition="!Exists('$(IbcMergePath)')" />

      <Exec Command="&quot;$(IbcMergePath)&quot; -q -f -partialNGEN -minify -mo &quot;@(IntermediateAssembly)&quot; -excludeGenmethUnboxingStubs -incremental &quot;$(OptimizationDataFile)&quot;"
            ConsoleToMSBuild="true"
            Condition="Exists('$(IbcMergePath)')">
        <Output TaskParameter="ConsoleOutput" PropertyName="IbcMergeOutput" />
      </Exec>

      <Message Text="$(IbcMergeOutput)" />
  </Target>

  <!-- Returns the current build version. Used in .vsixmanifests to substitute our build version into them -->
  <Target Name="GetBuildVersion" Returns="$(VsixVersion)" />

  <!-- 
    In order to leverage LUT testing we need to have both of the follownig packages in 
    our build.  

        - xunit.runner.desktop
        - xunit

    Both of these include xunit.abstractions.dll in different forms: content and reference
    respectively.  This creates a double write violation in our build.  The content item
    is unnecessary for us since we reference the xunit package hence remove it here. 

    https://github.com/dotnet/roslyn/issues/18753
  -->
  <Target Name="RemoveDuplicateXUnitContent">
      <ItemGroup>
        <Content Remove="@(Content)" Condition="'%(Filename)%(Extension)' == 'xunit.abstractions.dll'" />
    </ItemGroup>
  </Target>

  <!-- We need to run publish on our CoreCLR executables (CscCore and VbcCore) without rebuilding
       since a rebuild may overwrite signed binaries in the output directory with unsigned binaries
       from the intermediate output directory. -->
  <Target Name="PublishWithoutBuilding"
        DependsOnTargets="PreventProjectReferencesFromBuilding;
                          ResolveReferences;
                          ComputeAndCopyFilesToPublishDirectory;
                          GeneratePublishDependencyFile;
                          GeneratePublishRuntimeConfigurationFile" />                                                           

  <!-- 
    Work around bug in Microsoft.NET.Sdk < v2.0 where satellites were deployed on top of each other in root. 
    https://github.com/dotnet/sdk/issues/1360
  -->
  <Target Name="WorkaroundIncorrectSatelliteDeployment" AfterTargets="ResolveLockFileCopyLocalProjectDeps">
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ResourceCopyLocalItems)" />
      <ReferenceCopyLocalPaths Include="@(ResourceCopyLocalItems)"  Condition="'@(ResourceCopyLocalItems)' != ''">
        <DestinationSubDirectory>$([System.IO.Directory]::GetParent(%(ResourceCopyLocalItems.FullPath)).get_Name())\</DestinationSubDirectory>
      </ReferenceCopyLocalPaths>
    </ItemGroup>
  </Target>

  <!--
     Work around to fix Intellisense file generation for XAML projects

     https://github.com/dotnet/project-system/issues/2488
  -->
  <Target Name="WorkaroundForXAMLIntellisenseBuildIssue" AfterTargets="_CheckCompileDesignTimePrerequisite">
    <PropertyGroup>
       <BuildingProject>false</BuildingProject>
    </PropertyGroup>
  </Target>

  <Target Name="PreventProjectReferencesFromBuilding">
    <PropertyGroup>
      <BuildProjectReferences>false</BuildProjectReferences>
    </PropertyGroup>
  </Target>

  <!-- Count PublicAPIs as AdditionalFiles to get them to analyzers. This is working around
       https://github.com/dotnet/project-system/issues/2160 where AdditionalFileItemNames
       isn't fully supported yet in the new project system. Removal of this hack is tracked
       by https://github.com/dotnet/roslyn/issues/19545. -->
  <ItemGroup>
    <AdditionalFiles Include="@(PublicAPI)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Show launchSettings.json in the project if it exists. -->
    <None Include="$(AppDesignerFolder)\launchSettings.json" Condition="Exists('$(AppDesignerFolder)\launchSettings.json')" />
  </ItemGroup>

  <!-- CPS doesn't show these items by default, but we want to show them. -->
  <ItemGroup>
    <!-- XAML pages and resources -->
    <None Include="@(Page)" />
    <None Include="@(Resource)" />

    <!-- Special items in VSSDK projects -->
    <None Include="@(VSCTCompile)" />
  </ItemGroup>
  
  <!-- Work around https://github.com/dotnet/roslyn/issues/20945 -->
  <Target Name="_CheckForUnsupportedNETCoreVersion" />
</Project>
