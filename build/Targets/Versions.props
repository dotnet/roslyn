<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- This controls the version numbers of the build that we are producing -->

  <Import Project="Packages.props" />
  <Import Project="FixedPackages.props" />

  <PropertyGroup>
    <!-- This is the assembly version of Roslyn from the .NET assembly perspective. It should only be revved during significant point releases. -->
    <RoslynAssemblyVersionBase Condition="'$(RoslynAssemblyVersion)' == ''">2.3.0</RoslynAssemblyVersionBase>
    <!-- This is the file version of Roslyn, as placed in the PE header. It should be revved during point releases, and is also what provides the basis for our NuGet package versioning. -->
    <RoslynFileVersionBase Condition="'$(RoslynFileVersionBase)' == ''">2.3.0</RoslynFileVersionBase>
    <!-- The release moniker for our packages.  Developers should use "dev" and official builds pick the branch
         moniker listed below -->
    <RoslynNuGetMoniker Condition="'$(RoslynNuGetMoniker)' == ''">dev</RoslynNuGetMoniker>
    <RoslynNuGetMoniker Condition="'$(OfficialBuild)' == 'true'">beta1</RoslynNuGetMoniker>
    <!-- This is the base of the NuGet versioning for prerelease packages -->
    <NuGetPreReleaseVersion>$(RoslynFileVersionBase)-$(RoslynNuGetMoniker)</NuGetPreReleaseVersion>

    <!-- We should not be signing a build anywhere except for in MicroBuild, which will always specify 'BUILD_BUILDNUMBER'-->
    <BuildNumber Condition="'$(BuildNumber)' == ''">$(BUILD_BUILDNUMBER)</BuildNumber>
    <Error Condition="'$(BuildNumber)' == '' AND '$(OfficialBuild)' == 'true'">A build number must be specified for a signed build.</Error>

    <!-- When a build number is not specified, then we should default back to '00065535.0', which is a build number in the
         same format as provided by MicroBuild v2, but greater than any that MicroBuild v2 will produce, and is still compatible
         with the Win32 file version limitations. This is required so that builds done locally, where '$(OfficialBuild)' == 'true',
         can still be deployed to VS and override the version that is globally installed. -->
    <BuildNumber Condition="'$(BuildNumber)' == ''">00065535.0</BuildNumber>
    <!-- When a build number is specified, it needs to be in the format of 'x.y'-->
    <Error Condition="$(BuildNumber.Split('.').Length) != 2">BuildNumber should have two parts (in the form of 'x.y')</Error>

    <!-- Split the build parts out from the BuildNumber which is given to us by MicroBuild in the format of yyyymmdd.nn
         where BuildNumberFiveDigitDateStamp is mmmdd (such as 60615) and BuildNumberBuildOfTheDay is nn (which represents the nth build
         started that day). So the first build of the day, 20160615.1, will produce something similar to BuildNumberFiveDigitDateStamp: 60615,
         BuildNumberBuildOfTheDayPadded: 01;and the 12th build of the day, 20160615.12, will produce BuildNumberFiveDigitDateStamp: 60615, BuildNumberBuildOfTheDay: 12

         Additionally, in order ensure the value fits in the 16-bit PE header fields, we will only take the last five digits of the BuildNumber, so
         in the case of 20160615, we will set BuildNumberFiveDigitDateStamp to 60615. Unfortunately for releases in 2017 we can't go any higher, so
         well continue the month counting instead: the build after 61231 is 61301. -->
    <BuildNumberFiveDigitDateStamp>$([MSBuild]::Subtract($(BuildNumber.Split('.')[0].Substring(3).Trim()), 8800))</BuildNumberFiveDigitDateStamp>
    <BuildNumberBuildOfTheDayPadded>$(BuildNumber.Split('.')[1].PadLeft(2,'0'))</BuildNumberBuildOfTheDayPadded>

    <!-- NuGet version -->
    <NuGetReleaseVersion>$(RoslynFileVersionBase)</NuGetReleaseVersion>
    <NuGetPerBuildPreReleaseVersion>$(NuGetPreReleaseVersion)-$(BuildNumberFiveDigitDateStamp)-$(BuildNumberBuildOfTheDayPadded)</NuGetPerBuildPreReleaseVersion>
    <NuGetPackageRoot Condition="'$(NuGetPackageRoot)' == ''">$(NUGET_PACKAGES)</NuGetPackageRoot> <!-- Respect environment variable if set -->
    <NuGetPackageRoot Condition="'$(NuGetPackageRoot)' == '' AND '$(OS)' == 'Windows_NT'">$(UserProfile)/.nuget/packages/</NuGetPackageRoot>
    <NuGetPackageRoot Condition="'$(NuGetPackageRoot)' == '' AND '$(OS)' != 'Windows_NT'">$(HOME)/.nuget/packages/</NuGetPackageRoot>
    <NuGetPackagesDirectory>$(NuGetPackageRoot)</NuGetPackagesDirectory>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(OfficialBuild)' == 'true' OR '$(UseShippingAssemblyVersion)' == 'true'">
      <PropertyGroup>
        <AssemblyVersion>$(RoslynAssemblyVersionBase).0</AssemblyVersion>
        <BuildVersion>$(RoslynFileVersionBase).$(BuildNumberFiveDigitDateStamp)</BuildVersion>
        <VsixVersion>$(RoslynFileVersionBase).$(BuildNumberFiveDigitDateStamp)$(BuildNumberBuildOfTheDayPadded)</VsixVersion>
      </PropertyGroup>
    </When>

    <Otherwise>
      <!-- No build version was supplied.  We'll use a special version, higher than anything
           installed, so that the assembly identity is different.  This will allows us to
           have a build with an actual number installed, but then build and F5 a build with
           this number. We will make AssemblyVersion and BuildVersion different, to catch
           any bugs where people might assume they are the same. -->
      <PropertyGroup>
        <AssemblyVersion>42.42.42.42</AssemblyVersion>
        <BuildVersion>42.42.42.42424</BuildVersion>
        <VsixVersion>42.42.42.42424</VsixVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <Choose>
    <When Condition="'$(OfficialBuild)' != 'true'">
      <!-- On non-official builds we don't burn in a git sha.  In large part because it
           hurts our determinism efforts as binaries which should be the same between
           builds will not (due to developers building against different HEAD
           values). -->
      <PropertyGroup>
        <GitHeadSha>&lt;developer build&gt;</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(BUILD_SOURCEVERSION)</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' == '' AND '$(GIT_COMMIT)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(GIT_COMMIT)</GitHeadSha>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <GitHeadSha>Not found</GitHeadSha>
        <DotGitDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)../../.git'))</DotGitDir>
        <HeadFileContent Condition="Exists('$(DotGitDir)/HEAD')">$([System.IO.File]::ReadAllText('$(DotGitDir)/HEAD').Trim())</HeadFileContent>
        <RefPath Condition="$(HeadFileContent.StartsWith('ref: '))">$(DotGitDir)/$(HeadFileContent.Substring(5))</RefPath>
        <GitHeadSha Condition="'$(RefPath)' != '' AND Exists('$(RefPath)')">$([System.IO.File]::ReadAllText('$(RefPath)').Trim())</GitHeadSha>
        <GitHeadSha Condition="'$(HeadFileContent)' != '' AND '$(RefPath)' == ''">$(HeadFileContent)</GitHeadSha>
      </PropertyGroup>
    </Otherwise>
  </Choose>
</Project>
