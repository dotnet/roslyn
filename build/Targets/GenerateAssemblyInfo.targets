<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <GeneratedAssemblyInfoFile>$(IntermediateOutputPath)GeneratedAssemblyInfo_$(BuildVersion)$(DefaultLanguageSourceExtension)</GeneratedAssemblyInfoFile>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyCompanyAttribute">
      <_Parameter1>Microsoft Corporation</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyCopyrightAttribute">
      <_Parameter1>© Microsoft Corporation. All rights reserved.</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyVersionAttribute">
      <_Parameter1>$(AssemblyVersion)</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyFileVersionAttribute">
      <_Parameter1>$(BuildVersion)</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyInformationalVersionAttribute">
      <_Parameter1>$(BuildVersion)</_Parameter1>
    </AssemblyVersionAttribute>
  </ItemGroup>

  <PropertyGroup>
    <!-- It is extremely important to make CoreCompile depend on us, and not anything else.

    This has to do with how XAML tasks compile a temporary assembly during the two markup compile
    passes.

    Targets happen in this order:
    PrepareForBuild, PreBuildEvent, ResolveReferences, PrepareResources, ResolveKeySource, Compile, ...
    Here's the target dependency DAG that invokes markup compile:
    CoreBuild -> PrepareResources -> XamlMarkupCompilePass1, XamlMarkupCompilePass2.

    As part of pass 1, we determine a list of .xaml files that reference types from the current
    assembly. For those, we can't emit BAML just yet because we can't reference the assembly being
    compiled. We pass this list to MarkupCompilePass2. As part of pass 2, we run the
    XamlTemporaryAssemblyGeneration target. It generates a special ***.tmp_proj project that is a
    trimmed down version of the current project's XML. It then spawns a new MSBuild process to build
    the tmp_proj with only a limited set of targets, specifically:

    <Target Name="CompileTemporaryAssembly" DependsOnTargets="BuildOnlySettings;ResolveKeySource;_GenerateCompileInputs;CoreCompile" />

    Hence, as part of building the temporary assembly the most important target being called is
    CoreCompile. Targets such as CoreBuild and Compile aren't even called there. Hence, if we predicate
    GenerateAssemblyInfoFile on Compile or CoreBuild, it won't get called when generating the
    assembly info file. As a result, we won't pass GeneratedAssemblyInfo_42.42.42.42.cs to the
    compiler when compiling the temporary assembly, and the temporary assembly will be generated
    with AssemblyVersion 0.0.0.0. Next, the unfortunate consequence is that the temp assembly will be
    used to compile the .baml files in MarkupCompilePass2, and the .baml files will end up referencing
    version 0.0.0.0 of the assembly, resulting in runtime assembly load failures.

    This is why if we use CoreCompile below the correct version will end up in the temporary assembly
    and the .baml will be generated correctly eliminating the assembly load failures.

    -->
    <CoreCompileDependsOn>GenerateAssemblyInfoFile;$(CoreCompileDependsOn)</CoreCompileDependsOn>
  </PropertyGroup>

  <!-- Depends on PrepareForBuild because the latter is responsible for calling MakeDir(IntermediateOutputPath).
  Without it, if we do a design-time build of a project (e.g. in Workspace.LoadSolution) immediately following
  a tfpt treeclean, WriteCodeFragment may fail because the obj folder doesn't even exist at that time.  -->
  <Target Name="GenerateAssemblyInfoFile"
          Inputs="$(MSBuildThisFileFullPath)"
          Outputs="$(GeneratedAssemblyInfoFile)"
          DependsOnTargets="PrepareForBuild"
          Condition="('$(Language)' == 'C#' or '$(Language)' == 'VB')">

    <WriteCodeFragment AssemblyAttributes="@(AssemblyVersionAttribute)"
                       Language="$(Language)"
                       OutputFile="$(GeneratedAssemblyInfoFile)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>
</Project>
