<?xml version="1.0" encoding="utf-8"?>
<!-- All Rights Reserved. Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <UsingTask TaskName="RoslynTools.Unsign" AssemblyFile="$(RoslynToolsBuildTasksAssembly)" />

  <!--
    Required properties:
      IbcOptimizationDataDir           The directory containing IBC optimization data.
  -->
  <PropertyGroup>
    <_PreviousOptimizedFile>$([System.IO.Path]::Combine($(IbcOptimizationDataDir), '$(TargetName).pgo'))</_PreviousOptimizedFile>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
  </PropertyGroup>

  <!--
    We need to write out this sentinel file so that when ApplyOptimizations runs and compares the intermediate assemby location
    against itself the PostCompileBinaryModificationSentinelFile will have a newer timestamp allowing the target to be run.
  -->
  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="_InitializeAssemblyOptimizationWithTargetAssembly;ApplyOptimizations"
          Condition="'$(IsWpfTempProject)' != 'true' and Exists('$(_PreviousOptimizedFile)')"
          Inputs="$(MSBuildAllProjects);@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_InitializeAssemblyOptimizationWithTargetAssembly">
    <ItemGroup>
      <OptimizeAssembly Include="@(IntermediateAssembly)" PreviousOptimizedFile="$(_PreviousOptimizedFile)" />
    </ItemGroup>
  </Target>

  <!--
    Merges optimization data to assemblies specified in OptimizeAssembly item group.

    Non-incremental. Calling targets need to handle incremental build if necessary.
    Runs during any CI build. Performs the actual merge only when IBCMerge tool is available. It is expected to be available in an official build.
  -->
  <Target Name="_CalculateIbcArgs">
    <ItemGroup>
      <OptimizeAssembly>
        <!--
          -delete to delete data previously embedded in the binary. This is a no-op for binaries produced by this build, but is needed for dependencies such as System.Reflection.Metadata.
          -incremental to map data stored in the optimized binary, which comes from a previous build, to the new build of the binary.
        -->
        <_IbcArgs>-q -f -partialNGEN -minify -delete -mo "%(OptimizeAssembly.Identity)" -incremental "%(OptimizeAssembly.PreviousOptimizedFile)"</_IbcArgs>
      </OptimizeAssembly>
    </ItemGroup>
  </Target>

  <Target Name="ApplyOptimizations"
          DependsOnTargets="_CalculateIbcArgs"
          Condition="'@(OptimizeAssembly)' != '' and '$(Configuration)' == 'Release' and '$(ContinuousIntegrationBuild)' == 'true'">
    
    <PropertyGroup>
      <_IbcMergePath>$(NuGetPackageRoot)microsoft.dotnet.ibcmerge\$(MicrosoftDotNetIBCMergeVersion)\lib\net45\ibcmerge.exe</_IbcMergePath>

      <_RunIbcMerge>false</_RunIbcMerge>
      <_RunIbcMerge Condition="'$(OfficialBuild)' == 'true' or Exists('$(_IbcMergePath)')">true</_RunIbcMerge>
    </PropertyGroup>

    <Message Text='IBCMerge tool will be run in an official build with arguments: %(OptimizeAssembly._IbcArgs)'
             Condition="'$(_RunIbcMerge)' != 'true'" 
             Importance="normal"/>

    <Exec Command='"$(_IbcMergePath)" %(OptimizeAssembly._IbcArgs)' 
          ConsoleToMSBuild="true"
          Condition="'$(_RunIbcMerge)' == 'true'">
      <Output TaskParameter="ConsoleOutput" PropertyName="IbcMergeOutput" />
    </Exec>

    <!-- Remove Authenticode signing record if present. -->
    <RoslynTools.Unsign FilePath="%(OptimizeAssembly.Identity)" />

    <Message Text="$(IbcMergeOutput)" />
  </Target>

</Project>