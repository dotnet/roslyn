<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- This controls the version numbers of the build that we are producing -->

  <Import Project="Dependencies.props" />
  
  <PropertyGroup>
    <!-- This is the assembly version of Roslyn from the .NET assembly perspective. It should only be revved during significant point releases. -->
    <RoslynAssemblyVersionBase Condition="'$(RoslynAssemblyVersion)' == ''">2.0.0</RoslynAssemblyVersionBase>
    <!-- This is the file version of Roslyn, as placed in the PE header. It should be revved during point releases, and is also what provides the basis for our NuGet package versioning. -->
    <RoslynFileVersionBase Condition="'$(RoslynFileVersionBase)' == ''">2.0.0</RoslynFileVersionBase>
    <!-- This is the base of the NuGet versioning for prerelease packages -->
    <NuGetPreReleaseVersion>$(RoslynFileVersionBase)-beta5</NuGetPreReleaseVersion>
    <!-- Currently we version IW the same as Roslyn. -->
    <MicrosoftVisualStudioInteractiveWindowVersion>$(RoslynAssemblyVersionBase)</MicrosoftVisualStudioInteractiveWindowVersion>
  </PropertyGroup>

  <PropertyGroup>
    <!-- We cannot sign an unofficial build, so fail if 'OfficialBuild' is not 'true' but 'SignedBuild' is -->
    <SignedBuild Condition="'$(RealSignBuild)' == 'true' OR '$(SignType)' == 'real'">true</SignedBuild>
    <Error Condition="'$(OfficialBuild)' != 'true' AND '$(SignedBuild)' == 'true'">Cannot sign an unofficial build.</Error>
  </PropertyGroup>

  <PropertyGroup>
    <!-- We should not be signing a build anywhere except for in MicroBuild, which will always specify 'BUILD_BUILDNUMBER' -->
    <BuildNumber Condition="'$(BuildNumber)' == ''">$(BUILD_BUILDNUMBER)</BuildNumber>
    <Error Condition="'$(BuildNumber)' == '' AND '$(SignedBuild)' == 'true'">A build number must be specified for a signed build.</Error>
  </PropertyGroup>

  <PropertyGroup>
    <!-- When a build number is not specified, then we should default back to '00000000.0', which is a build number in the
         same format as provided by MicroBuild v2, but with all digits set to zero. -->
    <BuildNumber Condition="'$(BuildNumber)' == ''">00000000.0</BuildNumber>
    <!-- When a build number is specified, it needs to be in the format of 'x.y' -->
    <Error Condition="$(BuildNumber.Split('.').Length) != 2">BuildNumber should have two parts (in the form of 'x.y')</Error>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Split the build parts out from the BuildNumber which is given to us by MicroBuild in the format of yyyymmdd.nn
         where BuildNumberFiveDigitDateStamp is ymmdd (such as 60615) and BuildNumberBuildOfTheDay is nn (which represents the nth build 
         started that day). So the first build of the day, 20160615.1, will produce something similar to BuildNumberFiveDigitDateStamp: 60615,
         BuildNumberBuildOfTheDayPadded: 01; and the 12th build of the day, 20160615.12, will produce BuildNumberFiveDigitDateStamp: 60615, BuildNumberBuildOfTheDay: 12 -->
    <!-- Additionally, in order ensure the value fits in the 16-bit PE header fields, we will only take the last five digits of the BuildNumber, so
         in the case of 20160615, we will set BuildNumberFiveDigitDateStamp to 60615. This will begin failing in the 2017 as the BuildVersion only allows
         each part to be in the range of 0 through 65535. Issue #12038 tracks the fix that needs to happen. -->
    <BuildNumberFiveDigitDateStamp>$(BuildNumber.Split('.')[0].Substring(3).Trim())</BuildNumberFiveDigitDateStamp>
    <BuildNumberBuildOfTheDayPadded>$(BuildNumber.Split('.')[1].PadLeft(2,'0'))</BuildNumberBuildOfTheDayPadded>
  </PropertyGroup>
  
  <Choose>
    <When Condition="'$(OfficialBuild)' == 'true' OR '$(SignedBuild)' == 'true' OR '$(UseShippingAssemblyVersion)' == 'true'">
      <PropertyGroup>
        <AssemblyVersion>$(RoslynAssemblyVersionBase).0</AssemblyVersion>
        <BuildVersion>$(RoslynFileVersionBase).$(BuildNumberFiveDigitDateStamp)</BuildVersion>
        <VsixVersion>$(RoslynFileVersionBase).$(BuildNumberFiveDigitDateStamp)$(BuildNumberBuildOfTheDayPadded)</VsixVersion>
      </PropertyGroup>
    </When>

    <Otherwise>
      <!-- No build version was supplied.  We'll use a special version, higher than anything
          installed, so that the assembly identity is different.  This will allows us to
          have a build with an actual number installed, but then build and F5 a build with
          this number.  -->
      <PropertyGroup>
        <AssemblyVersion>42.42.42.42</AssemblyVersion>
        <BuildVersion>42.42.42.42</BuildVersion>
        <VsixVersion>42.42.42.42</VsixVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Returns the current build version. Used in .vsixmanifests to substitute our build version into them -->
  <Target Name="GetBuildVersion" Outputs="$(VsixVersion)" />

  <!-- NuGet version -->
  <PropertyGroup>
    <NuGetReleaseVersion>$(RoslynFileVersionBase)</NuGetReleaseVersion>
    <NuGetPerBuildPreReleaseVersion>$(NuGetPreReleaseVersion)-$(BuildNumberFiveDigitDateStamp)-$(BuildNumberBuildOfTheDayPadded)</NuGetPerBuildPreReleaseVersion>
  </PropertyGroup>

</Project>
