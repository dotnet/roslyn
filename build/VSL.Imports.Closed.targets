<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <!-- ====================================================================================
  
         Support for in-place modification of the compiled binary.
         Since there may be more than one post compile modification, we must take care not
         to break incremental builds. A timestemp file is written out when all modification
         targets have completed.
         Note that the targets participating in post compile modification must list the
         sentinel file as one of their outputs, but they should not modify it.

       ==================================================================================== -->

  <PropertyGroup>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
  </PropertyGroup>

  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="ApplyOptimizations;FakeSign"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>

  <!-- ====================================================================================
  
         Support for rolling optimization data into assemblies.

       ==================================================================================== -->

  <PropertyGroup>
    <OptimizationDataFolderPath>$(MSBuildThisFileDirectory)..\..\Closed\OptimizationData</OptimizationDataFolderPath>
    <OptimizationDataFile>$([System.IO.Path]::GetFullPath('$(OptimizationDataFolderPath)\$(TargetName).pgo'))</OptimizationDataFile>
    <IbcMergePath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..\..\Closed\Tools\ibcmerge\ibcmerge.exe'))</IbcMergePath>
  </PropertyGroup>

  <Target Name="ApplyOptimizations"
          Condition="'$(Configuration)' == 'Release' AND '$(NonShipping)' != 'true' AND '$(SkipApplyOptimizations)' != 'true' AND Exists('$(OptimizationDataFile)')"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <Message Text="Adding optimization data to @(IntermediateAssembly)"/>
    <Exec Command="&quot;$(IbcMergePath)&quot; -q -f -partialNGEN -minify -mo &quot;@(IntermediateAssembly)&quot; -incremental &quot;$(OptimizationDataFile)&quot;" />

    <Message Text="Re-signing after merging optimization data" Condition="'$(DelaySign)' != 'true' AND '$(SignAssembly)' == 'true'" />
    <Exec Command="&quot;$(SnToolPath)&quot; -q -R &quot;@(IntermediateAssembly)&quot; &quot;$(AssemblyOriginatorKeyFile)&quot;" Condition="'$(DelaySign)' != 'true' AND '$(SignAssembly)' == 'true'" />
  
  </Target>

  <!-- ====================================================================================
  
         Support for signing files that are in VSIXes.

       ==================================================================================== -->

  <PropertyGroup>
    <RunningInMicroBuild Condition="Exists('$(TF_BUILD_BUILDDIRECTORY)\MicroBuild\MicroBuild.Signing.dll')">true</RunningInMicroBuild>
    <ShouldSignBuild Condition="'$(RealSignBuild)' == 'true' OR ('$(RunningInMicroBuild)' == 'true' AND '$(SignType)' == 'real')">true</ShouldSignBuild>
  </PropertyGroup>

  <Target Name="FakeSign"
          Condition="'$(DelaySign)' == 'true' AND '$(ShouldSignBuild)' != 'true' AND ('$(Language)' == 'C#' OR '$(Language)' == 'VB')"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">
    
    <Exec Condition=" '$(OS)' == 'Windows_NT'" Command="$(VSLOutDir)\FakeSign.exe &quot;@(IntermediateAssembly)&quot;" />
    <Exec Condition=" '$(OS)' != 'Windows_NT'" Command="mono $(VSLOutDir)\FakeSign.exe &quot;@(IntermediateAssembly)&quot;" />
  </Target>

  <!-- ====================================================================================
  
         Support for signing phone assemblies.

       ==================================================================================== -->
  <UsingTask TaskName="SignFiles" AssemblyFile="$(TF_BUILD_BUILDDIRECTORY)\MicroBuild\MicroBuild.Signing.dll" Condition="'$(RunningInMicroBuild)' == 'true'" />

  <Target Name="CreateAndSignPhoneCopy" 
          Condition="'$(NeedsPhoneCopy)' == 'true'"
          DependsOnTargets="Compile"
          BeforeTargets="SignVsixInputs"
          Inputs="@(IntermediateAssembly)"
          Outputs="$(OutDir)Phone\%(Filename)%(Extension)">
    <Copy SourceFiles="@(IntermediateAssembly)"
        DestinationFolder="$(OutDir)Phone" />

    <ItemGroup Condition="'$(ShouldSignBuild)' == 'true'">
        <PhoneAssembliesToSign Include="$(OutDir)Phone\%(IntermediateAssembly.Filename)%(IntermediateAssembly.Extension)">
            <Authenticode>WindowsPhone623</Authenticode>
            <StrongName>72</StrongName>
        </PhoneAssembliesToSign>
    </ItemGroup>

    <Message Condition="'$(ShouldSignBuild)' == 'true'"
             Text="Signing phone assemblies: using authenticode certificate '%(PhoneAssembliesToSign.Authenticode)' for @(PhoneAssembliesToSign)"/>
    
    <SignFiles Condition="'$(ShouldSignBuild)' == 'true'"
               Files="@(PhoneAssembliesToSign)" 
               IntermediatesDirectory="$(IntermediateOutputPath)"
               BinariesDirectory="$(OutDir)Phone" 
               Type="$(SignType)" />
  </Target>

  <Target Name="CleanPhoneCopy">
    <RemoveDir Directories="$(OutDir)Phone')" />
  </Target>

  <PropertyGroup>
    <CleanDependsOn>$(CleanDependsOn);CleanPhoneCopy</CleanDependsOn>
  </PropertyGroup>

  <!-- ====================================================================================
  
         Support for signing VSIXes

       ==================================================================================== -->

  <PropertyGroup>
    <CreateVsixContainerDependsOn>$(CreateVsixContainerDependsOn);SignVsixInputs</CreateVsixContainerDependsOn>
    <PrepareForRunDependsOn>$(PrepareForRunDependsOn);SignVsix</PrepareForRunDependsOn>
    <ProducingSignedVsix Condition="'$(ShouldSignBuild)' == 'true' AND '$(NonShipping)' != 'true' AND '$(CreateVsixContainer)' == 'true'">true</ProducingSignedVsix>
  </PropertyGroup>

  <!-- GetTargetPath returns the path under $(OutDir) for each project.
       This target adds the $(AuthenticodeCertificateName) as metadata. -->
  <Target Name="GetTargetPathWithAuthenticodeCertificateName" DependsOnTargets="GetTargetPath" Returns="@(TargetPathWithAuthenticodeCertificateName)">
    <ItemGroup>
      <TargetPathWithAuthenticodeCertificateName Include="$(TargetPath)">
        <AuthenticodeCertificateName>$(AuthenticodeCertificateName)</AuthenticodeCertificateName>
      </TargetPathWithAuthenticodeCertificateName>
    </ItemGroup>
  </Target>

  <Target Name="SignVsixInputs" Condition="'$(ProducingSignedVsix)' == 'true'" DependsOnTargets="GetVsixSourceItems" BeforeTargets="CopyFilesToOutputDirectory">
    <!-- Ensure the build tasks project is already built -->
    <MSBuild Projects="$(MSBuildThisFileDirectory)..\..\Closed\Setup\BuildTasks\BuildTasks.vbproj" Condition="!Exists('$(OutDir)\Roslyn.Setup.BuildTasks.dll') AND '$(RunningInMicroBuild)' != 'true'" />
    
    <!-- Collect the paths of all dependent projects. GetTargetPath returns the path under $(OutDir) for each project. -->
    <MSBuild Projects="@(ProjectReferenceWithConfiguration)"
             Targets="GetTargetPathWithAuthenticodeCertificateName"
             BuildInParallel="$(BuildInParallel)"
             Properties="%(ProjectReferenceWithConfiguration.SetConfiguration); %(ProjectReferenceWithConfiguration.SetPlatform)">

      <Output TaskParameter="TargetOutputs" ItemName="VsixInputAssembliesToSign" />
    </MSBuild>

    <!-- Include the assembly we just built if we're also including it in the VSIX-->
    <ItemGroup>
      <VsixInputAssembliesToSign Include="@(IntermediateAssembly)" Condition="'$(IncludeAssemblyInVSIXContainer)' == 'true'">
        <AuthenticodeCertificateName>$(AuthenticodeCertificateName)</AuthenticodeCertificateName>
      </VsixInputAssembliesToSign>
    </ItemGroup>
    
    <Message Text="Signing VSIX inputs: using authenticode certificate '%(VsixInputAssembliesToSign.AuthenticodeCertificateName)' for @(VsixInputAssembliesToSign)"/>

    <ItemGroup Condition="'$(RunningInMicroBuild)' == 'true'">
        <VsixInputAssembliesToSign>
            <Authenticode>%(VsixInputAssembliesToSign.AuthenticodeCertificateName)</Authenticode>
            <StrongName>72</StrongName>
        </VsixInputAssembliesToSign>
    </ItemGroup>

    <SignFiles Condition="'$(RunningInMicroBuild)' == 'true'"
               Files="@(VsixInputAssembliesToSign)" 
               BinariesDirectory="$(OutDir)" 
               IntermediatesDirectory="$(IntermediateOutputPath)"
               Type="$(SignType)" />
  </Target>

  <Target Name="SignVsix"  Condition="'$(ProducingSignedVsix)' == 'true'" DependsOnTargets="CreateVsixContainer">
    <Message Text="Signing VSIX: $(TargetVsixContainer)"/>

    <ItemGroup Condition="'$(RunningInMicroBuild)' == 'true'">
        <VsixToSign Include="$(TargetVsixContainer)">
            <Authenticode>Vsix</Authenticode>
        </VsixToSign>
    </ItemGroup>
    
    <SignFiles Condition="'$(RunningInMicroBuild)' == 'true'"
               Files="@(VsixToSign)" 
               BinariesDirectory="$(OutDir)" 
               IntermediatesDirectory="$(IntermediateOutputPath)"
               Type="$(SignType)" />
  </Target>
 </Project>
