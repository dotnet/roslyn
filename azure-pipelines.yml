# Branches that trigger a build on commit
trigger:
- master
- master-vs-deps
- release/*
- features/*
- demos/*

# Branches that trigger builds on PR
pr:
- master
- master-vs-deps
- release/*
- features/*
- demos/*

# Windows Build and Test Jobs
jobs:
- template: eng/pipelines/build-windows-job.yml
  parameters:
    jobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    queueName: BuildPool.Windows.10.Amd64.Open

- template: eng/pipelines/build-windows-job.yml
  parameters:
    jobName: Build_Windows_Release
    testArtifactName: Transport_Artifacts_Windows_Release
    configuration: Release
    queueName: BuildPool.Windows.10.Amd64.Open
    buildArguments: "/p:Features=run-nullable-analysis=never"

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows Desktop Debug 32'
    jobName: Test_Windows_Desktop_Debug_32
    buildJobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    testArguments: -testDesktop -test32

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows Desktop Debug 64'
    jobName: Test_Windows_Desktop_Debug_64
    buildJobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    testArguments: -testDesktop -test64

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows CoreClr Debug'
    jobName: Test_Windows_CoreClr_Debug
    buildJobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    testArguments: -testCoreClr

- template: eng/pipelines/test-windows-job-single-machine.yml
  parameters:
    testRunName: 'Test Windows CoreClr Debug Single Machine'
    jobName: Test_Windows_CoreClr_Debug_Single_Machine
    buildJobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    testArguments: -testCoreClr

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows Desktop Release 32'
    jobName: Test_Windows_Desktop_Release_32
    buildJobName: Build_Windows_Release
    testArtifactName: Transport_Artifacts_Windows_Release
    configuration: Release
    testArguments: -testDesktop -test32

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows Desktop Spanish Release 32'
    jobName: Test_Windows_Desktop_Spanish_Release_32
    buildJobName: Build_Windows_Release
    testArtifactName: Transport_Artifacts_Windows_Release
    configuration: Release
    testArguments: -testDesktop -test32 -helixQueueName Windows.10.Amd64.Server19H1.ES.Open

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows Desktop Release 64'
    jobName: Test_Windows_Desktop_Release_64
    buildJobName: Build_Windows_Release
    testArtifactName: Transport_Artifacts_Windows_Release
    configuration: Release
    testArguments: -testDesktop -test64

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows CoreClr Release'
    jobName: Test_Windows_CoreClr_Release
    buildJobName: Build_Windows_Release
    testArtifactName: Transport_Artifacts_Windows_Release
    configuration: Release
    testArguments: -testCoreClr

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows CoreCLR IOperation Debug'
    jobName: Test_Windows_CoreClr_IOperation_Debug
    buildJobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    testArguments: -testCoreClr -testIOperation -testCompilerOnly

# Unix Build and Test Jobs
- template: eng/pipelines/build-unix-job.yml
  parameters:
    jobName: Build_Unix_Debug
    testArtifactName: Transport_Artifacts_Unix_Debug
    configuration: Debug
    vmImageName: 'ubuntu-16.04'

- template: eng/pipelines/test-unix-job.yml
  parameters:
    testRunName: 'Test Linux Debug'
    jobName: Test_Linux_Debug
    buildJobName: Build_Unix_Debug
    testArtifactName: Transport_Artifacts_Unix_Debug
    configuration: Debug
    testArguments: --testCoreClr --helixQueueName Ubuntu.1604.Amd64.Open

- template: eng/pipelines/test-unix-job-single-machine.yml
  parameters:
    testRunName: 'Test Linux Debug Single Machine'
    jobName: Test_Linux_Debug_Single_Machine
    buildJobName: Build_Unix_Debug
    testArtifactName: Transport_Artifacts_Unix_Debug
    configuration: Debug
    testArguments: --testCoreClr
    queueName: 'BuildPool.Ubuntu.1604.amd64.Open'

- template: eng/pipelines/test-unix-job.yml
  parameters:
    testRunName: 'Test macOS Debug'
    jobName: Test_macOS_Debug
    buildJobName: Build_Unix_Debug
    testArtifactName: Transport_Artifacts_Unix_Debug
    configuration: Debug
    testArguments: --testCoreClr --helixQueueName OSX.1014.Amd64.Open

# Build Correctness Jobs

- job: Correctness_Determinism
  pool:
    name: NetCorePublic-Pool
    queue: BuildPool.Windows.10.Amd64.VS2017.Open
  timeoutInMinutes: 90
  steps:
    - template: eng/pipelines/checkout-windows-task.yml

    - script: eng/test-determinism.cmd -configuration Debug
      displayName: Build - Validate determinism

    - template: eng/pipelines/publish-logs.yml
      parameters:
        jobName: Correctness_Determinism
        configuration: Debug

- job: Correctness_Build
  pool:
    name: NetCorePublic-Pool
    queue: BuildPool.Windows.10.Amd64.VS2017.Open
  timeoutInMinutes: 90
  steps:
    - template: eng/pipelines/checkout-windows-task.yml

    - script: eng/test-build-correctness.cmd -configuration Release
      displayName: Build - Validate correctness

    - template: eng/pipelines/publish-logs.yml
      parameters:
        jobName: Correctness_Build
        configuration: Release

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact Packages
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\packages\Release\PreRelease'
        ArtifactName: 'Packages - PreRelease'
        publishLocation: Container
      condition: succeeded()

    - task: PublishBuildArtifacts@1
      displayName: Publish VSIX Packages
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\VSSetup\Release\Installer'
        ArtifactName: 'VSIX - PreRelease'
        publishLocation: Container
      condition: succeeded()

- job: Correctness_SourceBuild
  pool:
   name: NetCorePublic-Pool
   queue: BuildPool.Ubuntu.1604.amd64.Open
  timeoutInMinutes: 90
  steps:
    - template: eng/pipelines/checkout-unix-task.yml

    - script: ./eng/cibuild.sh --configuration Debug --prepareMachine --docker --sourceBuild
      displayName: Build

    - template: eng/pipelines/publish-logs.yml
      parameters:
        jobName: Correctness_SourceBuild
        configuration: Release
    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/Debug'
        ArtifactName: 'SourceBuild_Test'
        publishLocation: Container
      continueOnError: true
      condition: not(succeeded())

- job: Correctness_Rebuild
  pool:
    name: NetCorePublic-Pool
    queue: BuildPool.Windows.10.Amd64.Open
  timeoutInMinutes: 90
  steps:
    - template: eng/pipelines/checkout-windows-task.yml

    - task: PowerShell@2
      displayName: Restore
      inputs:
        filePath: eng/build.ps1
        arguments: -configuration Debug -prepareMachine -ci -restore -binaryLog

    - powershell: .\eng\test-rebuild.ps1 -ci -configuration Release
      displayName: Run BuildValidator

    - task: PublishBuildArtifacts@1
      displayName: Publish BuildValidator debug outputs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/BuildValidator'
        ArtifactName: 'BuildValidator_DebugOut'
        publishLocation: Container
      continueOnError: true
      condition: failed()

    - template: eng/pipelines/publish-logs.yml
      parameters:
        jobName: Correctness_Rebuild
        configuration: Release
