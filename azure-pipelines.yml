# Branches that trigger a build on commit
trigger:
- main
- main-vs-deps
- release/*
- features/*
- demos/*

# Branches that trigger builds on PR
pr:
  branches:
    include:
    - main
    - main-vs-deps
    - release/*
    - features/*
    - demos/*
  paths:
    exclude:
      - docs/*
      - eng/config/PublishData.json
      - .vscode/*
      - .github/*
      - .devcontainer/*
      - .git-blame-ignore-revs
      - .vsconfig
      - CODE-OF-CONDUCT.md
      - CONTRIBUTING.md
      - README.md

# Windows Build and Test Jobs
jobs:
- template: eng/pipelines/build-windows-job.yml
  parameters:
    jobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    queueName: Build.Windows.Amd64.VS2022.Pre.Open
    restoreArguments: -msbuildEngine dotnet /p:UsingToolPdbConverter=false /p:UsingToolVSSDK=false /p:GenerateSatelliteAssemblies=false
    buildArguments: -msbuildEngine dotnet /p:UsingToolPdbConverter=false /p:UsingToolVSSDK=false /p:GenerateSatelliteAssemblies=false /p:PublishReadyToRun=false

- template: eng/pipelines/build-windows-job.yml
  parameters:
    jobName: Build_Windows_Release
    testArtifactName: Transport_Artifacts_Windows_Release
    configuration: Release
    queueName: Build.Windows.Amd64.VS2022.Pre.Open
    restoreArguments: -msbuildEngine dotnet /p:UsingToolPdbConverter=false /p:UsingToolVSSDK=false /p:GenerateSatelliteAssemblies=false
    buildArguments: -msbuildEngine dotnet /p:UsingToolPdbConverter=false /p:UsingToolVSSDK=false /p:GenerateSatelliteAssemblies=false /p:PublishReadyToRun=false

- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - template: eng/pipelines/test-windows-job.yml
    parameters:
      testRunName: 'Test Windows Desktop Debug 32'
      jobName: Test_Windows_Desktop_Debug_32
      buildJobName: Build_Windows_Debug
      testArtifactName: Transport_Artifacts_Windows_Debug
      configuration: Debug
      testArguments: -testDesktop -testArch x86

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows Desktop Debug 64'
    jobName: Test_Windows_Desktop_Debug_64
    buildJobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    testArguments: -testDesktop -testArch x64

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows CoreClr Debug'
    jobName: Test_Windows_CoreClr_Debug
    buildJobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    testArguments: -testCoreClr

- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - template: eng/pipelines/test-windows-job-single-machine.yml
    parameters:
      testRunName: 'Test Windows CoreClr Debug Single Machine'
      jobName: Test_Windows_CoreClr_Debug_Single_Machine
      buildJobName: Build_Windows_Debug
      testArtifactName: Transport_Artifacts_Windows_Debug
      configuration: Debug
      testArguments: -testCoreClr

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows Desktop Release 32'
    jobName: Test_Windows_Desktop_Release_32
    buildJobName: Build_Windows_Release
    testArtifactName: Transport_Artifacts_Windows_Release
    configuration: Release
    testArguments: -testDesktop -testArch x86

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows Desktop Spanish Release 64'
    jobName: Test_Windows_Desktop_Spanish_Release_64
    buildJobName: Build_Windows_Release
    testArtifactName: Transport_Artifacts_Windows_Release
    configuration: Release
    testArguments: -testDesktop -testArch x64 -helixQueueName Windows.10.Amd64.Server2022.ES.Open

- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - template: eng/pipelines/test-windows-job.yml
    parameters:
      testRunName: 'Test Windows Desktop Release 64'
      jobName: Test_Windows_Desktop_Release_64
      buildJobName: Build_Windows_Release
      testArtifactName: Transport_Artifacts_Windows_Release
      configuration: Release
      testArguments: -testDesktop -testArch x64

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows CoreClr Release'
    jobName: Test_Windows_CoreClr_Release
    buildJobName: Build_Windows_Release
    testArtifactName: Transport_Artifacts_Windows_Release
    configuration: Release
    testArguments: -testCoreClr

- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows CoreCLR IOperation Debug'
    jobName: Test_Windows_CoreClr_IOperation_Debug
    buildJobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    testArguments: -testCoreClr -testIOperation -testCompilerOnly

# This leg runs almost all the compiler tests supported on CoreCLR, but
#  with additional validation for used assemblies and GetEmitDiagnostics
- template: eng/pipelines/test-windows-job.yml
  parameters:
    testRunName: 'Test Windows CoreCLR UsedAssemblies Debug'
    jobName: Test_Windows_CoreClr_UsedAssemblies_Debug
    buildJobName: Build_Windows_Debug
    testArtifactName: Transport_Artifacts_Windows_Debug
    configuration: Debug
    testArguments: -testCoreClr -testUsedAssemblies -testCompilerOnly

# Unix Build and Test Jobs
- template: eng/pipelines/build-unix-job.yml
  parameters:
    jobName: Build_Unix_Debug
    testArtifactName: Transport_Artifacts_Unix_Debug
    configuration: Debug
    queueName: Build.Ubuntu.1804.Amd64.Open

- template: eng/pipelines/test-unix-job.yml
  parameters:
    testRunName: 'Test Linux Debug'
    jobName: Test_Linux_Debug
    buildJobName: Build_Unix_Debug
    testArtifactName: Transport_Artifacts_Unix_Debug
    configuration: Debug
    testArguments: --testCoreClr --helixQueueName Ubuntu.1804.Amd64.Open

- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - template: eng/pipelines/test-unix-job-single-machine.yml
    parameters:
      testRunName: 'Test Linux Debug Single Machine'
      jobName: Test_Linux_Debug_Single_Machine
      buildJobName: Build_Unix_Debug
      testArtifactName: Transport_Artifacts_Unix_Debug
      configuration: Debug
      testArguments: --testCoreClr
      queueName: Build.Ubuntu.1804.Amd64.Open

- template: eng/pipelines/test-unix-job.yml
  parameters:
    testRunName: 'Test macOS Debug'
    jobName: Test_macOS_Debug
    buildJobName: Build_Unix_Debug
    testArtifactName: Transport_Artifacts_Unix_Debug
    configuration: Debug
    testArguments: --testCoreClr --helixQueueName OSX.1015.Amd64.Open

- template: eng/common/templates/jobs/source-build.yml

# Build Correctness Jobs

- job: Correctness_Determinism
  pool:
    name: NetCore1ESPool-Public
    demands: ImageOverride -equals Build.Windows.Amd64.VS2022.Pre.Open
  timeoutInMinutes: 90
  steps:
    - template: eng/pipelines/checkout-windows-task.yml

    - script: eng/test-determinism.cmd -configuration Debug
      displayName: Build - Validate determinism

    - template: eng/pipelines/publish-logs.yml
      parameters:
        jobName: Correctness_Determinism
        configuration: Debug

- job: Correctness_Build
  pool:
    name: NetCore1ESPool-Public
    demands: ImageOverride -equals Build.Windows.Amd64.VS2022.Pre.Open
  timeoutInMinutes: 90
  steps:
    - template: eng/pipelines/checkout-windows-task.yml

    - script: eng/test-build-correctness.cmd -configuration Release -enableDumps
      displayName: Build - Validate correctness

    - template: eng/pipelines/publish-logs.yml
      parameters:
        jobName: Correctness_Build
        configuration: Release

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact Packages
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\packages\Release\PreRelease'
        ArtifactName: 'Packages - PreRelease'
        publishLocation: Container
      condition: succeeded()

    - task: PublishBuildArtifacts@1
      displayName: Publish VSIX Packages
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\VSSetup\Release\Installer'
        ArtifactName: 'VSIX - PreRelease'
        publishLocation: Container
      condition: succeeded()

- job: Correctness_TodoCheck
  pool:
    vmImage: ubuntu-20.04
  timeoutInMinutes: 10
  steps:
    - template: eng/pipelines/checkout-unix-task.yml

    - pwsh: eng/todo-check.ps1
      displayName: Validate TODO/PROTOTYPE comments are not present

- job: Correctness_Rebuild
  pool:
    name: NetCore1ESPool-Public
    demands: ImageOverride -equals Build.Windows.Amd64.VS2022.Pre.Open
  timeoutInMinutes: 90
  steps:
    - template: eng/pipelines/checkout-windows-task.yml

    - task: PowerShell@2
      displayName: Restore
      inputs:
        filePath: eng/build.ps1
        arguments: -configuration Debug -prepareMachine -ci -restore -binaryLog

    - powershell: .\eng\test-rebuild.ps1 -ci -configuration Release
      displayName: Run BuildValidator

    - task: PublishBuildArtifacts@1
      displayName: Publish BuildValidator debug outputs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/BuildValidator'
        ArtifactName: 'BuildValidator_DebugOut'
        publishLocation: Container
      continueOnError: true
      condition: failed()

    - template: eng/pipelines/publish-logs.yml
      parameters:
        jobName: Correctness_Rebuild
        configuration: Release

- job: Correctness_Analyzers
  pool:
    name: NetCore1ESPool-Public
    demands: ImageOverride -equals Build.Windows.Amd64.VS2022.Pre.Open
  timeoutInMinutes: 35
  steps:
    - template: eng/pipelines/checkout-windows-task.yml

    - task: PowerShell@2 
      displayName: Build with analyzers
      inputs:
        filePath: eng/build.ps1
        arguments: -restore -build -configuration Debug -prepareMachine -ci -binaryLog -runAnalyzers:$true -warnAsError:$true -properties "/p:RoslynEnforceCodeStyle=true"
