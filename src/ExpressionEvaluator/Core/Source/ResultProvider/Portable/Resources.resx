<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DynamicView" xml:space="preserve">
    <value>Dynamic View</value>
    <comment>IDynamicMetaObjectProvider and System.__ComObject expansion</comment>
  </data>
  <data name="DynamicViewNotDynamic" xml:space="preserve">
    <value>Only COM or Dynamic objects can have Dynamic View</value>
    <comment>Cannot use "dynamic" format specifier on a non-dynamic type</comment>
  </data>
  <data name="DynamicViewValueWarning" xml:space="preserve">
    <value>Expanding the Dynamic View will get the dynamic members for the object</value>
    <comment>Warning reported in Dynamic View value</comment>
  </data>
  <data name="ErrorName" xml:space="preserve">
    <value>Error</value>
    <comment>Error result name</comment>
  </data>
  <data name="ExceptionThrown" xml:space="preserve">
    <value>'{0}' threw an exception of type '{1}'</value>
    <comment>Threw an exception while evaluating a value.</comment>
  </data>
  <data name="HostValueNotFound" xml:space="preserve">
    <value>Cannot provide the value: host value not found</value>
  </data>
  <data name="InvalidPointerDereference" xml:space="preserve">
    <value>Cannot dereference '{0}'. The pointer is not valid.</value>
    <comment>Invalid pointer dereference</comment>
  </data>
  <data name="NativeView" xml:space="preserve">
    <value>Native View</value>
    <comment>Native COM object expansion</comment>
  </data>
  <data name="NativeViewNotNativeDebugging" xml:space="preserve">
    <value>To inspect the native object, enable native code debugging.</value>
    <comment>Display value of Native View node when native debugging is not enabled</comment>
  </data>
  <data name="NonPublicMembers" xml:space="preserve">
    <value>Non-Public members</value>
    <comment>Non-public type members</comment>
  </data>
  <data name="RawView" xml:space="preserve">
    <value>Raw View</value>
    <comment>DebuggerTypeProxy "Raw View"</comment>
  </data>
  <data name="ResultsView" xml:space="preserve">
    <value>Results View</value>
    <comment>IEnumerable results expansion</comment>
  </data>
  <data name="ResultsViewNoSystemCore" xml:space="preserve">
    <value>Results View requires System.Core.dll to be referenced</value>
    <comment>"results" format specifier requires System.Core.dll</comment>
  </data>
  <data name="ResultsViewNotEnumerable" xml:space="preserve">
    <value>Only Enumerable types can have Results View</value>
    <comment>Cannot use "results" format specifier on non-enumerable type</comment>
  </data>
  <data name="ResultsViewValueWarning" xml:space="preserve">
    <value>Expanding the Results View will enumerate the IEnumerable</value>
    <comment>Warning reported in Results View value</comment>
  </data>
  <data name="SharedMembers" xml:space="preserve">
    <value>Shared members</value>
    <comment>Shared type members (VB only)</comment>
  </data>
  <data name="StaticMembers" xml:space="preserve">
    <value>Static members</value>
    <comment>Static type members (C# only)</comment>
  </data>
  <data name="TypeVariablesName" xml:space="preserve">
    <value>Type variables</value>
    <comment>Type variables result name</comment>
  </data>
</root>