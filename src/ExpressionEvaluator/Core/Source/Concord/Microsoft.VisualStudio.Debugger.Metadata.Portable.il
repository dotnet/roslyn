.assembly extern 'System.Globalization'
{
	.publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A)
	.ver 4:0:10:0
}
.assembly extern 'System.IO'
{
	.publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A)
	.ver 4:0:10:0
}
.assembly extern 'System.Reflection'
{
	.publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A)
	.ver 4:0:10:0
}
.assembly extern 'System.Reflection.Extensions'
{
	.publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A)
	.ver 4:0:0:0
}
.assembly extern 'System.Reflection.Primitives'
{
	.publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A)
	.ver 4:0:0:0
}
.assembly extern 'System.Runtime'
{
	.publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A)
	.ver 4:0:20:0
}
.assembly extern 'System.Runtime.InteropServices'
{
	.publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A)
	.ver 4:0:20:0
}
.assembly 'Microsoft.VisualStudio.Debugger.Metadata'
{
	.custom instance void ['System.Runtime']'System'.'CLSCompliantAttribute'::.ctor(bool) = (01 00 00 00 00)
	.custom instance void ['System.Runtime']'System.Runtime.CompilerServices'.'InternalsVisibleToAttribute'::.ctor(string) = (01 00 81 5E 76 73 64 65 62 75 67 65 6E 67 2E 6D 61 6E 69 6D 70 6C 2C 20 50 75 62 6C 69 63 4B 65 79 3D 30 30 32 34 30 30 30 30 30 34 38 30 30 30 30 30 39 34 30 30 30 30 30 30 30 36 30 32 30 30 30 30 30 30 32 34 30 30 30 30 35 32 35 33 34 31 33 31 30 30 30 34 30 30 30 30 30 31 30 30 30 31 30 30 30 37 64 31 66 61 35 37 63 34 61 65 64 39 66 30 61 33 32 65 38 34 61 61 30 66 61 65 66 64 30 64 65 39 65 38 66 64 36 61 65 63 38 66 38 37 66 62 30 33 37 36 36 63 38 33 34 63 39 39 39 32 31 65 62 32 33 62 65 37 39 61 64 39 64 35 64 63 63 31 64 64 39 61 64 32 33 36 31 33 32 31 30 32 39 30 30 62 37 32 33 63 66 39 38 30 39 35 37 66 63 34 65 31 37 37 31 30 38 66 63 36 30 37 37 37 34 66 32 39 65 38 33 32 30 65 39 32 65 61 30 35 65 63 65 34 65 38 32 31 63 30 61 35 65 66 65 38 66 31 36 34 35 63 34 63 30 63 39 33 63 31 61 62 39 39 32 38 35 64 36 32 32 63 61 61 36 35 32 63 31 64 66 61 64 36 33 64 37 34 35 64 36 66 32 64 65 35 66 31 37 65 35 65 61 66 30 66 63 34 39 36 33 64 32 36 31 63 38 61 31 32 34 33 36 35 31 38 32 30 36 64 63 30 39 33 33 34 34 64 35 61 64 32 39 33 00 00)
	.custom instance void ['System.Runtime']'System.Runtime.CompilerServices'.'InternalsVisibleToAttribute'::.ctor(string) = (01 00 81 66 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73 75 61 6C 53 74 75 64 69 6F 2E 56 49 4C 2C 20 50 75 62 6C 69 63 4B 65 79 3D 30 30 32 34 30 30 30 30 30 34 38 30 30 30 30 30 39 34 30 30 30 30 30 30 30 36 30 32 30 30 30 30 30 30 32 34 30 30 30 30 35 32 35 33 34 31 33 31 30 30 30 34 30 30 30 30 30 31 30 30 30 31 30 30 30 37 64 31 66 61 35 37 63 34 61 65 64 39 66 30 61 33 32 65 38 34 61 61 30 66 61 65 66 64 30 64 65 39 65 38 66 64 36 61 65 63 38 66 38 37 66 62 30 33 37 36 36 63 38 33 34 63 39 39 39 32 31 65 62 32 33 62 65 37 39 61 64 39 64 35 64 63 63 31 64 64 39 61 64 32 33 36 31 33 32 31 30 32 39 30 30 62 37 32 33 63 66 39 38 30 39 35 37 66 63 34 65 31 37 37 31 30 38 66 63 36 30 37 37 37 34 66 32 39 65 38 33 32 30 65 39 32 65 61 30 35 65 63 65 34 65 38 32 31 63 30 61 35 65 66 65 38 66 31 36 34 35 63 34 63 30 63 39 33 63 31 61 62 39 39 32 38 35 64 36 32 32 63 61 61 36 35 32 63 31 64 66 61 64 36 33 64 37 34 35 64 36 66 32 64 65 35 66 31 37 65 35 65 61 66 30 66 63 34 39 36 33 64 32 36 31 63 38 61 31 32 34 33 36 35 31 38 32 30 36 64 63 30 39 33 33 34 34 64 35 61 64 32 39 33 00 00)
	.custom instance void ['System.Runtime']'System.Runtime.CompilerServices'.'InternalsVisibleToAttribute'::.ctor(string) = (01 00 81 69 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73 75 61 6C 53 74 75 64 69 6F 2E 56 49 4C 2E 53 43 2C 20 50 75 62 6C 69 63 4B 65 79 3D 30 30 32 34 30 30 30 30 30 34 38 30 30 30 30 30 39 34 30 30 30 30 30 30 30 36 30 32 30 30 30 30 30 30 32 34 30 30 30 30 35 32 35 33 34 31 33 31 30 30 30 34 30 30 30 30 30 31 30 30 30 31 30 30 30 37 64 31 66 61 35 37 63 34 61 65 64 39 66 30 61 33 32 65 38 34 61 61 30 66 61 65 66 64 30 64 65 39 65 38 66 64 36 61 65 63 38 66 38 37 66 62 30 33 37 36 36 63 38 33 34 63 39 39 39 32 31 65 62 32 33 62 65 37 39 61 64 39 64 35 64 63 63 31 64 64 39 61 64 32 33 36 31 33 32 31 30 32 39 30 30 62 37 32 33 63 66 39 38 30 39 35 37 66 63 34 65 31 37 37 31 30 38 66 63 36 30 37 37 37 34 66 32 39 65 38 33 32 30 65 39 32 65 61 30 35 65 63 65 34 65 38 32 31 63 30 61 35 65 66 65 38 66 31 36 34 35 63 34 63 30 63 39 33 63 31 61 62 39 39 32 38 35 64 36 32 32 63 61 61 36 35 32 63 31 64 66 61 64 36 33 64 37 34 35 64 36 66 32 64 65 35 66 31 37 65 35 65 61 66 30 66 63 34 39 36 33 64 32 36 31 63 38 61 31 32 34 33 36 35 31 38 32 30 36 64 63 30 39 33 33 34 34 64 35 61 64 32 39 33 00 00)
	.custom instance void ['System.Runtime']'System.Runtime.CompilerServices'.'InternalsVisibleToAttribute'::.ctor(string) = (01 00 81 6B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73 75 61 6C 53 74 75 64 69 6F 2E 56 49 4C 2E 48 6F 73 74 2C 20 50 75 62 6C 69 63 4B 65 79 3D 30 30 32 34 30 30 30 30 30 34 38 30 30 30 30 30 39 34 30 30 30 30 30 30 30 36 30 32 30 30 30 30 30 30 32 34 30 30 30 30 35 32 35 33 34 31 33 31 30 30 30 34 30 30 30 30 30 31 30 30 30 31 30 30 30 37 64 31 66 61 35 37 63 34 61 65 64 39 66 30 61 33 32 65 38 34 61 61 30 66 61 65 66 64 30 64 65 39 65 38 66 64 36 61 65 63 38 66 38 37 66 62 30 33 37 36 36 63 38 33 34 63 39 39 39 32 31 65 62 32 33 62 65 37 39 61 64 39 64 35 64 63 63 31 64 64 39 61 64 32 33 36 31 33 32 31 30 32 39 30 30 62 37 32 33 63 66 39 38 30 39 35 37 66 63 34 65 31 37 37 31 30 38 66 63 36 30 37 37 37 34 66 32 39 65 38 33 32 30 65 39 32 65 61 30 35 65 63 65 34 65 38 32 31 63 30 61 35 65 66 65 38 66 31 36 34 35 63 34 63 30 63 39 33 63 31 61 62 39 39 32 38 35 64 36 32 32 63 61 61 36 35 32 63 31 64 66 61 64 36 33 64 37 34 35 64 36 66 32 64 65 35 66 31 37 65 35 65 61 66 30 66 63 34 39 36 33 64 32 36 31 63 38 61 31 32 34 33 36 35 31 38 32 30 36 64 63 30 39 33 33 34 34 64 35 61 64 32 39 33 00 00)
	.custom instance void ['System.Runtime']'System.Runtime.CompilerServices'.'InternalsVisibleToAttribute'::.ctor(string) = (01 00 81 7C 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73 75 61 6C 53 74 75 64 69 6F 2E 56 49 4C 2E 4E 6F 74 69 66 79 50 6F 69 6E 74 49 6E 50 72 6F 63 48 6F 73 74 2C 20 50 75 62 6C 69 63 4B 65 79 3D 30 30 32 34 30 30 30 30 30 34 38 30 30 30 30 30 39 34 30 30 30 30 30 30 30 36 30 32 30 30 30 30 30 30 32 34 30 30 30 30 35 32 35 33 34 31 33 31 30 30 30 34 30 30 30 30 30 31 30 30 30 31 30 30 30 37 64 31 66 61 35 37 63 34 61 65 64 39 66 30 61 33 32 65 38 34 61 61 30 66 61 65 66 64 30 64 65 39 65 38 66 64 36 61 65 63 38 66 38 37 66 62 30 33 37 36 36 63 38 33 34 63 39 39 39 32 31 65 62 32 33 62 65 37 39 61 64 39 64 35 64 63 63 31 64 64 39 61 64 32 33 36 31 33 32 31 30 32 39 30 30 62 37 32 33 63 66 39 38 30 39 35 37 66 63 34 65 31 37 37 31 30 38 66 63 36 30 37 37 37 34 66 32 39 65 38 33 32 30 65 39 32 65 61 30 35 65 63 65 34 65 38 32 31 63 30 61 35 65 66 65 38 66 31 36 34 35 63 34 63 30 63 39 33 63 31 61 62 39 39 32 38 35 64 36 32 32 63 61 61 36 35 32 63 31 64 66 61 64 36 33 64 37 34 35 64 36 66 32 64 65 35 66 31 37 65 35 65 61 66 30 66 63 34 39 36 33 64 32 36 31 63 38 61 31 32 34 33 36 35 31 38 32 30 36 64 63 30 39 33 33 34 34 64 35 61 64 32 39 33 00 00)
	.custom instance void ['System.Runtime']'System.Runtime.CompilerServices'.'InternalsVisibleToAttribute'::.ctor(string) = (01 00 81 7F 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73 75 61 6C 53 74 75 64 69 6F 2E 56 49 4C 2E 4E 6F 74 69 66 79 50 6F 69 6E 74 49 6E 50 72 6F 63 48 6F 73 74 2E 53 43 2C 20 50 75 62 6C 69 63 4B 65 79 3D 30 30 32 34 30 30 30 30 30 34 38 30 30 30 30 30 39 34 30 30 30 30 30 30 30 36 30 32 30 30 30 30 30 30 32 34 30 30 30 30 35 32 35 33 34 31 33 31 30 30 30 34 30 30 30 30 30 31 30 30 30 31 30 30 30 37 64 31 66 61 35 37 63 34 61 65 64 39 66 30 61 33 32 65 38 34 61 61 30 66 61 65 66 64 30 64 65 39 65 38 66 64 36 61 65 63 38 66 38 37 66 62 30 33 37 36 36 63 38 33 34 63 39 39 39 32 31 65 62 32 33 62 65 37 39 61 64 39 64 35 64 63 63 31 64 64 39 61 64 32 33 36 31 33 32 31 30 32 39 30 30 62 37 32 33 63 66 39 38 30 39 35 37 66 63 34 65 31 37 37 31 30 38 66 63 36 30 37 37 37 34 66 32 39 65 38 33 32 30 65 39 32 65 61 30 35 65 63 65 34 65 38 32 31 63 30 61 35 65 66 65 38 66 31 36 34 35 63 34 63 30 63 39 33 63 31 61 62 39 39 32 38 35 64 36 32 32 63 61 61 36 35 32 63 31 64 66 61 64 36 33 64 37 34 35 64 36 66 32 64 65 35 66 31 37 65 35 65 61 66 30 66 63 34 39 36 33 64 32 36 31 63 38 61 31 32 34 33 36 35 31 38 32 30 36 64 63 30 39 33 33 34 34 64 35 61 64 32 39 33 00 00)
	.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 00 00 00)
	.custom instance void ['System.Runtime']'System.Security'.'AllowPartiallyTrustedCallersAttribute'::.ctor() = (01 00 00 00)
	.publickey = (00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 D1 FA 57 C4 AE D9 F0 A3 2E 84 AA 0F AE FD 0D E9 E8 FD 6A EC 8F 87 FB 03 76 6C 83 4C 99 92 1E B2 3B E7 9A D9 D5 DC C1 DD 9A D2 36 13 21 02 90 0B 72 3C F9 80 95 7F C4 E1 77 10 8F C6 07 77 4F 29 E8 32 0E 92 EA 05 EC E4 E8 21 C0 A5 EF E8 F1 64 5C 4C 0C 93 C1 AB 99 28 5D 62 2C AA 65 2C 1D FA D6 3D 74 5D 6F 2D E5 F1 7E 5E AF 0F C4 96 3D 26 1C 8A 12 43 65 18 20 6D C0 93 34 4D 5A D2 93)
	.hash algorithm 0x00008004
	.ver 14:0:0:0
}
.namespace 'Microsoft.MetadataReader'
{
	.class public sequential sealed 'AssemblyMetaData'
		extends ['System.Runtime']'System'.'ValueType'
		implements ['System.Runtime']'System'.'IDisposable'
	{
		.method public hidebysig 
			instance void 'Init'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class ['System.Runtime']'System'.'Version' 'get_Version'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_LocaleString'()
		{
			.custom instance void ['System.Runtime']'System.Security'.'SecuritySafeCriticalAttribute'::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance class ['System.Globalization']'System.Globalization'.'CultureInfo' 'get_Locale'()
		{
			.custom instance void ['System.Runtime']'System.Security'.'SecuritySafeCriticalAttribute'::.ctor() = (01 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void 'Dispose'()
		{
			.custom instance void ['System.Runtime']'System.Security'.'SecuritySafeCriticalAttribute'::.ctor() = (01 00 00 00)
			ret
		}
		.field public uint16 'majorVersion'
		.field public uint16 'minorVersion'
		.field public uint16 'buildNumber'
		.field public uint16 'revisionNumber'
		.field public native int 'szLocale'
		.field public uint32 'cbLocale'
		.field public valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr' 'rdwProcessor'
		.field public uint32 'ulProcessor'
		.field public valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr' 'rOS'
		.field public uint32 'ulOS'
		.property instance class ['System.Globalization']'System.Globalization'.'CultureInfo' 'Locale'()
		{
			.get instance class ['System.Globalization']'System.Globalization'.'CultureInfo' 'Microsoft.MetadataReader'.'AssemblyMetaData'::'get_Locale'()
		}
		.property instance string 'LocaleString'()
		{
			.get instance string 'Microsoft.MetadataReader'.'AssemblyMetaData'::'get_LocaleString'()
		}
		.property instance class ['System.Runtime']'System'.'Version' 'Version'()
		{
			.get instance class ['System.Runtime']'System'.'Version' 'Microsoft.MetadataReader'.'AssemblyMetaData'::'get_Version'()
		}
	}
	.class public 'AssemblyResolutionFailureException'
		extends 'Microsoft.MetadataReader'.'BaseResolutionFailureException'
	{
		.method public hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(string 'message')
		{
			ret
		}
	}
	.class public 'BaseResolutionFailureException'
		extends ['System.Runtime']'System'.'Exception'
	{
		.method family hidebysig specialname 
			instance void '.ctor'(string 'message')
		{
			ret
		}
	}
	.class public sealed 'CorCallingConvention'
		extends ['System.Runtime']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'Default' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'ExplicitThis' = int32(0x00000040)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'Field' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'Generic' = int32(0x00000010)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'GenericInst' = int32(0x0000000A)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'HasThis' = int32(0x00000020)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'LocalSig' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'Mask' = int32(0x0000000F)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'NativeVarArg' = int32(0x0000000B)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'Property' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'Unmanaged' = int32(0x00000009)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorCallingConvention' 'VarArg' = int32(0x00000005)
	}
	.class public sealed 'CorFileFlags'
		extends ['System.Runtime']'System'.'Enum'
	{
		.custom instance void ['System.Runtime']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorFileFlags' 'ContainsMetaData' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorFileFlags' 'ContainsNoMetaData' = int32(0x00000001)
	}
	.class public sealed 'CorManifestResourceFlags'
		extends ['System.Runtime']'System'.'Enum'
	{
		.custom instance void ['System.Runtime']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorManifestResourceFlags' 'mrPrivate' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorManifestResourceFlags' 'mrPublic' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorManifestResourceFlags' 'mrVisibilityMask' = int32(0x00000007)
	}
	.class public sealed 'CorTypeAttr'
		extends ['System.Runtime']'System'.'Enum'
	{
		.custom instance void ['System.Runtime']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdAbstract' = int32(0x00000080)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdAnsiClass' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdAutoClass' = int32(0x00020000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdAutoLayout' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdBeforeFieldInit' = int32(0x00100000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdClass' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdClassSemanticsMask' = int32(0x00000020)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdCustomFormatClass' = int32(0x00030000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdCustomFormatMask' = int32(0x00C00000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdExplicitLayout' = int32(0x00000010)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdForwarder' = int32(0x00200000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdHasSecurity' = int32(0x00040000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdImport' = int32(0x00001000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdInterface' = int32(0x00000020)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdLayoutMask' = int32(0x00000018)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdNestedAssembly' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdNestedFamANDAssem' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdNestedFamORAssem' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdNestedFamily' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdNestedPrivate' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdNestedPublic' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdNotPublic' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdPublic' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdRTSpecialName' = int32(0x00000800)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdReservedMask' = int32(0x00040800)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdSealed' = int32(0x00000100)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdSequentialLayout' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdSerializable' = int32(0x00002000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdSpecialName' = int32(0x00000400)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdStringFormatMask' = int32(0x00030000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdUnicodeClass' = int32(0x00010000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'CorTypeAttr' 'tdVisibilityMask' = int32(0x00000007)
	}
	.class public sequential sealed 'HCORENUM'
		extends ['System.Runtime']'System'.'ValueType'
	{
		.method public hidebysig 
			instance void 'Close'(class 'Microsoft.MetadataReader'.'IMetadataImport' 'import')
		{
			ret
		}
		.method public hidebysig 
			instance void 'Close'(class 'Microsoft.MetadataReader'.'IMetadataImport2' 'import')
		{
			ret
		}
		.method public hidebysig 
			instance void 'Close'(class 'Microsoft.MetadataReader'.'IMetadataAssemblyImport' 'import')
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public interface abstract 'IMetadataAssemblyImport'
	{
		.custom instance void ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 45 45 36 32 34 37 30 42 2D 45 39 34 42 2D 34 32 34 65 2D 39 42 37 43 2D 32 46 30 30 43 39 32 34 39 46 39 33 00 00)
		.custom instance void ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAssemblyProps'([in] valuetype 'System.Reflection.Adds'.'Token' 'assemblyToken', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'pPublicKey', [out] int32& 'cbPublicKey', [out] int32& 'hashAlgId', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', [in] int32 'cchName', [out] int32& 'pchName', [in][out] valuetype 'Microsoft.MetadataReader'.'AssemblyMetaData'& 'pMetaData', [out] valuetype ['System.Runtime']'System.Reflection'.'AssemblyNameFlags'& 'flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAssemblyRefProps'([in] valuetype 'System.Reflection.Adds'.'Token' 'token', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'pPublicKey', [out] int32& 'cbPublicKey', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', [in] int32 'cchName', [out] int32& 'pchName', [in][out] valuetype 'Microsoft.MetadataReader'.'AssemblyMetaData'& 'pMetaData', [out] valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr'& 'ppbHashValue', [out] uint32& 'pcbHashValue', [out] valuetype ['System.Runtime']'System.Reflection'.'AssemblyNameFlags'& 'dwAssemblyRefFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFileProps'([in] int32 'token', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', [in] int32 'cchName', [out] int32& 'pchName', [out] valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr'& 'ppbHashValue', [out] uint32& 'pcbHashValue', [out] valuetype 'Microsoft.MetadataReader'.'CorFileFlags'& 'dwFileFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExportedTypeProps'(int32 'mdct', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', int32 'cchName', [out] int32& 'pchName', [out] int32& 'ptkImplementation', [out] int32& 'ptkTypeDef', [out] valuetype 'Microsoft.MetadataReader'.'CorTypeAttr'& 'pdwExportedTypeFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetManifestResourceProps'([in] int32 'mdmr', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', [in] int32 'cchName', [out] int32& 'pchName', [out] int32& 'ptkImplementation', [out] uint32& 'pdwOffset', [out] valuetype 'Microsoft.MetadataReader'.'CorManifestResourceFlags'& 'pdwResourceFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumAssemblyRefs'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', [out] valuetype 'System.Reflection.Adds'.'Token'& 'assemblyRefs', int32 'cMax', [out] int32& 'cTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumFiles'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', [out] int32& 'files', int32 'cMax', [out] int32& 'cTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumExportedTypes'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', [out] int32& 'rExportedTypes', int32 'cMax', [out] uint32& 'cTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumManifestResources'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', [out] int32& 'rManifestResources', int32 'cMax', [out] int32& 'cTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAssemblyFromScope'([out] int32& 'assemblyToken')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindExportedTypeByName'([in] string marshal(lpwstr) 'szName', int32 'mdtExportedType', [out] int32& 'ptkExportedType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindManifestResourceByName'(string marshal(lpwstr) 'szName', [out] int32& 'ptkManifestResource')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CloseEnum'(native int 'hEnum')
			preservesig 
		{
		}
	}
	.class public interface abstract 'IMetadataImport'
	{
		.custom instance void ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 37 44 41 43 38 32 30 37 2D 44 33 41 45 2D 34 63 37 35 2D 39 42 36 37 2D 39 32 38 30 31 41 34 39 37 44 34 34 00 00)
		.custom instance void ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void 'CloseEnum'(native int 'hEnum')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CountEnum'(valuetype 'Microsoft.MetadataReader'.'HCORENUM' 'hEnum', [out] int32& 'pulCount')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetEnum'(valuetype 'Microsoft.MetadataReader'.'HCORENUM' 'hEnum', int32 'ulPos')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumTypeDefs'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', [out] int32& 'rTypeDefs', uint32 'cMax', [out] uint32& 'pcTypeDefs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumInterfaceImpls'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'td', [out] int32& 'rImpls', int32 'cMax', int32& 'pcImpls')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumTypeRefs'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32[] 'td', uint32 'cMax', uint32 'pcTypeRefs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindTypeDefByName'([in] string marshal(lpwstr) 'szTypeDef', [in] int32 'tkEnclosingClass', [out] int32& 'token')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeProps'([out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', [in] int32 'cchName', [out] int32& 'pchName', [out] valuetype ['System.Runtime']'System'.'Guid'& 'mvid')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleFromScope'([out] int32& 'mdModule')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeDefProps'([in] int32 'td', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szTypeDef', [in] int32 'cchTypeDef', [out] int32& 'pchTypeDef', [out] valuetype ['System.Reflection.Primitives']'System.Reflection'.'TypeAttributes'& marshal(unsigned int32) 'pdwTypeDefFlags', [out] int32& 'ptkExtends')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterfaceImplProps'(int32 'iiImpl', [out] int32& 'pClass', [out] int32& 'ptkIface')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeRefProps'(int32 'tr', [out] int32& 'ptkResolutionScope', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', [in] int32 'cchName', [out] int32& 'pchName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResolveTypeRef'(int32 'tr', [in] valuetype ['System.Runtime']'System'.'Guid'& 'riid', [out] object& marshal(interface) 'ppIScope')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMembers'([in][out] uint32& 'phEnum', [in] uint32 'cl', uint32[] marshal([ + 3]) 'rMembers', [in] uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMembersWithName'([in][out] uint32& 'phEnum', uint32 'cl', string 'szName', uint32[] marshal([ + 4]) 'rMembers', [in] uint32 'cMax', [in][out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMethods'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'cl', [out] int32& 'mdMethodDef', int32 'cMax', [out] int32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMethodsWithName'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'cl', [in] string marshal(lpwstr) 'szName', [out] int32& 'mdMethodDef', int32 'cMax', [out] int32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumFields'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'cl', [out] int32& 'mdFieldDef', int32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumFieldsWithName'([in][out] uint32& 'phEnum', [in] uint32 'cl', [in] string 'szName', [in] uint32[] marshal([ + 4]) 'rFields', [in] uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumParams'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'mdMethodDef', int32[] marshal([]) 'rParams', int32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMemberRefs'([in][out] uint32& 'phEnum', uint32 'tkParent', uint32[] marshal([ + 3]) 'rMemberRefs', uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMethodImpls'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'hEnum', valuetype 'System.Reflection.Adds'.'Token' 'typeDef', [out] valuetype 'System.Reflection.Adds'.'Token'& 'methodBody', [out] valuetype 'System.Reflection.Adds'.'Token'& 'methodDecl', int32 'cMax', [out] int32& 'cTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumPermissionSets'([in][out] valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'hEnum', [in] uint32 'tk', [in] uint32 'dwActions', uint32[] marshal([ + 4]) 'rPermission', [in][out] uint32& 'cMax')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindMember'([in] int32 'typeDefToken', [in] string marshal(lpwstr) 'szName', [in] uint8[] 'pvSigBlob', [in] int32 'cbSigBlob', [out] int32& 'memberDefToken')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindMethod'([in] int32 'typeDef', [in] string marshal(lpwstr) 'szName', [in] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer' 'pvSigBlob', [in] int32 'cbSigBlob', [out] int32& 'methodDef')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindField'([in] int32 'typeDef', [in] string marshal(lpwstr) 'szName', [in] uint8[] 'pvSigBlob', [in] int32 'cbSigBlob', [out] int32& 'fieldDef')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindMemberRef'([in] int32 'typeRef', [in] string marshal(lpwstr) 'szName', [in] uint8[] 'pvSigBlob', [in] int32 'cbSigBlob', [out] int32& 'result')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMethodProps'([in] uint32 'md', [out] int32& 'pClass', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szMethod', [in] int32 'cchMethod', [out] uint32& 'pchMethod', [out] valuetype ['System.Reflection.Primitives']'System.Reflection'.'MethodAttributes'& 'pdwAttr', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppvSigBlob', [out] uint32& 'pcbSigBlob', [out] uint32& 'pulCodeRVA', [out] uint32& 'pdwImplFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMemberRefProps'([in] valuetype 'System.Reflection.Adds'.'Token' 'mr', [out] valuetype 'System.Reflection.Adds'.'Token'& 'ptk', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szMember', [in] int32 'cchMember', [out] uint32& 'pchMember', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppvSigBlob', [out] uint32& 'pbSig')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumProperties'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'td', [out] int32& 'mdFieldDef', int32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumEvents'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'td', [out] int32& 'mdFieldDef', int32 'cMax', [out] uint32& 'pcEvents')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventProps'(int32 'ev', [out] int32& 'pClass', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szEvent', int32 'cchEvent', [out] int32& 'pchEvent', [out] int32& 'pdwEventFlags', [out] int32& 'ptkEventType', [out] int32& 'pmdAddOn', [out] int32& 'pmdRemoveOn', [out] int32& 'pmdFire', [out] int32& 'rmdOtherMethod', uint32 'cMax', [out] uint32& 'pcOtherMethod')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMethodSemantics'([in][out] uint32& 'phEnum', [in] uint32 'mb', [out] uint32[] marshal([ + 3]) 'rEventProp', [in] uint32 'cMax', [out] uint32& 'pcEventProp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMethodSemantics'([in] uint32 'mb', [in] uint32 'tkEventProp', [out] uint32& 'pdwSemanticsFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetClassLayout'(int32 'typeDef', [out] uint32& 'dwPackSize', valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr' 'zeroPtr', uint32 'zeroCount', valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr' 'zeroPtr2', uint32& 'ulClassSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldMarshal'(int32 'tk', [out] native int& 'ppvNativeType', [out] int32& 'pcbNativeType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRVA'(int32 'token', [out] uint32& 'rva', [out] uint32& 'flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPermissionSetProps'(uint32 'pm', [out] uint32& 'pdwAction', [out] native int& 'ppvPermission', [out] int32& 'pcbPermission')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSigFromToken'(int32 'token', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'pSig', [out] int32& 'cbSig')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleRefProps'(int32 'mur', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', int32 'cchName', [out] int32& 'pchName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumModuleRefs'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', [out] int32& 'mdModuleRef', int32 'cMax', [out] uint32& 'pcModuleRefs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeSpecFromToken'(valuetype 'System.Reflection.Adds'.'Token' 'typeSpec', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'pSig', [out] int32& 'cbSig')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameFromToken'(uint32 'tk', [out] string marshal(lpstr) 'pszUtf8NamePtr')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumUnresolvedMethods'(uint32& 'phEnum', uint32[] marshal([ + 2]) 'rMethods', uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetUserString'([in] int32 'stk', [out] char[] marshal([ + 2]) 'szString', [in] int32 'cchString', [out] int32& 'pchString')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPinvokeMap'(uint32 'tk', [out] uint32& 'pdwMappingFlags', class ['System.Runtime']'System.Text'.'StringBuilder' 'szImportName', uint32 'cchImportName', [out] uint32& 'pchImportName', [out] int32& 'pmrImportDLL')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumSignatures'(uint32& 'phEnum', uint32[] marshal([ + 2]) 'rSignatures', uint32 'cmax', [out] uint32& 'pcSignatures')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumTypeSpecs'(uint32& 'phEnum', uint32[] marshal([ + 2]) 'rTypeSpecs', uint32 'cmax', [out] uint32& 'pcTypeSpecs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumUserStrings'(uint32& 'phEnum', uint32[] marshal([ + 2]) 'rStrings', uint32 'cmax', [out] uint32& 'pcStrings')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetParamForMethodIndex'(uint32 'md', uint32 'ulParamSeq', [out] uint32& 'pParam', [out] int32& 'ppd')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumCustomAttributes'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'tk', int32 'tkType', [out] valuetype 'System.Reflection.Adds'.'Token'& 'mdCustomAttribute', uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCustomAttributeProps'([in] valuetype 'System.Reflection.Adds'.'Token' 'cv', [out] valuetype 'System.Reflection.Adds'.'Token'& 'tkObj', [out] valuetype 'System.Reflection.Adds'.'Token'& 'tkType', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'blob', [out] int32& 'cbSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindTypeRef'([in] int32 'tkResolutionScope', [in] string marshal(lpwstr) 'szName', [out] int32& 'typeRef')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMemberProps'(uint32 'mb', [out] uint32& 'pClass', class ['System.Runtime']'System.Text'.'StringBuilder' 'szMember', uint32 'cchMember', [out] uint32& 'pchMember', [out] uint32& 'pdwAttr', [out] native int& 'ppvSigBlob', [out] uint32& 'pcbSigBlob', [out] uint32& 'pulCodeRVA', [out] uint32& 'pdwImplFlags', [out] uint32& 'pdwCPlusTypeFlag', [out] native int& 'ppValue', [out] uint32& 'pcchValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldProps'(int32 'mb', [out] int32& 'mdTypeDef', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szField', int32 'cchField', [out] int32& 'pchField', [out] valuetype ['System.Reflection.Primitives']'System.Reflection'.'FieldAttributes'& 'pdwAttr', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppvSigBlob', [out] int32& 'pcbSigBlob', [out] int32& 'pdwCPlusTypeFlab', [out] native int& 'ppValue', [out] int32& 'pcchValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPropertyProps'(valuetype 'System.Reflection.Adds'.'Token' 'prop', [out] valuetype 'System.Reflection.Adds'.'Token'& 'pClass', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szProperty', int32 'cchProperty', [out] int32& 'pchProperty', [out] valuetype ['System.Reflection.Primitives']'System.Reflection'.'PropertyAttributes'& 'pdwPropFlags', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppvSig', [out] int32& 'pbSig', [out] int32& 'pdwCPlusTypeFlag', [out] valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr'& 'ppDefaultValue', [out] int32& 'pcchDefaultValue', [out] valuetype 'System.Reflection.Adds'.'Token'& 'pmdSetter', [out] valuetype 'System.Reflection.Adds'.'Token'& 'pmdGetter', [out] valuetype 'System.Reflection.Adds'.'Token'& 'rmdOtherMethod', uint32 'cMax', [out] uint32& 'pcOtherMethod')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetParamProps'(int32 'tk', [out] int32& 'pmd', [out] uint32& 'pulSequence', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', uint32 'cchName', [out] uint32& 'pchName', [out] uint32& 'pdwAttr', [out] uint32& 'pdwCPlusTypeFlag', [out] valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr'& 'ppValue', [out] uint32& 'pcchValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCustomAttributeByName'(int32 'tkObj', string marshal(lpwstr) 'szName', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppData', [out] uint32& 'pcbData')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'IsValidToken'([in] uint32 marshal(unsigned int32) 'tk')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNestedClassProps'(int32 'tdNestedClass', [out] int32& 'tdEnclosingClass')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNativeCallConvFromSig'(native int 'pvSig', uint32 'cbSig', [out] uint32& 'pCallConv')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsGlobal'(uint32 'pd', [out] int32& 'pbGlobal')
			preservesig 
		{
		}
	}
	.class public interface abstract 'IMetadataImport2'
		implements 'Microsoft.MetadataReader'.'IMetadataImport'
	{
		.custom instance void ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 46 43 45 35 45 46 41 30 2D 38 42 42 41 2D 34 66 38 65 2D 41 30 33 36 2D 38 46 32 30 32 32 42 30 38 34 36 36 00 00)
		.custom instance void ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void 'CloseEnum'(native int 'hEnum')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CountEnum'(valuetype 'Microsoft.MetadataReader'.'HCORENUM' 'hEnum', [out] int32& 'pulCount')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetEnum'(valuetype 'Microsoft.MetadataReader'.'HCORENUM' 'hEnum', int32 'ulPos')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumTypeDefs'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', [out] int32& 'rTypeDefs', uint32 'cMax', [out] uint32& 'pcTypeDefs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumInterfaceImpls'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'td', [out] int32& 'rImpls', int32 'cMax', int32& 'pcImpls')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumTypeRefs'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32[] 'td', uint32 'cMax', uint32 'pcTypeRefs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindTypeDefByName'([in] string marshal(lpwstr) 'szTypeDef', [in] int32 'tkEnclosingClass', [out] int32& 'token')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeProps'([out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', [in] int32 'cchName', [out] int32& 'pchName', [out] valuetype ['System.Runtime']'System'.'Guid'& 'mvid')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleFromScope'([out] int32& 'mdModule')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeDefProps'([in] int32 'td', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szTypeDef', [in] int32 'cchTypeDef', [out] int32& 'pchTypeDef', [out] valuetype ['System.Reflection.Primitives']'System.Reflection'.'TypeAttributes'& marshal(unsigned int32) 'pdwTypeDefFlags', [out] int32& 'ptkExtends')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterfaceImplProps'(int32 'iiImpl', [out] int32& 'pClass', [out] int32& 'ptkIface')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeRefProps'(int32 'tr', [out] int32& 'ptkResolutionScope', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', [in] int32 'cchName', [out] int32& 'pchName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResolveTypeRef'(int32 'tr', [in] valuetype ['System.Runtime']'System'.'Guid'& 'riid', [out] object& marshal(interface) 'ppIScope')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMembers'([in][out] uint32& 'phEnum', [in] uint32 'cl', uint32[] marshal([ + 3]) 'rMembers', [in] uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMembersWithName'([in][out] uint32& 'phEnum', uint32 'cl', string 'szName', uint32[] marshal([ + 4]) 'rMembers', [in] uint32 'cMax', [in][out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMethods'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'cl', [out] int32& 'mdMethodDef', int32 'cMax', [out] int32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMethodsWithName'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'cl', [in] string marshal(lpwstr) 'szName', [out] int32& 'mdMethodDef', int32 'cMax', [out] int32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumFields'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'cl', [out] int32& 'mdFieldDef', int32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumFieldsWithName'([in][out] uint32& 'phEnum', [in] uint32 'cl', [in] string 'szName', [in] uint32[] marshal([ + 4]) 'rFields', [in] uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumParams'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'mdMethodDef', int32[] marshal([]) 'rParams', int32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMemberRefs'([in][out] uint32& 'phEnum', uint32 'tkParent', uint32[] marshal([ + 3]) 'rMemberRefs', uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMethodImpls'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'hEnum', valuetype 'System.Reflection.Adds'.'Token' 'typeDef', [out] valuetype 'System.Reflection.Adds'.'Token'& 'methodBody', [out] valuetype 'System.Reflection.Adds'.'Token'& 'methodDecl', int32 'cMax', [out] int32& 'cTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumPermissionSets'([in][out] valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'hEnum', [in] uint32 'tk', [in] uint32 'dwActions', uint32[] marshal([ + 4]) 'rPermission', [in][out] uint32& 'cMax')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindMember'([in] int32 'typeDefToken', [in] string marshal(lpwstr) 'szName', [in] uint8[] 'pvSigBlob', [in] int32 'cbSigBlob', [out] int32& 'memberDefToken')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindMethod'([in] int32 'typeDef', [in] string marshal(lpwstr) 'szName', [in] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer' 'pvSigBlob', [in] int32 'cbSigBlob', [out] int32& 'methodDef')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindField'([in] int32 'typeDef', [in] string marshal(lpwstr) 'szName', [in] uint8[] 'pvSigBlob', [in] int32 'cbSigBlob', [out] int32& 'fieldDef')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindMemberRef'([in] int32 'typeRef', [in] string marshal(lpwstr) 'szName', [in] uint8[] 'pvSigBlob', [in] int32 'cbSigBlob', [out] int32& 'result')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMethodProps'([in] uint32 'md', [out] int32& 'pClass', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szMethod', [in] int32 'cchMethod', [out] uint32& 'pchMethod', [out] valuetype ['System.Reflection.Primitives']'System.Reflection'.'MethodAttributes'& 'pdwAttr', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppvSigBlob', [out] uint32& 'pcbSigBlob', [out] uint32& 'pulCodeRVA', [out] uint32& 'pdwImplFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMemberRefProps'([in] valuetype 'System.Reflection.Adds'.'Token' 'mr', [out] valuetype 'System.Reflection.Adds'.'Token'& 'ptk', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szMember', [in] int32 'cchMember', [out] uint32& 'pchMember', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppvSigBlob', [out] uint32& 'pbSig')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumProperties'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'td', [out] int32& 'mdFieldDef', int32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumEvents'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'td', [out] int32& 'mdFieldDef', int32 'cMax', [out] uint32& 'pcEvents')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventProps'(int32 'ev', [out] int32& 'pClass', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szEvent', int32 'cchEvent', [out] int32& 'pchEvent', [out] int32& 'pdwEventFlags', [out] int32& 'ptkEventType', [out] int32& 'pmdAddOn', [out] int32& 'pmdRemoveOn', [out] int32& 'pmdFire', [out] int32& 'rmdOtherMethod', uint32 'cMax', [out] uint32& 'pcOtherMethod')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMethodSemantics'([in][out] uint32& 'phEnum', [in] uint32 'mb', [out] uint32[] marshal([ + 3]) 'rEventProp', [in] uint32 'cMax', [out] uint32& 'pcEventProp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMethodSemantics'([in] uint32 'mb', [in] uint32 'tkEventProp', [out] uint32& 'pdwSemanticsFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetClassLayout'(int32 'typeDef', [out] uint32& 'dwPackSize', valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr' 'zeroPtr', uint32 'zeroCount', valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr' 'zeroPtr2', uint32& 'ulClassSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldMarshal'(int32 'tk', [out] native int& 'ppvNativeType', [out] int32& 'pcbNativeType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRVA'(int32 'token', [out] uint32& 'rva', [out] uint32& 'flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPermissionSetProps'(uint32 'pm', [out] uint32& 'pdwAction', [out] native int& 'ppvPermission', [out] int32& 'pcbPermission')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSigFromToken'(int32 'token', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'pSig', [out] int32& 'cbSig')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleRefProps'(int32 'mur', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', int32 'cchName', [out] int32& 'pchName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumModuleRefs'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', [out] int32& 'mdModuleRef', int32 'cMax', [out] uint32& 'pcModuleRefs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeSpecFromToken'(valuetype 'System.Reflection.Adds'.'Token' 'typeSpec', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'pSig', [out] int32& 'cbSig')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameFromToken'(uint32 'tk', [out] string marshal(lpstr) 'pszUtf8NamePtr')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumUnresolvedMethods'(uint32& 'phEnum', uint32[] marshal([ + 2]) 'rMethods', uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetUserString'([in] int32 'stk', [out] char[] marshal([ + 2]) 'szString', [in] int32 'cchString', [out] int32& 'pchString')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPinvokeMap'(uint32 'tk', [out] uint32& 'pdwMappingFlags', class ['System.Runtime']'System.Text'.'StringBuilder' 'szImportName', uint32 'cchImportName', [out] uint32& 'pchImportName', [out] int32& 'pmrImportDLL')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumSignatures'(uint32& 'phEnum', uint32[] marshal([ + 2]) 'rSignatures', uint32 'cmax', [out] uint32& 'pcSignatures')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumTypeSpecs'(uint32& 'phEnum', uint32[] marshal([ + 2]) 'rTypeSpecs', uint32 'cmax', [out] uint32& 'pcTypeSpecs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumUserStrings'(uint32& 'phEnum', uint32[] marshal([ + 2]) 'rStrings', uint32 'cmax', [out] uint32& 'pcStrings')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetParamForMethodIndex'(uint32 'md', uint32 'ulParamSeq', [out] uint32& 'pParam', [out] int32& 'ppd')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumCustomAttributes'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'tk', int32 'tkType', [out] valuetype 'System.Reflection.Adds'.'Token'& 'mdCustomAttribute', uint32 'cMax', [out] uint32& 'pcTokens')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCustomAttributeProps'([in] valuetype 'System.Reflection.Adds'.'Token' 'cv', [out] valuetype 'System.Reflection.Adds'.'Token'& 'tkObj', [out] valuetype 'System.Reflection.Adds'.'Token'& 'tkType', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'blob', [out] int32& 'cbSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindTypeRef'([in] int32 'tkResolutionScope', [in] string marshal(lpwstr) 'szName', [out] int32& 'typeRef')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMemberProps'(uint32 'mb', [out] uint32& 'pClass', class ['System.Runtime']'System.Text'.'StringBuilder' 'szMember', uint32 'cchMember', [out] uint32& 'pchMember', [out] uint32& 'pdwAttr', [out] native int& 'ppvSigBlob', [out] uint32& 'pcbSigBlob', [out] uint32& 'pulCodeRVA', [out] uint32& 'pdwImplFlags', [out] uint32& 'pdwCPlusTypeFlag', [out] native int& 'ppValue', [out] uint32& 'pcchValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldProps'(int32 'mb', [out] int32& 'mdTypeDef', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szField', int32 'cchField', [out] int32& 'pchField', [out] valuetype ['System.Reflection.Primitives']'System.Reflection'.'FieldAttributes'& 'pdwAttr', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppvSigBlob', [out] int32& 'pcbSigBlob', [out] int32& 'pdwCPlusTypeFlab', [out] native int& 'ppValue', [out] int32& 'pcchValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPropertyProps'(valuetype 'System.Reflection.Adds'.'Token' 'prop', [out] valuetype 'System.Reflection.Adds'.'Token'& 'pClass', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szProperty', int32 'cchProperty', [out] int32& 'pchProperty', [out] valuetype ['System.Reflection.Primitives']'System.Reflection'.'PropertyAttributes'& 'pdwPropFlags', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppvSig', [out] int32& 'pbSig', [out] int32& 'pdwCPlusTypeFlag', [out] valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr'& 'ppDefaultValue', [out] int32& 'pcchDefaultValue', [out] valuetype 'System.Reflection.Adds'.'Token'& 'pmdSetter', [out] valuetype 'System.Reflection.Adds'.'Token'& 'pmdGetter', [out] valuetype 'System.Reflection.Adds'.'Token'& 'rmdOtherMethod', uint32 'cMax', [out] uint32& 'pcOtherMethod')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetParamProps'(int32 'tk', [out] int32& 'pmd', [out] uint32& 'pulSequence', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', uint32 'cchName', [out] uint32& 'pchName', [out] uint32& 'pdwAttr', [out] uint32& 'pdwCPlusTypeFlag', [out] valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr'& 'ppValue', [out] uint32& 'pcchValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCustomAttributeByName'(int32 'tkObj', string marshal(lpwstr) 'szName', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppData', [out] uint32& 'pcbData')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'IsValidToken'([in] uint32 marshal(unsigned int32) 'tk')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNestedClassProps'(int32 'tdNestedClass', [out] int32& 'tdEnclosingClass')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNativeCallConvFromSig'(native int 'pvSig', uint32 'cbSig', [out] uint32& 'pCallConv')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsGlobal'(uint32 'pd', [out] int32& 'pbGlobal')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumGenericParams'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'hEnum', int32 'tk', [out] int32& 'rGenericParams', uint32 'cMax', [out] uint32& 'pcGenericParams')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetGenericParamProps'(int32 'gp', [out] uint32& 'pulParamSeq', [out] int32& 'pdwParamFlags', [out] int32& 'ptOwner', [out] int32& 'ptkKind', [out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'wzName', uint32 'cchName', [out] uint32& 'pchName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMethodSpecProps'(valuetype 'System.Reflection.Adds'.'Token' 'mi', [out] valuetype 'System.Reflection.Adds'.'Token'& 'tkParent', [out] valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer'& 'ppvSigBlob', [out] int32& 'pcbSigBlob')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumGenericParamConstraints'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'hEnum', int32 'tk', [out] int32& 'rGenericParamConstraints', uint32 'cMax', [out] uint32& 'pcGenericParams')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetGenericParamConstraintProps'(int32 'gpc', [out] int32& 'ptGenericParam', [out] int32& 'ptkConstraintType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPEKind'([out] valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'PortableExecutableKinds'& 'dwPEKind', [out] valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ImageFileMachine'& 'pdwMachine')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetVersionString'([out] class ['System.Runtime']'System.Text'.'StringBuilder' marshal(lpwstr) 'szName', [in] int32 'cchName', [out] int32& 'pchName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EnumMethodSpecs'(valuetype 'Microsoft.MetadataReader'.'HCORENUM'& 'phEnum', int32 'tk', [in] uint32[] marshal([ + 3]) 'rMethodSpecs', uint32 'cMax', [out] uint32& 'pcMethodSpecs')
			preservesig 
		{
		}
	}
	.class public interface abstract 'IMetadataTables'
	{
		.custom instance void ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 44 38 46 35 37 39 41 42 2D 34 30 32 44 2D 34 62 38 65 2D 38 32 44 39 2D 35 44 36 33 42 31 30 36 35 43 36 38 00 00)
		.custom instance void ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStringHeapSize'([out] uint32& 'countBytesStrings')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBlobHeapSize'([out] uint32& 'countBytesBlobs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetGuidHeapSize'([out] uint32& 'countBytesGuids')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetUserStringHeapSize'([out] uint32& 'countByteBlobs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumTables'([out] uint32& 'countTables')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTableIndex'(uint32 'token', [out] uint32& 'tableIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTableInfo'(valuetype 'System.Reflection.Adds'.'MetadataTable' 'tableIndex', [out] int32& 'countByteRows', [out] int32& 'countRows', [out] int32& 'countColumns', [out] int32& 'columnPrimaryKey', [out] valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr'& 'name')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetColumnInfo'(uint32 'ixTbl', uint32 'ixCol', [out] uint32& 'poCol', [out] uint32& 'pType', [out] uint32& 'pcbCol', [out] native int& 'ppName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCodedTokenInfo'(uint32 'ixCdTkn', [out] uint32& 'pcTokens', [out] native int& 'ppTokens', [out] native int& 'ppName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRow'(uint32 'ixTbl', uint32 'rid', [out] native int& 'ppRow')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetColumn'(uint32 'ixTbl', uint32 'ixCol', uint32 'rid', [out] native int& 'pVal')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetString'(uint32 'ixString', [out] native int& 'ppString')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBlob'(uint32 'ixBlob', [out] uint32& 'pcbData', [out] native int& 'ppData')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetGuid'(uint32 'ixGuid', [out] native int& 'ppGUID')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetUserString'(uint32 'ixUserString', uint32 'pcbData', [out] native int& 'ppData')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextString'(uint32 'ixString', [out] uint32& 'pNext')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextBlob'(uint32 'ixBlob', [out] uint32& 'pNext')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextGuid'(uint32 'ixGuid', [out] uint32& 'pNext')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextUserString'(uint32 'ixUserString', [out] uint32& 'pNext')
			preservesig 
		{
		}
	}
	.class public 'ModuleResolutionFailureException'
		extends 'Microsoft.MetadataReader'.'BaseResolutionFailureException'
	{
		.method public hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(string 'message')
		{
			ret
		}
	}
	.class public sequential sealed 'UnusedIntPtr'
		extends ['System.Runtime']'System'.'ValueType'
	{
		.method public static hidebysig specialname 
			valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr' 'get_Zero'()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr' 'Zero'()
		{
			.get valuetype 'Microsoft.MetadataReader'.'UnusedIntPtr' 'Microsoft.MetadataReader'.'UnusedIntPtr'::'get_Zero'()
		}
	}
	.class public sealed 'enum_CorMethodAttr'
		extends ['System.Runtime']'System'.'Enum'
	{
		.custom instance void ['System.Runtime']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdAbstract' = int32(0x00000400)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdAssem' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdCheckAccessOnOverride' = int32(0x00000200)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdFamANDAssem' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdFamORAssem' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdFamily' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdFinal' = int32(0x00000020)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdHasSecurity' = int32(0x00004000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdHideBySig' = int32(0x00000080)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdMemberAccessMask' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdNewSlot' = int32(0x00000100)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdPinvokeImpl' = int32(0x00002000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdPrivate' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdPrivateScope' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdPublic' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdRTSpecialName' = int32(0x00001000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdRequireSecObject' = int32(0x00008000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdReservedMask' = int32(0x0000D000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdReuseSlot' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdSpecialName' = int32(0x00000800)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdStatic' = int32(0x00000010)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdUnmanagedExport' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdVirtual' = int32(0x00000040)
		.field static public literal valuetype 'Microsoft.MetadataReader'.'enum_CorMethodAttr' 'mdVtableLayoutMask' = int32(0x00000100)
	}
}
.namespace 'Microsoft.VisualStudio.Debugger.Metadata'
{
	.class public abstract 'Assembly'
		extends ['System.Runtime']'System'.'Object'
	{
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName' 'GetName'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName' 'GetName'(bool 'copiedName')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_FullName'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Location'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetExportedTypes'()
		{
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetType'(string 'name')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetType'(string 'name', bool 'throwOnError')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetType'(string 'name', bool 'throwOnError', bool 'ignoreCase')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetTypes'()
		{
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'GetModule'(string 'name')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'[] 'GetLoadedModules'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'[] 'GetLoadedModules'(bool 'getResourceModules')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'[] 'GetModules'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'[] 'GetModules'(bool 'getResourceModules')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'get_ManifestModule'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'get_EntryPoint'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance string 'get_CodeBase'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string 'get_EscapedCodeBase'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeData'> 'GetCustomAttributesData'()
		{
		}
		.method public virtual hidebysig newslot 
			instance object[] 'GetCustomAttributes'(bool 'inherit')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] 'GetCustomAttributes'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'attributeType', bool 'inherit')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'[] 'GetReferencedAssemblies'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly' 'GetSatelliteAssembly'(class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly' 'GetSatelliteAssembly'(class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture', class ['System.Runtime']'System'.'Version' 'version')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_GlobalAssemblyCache'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int64 'get_HostContext'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class ['System.IO']'System.IO'.'Stream' 'GetManifestResourceStream'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'type', string 'name')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class ['System.IO']'System.IO'.'Stream' 'GetManifestResourceStream'(string 'name')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string[] 'GetManifestResourceNames'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class ['System.Reflection']'System.Reflection'.'ManifestResourceInfo' 'GetManifestResourceInfo'(string 'resourceName')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.property instance string 'CodeBase'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly'::'get_CodeBase'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'EntryPoint'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly'::'get_EntryPoint'()
		}
		.property instance string 'EscapedCodeBase'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly'::'get_EscapedCodeBase'()
		}
		.property instance string 'FullName'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly'::'get_FullName'()
		}
		.property instance bool 'GlobalAssemblyCache'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly'::'get_GlobalAssemblyCache'()
		}
		.property instance int64 'HostContext'()
		{
			.get instance int64 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly'::'get_HostContext'()
		}
		.property instance string 'Location'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly'::'get_Location'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'ManifestModule'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly'::'get_ManifestModule'()
		}
	}
	.class public sealed 'AssemblyContentType'
		extends ['System.Runtime']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyContentType' 'Default' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyContentType' 'WindowsRuntime' = int32(0x00000001)
	}
	.class public sealed 'AssemblyName'
		extends ['System.Runtime']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(class ['System.Reflection']'System.Reflection'.'AssemblyName' 'assemblyName')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_Name'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Name'(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class ['System.Runtime']'System'.'Version' 'get_Version'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Version'(class ['System.Runtime']'System'.'Version' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class ['System.Globalization']'System.Globalization'.'CultureInfo' 'get_CultureInfo'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_CultureInfo'(class ['System.Globalization']'System.Globalization'.'CultureInfo' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_CultureName'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName' 'Clone'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_CodeBase'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_CodeBase'(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'get_ProcessorArchitecture'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_ProcessorArchitecture'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyContentType' 'get_ContentType'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_ContentType'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyContentType' 'value')
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] 'GetPublicKey'()
		{
			ret
		}
		.method public hidebysig 
			instance void 'SetPublicKey'(uint8[] 'publicKey')
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] 'GetPublicKeyToken'()
		{
			ret
		}
		.method public hidebysig 
			instance void 'SetPublicKeyToken'(uint8[] 'publicKeyToken')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype ['System.Runtime']'System.Reflection'.'AssemblyNameFlags' 'get_Flags'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Flags'(valuetype ['System.Runtime']'System.Reflection'.'AssemblyNameFlags' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_FullName'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(string 'assemblyName')
		{
			ret
		}
		.method public static hidebysig 
			bool 'ReferenceMatchesDefinition'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName' 'reference', class 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName' 'definition')
		{
			ret
		}
		.property instance string 'CodeBase'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'get_CodeBase'()
			.set instance void 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'set_CodeBase'(string)
		}
		.property instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyContentType' 'ContentType'()
		{
			.get instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyContentType' 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'get_ContentType'()
			.set instance void 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'set_ContentType'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyContentType')
		}
		.property instance class ['System.Globalization']'System.Globalization'.'CultureInfo' 'CultureInfo'()
		{
			.get instance class ['System.Globalization']'System.Globalization'.'CultureInfo' 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'get_CultureInfo'()
			.set instance void 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'set_CultureInfo'(class ['System.Globalization']'System.Globalization'.'CultureInfo')
		}
		.property instance string 'CultureName'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'get_CultureName'()
		}
		.property instance valuetype ['System.Runtime']'System.Reflection'.'AssemblyNameFlags' 'Flags'()
		{
			.get instance valuetype ['System.Runtime']'System.Reflection'.'AssemblyNameFlags' 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'get_Flags'()
			.set instance void 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'set_Flags'(valuetype ['System.Runtime']'System.Reflection'.'AssemblyNameFlags')
		}
		.property instance string 'FullName'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'get_FullName'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'get_Name'()
			.set instance void 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'set_Name'(string)
		}
		.property instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'ProcessorArchitecture'()
		{
			.get instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'get_ProcessorArchitecture'()
			.set instance void 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'set_ProcessorArchitecture'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture')
		}
		.property instance class ['System.Runtime']'System'.'Version' 'Version'()
		{
			.get instance class ['System.Runtime']'System'.'Version' 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'get_Version'()
			.set instance void 'Microsoft.VisualStudio.Debugger.Metadata'.'AssemblyName'::'set_Version'(class ['System.Runtime']'System'.'Version')
		}
	}
	.class public abstract 'Binder'
		extends ['System.Runtime']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase' 'BindToMethod'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'[] 'match', object[]& 'args', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture', string[] 'names', [out] object& 'state')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo' 'BindToField'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'[] 'match', object 'value', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase' 'SelectMethod'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'[] 'match', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo' 'SelectProperty'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo'[] 'match', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'returnType', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'indexes', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'ChangeType'(object 'value', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'type', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'ReorderArgumentArray'(object[]& 'args', object 'state')
		{
		}
		.method public virtual hidebysig newslot 
			instance bool 'CanChangeType'(object 'value', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'type', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
	}
	.class public sealed 'BindingFlags'
		extends ['System.Runtime']'System'.'Enum'
	{
		.custom instance void ['System.Runtime']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'CreateInstance' = int32(0x00000200)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'DeclaredOnly' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'Default' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'ExactBinding' = int32(0x00010000)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'FlattenHierarchy' = int32(0x00000040)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'GetField' = int32(0x00000400)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'GetProperty' = int32(0x00001000)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'IgnoreCase' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'Instance' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'InvokeMethod' = int32(0x00000100)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'NonPublic' = int32(0x00000020)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'Public' = int32(0x00000010)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'SetField' = int32(0x00000800)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'SetProperty' = int32(0x00002000)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'Static' = int32(0x00000008)
	}
	.class public abstract sealed 'COMExceptionExtensions'
		extends ['System.Runtime']'System'.'Object'
	{
		.method public static hidebysig 
			int32 'GetErrorCode'(class ['System.Runtime.InteropServices']'System.Runtime.InteropServices'.'COMException' 'e')
		{
			ret
		}
	}
	.class public abstract 'ConstructorInfo'
		extends 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object 'Invoke'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'invokeAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', object[] 'parameters', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture')
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
	}
	.class public 'CustomAttributeData'
		extends ['System.Runtime']'System'.'Object'
	{
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ConstructorInfo' 'get_Constructor'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeTypedArgument'> 'get_ConstructorArguments'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeNamedArgument'> 'get_NamedArguments'()
		{
			ret
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ConstructorInfo' 'Constructor'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ConstructorInfo' 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeData'::'get_Constructor'()
		}
		.property instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeTypedArgument'> 'ConstructorArguments'()
		{
			.get instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeTypedArgument'> 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeData'::'get_ConstructorArguments'()
		}
		.property instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeNamedArgument'> 'NamedArguments'()
		{
			.get instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeNamedArgument'> 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeData'::'get_NamedArguments'()
		}
	}
	.class public sequential sealed 'CustomAttributeNamedArgument'
		extends ['System.Runtime']'System'.'ValueType'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'memberInfo', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeTypedArgument' 'typedValue')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'get_MemberInfo'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeTypedArgument' 'get_TypedValue'()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'MemberInfo'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeNamedArgument'::'get_MemberInfo'()
		}
		.property instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeTypedArgument' 'TypedValue'()
		{
			.get instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeTypedArgument' 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeNamedArgument'::'get_TypedValue'()
		}
	}
	.class public sequential sealed 'CustomAttributeTypedArgument'
		extends ['System.Runtime']'System'.'ValueType'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'argumentType', object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_ArgumentType'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object 'get_Value'()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'ArgumentType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeTypedArgument'::'get_ArgumentType'()
		}
		.property instance object 'Value'()
		{
			.get instance object 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeTypedArgument'::'get_Value'()
		}
	}
	.class public abstract 'EventInfo'
		extends 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'EventAttributes' 'get_Attributes'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_EventHandlerType'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsMulticast'()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance bool 'GetIsMulticastImpl'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsSpecialName'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetAddMethod'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetAddMethod'(bool 'nonPublic')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetRaiseMethod'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetRaiseMethod'(bool 'nonPublic')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetRemoveMethod'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetRemoveMethod'(bool 'nonPublic')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'[] 'GetOtherMethods'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'[] 'GetOtherMethods'(bool 'nonPublic')
		{
			ret
		}
		.method public hidebysig 
			instance void 'AddEventHandler'(object 'target', class ['System.Runtime']'System'.'Delegate' 'handler')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void 'AddEventHandlerImpl'(object 'target', class ['System.Runtime']'System'.'Delegate' 'handler')
		{
			ret
		}
		.method public hidebysig 
			instance void 'RemoveEventHandler'(object 'target', class ['System.Runtime']'System'.'Delegate' 'handler')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void 'RemoveEventHandlerImpl'(object 'target', class ['System.Runtime']'System'.'Delegate' 'handler')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'EventAttributes' 'Attributes'()
		{
			.get instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'EventAttributes' 'Microsoft.VisualStudio.Debugger.Metadata'.'EventInfo'::'get_Attributes'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'EventHandlerType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'EventInfo'::'get_EventHandlerType'()
		}
		.property instance bool 'IsMulticast'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'EventInfo'::'get_IsMulticast'()
		}
		.property instance bool 'IsSpecialName'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'EventInfo'::'get_IsSpecialName'()
		}
	}
	.class public abstract 'ExceptionHandlingClause'
		extends ['System.Runtime']'System'.'Object'
	{
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_CatchType'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_FilterOffset'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClauseOptions' 'get_Flags'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_HandlerLength'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_HandlerOffset'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_TryLength'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_TryOffset'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'CatchType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'::'get_CatchType'()
		}
		.property instance int32 'FilterOffset'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'::'get_FilterOffset'()
		}
		.property instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClauseOptions' 'Flags'()
		{
			.get instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClauseOptions' 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'::'get_Flags'()
		}
		.property instance int32 'HandlerLength'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'::'get_HandlerLength'()
		}
		.property instance int32 'HandlerOffset'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'::'get_HandlerOffset'()
		}
		.property instance int32 'TryLength'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'::'get_TryLength'()
		}
		.property instance int32 'TryOffset'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'::'get_TryOffset'()
		}
	}
	.class public sealed 'ExceptionHandlingClauseOptions'
		extends ['System.Runtime']'System'.'Enum'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClauseOptions' 'Clause' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClauseOptions' 'Fault' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClauseOptions' 'Filter' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClauseOptions' 'Finally' = int32(0x00000002)
	}
	.class public abstract 'FieldInfo'
		extends 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'FieldAttributes' 'get_Attributes'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_FieldType'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsPublic'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsPrivate'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsFamily'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsAssembly'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsFamilyAndAssembly'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsFamilyOrAssembly'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsStatic'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsInitOnly'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsLiteral'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNotSerialized'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsSpecialName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsPinvokeImpl'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'GetValue'(object 'obj')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'GetRawConstantValue'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['System.Runtime']'System'.'RuntimeFieldHandle' 'get_FieldHandle'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'SetValue'(object 'obj', object 'value', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'invokeAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetOptionalCustomModifiers'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetRequiredCustomModifiers'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'FieldAttributes' 'Attributes'()
		{
			.get instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'FieldAttributes' 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_Attributes'()
		}
		.property instance valuetype ['System.Runtime']'System'.'RuntimeFieldHandle' 'FieldHandle'()
		{
			.get instance valuetype ['System.Runtime']'System'.'RuntimeFieldHandle' 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_FieldHandle'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'FieldType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_FieldType'()
		}
		.property instance bool 'IsAssembly'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsAssembly'()
		}
		.property instance bool 'IsFamily'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsFamily'()
		}
		.property instance bool 'IsFamilyAndAssembly'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsFamilyAndAssembly'()
		}
		.property instance bool 'IsFamilyOrAssembly'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsFamilyOrAssembly'()
		}
		.property instance bool 'IsInitOnly'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsInitOnly'()
		}
		.property instance bool 'IsLiteral'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsLiteral'()
		}
		.property instance bool 'IsNotSerialized'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsNotSerialized'()
		}
		.property instance bool 'IsPinvokeImpl'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsPinvokeImpl'()
		}
		.property instance bool 'IsPrivate'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsPrivate'()
		}
		.property instance bool 'IsPublic'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsPublic'()
		}
		.property instance bool 'IsSpecialName'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsSpecialName'()
		}
		.property instance bool 'IsStatic'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'::'get_IsStatic'()
		}
	}
	.class public sealed 'ImageFileMachine'
		extends ['System.Runtime']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ImageFileMachine' 'AMD64' = int32(0x00008664)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ImageFileMachine' 'ARM' = int32(0x000001C4)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ImageFileMachine' 'I386' = int32(0x0000014C)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ImageFileMachine' 'IA64' = int32(0x00000200)
	}
	.class public abstract 'LocalVariableInfo'
		extends ['System.Runtime']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsPinned'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_LocalIndex'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_LocalType'()
		{
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance bool 'IsPinned'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'LocalVariableInfo'::'get_IsPinned'()
		}
		.property instance int32 'LocalIndex'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'LocalVariableInfo'::'get_LocalIndex'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'LocalType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'LocalVariableInfo'::'get_LocalType'()
		}
	}
	.class public sealed 'MemberFilter'
		extends ['System.Runtime']'System'.'MulticastDelegate'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool 'Invoke'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'm', object 'filterCriteria')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class ['System.Runtime']'System'.'IAsyncResult' 'BeginInvoke'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'm', object 'filterCriteria', class ['System.Runtime']'System'.'AsyncCallback' 'callback', object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool 'EndInvoke'(class ['System.Runtime']'System'.'IAsyncResult' 'result')
			runtime 
		{
		}
	}
	.class public abstract 'MemberInfo'
		extends ['System.Runtime']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'get_MemberType'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_DeclaringType'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Name'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_MetadataToken'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'get_Module'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_ReflectedType'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] 'GetCustomAttributes'(bool 'inherit')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] 'GetCustomAttributes'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'attributeType', bool 'inherit')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'IsDefined'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'attributeType', bool 'inherit')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeData'> 'GetCustomAttributesData'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'IsEquivalentTo'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'other')
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'DeclaringType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'::'get_DeclaringType'()
		}
		.property instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'MemberType'()
		{
			.get instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'::'get_MemberType'()
		}
		.property instance int32 'MetadataToken'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'::'get_MetadataToken'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'Module'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'::'get_Module'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'::'get_Name'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'ReflectedType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'::'get_ReflectedType'()
		}
	}
	.class public sealed 'MemberTypes'
		extends ['System.Runtime']'System'.'Enum'
	{
		.custom instance void ['System.Runtime']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'All' = int32(0x000000BF)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'Constructor' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'Custom' = int32(0x00000040)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'Event' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'Field' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'Method' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'NestedType' = int32(0x00000080)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'Property' = int32(0x00000010)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'TypeInfo' = int32(0x00000020)
	}
	.class public abstract 'MethodBase'
		extends 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'MethodAttributes' 'get_Attributes'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'CallingConventions' 'get_CallingConvention'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'[] 'GetParameters'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsPublic'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsPrivate'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsFamily'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsAssembly'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsFamilyAndAssembly'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsFamilyOrAssembly'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsStatic'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsFinal'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsVirtual'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsHideBySig'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsAbstract'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsSpecialName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsConstructor'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsGenericMethodDefinition'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsGenericMethod'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetGenericArguments'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_ContainsGenericParameters'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBody' 'GetMethodBody'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'MethodImplAttributes' 'GetMethodImplementationFlags'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'Invoke'(object 'obj', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'invokeAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', object[] 'parameters', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['System.Runtime']'System'.'RuntimeMethodHandle' 'get_MethodHandle'()
		{
		}
		.method public hidebysig specialname 
			instance string 'get_FullName'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'MethodAttributes' 'Attributes'()
		{
			.get instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'MethodAttributes' 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_Attributes'()
		}
		.property instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'CallingConventions' 'CallingConvention'()
		{
			.get instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'CallingConventions' 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_CallingConvention'()
		}
		.property instance bool 'ContainsGenericParameters'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_ContainsGenericParameters'()
		}
		.property instance string 'FullName'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_FullName'()
		}
		.property instance bool 'IsAbstract'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsAbstract'()
		}
		.property instance bool 'IsAssembly'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsAssembly'()
		}
		.property instance bool 'IsConstructor'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsConstructor'()
		}
		.property instance bool 'IsFamily'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsFamily'()
		}
		.property instance bool 'IsFamilyAndAssembly'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsFamilyAndAssembly'()
		}
		.property instance bool 'IsFamilyOrAssembly'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsFamilyOrAssembly'()
		}
		.property instance bool 'IsFinal'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsFinal'()
		}
		.property instance bool 'IsGenericMethod'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsGenericMethod'()
		}
		.property instance bool 'IsGenericMethodDefinition'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsGenericMethodDefinition'()
		}
		.property instance bool 'IsHideBySig'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsHideBySig'()
		}
		.property instance bool 'IsPrivate'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsPrivate'()
		}
		.property instance bool 'IsPublic'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsPublic'()
		}
		.property instance bool 'IsSpecialName'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsSpecialName'()
		}
		.property instance bool 'IsStatic'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsStatic'()
		}
		.property instance bool 'IsVirtual'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_IsVirtual'()
		}
		.property instance valuetype ['System.Runtime']'System'.'RuntimeMethodHandle' 'MethodHandle'()
		{
			.get instance valuetype ['System.Runtime']'System'.'RuntimeMethodHandle' 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'::'get_MethodHandle'()
		}
	}
	.class public abstract 'MethodBody'
		extends ['System.Runtime']'System'.'Object'
	{
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'> 'get_ExceptionHandlingClauses'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_InitLocals'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_LocalSignatureMetadataToken'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'LocalVariableInfo'> 'get_LocalVariables'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_MaxStackSize'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] 'GetILAsByteArray'()
		{
			ret
		}
		.property instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'> 'ExceptionHandlingClauses'()
		{
			.get instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'ExceptionHandlingClause'> 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBody'::'get_ExceptionHandlingClauses'()
		}
		.property instance bool 'InitLocals'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBody'::'get_InitLocals'()
		}
		.property instance int32 'LocalSignatureMetadataToken'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBody'::'get_LocalSignatureMetadataToken'()
		}
		.property instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'LocalVariableInfo'> 'LocalVariables'()
		{
			.get instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'LocalVariableInfo'> 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBody'::'get_LocalVariables'()
		}
		.property instance int32 'MaxStackSize'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBody'::'get_MaxStackSize'()
		}
	}
	.class public abstract 'MethodInfo'
		extends 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_ReturnType'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'MakeGenericMethod'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types')
		{
			.param [1]
			.custom instance void ['System.Runtime']'System'.'ParamArrayAttribute'::.ctor() = (01 00 00 00)
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetGenericMethodDefinition'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetBaseDefinition'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo' 'get_ReturnParameter'()
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'[] 'GetExplicitInterfacesImplemented'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo' 'ReturnParameter'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo' 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'::'get_ReturnParameter'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'ReturnType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'::'get_ReturnType'()
		}
	}
	.class public 'MissingMethodException'
		extends ['System.Runtime']'System'.'Exception'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(string 'className', string 'methodName')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(string 'message', class ['System.Runtime']'System'.'Exception' 'inner')
		{
			ret
		}
	}
	.class public abstract 'Module'
		extends ['System.Runtime']'System'.'Object'
	{
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string 'get_Name'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void 'GetPEKind'([out] valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'PortableExecutableKinds'& 'peKind', [out] valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ImageFileMachine'& 'machine')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_MDStreamVersion'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly' 'get_Assembly'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetType'(string 'className')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetType'(string 'className', bool 'ignoreCase')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetType'(string 'className', bool 'throwOnError', bool 'ignoreCase')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetTypes'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'FindTypes'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeFilter' 'filter', object 'filterCriteria')
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance string 'get_ScopeName'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype ['System.Runtime']'System'.'Guid' 'get_ModuleVersionId'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_MetadataToken'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool 'IsResource'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo' 'GetField'(string 'name')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo' 'GetField'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'[] 'GetFields'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'[] 'GetFields'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingFlags')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethod'(string 'name')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethod'(string 'name', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethod'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', valuetype ['System.Reflection.Primitives']'System.Reflection'.'CallingConventions' 'callConvention', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethodImpl'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', valuetype ['System.Reflection.Primitives']'System.Reflection'.'CallingConventions' 'callConvention', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'[] 'GetMethods'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'[] 'GetMethods'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingFlags')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'ResolveMember'(int32 'metadataToken')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'ResolveMember'(int32 'metadataToken', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'genericTypeArguments', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'genericMethodArguments')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] 'ResolveSignature'(int32 'metadataToken')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string 'ResolveString'(int32 'metadataToken')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'ResolveType'(int32 'metadataToken')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'ResolveType'(int32 'metadataToken', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'genericTypeArguments', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'genericMethodArguments')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo' 'ResolveField'(int32 'metadataToken')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo' 'ResolveField'(int32 'metadataToken', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'genericTypeArguments', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'genericMethodArguments')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase' 'ResolveMethod'(int32 'metadataToken')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase' 'ResolveMethod'(int32 'metadataToken', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'genericTypeArguments', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'genericMethodArguments')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeData'> 'GetCustomAttributesData'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance string 'get_FullyQualifiedName'()
		{
			ret
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly' 'Assembly'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly' 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'::'get_Assembly'()
		}
		.property instance string 'FullyQualifiedName'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'::'get_FullyQualifiedName'()
		}
		.property instance int32 'MDStreamVersion'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'::'get_MDStreamVersion'()
		}
		.property instance int32 'MetadataToken'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'::'get_MetadataToken'()
		}
		.property instance valuetype ['System.Runtime']'System'.'Guid' 'ModuleVersionId'()
		{
			.get instance valuetype ['System.Runtime']'System'.'Guid' 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'::'get_ModuleVersionId'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'::'get_Name'()
		}
		.property instance string 'ScopeName'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Module'::'get_ScopeName'()
		}
	}
	.class public abstract 'ParameterInfo'
		extends ['System.Runtime']'System'.'Object'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'ParameterAttributes' 'get_Attributes'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Name'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_Position'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_ParameterType'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_MetadataToken'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'get_Member'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsIn'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsLcid'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsOptional'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsOut'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsRetval'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object 'get_DefaultValue'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object 'get_RawDefaultValue'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['System.Runtime']'System.Collections.Generic'.'IList`1'<class 'Microsoft.VisualStudio.Debugger.Metadata'.'CustomAttributeData'> 'GetCustomAttributesData'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetOptionalCustomModifiers'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetRequiredCustomModifiers'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'ParameterAttributes' 'Attributes'()
		{
			.get instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'ParameterAttributes' 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_Attributes'()
		}
		.property instance object 'DefaultValue'()
		{
			.get instance object 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_DefaultValue'()
		}
		.property instance bool 'IsIn'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_IsIn'()
		}
		.property instance bool 'IsLcid'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_IsLcid'()
		}
		.property instance bool 'IsOptional'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_IsOptional'()
		}
		.property instance bool 'IsOut'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_IsOut'()
		}
		.property instance bool 'IsRetval'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_IsRetval'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'Member'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo' 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_Member'()
		}
		.property instance int32 'MetadataToken'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_MetadataToken'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_Name'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'ParameterType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_ParameterType'()
		}
		.property instance int32 'Position'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_Position'()
		}
		.property instance object 'RawDefaultValue'()
		{
			.get instance object 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'::'get_RawDefaultValue'()
		}
	}
	.class public sequential sealed 'ParameterModifier'
		extends ['System.Runtime']'System'.'ValueType'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
	}
	.class public sealed 'PortableExecutableKinds'
		extends ['System.Runtime']'System'.'Enum'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'PortableExecutableKinds' 'ILOnly' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'PortableExecutableKinds' 'NotAPortableExecutableImage' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'PortableExecutableKinds' 'PE32Plus' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'PortableExecutableKinds' 'Preferred32Bit' = int32(0x00000010)
			.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 00 00 00)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'PortableExecutableKinds' 'Required32Bit' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'PortableExecutableKinds' 'Unmanaged32Bit' = int32(0x00000008)
	}
	.class public sealed 'ProcessorArchitecture'
		extends ['System.Runtime']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'Amd64' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'Arm' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'IA64' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'MSIL' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'None' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ProcessorArchitecture' 'X86' = int32(0x00000002)
	}
	.class public abstract 'PropertyInfo'
		extends 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'PropertyAttributes' 'get_Attributes'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_PropertyType'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_CanRead'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_CanWrite'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsSpecialName'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'GetConstantValue'()
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'[] 'GetAccessors'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'[] 'GetAccessors'(bool 'nonPublic')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetGetMethod'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetGetMethod'(bool 'nonPublic')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetSetMethod'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetSetMethod'(bool 'nonPublic')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterInfo'[] 'GetIndexParameters'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'GetValue'(object 'obj', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'invokeAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', object[] 'index', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'SetValue'(object 'obj', object 'value', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'invokeAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', object[] 'index', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture')
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'PropertyAttributes' 'Attributes'()
		{
			.get instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'PropertyAttributes' 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo'::'get_Attributes'()
		}
		.property instance bool 'CanRead'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo'::'get_CanRead'()
		}
		.property instance bool 'CanWrite'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo'::'get_CanWrite'()
		}
		.property instance bool 'IsSpecialName'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo'::'get_IsSpecialName'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'PropertyType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo'::'get_PropertyType'()
		}
	}
	.class public abstract 'Type'
		extends 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.class nested public 'ExplicitInterfaceInfo'
			extends ['System.Runtime']'System'.'Object'
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_FullName'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Namespace'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_AssemblyQualifiedName'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly' 'get_Assembly'()
		{
		}
		.method public virtual hidebysig abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'get_Module'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_BaseType'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsClass'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsInterface'()
		{
			ret
		}
		.method public virtual hidebysig abstract 
			instance bool 'Equals'(object 'objOther')
		{
		}
		.method public virtual hidebysig 
			instance int32 'GetHashCode'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'Equals'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'o')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'MakeArrayType'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'MakeArrayType'(int32 'rank')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetArrayRank'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'MakeByRefType'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'MakePointerType'()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance bool 'IsArrayImpl'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsArray'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsByRef'()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance bool 'IsByRefImpl'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsEnum'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsPointer'()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance bool 'IsPointerImpl'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsValueType'()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance bool 'IsValueTypeImpl'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsSerializable'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNested'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetElementType'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetGenericArguments'()
		{
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetGenericParameterConstraints'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetGenericTypeDefinition'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsGenericTypeDefinition'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase' 'get_DeclaringMethod'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'[] 'GetMethods'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'flags')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo'[] 'GetMethods'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'/'ExplicitInterfaceInfo'[] 'GetExplicitInterfaceImplementations'()
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethod'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', valuetype ['System.Reflection.Primitives']'System.Reflection'.'CallingConventions' 'callConvention', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethod'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethod'(string 'name', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethod'(string 'name', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethod'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethod'(string 'name')
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodInfo' 'GetMethodImpl'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', valuetype ['System.Reflection.Primitives']'System.Reflection'.'CallingConventions' 'callConvention', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'[] 'GetFields'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'flags')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo'[] 'GetFields'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo' 'GetField'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'FieldInfo' 'GetField'(string 'name')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo'[] 'GetProperties'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'flags')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo'[] 'GetProperties'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo' 'GetProperty'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'returnType', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo' 'GetProperty'(string 'name', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'returnType', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo' 'GetProperty'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo' 'GetProperty'(string 'name', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'returnType', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo' 'GetProperty'(string 'name', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo' 'GetProperty'(string 'name', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'returnType')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo' 'GetProperty'(string 'name')
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'PropertyInfo' 'GetPropertyImpl'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'returnType', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'EventInfo'[] 'GetEvents'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'flags')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'EventInfo'[] 'GetEvents'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'EventInfo' 'GetEvent'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'flags')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'EventInfo' 'GetEvent'(string 'name')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'get_UnderlyingSystemType'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'IsAssignableFrom'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'c')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'IsInstanceOfType'(object 'o')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'MakeGenericType'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'argTypes')
		{
			.param [1]
			.custom instance void ['System.Runtime']'System'.'ParamArrayAttribute'::.ctor() = (01 00 00 00)
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetNestedTypes'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetNestedTypes'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetNestedType'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetNestedType'(string 'name')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ConstructorInfo'[] 'GetConstructors'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ConstructorInfo'[] 'GetConstructors'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetInterface'(string 'name')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'GetInterface'(string 'name', bool 'ignoreCase')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetInterfaces'()
		{
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'GetInterfacesOnType'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype ['System.Reflection.Extensions']'System.Reflection'.'InterfaceMapping' 'GetInterfaceMap'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'interfaceType')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'FindInterfaces'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeFilter' 'filter', object 'filterCriteria')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ConstructorInfo' 'GetConstructor'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', valuetype ['System.Reflection.Primitives']'System.Reflection'.'CallingConventions' 'callConvention', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ConstructorInfo' 'GetConstructor'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ConstructorInfo' 'GetConstructor'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types')
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'ConstructorInfo' 'GetConstructorImpl'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', valuetype ['System.Reflection.Primitives']'System.Reflection'.'CallingConventions' 'callConvention', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'types', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'[] 'GetMembers'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'[] 'GetMembers'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
		}
		.method public hidebysig 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'[] 'GetMember'(string 'name')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'[] 'GetMember'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'[] 'GetMember'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'type', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'[] 'GetDefaultMembers'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'TypeAttributes' 'get_Attributes'()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'TypeAttributes' 'GetAttributeFlagsImpl'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsAbstract'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsSealed'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsSpecialName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsImport'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsAnsiClass'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsUnicodeClass'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsAutoClass'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNotPublic'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsPublic'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNestedPublic'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNestedPrivate'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNestedFamily'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNestedAssembly'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNestedFamANDAssem'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNestedFamORAssem'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsAutoLayout'()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance bool 'IsPrimitiveImpl'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsPrimitive'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsGenericType'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'IsSubclassOf'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'c')
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsGenericParameter'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_ContainsGenericParameters'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsCOMObject'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['System.Runtime']'System'.'Guid' 'get_GUID'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_HasElementType'()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance bool 'HasElementTypeImpl'()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance bool 'IsCOMObjectImpl'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_IsContextful'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsMarshalByRef'()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance bool 'IsContextfulImpl'()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance bool 'IsMarshalByRefImpl'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'InvokeMember'(string 'name', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'invokeAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'Binder' 'binder', object 'target', object[] 'args', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'ParameterModifier'[] 'modifiers', class ['System.Globalization']'System.Globalization'.'CultureInfo' 'culture', string[] 'namedParameters')
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance class ['System.Runtime']'System.Runtime.InteropServices'.'StructLayoutAttribute' 'get_StructLayoutAttribute'()
		{
			ret
		}
		.method public static hidebysig 
			valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'GetTypeCode'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'type')
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'GetTypeCodeImpl'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype ['System.Runtime']'System'.'RuntimeTypeHandle' 'get_TypeHandle'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberInfo'[] 'FindMembers'(valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberTypes' 'memberType', valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'BindingFlags' 'bindingAttr', class 'Microsoft.VisualStudio.Debugger.Metadata'.'MemberFilter' 'filter', object 'filterCriteria')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsExplicitLayout'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsLayoutSequential'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsVisible'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'GenericParameterAttributes' 'get_GenericParameterAttributes'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_GenericParameterPosition'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.field static public initonly char 'Delimiter'
		.field static public initonly class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'[] 'EmptyTypes'
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly' 'Assembly'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Assembly' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_Assembly'()
		}
		.property instance string 'AssemblyQualifiedName'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_AssemblyQualifiedName'()
		}
		.property instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'TypeAttributes' 'Attributes'()
		{
			.get instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'TypeAttributes' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_Attributes'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'BaseType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_BaseType'()
		}
		.property instance bool 'ContainsGenericParameters'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_ContainsGenericParameters'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase' 'DeclaringMethod'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'MethodBase' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_DeclaringMethod'()
		}
		.property instance string 'FullName'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_FullName'()
		}
		.property instance valuetype ['System.Runtime']'System'.'Guid' 'GUID'()
		{
			.get instance valuetype ['System.Runtime']'System'.'Guid' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_GUID'()
		}
		.property instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'GenericParameterAttributes' 'GenericParameterAttributes'()
		{
			.get instance valuetype ['System.Reflection.Primitives']'System.Reflection'.'GenericParameterAttributes' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_GenericParameterAttributes'()
		}
		.property instance int32 'GenericParameterPosition'()
		{
			.get instance int32 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_GenericParameterPosition'()
		}
		.property instance bool 'HasElementType'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_HasElementType'()
		}
		.property instance bool 'IsAbstract'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsAbstract'()
		}
		.property instance bool 'IsAnsiClass'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsAnsiClass'()
		}
		.property instance bool 'IsArray'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsArray'()
		}
		.property instance bool 'IsAutoClass'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsAutoClass'()
		}
		.property instance bool 'IsAutoLayout'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsAutoLayout'()
		}
		.property instance bool 'IsByRef'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsByRef'()
		}
		.property instance bool 'IsCOMObject'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsCOMObject'()
		}
		.property instance bool 'IsClass'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsClass'()
		}
		.property instance bool 'IsContextful'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsContextful'()
		}
		.property instance bool 'IsEnum'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsEnum'()
		}
		.property instance bool 'IsExplicitLayout'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsExplicitLayout'()
		}
		.property instance bool 'IsGenericParameter'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsGenericParameter'()
		}
		.property instance bool 'IsGenericType'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsGenericType'()
		}
		.property instance bool 'IsGenericTypeDefinition'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsGenericTypeDefinition'()
		}
		.property instance bool 'IsImport'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsImport'()
		}
		.property instance bool 'IsInterface'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsInterface'()
		}
		.property instance bool 'IsLayoutSequential'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsLayoutSequential'()
		}
		.property instance bool 'IsMarshalByRef'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsMarshalByRef'()
		}
		.property instance bool 'IsNested'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsNested'()
		}
		.property instance bool 'IsNestedAssembly'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsNestedAssembly'()
		}
		.property instance bool 'IsNestedFamANDAssem'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsNestedFamANDAssem'()
		}
		.property instance bool 'IsNestedFamORAssem'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsNestedFamORAssem'()
		}
		.property instance bool 'IsNestedFamily'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsNestedFamily'()
		}
		.property instance bool 'IsNestedPrivate'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsNestedPrivate'()
		}
		.property instance bool 'IsNestedPublic'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsNestedPublic'()
		}
		.property instance bool 'IsNotPublic'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsNotPublic'()
		}
		.property instance bool 'IsPointer'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsPointer'()
		}
		.property instance bool 'IsPrimitive'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsPrimitive'()
		}
		.property instance bool 'IsPublic'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsPublic'()
		}
		.property instance bool 'IsSealed'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsSealed'()
		}
		.property instance bool 'IsSerializable'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsSerializable'()
		}
		.property instance bool 'IsSpecialName'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsSpecialName'()
		}
		.property instance bool 'IsUnicodeClass'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsUnicodeClass'()
		}
		.property instance bool 'IsValueType'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsValueType'()
		}
		.property instance bool 'IsVisible'()
		{
			.get instance bool 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_IsVisible'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'Module'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Module' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_Module'()
		}
		.property instance string 'Namespace'()
		{
			.get instance string 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_Namespace'()
		}
		.property instance class ['System.Runtime']'System.Runtime.InteropServices'.'StructLayoutAttribute' 'StructLayoutAttribute'()
		{
			.get instance class ['System.Runtime']'System.Runtime.InteropServices'.'StructLayoutAttribute' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_StructLayoutAttribute'()
		}
		.property instance valuetype ['System.Runtime']'System'.'RuntimeTypeHandle' 'TypeHandle'()
		{
			.get instance valuetype ['System.Runtime']'System'.'RuntimeTypeHandle' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_TypeHandle'()
		}
		.property instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'UnderlyingSystemType'()
		{
			.get instance class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 'Microsoft.VisualStudio.Debugger.Metadata'.'Type'::'get_UnderlyingSystemType'()
		}
	}
	.class public sealed 'TypeCode'
		extends ['System.Runtime']'System'.'Enum'
	{
		.custom instance void ['System.Runtime']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Boolean' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Byte' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Char' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'DBNull' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'DateTime' = int32(0x00000010)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Decimal' = int32(0x0000000F)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Double' = int32(0x0000000E)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Empty' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Int16' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Int32' = int32(0x00000009)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Int64' = int32(0x0000000B)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Object' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'SByte' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'Single' = int32(0x0000000D)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'String' = int32(0x00000012)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'UInt16' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'UInt32' = int32(0x0000000A)
		.field static public literal valuetype 'Microsoft.VisualStudio.Debugger.Metadata'.'TypeCode' 'UInt64' = int32(0x0000000C)
	}
	.class public abstract sealed 'TypeExtensions'
		extends ['System.Runtime']'System'.'Object'
	{
		.method public static hidebysig 
			class ['System.Reflection']'System.Reflection'.'TypeInfo' 'GetTypeInfo'(class ['System.Runtime']'System'.'Type' 'type')
		{
			ret
		}
		.method public static hidebysig 
			bool 'GetIsCOMObject'(class ['System.Runtime']'System'.'Type' 'type')
		{
			ret
		}
		.method public static hidebysig 
			class ['System.Reflection']'System.Reflection'.'ConstructorInfo' 'GetConstructor'(class ['System.Runtime']'System'.'Type' 'type', class ['System.Runtime']'System'.'Type'[] 'argumentTypes')
		{
			ret
		}
		.method public static hidebysig 
			bool 'ParameterTypesMatch'(class ['System.Runtime']'System'.'Type'[] 'parameterTypes', class ['System.Reflection']'System.Reflection'.'MethodBase' 'method')
		{
			ret
		}
		.method public static hidebysig 
			valuetype ['System.Runtime']'System'.'TypeCode' 'GetTypeCode'(class ['System.Runtime']'System'.'Type' 'type')
		{
			ret
		}
	}
	.class public sealed 'TypeFilter'
		extends ['System.Runtime']'System'.'MulticastDelegate'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool 'Invoke'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 't', object 'filterCriteria')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class ['System.Runtime']'System'.'IAsyncResult' 'BeginInvoke'(class 'Microsoft.VisualStudio.Debugger.Metadata'.'Type' 't', object 'filterCriteria', class ['System.Runtime']'System'.'AsyncCallback' 'callback', object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool 'EndInvoke'(class ['System.Runtime']'System'.'IAsyncResult' 'result')
			runtime 
		{
		}
	}
}
.namespace 'System.Reflection.Adds'
{
	.class public sealed 'CorElementType'
		extends ['System.Runtime']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Array' = int32(0x00000014)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Bool' = int32(0x00000002)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Byref' = int32(0x00000010)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Byte' = int32(0x00000005)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'CModOpt' = int32(0x00000020)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'CModReqd' = int32(0x0000001F)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Char' = int32(0x00000003)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Class' = int32(0x00000012)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Double' = int32(0x0000000D)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'End' = int32(0x00000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Enum' = int32(0x00000055)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Float' = int32(0x0000000C)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'FnPtr' = int32(0x0000001B)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'GenericInstantiation' = int32(0x00000015)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Int' = int32(0x00000008)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'IntPtr' = int32(0x00000018)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Internal' = int32(0x00000021)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Long' = int32(0x0000000A)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Max' = int32(0x00000022)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'MethodVar' = int32(0x0000001E)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Modifier' = int32(0x00000040)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Object' = int32(0x0000001C)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Pinned' = int32(0x00000045)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Pointer' = int32(0x0000000F)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'SByte' = int32(0x00000004)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Sentinel' = int32(0x00000041)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Short' = int32(0x00000006)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'String' = int32(0x0000000E)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'SzArray' = int32(0x0000001D)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Type' = int32(0x00000050)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'TypeVar' = int32(0x00000013)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'TypedByRef' = int32(0x00000016)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'UInt' = int32(0x00000009)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'UIntPtr' = int32(0x00000019)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'ULong' = int32(0x0000000B)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'UShort' = int32(0x00000007)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'ValueType' = int32(0x00000011)
		.field static public literal valuetype 'System.Reflection.Adds'.'CorElementType' 'Void' = int32(0x00000001)
	}
	.class public sequential sealed 'EmbeddedBlobPointer'
		extends ['System.Runtime']'System'.'ValueType'
	{

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public 'MetadataFile'
		extends ['System.Runtime']'System'.'Object'
		implements ['System.Runtime']'System'.'IDisposable'
	{
		.method family virtual hidebysig 
			instance void 'Finalize'()
		{
			.override ['System.Runtime']'System'.'Object'::'Finalize'
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void 'Dispose'()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void 'Dispose'(bool 'disposing')
		{
			.custom instance void ['System.Runtime']'System.Security'.'SecuritySafeCriticalAttribute'::.ctor() = (01 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string 'get_FilePath'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] 'ReadRva'(int64 'rva', int32 'countBytes')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] 'ReadResource'(int64 'offset')
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] 'ReadEmbeddedBlob'(valuetype 'System.Reflection.Adds'.'EmbeddedBlobPointer' 'pointer', int32 'countBytes')
		{
			.custom instance void ['System.Runtime']'System.Security'.'SecurityCriticalAttribute'::.ctor() = (01 00 00 00)
			ret
		}
		.method family virtual hidebysig newslot 
			instance void 'ValidateRange'(native int 'ptr', int32 'countBytes')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype 'System.Reflection.Adds'.'Token' 'ReadEntryPointToken'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance !!0 'ReadRvaStruct'<.ctor 'T'>(int64 'rva')
		{
			.custom instance void ['System.Runtime']'System.Security'.'SecurityCriticalAttribute'::.ctor() = (01 00 00 00)
			ret
		}
		.method family hidebysig 
			instance void 'EnsureNotDispose'()
		{
			ret
		}
		.property instance string 'FilePath'()
		{
			.get instance string 'System.Reflection.Adds'.'MetadataFile'::'get_FilePath'()
		}
	}
	.class public sealed 'MetadataTable'
		extends ['System.Runtime']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'Assembly' = int32(0x00000020)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'AssemblyRef' = int32(0x00000023)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'CustomAttribute' = int32(0x0000000C)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'Event' = int32(0x00000014)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'ExportedType' = int32(0x00000027)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'FieldDef' = int32(0x00000004)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'File' = int32(0x00000026)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'GenericPar' = int32(0x0000002A)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'InterfaceImpl' = int32(0x00000009)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'ManifestResource' = int32(0x00000028)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'MemberRef' = int32(0x0000000A)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'MethodDef' = int32(0x00000006)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'MethodSpec' = int32(0x0000002B)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'Module' = int32(0x00000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'ModuleRef' = int32(0x0000001A)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'ParamDef' = int32(0x00000008)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'Permission' = int32(0x0000000E)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'Property' = int32(0x00000017)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'Signature' = int32(0x00000011)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'TypeDef' = int32(0x00000002)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'TypeRef' = int32(0x00000001)
		.field static public literal valuetype 'System.Reflection.Adds'.'MetadataTable' 'TypeSpec' = int32(0x0000001B)
	}
	.class public sequential sealed 'Token'
		extends ['System.Runtime']'System'.'ValueType'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(valuetype 'System.Reflection.Adds'.'TokenType' 'type', int32 'rid')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(uint32 'value')
		{
			.custom instance void ['System.Runtime']'System'.'CLSCompliantAttribute'::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_Value'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'System.Reflection.Adds'.'TokenType' 'get_TokenType'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_Index'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsNil'()
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 'op_Implicit'(valuetype 'System.Reflection.Adds'.'Token' 'token')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool 'op_Equality'(valuetype 'System.Reflection.Adds'.'Token' 'token1', valuetype 'System.Reflection.Adds'.'Token' 'token2')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool 'op_Inequality'(valuetype 'System.Reflection.Adds'.'Token' 'token1', valuetype 'System.Reflection.Adds'.'Token' 'token2')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool 'op_Equality'(valuetype 'System.Reflection.Adds'.'Token' 'token1', int32 'token2')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool 'op_Inequality'(valuetype 'System.Reflection.Adds'.'Token' 'token1', int32 'token2')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool 'op_Equality'(int32 'token1', valuetype 'System.Reflection.Adds'.'Token' 'token2')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool 'op_Inequality'(int32 'token1', valuetype 'System.Reflection.Adds'.'Token' 'token2')
		{
			ret
		}
		.method public static hidebysig 
			bool 'IsType'(int32 'token', valuetype 'System.Reflection.Adds'.'TokenType'[] 'types')
		{
			.param [2]
			.custom instance void ['System.Runtime']'System'.'ParamArrayAttribute'::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance bool 'IsType'(valuetype 'System.Reflection.Adds'.'TokenType' 'type')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool 'Equals'(object 'obj')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 'GetHashCode'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.field static public initonly valuetype 'System.Reflection.Adds'.'Token' 'Nil'

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 'Index'()
		{
			.get instance int32 'System.Reflection.Adds'.'Token'::'get_Index'()
		}
		.property instance bool 'IsNil'()
		{
			.get instance bool 'System.Reflection.Adds'.'Token'::'get_IsNil'()
		}
		.property instance valuetype 'System.Reflection.Adds'.'TokenType' 'TokenType'()
		{
			.get instance valuetype 'System.Reflection.Adds'.'TokenType' 'System.Reflection.Adds'.'Token'::'get_TokenType'()
		}
		.property instance int32 'Value'()
		{
			.get instance int32 'System.Reflection.Adds'.'Token'::'get_Value'()
		}
	}
	.class public sealed 'TokenType'
		extends ['System.Runtime']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'Assembly' = int32(0x20000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'AssemblyRef' = int32(0x23000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'BaseType' = int32(0x72000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'CustomAttribute' = int32(0x0C000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'Event' = int32(0x14000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'ExportedType' = int32(0x27000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'FieldDef' = int32(0x04000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'File' = int32(0x26000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'GenericPar' = int32(0x2A000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'InterfaceImpl' = int32(0x09000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'Invalid' = int32(0x7FFFFFFF)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'ManifestResource' = int32(0x28000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'MemberRef' = int32(0x0A000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'MethodDef' = int32(0x06000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'MethodSpec' = int32(0x2B000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'Module' = int32(0x00000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'ModuleRef' = int32(0x1A000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'Name' = int32(0x71000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'ParamDef' = int32(0x08000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'Permission' = int32(0x0E000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'Property' = int32(0x17000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'Signature' = int32(0x11000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'String' = int32(0x70000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'TypeDef' = int32(0x02000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'TypeRef' = int32(0x01000000)
		.field static public literal valuetype 'System.Reflection.Adds'.'TokenType' 'TypeSpec' = int32(0x1B000000)
	}
}
.namespace 'VilCoreSystemShims'
{
	.class public 'ComAliasNameShimAttribute'
		extends ['System.Runtime']'System'.'Attribute'
	{
		.custom instance void ['System.Runtime']'System'.'AttributeUsageAttribute'::.ctor(valuetype ['System.Runtime']'System'.'AttributeTargets') = (01 00 FF 7F 00 00 00 00)
		.method public hidebysig specialname 
			instance void '.ctor'(string 'alias')
		{
			ret
		}
		.field public string 'alias'
	}
}
