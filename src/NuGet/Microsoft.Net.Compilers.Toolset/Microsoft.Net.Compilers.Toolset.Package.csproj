<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>$(RoslynPortableTargetFrameworks)</TargetFrameworks>

    <IsPackable>true</IsPackable>
    <NuspecPackageId>Microsoft.Net.Compilers.Toolset</NuspecPackageId>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <DevelopmentDependency>true</DevelopmentDependency>
    <PackageDescription>
      .NET Compilers Toolset Package.
      Referencing this package will cause the project to be built using the C# and Visual Basic compilers contained in the package, as opposed to the version installed with MSBuild.

      This package is primarily intended as a method for rapidly shipping hotfixes to customers. Using it as a long term solution for providing newer compilers on older MSBuild installations is explicitly not supported. That can and will break on a regular basis.

      The supported mechanism for providing new compilers in a build enviroment is updating to the newer .NET SDK or Visual Studio Build Tools SKU.

      This package requires either MSBuild 16.3 and .NET Desktop 4.7.2+ or .NET Core 2.1+

      $(RoslynPackageDescriptionDetails)
    </PackageDescription>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_GetFilesToPackage</TargetsForTfmSpecificContentInPackage>
    <!-- Remove NU5128 once https://github.com/NuGet/Home/issues/8583 is fixed -->
    <NoWarn>$(NoWarn);NU5100;NU5128</NoWarn>

    <_DependsOn Condition="'$(TargetFramework)' == 'net472'">InitializeDesktopCompilerArtifacts</_DependsOn>
    <_DependsOn Condition="'$(TargetFramework)' == 'netcoreapp3.1'">InitializeCoreClrCompilerArtifacts</_DependsOn>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Compilers\CSharp\csc\csc.csproj" PrivateAssets="All"/>
    <ProjectReference Include="..\..\Compilers\VisualBasic\vbc\vbc.csproj" PrivateAssets="All"/>
    <ProjectReference Include="..\..\Interactive\csi\csi.csproj" PrivateAssets="All"/>
    <ProjectReference Include="..\..\Compilers\Core\MSBuildTask\Microsoft.Build.Tasks.CodeAnalysis.csproj" PrivateAssets="All"/>
    <ProjectReference Include="..\..\Compilers\Server\VBCSCompiler\VBCSCompiler.csproj" PrivateAssets="All"/>

    <ProjectReference Update="@(ProjectReference)"
                      Targets="Publish"
                      ReferenceOutputAssembly="false"
                      SkipGetTargetFrameworkProperties="true"
                      Condition="'$(TargetFramework)' == 'netcoreapp3.1'"
                      SetTargetFramework="TargetFramework=netcoreapp3.1" />
  </ItemGroup>

  <Target Name="_GetFilesToPackage" DependsOnTargets="$(_DependsOn)">
    <ItemGroup>
      <_File Include="@(DesktopCompilerArtifact)" TargetDir="tasks/net472"/>
      <_File Include="@(DesktopCompilerResourceArtifact)" TargetDir="tasks/net472"/>
      <_File Include="@(CoreClrCompilerBuildArtifact)" TargetDir="tasks/netcoreapp3.1"/>
      <_File Include="@(CoreClrCompilerToolsArtifact)" TargetDir="tasks/netcoreapp3.1"/>
      <_File Include="@(CoreClrCompilerBinArtifact)" TargetDir="tasks/netcoreapp3.1/bincore"/>
      <_File Include="@(CoreClrCompilerBinRuntimesArtifact)" TargetDir="tasks/netcoreapp3.1/bincore/runtimes"/>
     
      <_File Include="$(MSBuildProjectDirectory)\build\**\*.*" Condition="'$(TargetFramework)' == 'net472'" TargetDir="build" />
     
      <TfmSpecificPackageFile Include="@(_File)" PackagePath="%(_File.TargetDir)/%(_File.RecursiveDir)%(_File.FileName)%(_File.Extension)" />
    </ItemGroup>
  </Target>

  <Import Project="DesktopCompilerArtifacts.targets" Condition="'$(TargetFramework)' == 'net472'" />
  <Import Project="CoreClrCompilerArtifacts.targets" Condition="'$(TargetFramework)' == 'netcoreapp3.1'" />
</Project>
