#nullable enable
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeEqualsByHashCodeParts(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData!, TAnalysisContext!, TAnalysisResult!, TAbstractAnalysisValue>! obj) -> bool
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeHashCodePartsSpecific(ref Analyzer.Utilities.RoslynHashCode hashCode) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.ValueDomain.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<TValue>!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T>.ComputeEqualsByHashCodeParts(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T!>! obj) -> bool
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T>.ComputeHashCodeParts(ref Analyzer.Utilities.RoslynHashCode hashCode) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetAbstractDefaultValue(Microsoft.CodeAnalysis.ITypeSymbol? type) -> TAbstractAnalysisValue
Analyzer.Utilities.AnalyzerOptionsExtensions
Analyzer.Utilities.DisposeAnalysisKind
Analyzer.Utilities.DisposeAnalysisKind.AllPaths = 0 -> Analyzer.Utilities.DisposeAnalysisKind
Analyzer.Utilities.DisposeAnalysisKind.AllPathsOnlyNotDisposed = 1 -> Analyzer.Utilities.DisposeAnalysisKind
Analyzer.Utilities.DisposeAnalysisKind.NonExceptionPaths = 2 -> Analyzer.Utilities.DisposeAnalysisKind
Analyzer.Utilities.DisposeAnalysisKind.NonExceptionPathsOnlyNotDisposed = 3 -> Analyzer.Utilities.DisposeAnalysisKind
Analyzer.Utilities.FlowAnalysis.Analysis.PropertySetAnalysis.HazardousUsageEvaluationResult
Analyzer.Utilities.FlowAnalysis.Analysis.PropertySetAnalysis.HazardousUsageEvaluationResult.Flagged = 2 -> Analyzer.Utilities.FlowAnalysis.Analysis.PropertySetAnalysis.HazardousUsageEvaluationResult
Analyzer.Utilities.FlowAnalysis.Analysis.PropertySetAnalysis.HazardousUsageEvaluationResult.MaybeFlagged = 1 -> Analyzer.Utilities.FlowAnalysis.Analysis.PropertySetAnalysis.HazardousUsageEvaluationResult
Analyzer.Utilities.FlowAnalysis.Analysis.PropertySetAnalysis.HazardousUsageEvaluationResult.Unflagged = 0 -> Analyzer.Utilities.FlowAnalysis.Analysis.PropertySetAnalysis.HazardousUsageEvaluationResult
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.Dll = 1 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.FilePathInjection = 4 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.HardcodedCertificate = 14 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.HardcodedEncryptionKey = 13 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.InformationDisclosure = 2 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.Ldap = 7 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.ProcessCommand = 5 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.Redirect = 8 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.Regex = 6 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.Sql = 0 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.Xaml = 11 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.Xml = 10 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.XPath = 9 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.Xss = 3 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind.ZipSlip = 12 -> Analyzer.Utilities.FlowAnalysis.Analysis.TaintedDataAnalysis.SinkKind
Analyzer.Utilities.Options.EnumValuesPrefixTrigger
Analyzer.Utilities.Options.EnumValuesPrefixTrigger.AllEnumValues = 1 -> Analyzer.Utilities.Options.EnumValuesPrefixTrigger
Analyzer.Utilities.Options.EnumValuesPrefixTrigger.AnyEnumValue = 0 -> Analyzer.Utilities.Options.EnumValuesPrefixTrigger
Analyzer.Utilities.Options.EnumValuesPrefixTrigger.Heuristic = 2 -> Analyzer.Utilities.Options.EnumValuesPrefixTrigger
Analyzer.Utilities.RoslynHashCode
Analyzer.Utilities.RoslynHashCode.Add<T>(T value) -> void
Analyzer.Utilities.RoslynHashCode.Add<T>(T value, System.Collections.Generic.IEqualityComparer<T>? comparer) -> void
Analyzer.Utilities.RoslynHashCode.RoslynHashCode() -> void
Analyzer.Utilities.RoslynHashCode.ToHashCode() -> int
Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.Abstract = 8 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.Async = 256 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.Const = 2 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.Extern = 128 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.None = 0 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.Override = 32 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.ReadOnly = 4 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.Sealed = 64 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.Shared = 1 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.Static = 1 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolModifiers.Virtual = 16 -> Analyzer.Utilities.SymbolModifiers
Analyzer.Utilities.SymbolNamesWithValueOption<TValue>
Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.Contains(Microsoft.CodeAnalysis.ISymbol! symbol) -> bool
Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.Equals(Analyzer.Utilities.SymbolNamesWithValueOption<TValue>? other) -> bool
Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.IsEmpty.get -> bool
Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.NameParts
Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.NameParts.AssociatedValue.get -> TValue
Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.NameParts.NameParts(string! symbolName, TValue associatedValue) -> void
Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.NameParts.SymbolName.get -> string!
Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.TryGetValue(Microsoft.CodeAnalysis.ISymbol! symbol, out TValue value) -> bool
Analyzer.Utilities.SymbolVisibilityGroup
Analyzer.Utilities.SymbolVisibilityGroup.All = Analyzer.Utilities.SymbolVisibilityGroup.Public | Analyzer.Utilities.SymbolVisibilityGroup.Friend | Analyzer.Utilities.SymbolVisibilityGroup.Private -> Analyzer.Utilities.SymbolVisibilityGroup
Analyzer.Utilities.SymbolVisibilityGroup.Friend = 2 -> Analyzer.Utilities.SymbolVisibilityGroup
Analyzer.Utilities.SymbolVisibilityGroup.Internal = 2 -> Analyzer.Utilities.SymbolVisibilityGroup
Analyzer.Utilities.SymbolVisibilityGroup.None = 0 -> Analyzer.Utilities.SymbolVisibilityGroup
Analyzer.Utilities.SymbolVisibilityGroup.Private = 4 -> Analyzer.Utilities.SymbolVisibilityGroup
Analyzer.Utilities.SymbolVisibilityGroup.Public = 1 -> Analyzer.Utilities.SymbolVisibilityGroup
Analyzer.Utilities.Unit
Analyzer.Utilities.Unit.Equals(Analyzer.Utilities.Unit other) -> bool
Analyzer.Utilities.Unit.Unit() -> void
Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData
Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.Children.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData!>
Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.CoupledNamedTypes.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.INamedTypeSymbol!>!
Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.CyclomaticComplexity.get -> int
Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.DepthOfInheritance.get -> int?
Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.ExecutableLines.get -> long
Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.MaintainabilityIndex.get -> int
Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.SourceLines.get -> long
Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.Symbol.get -> Microsoft.CodeAnalysis.ISymbol!
Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext.WellKnownTypeProvider.get -> Analyzer.Utilities.WellKnownTypeProvider!
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo.BranchValue.get -> Microsoft.CodeAnalysis.IOperation?
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo.ControlFlowConditionKind.get -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowConditionKind
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo.Destination.get -> Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock!
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo.EnteringRegions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegion!>
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo.FinallyRegions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegion!>
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo.Kind.get -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowBranchSemantics
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo.LeavingRegionFlowCaptures.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.FlowAnalysis.CaptureId>!
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo.LeavingRegionLocals.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ILocalSymbol!>!
Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo.LeavingRegions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegion!>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisData
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisData.AbstractAnalysisData() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisData.Dispose() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisData.IsDisposed.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisDomain<TAnalysisData>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisDomain<TAnalysisData>.AbstractAnalysisDomain() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractBlockAnalysisResult
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractBlockAnalysisResult.AbstractBlockAnalysisResult(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! basicBlock) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractBlockAnalysisResult.BasicBlock.get -> Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.EntityForInstanceLocation.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory.TryGetCopyValueForFlowCapture(Microsoft.CodeAnalysis.FlowAnalysis.CaptureId captureId, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue! copyValue) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.LambdaAndLocalFunctionAnalysisInfo.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.LambdaAndLocalFunctionAnalysisInfo!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StandaloneLocalFunctionAnalysisResultsMap.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.IMethodSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisResult<TAbstractAnalysisValue>!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StreamingContextNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TryGetPointsToAbstractValueAtEntryBlockEnd(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue? pointsToAbstractValue) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisResult<TAbstractAnalysisValue>.LambdaAndLocalFunctionAnalysisInfo.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.LambdaAndLocalFunctionAnalysisInfo!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.InterproceduralAnalysisConfiguration() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.InterproceduralAnalysisData(TAnalysisData? initialAnalysisData, (Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity?, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!)? invocationInstance, (Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!)? thisOrMeInstanceForCaller, System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.IParameterSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>!>! argumentValuesMap, System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.ISymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>! capturedVariablesMap, System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>! addressSharedEntities, System.Collections.Immutable.ImmutableStack<Microsoft.CodeAnalysis.IOperation!>! callStack, System.Collections.Immutable.ImmutableHashSet<TAnalysisContext!>! methodsBeingAnalyzed, System.Func<Microsoft.CodeAnalysis.IOperation!, TAbstractAnalysisValue>! getCachedAbstractValueFromCaller, System.Func<Microsoft.CodeAnalysis.IMethodSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph?>! getInterproceduralControlFlowGraph, System.Func<Microsoft.CodeAnalysis.IOperation!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity?>! getAnalysisEntityForFlowCapture, System.Func<Microsoft.CodeAnalysis.ISymbol!, System.Collections.Immutable.ImmutableStack<Microsoft.CodeAnalysis.IOperation!>?>! getInterproceduralCallStackForOwningSymbol) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId.InterproceduralCaptureId() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.LambdaAndLocalFunctionAnalysisInfo
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.LambdaAndLocalFunctionAnalysisInfo.AnalyzedLambdas.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.IFlowAnonymousFunctionOperation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.LambdaAndLocalFunctionAnalysisInfo.AnalyzedLocalFunctions.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.IMethodSymbol!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.LambdaAndLocalFunctionAnalysisInfo.EscapedLambdas.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.IFlowAnonymousFunctionOperation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.LambdaAndLocalFunctionAnalysisInfo.EscapedLocalFunctions.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.IMethodSymbol!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisContext.AdditionalSupportedValueTypes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol!>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisContext.GetValueForAdditionalSupportedValueTypeOperation.get -> System.Func<Microsoft.CodeAnalysis.IOperation!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>?
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ForkForInterproceduralAnalysis(Microsoft.CodeAnalysis.IMethodSymbol! invokedMethod, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! invokedCfg, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? valueContentAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData!, TAnalysisContext!, TAbstractAnalysisValue>? interproceduralAnalysisData) -> TAnalysisContext!
override Analyzer.Utilities.RoslynHashCode.Equals(object? obj) -> bool
override Analyzer.Utilities.RoslynHashCode.GetHashCode() -> int
override Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.Equals(object? obj) -> bool
override Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.GetHashCode() -> int
override Analyzer.Utilities.Unit.Equals(object? obj) -> bool
override Analyzer.Utilities.Unit.GetHashCode() -> int
override Analyzer.Utilities.Unit.ToString() -> string!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisContext.ForkForInterproceduralAnalysis(Microsoft.CodeAnalysis.IMethodSymbol! invokedMethod, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! invokedCfg, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? valueContentAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisData!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisContext!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? interproceduralAnalysisData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisContext!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.Visit(Microsoft.CodeAnalysis.IOperation? operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitDelegateCreation(Microsoft.CodeAnalysis.Operations.IDelegateCreationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysisContext.ForkForInterproceduralAnalysis(Microsoft.CodeAnalysis.IMethodSymbol! invokedMethod, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! invokedCfg, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? valueContentAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue!>!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysisContext!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue!>? interproceduralAnalysisData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysisContext!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisContext.ForkForInterproceduralAnalysis(Microsoft.CodeAnalysis.IMethodSymbol! invokedMethod, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! invokedCfg, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? valueContentAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisData!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisContext!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>? interproceduralAnalysisData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisContext!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisContext.ForkForInterproceduralAnalysis(Microsoft.CodeAnalysis.IMethodSymbol! invokedMethod, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! invokedCfg, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? valueContentAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisData!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisContext!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? interproceduralAnalysisData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisContext!
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeEqualsByHashCodeParts(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<TAnalysisContext!>! obj) -> bool
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeHashCodeParts(ref Analyzer.Utilities.RoslynHashCode hashCode) -> void
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetAdditionalRequiredGenericInterfaces(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation) -> Analyzer.Utilities.SymbolNamesWithValueOption<Microsoft.CodeAnalysis.INamedTypeSymbol?>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetAdditionalRequiredSuffixesOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation) -> Analyzer.Utilities.SymbolNamesWithValueOption<string?>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetAdditionalStringFormattingMethodsOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation) -> Analyzer.Utilities.SymbolNamesWithValueOption<Analyzer.Utilities.Unit>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetAdditionalUseResultsMethodsOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation) -> Analyzer.Utilities.SymbolNamesWithValueOption<Analyzer.Utilities.Unit>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetAnalyzedSymbolKindsOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.SymbolKind>! defaultSymbolKinds) -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.SymbolKind>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetBoolOptionValue(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, string! optionName, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, bool defaultValue) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetBoolOptionValue(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, string! optionName, Microsoft.CodeAnalysis.DiagnosticDescriptor? rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, bool defaultValue) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetCopyAnalysisOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, bool defaultValue) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetCopyAnalysisOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, bool defaultValue) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetDisallowedSymbolNamesWithValueOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation) -> Analyzer.Utilities.SymbolNamesWithValueOption<Analyzer.Utilities.Unit>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetDisposeAnalysisKindOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, Analyzer.Utilities.DisposeAnalysisKind defaultValue) -> Analyzer.Utilities.DisposeAnalysisKind
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetDisposeAnalysisKindOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, Analyzer.Utilities.DisposeAnalysisKind defaultValue) -> Analyzer.Utilities.DisposeAnalysisKind
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetDisposeOwnershipTransferAtConstructorOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, bool defaultValue) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetDisposeOwnershipTransferAtConstructorOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, bool defaultValue) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetDisposeOwnershipTransferAtMethodCall(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, bool defaultValue) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetDisposeOwnershipTransferAtMethodCall(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, bool defaultValue) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetEnumerationMethodsOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation) -> Analyzer.Utilities.SymbolNamesWithValueOption<Analyzer.Utilities.Unit>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetEnumValuesPrefixTriggerOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, Analyzer.Utilities.Options.EnumValuesPrefixTrigger defaultValue) -> Analyzer.Utilities.Options.EnumValuesPrefixTrigger
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetInheritanceExcludedSymbolNamesOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, string! defaultForcedValue) -> Analyzer.Utilities.SymbolNamesWithValueOption<Analyzer.Utilities.Unit>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetInterproceduralAnalysisKindOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind defaultValue) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetInterproceduralAnalysisKindOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind defaultValue) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetLinqChainMethodsOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation) -> Analyzer.Utilities.SymbolNamesWithValueOption<Analyzer.Utilities.Unit>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetMSBuildItemMetadataValues(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, string! itemOptionName, Microsoft.CodeAnalysis.Compilation! compilation) -> System.Collections.Immutable.ImmutableArray<string!>
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetMSBuildPropertyValue(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, string! optionName, Microsoft.CodeAnalysis.Compilation! compilation) -> string?
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetNullCheckValidationMethodsOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation) -> Analyzer.Utilities.SymbolNamesWithValueOption<Analyzer.Utilities.Unit>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetOutputKindsOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation) -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.OutputKind>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetOutputKindsOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.OutputKind>! defaultValue) -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.OutputKind>!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetPointsToAnalysisKindOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind defaultValue) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetPointsToAnalysisKindOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind defaultValue) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetStringOptionValue(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, string! optionName, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation) -> string!
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetSymbolVisibilityGroupOption(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, Analyzer.Utilities.SymbolVisibilityGroup defaultValue) -> Analyzer.Utilities.SymbolVisibilityGroup
static Analyzer.Utilities.AnalyzerOptionsExtensions.GetUnsignedIntegralOptionValue(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, string! optionName, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Compilation! compilation, uint defaultValue) -> uint
static Analyzer.Utilities.AnalyzerOptionsExtensions.IsConfiguredToSkipAnalysis(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.IsConfiguredToSkipAnalysis(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.ISymbol! containingContextSymbol, Microsoft.CodeAnalysis.Compilation! compilation) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.MatchesConfiguredModifiers(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, Analyzer.Utilities.SymbolModifiers defaultRequiredModifiers = Analyzer.Utilities.SymbolModifiers.None) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.MatchesConfiguredVisibility(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, Analyzer.Utilities.SymbolVisibilityGroup defaultRequiredVisibility = Analyzer.Utilities.SymbolVisibilityGroup.Public) -> bool
static Analyzer.Utilities.AnalyzerOptionsExtensions.MatchesConfiguredVisibility(this Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! options, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.ISymbol! containingContextSymbol, Microsoft.CodeAnalysis.Compilation! compilation, Analyzer.Utilities.SymbolVisibilityGroup defaultRequiredVisibility = Analyzer.Utilities.SymbolVisibilityGroup.Public) -> bool
static Analyzer.Utilities.RoslynHashCode.Combine<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8) -> int
static Analyzer.Utilities.RoslynHashCode.Combine<T1, T2, T3, T4, T5, T6, T7>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7) -> int
static Analyzer.Utilities.RoslynHashCode.Combine<T1, T2, T3, T4, T5, T6>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6) -> int
static Analyzer.Utilities.RoslynHashCode.Combine<T1, T2, T3, T4, T5>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5) -> int
static Analyzer.Utilities.RoslynHashCode.Combine<T1, T2, T3, T4>(T1 value1, T2 value2, T3 value3, T4 value4) -> int
static Analyzer.Utilities.RoslynHashCode.Combine<T1, T2, T3>(T1 value1, T2 value2, T3 value3) -> int
static Analyzer.Utilities.RoslynHashCode.Combine<T1, T2>(T1 value1, T2 value2) -> int
static Analyzer.Utilities.RoslynHashCode.Combine<T1>(T1 value1) -> int
static Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.Create(System.Collections.Immutable.ImmutableArray<string!> symbolNames, Microsoft.CodeAnalysis.Compilation! compilation, string? optionalPrefix, System.Func<string!, Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.NameParts!>! getSymbolNamePartsFunc) -> Analyzer.Utilities.SymbolNamesWithValueOption<TValue>!
static Analyzer.Utilities.Unit.Default.get -> Analyzer.Utilities.Unit
static Analyzer.Utilities.Unit.operator !=(Analyzer.Utilities.Unit first, Analyzer.Utilities.Unit second) -> bool
static Analyzer.Utilities.Unit.operator ==(Analyzer.Utilities.Unit first, Analyzer.Utilities.Unit second) -> bool
static Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.ComputeSynchronously(Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext! context) -> Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData!
static Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.ComputeSynchronously(Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext! context) -> Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.Create(Microsoft.CodeAnalysis.ISymbol? symbol, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex!> indices, Microsoft.CodeAnalysis.ITypeSymbol! type, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! instanceLocation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? parent, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? entityForInstanceLocation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysis.TryGetOrComputeResult(Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! cfg, Microsoft.CodeAnalysis.ISymbol! owningSymbol, Analyzer.Utilities.WellKnownTypeProvider! wellKnownTypeProvider, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! analyzerOptions, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.INamedTypeSymbol!>! disposeOwnershipTransferLikelyTypes, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind defaultPointsToAnalysisKind, bool trackInstanceFields, bool exceptionPathsAnalysis, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind interproceduralAnalysisKind = Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind.ContextSensitive, bool performCopyAnalysisIfNotUserConfigured = false, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate? interproceduralAnalysisPredicate = null, bool defaultDisposeOwnershipTransferAtConstructor = false, bool defaultDisposeOwnershipTransferAtMethodCall = false) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysisResult?
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.Create(Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! analyzerOptions, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! cfg, Microsoft.CodeAnalysis.Compilation! compilation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind defaultInterproceduralAnalysisKind, uint defaultMaxInterproceduralMethodCallChain = 3, uint defaultMaxInterproceduralLambdaOrLocalFunctionCallChain = 3) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.Create(Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! analyzerOptions, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.DiagnosticDescriptor!> rules, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! cfg, Microsoft.CodeAnalysis.Compilation! compilation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind defaultInterproceduralAnalysisKind, uint defaultMaxInterproceduralMethodCallChain = 3, uint defaultMaxInterproceduralLambdaOrLocalFunctionCallChain = 3) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysis.TryGetOrComputeResult(Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! cfg, Microsoft.CodeAnalysis.ISymbol! owningSymbol, Analyzer.Utilities.WellKnownTypeProvider! wellKnownTypeProvider, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! analyzerOptions, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind defaultPointsToAnalysisKind, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind interproceduralAnalysisKind = Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind.None, bool pessimisticAnalysis = true) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>?
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysis.TryGetOrComputeResult(Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! cfg, Microsoft.CodeAnalysis.ISymbol! owningSymbol, Analyzer.Utilities.WellKnownTypeProvider! wellKnownTypeProvider, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! analyzerOptions, Microsoft.CodeAnalysis.DiagnosticDescriptor! rule, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind defaultPointsToAnalysisKind, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyAnalysisResult, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind interproceduralAnalysisKind = Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind.None, bool pessimisticAnalysis = true, bool performCopyAnalysisIfNotUserConfigured = false, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate? interproceduralAnalysisPredicate = null, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol!> additionalSupportedValueTypes = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol!>), System.Func<Microsoft.CodeAnalysis.IOperation!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? getValueContentValueForAdditionalSupportedValueTypeOperation = null) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.AbstractDataFlowAnalysisContext(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<TAbstractAnalysisValue>! valueDomain, Analyzer.Utilities.WellKnownTypeProvider! wellKnownTypeProvider, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! controlFlowGraph, Microsoft.CodeAnalysis.ISymbol! owningSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! analyzerOptions, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, bool pessimisticAnalysis, bool predicateAnalysis, bool exceptionPathsAnalysis, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? valueContentAnalysisResult, System.Func<TAnalysisContext!, TAnalysisResult?>! tryGetOrComputeAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph? parentControlFlowGraph, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData!, TAnalysisContext!, TAbstractAnalysisValue>? interproceduralAnalysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate? interproceduralAnalysisPredicate) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.AnalyzerOptions.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ControlFlowGraph.get -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.CopyAnalysisResult.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ExceptionPathsAnalysis.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetAnonymousFunctionControlFlowGraph(Microsoft.CodeAnalysis.FlowAnalysis.IFlowAnonymousFunctionOperation! lambda) -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetLocalFunctionControlFlowGraph(Microsoft.CodeAnalysis.IMethodSymbol! localFunction) -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TryGetOrComputeAnalysisResult.get -> System.Func<TAnalysisContext!, TAnalysisResult?>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.InterproceduralAnalysisConfiguration.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.InterproceduralAnalysisData.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData!, TAnalysisContext!, TAbstractAnalysisValue>?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.InterproceduralAnalysisPredicate.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.OwningSymbol.get -> Microsoft.CodeAnalysis.ISymbol!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ParentControlFlowGraph.get -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.PessimisticAnalysis.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.PointsToAnalysisResult.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ValueContentAnalysisResult.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.PredicateAnalysis.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ValueDomain.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<TAbstractAnalysisValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.WellKnownTypeProvider.get -> Analyzer.Utilities.WellKnownTypeProvider!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDomain<T>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDomain<T>.AbstractDomain() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDomain<T>.Compare(T oldValue, T newValue) -> int
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDomain<T>.Equals(T value1, T value2) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex.AbstractIndex() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.AnalysisEntity.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.CaptureId.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.CreationCallStack.get -> System.Collections.Immutable.ImmutableStack<Microsoft.CodeAnalysis.IOperation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.Creation.get -> Microsoft.CodeAnalysis.IOperation?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.GetTopOfCreationCallStackOrCreation() -> Microsoft.CodeAnalysis.IOperation?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.IsAnalysisEntityDefaultLocation.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.IsNoLocation.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.IsNull.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.LocationType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.Symbol.get -> Microsoft.CodeAnalysis.ISymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.TryGetNodeToReportDiagnostic(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult) -> Microsoft.CodeAnalysis.SyntaxNode?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.AbstractLocationDataFlowOperationVisitor(TAnalysisContext! analysisContext) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyMissingCurrentAnalysisDataForUnhandledExceptionData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!, TAbstractAnalysisValue>! coreDataAtException, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!, TAbstractAnalysisValue>! coreCurrentAnalysisData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!, TAbstractAnalysisValue>! currentAnalysisData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! instanceLocation, TAbstractAnalysisValue value) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValue(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!>! locations, TAbstractAnalysisValue value) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<T>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<T>.AbstractValueDomain() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.CaptureId.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.EqualsIgnoringInstanceLocation(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? other) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.EqualsIgnoringInstanceLocationId.get -> int
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.HasAncestor(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! ancestor) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.HasConstantValue.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.HasUnknownInstanceLocation.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.Indices.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex!>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.InstanceLocation.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.InstanceReferenceOperationSyntax.get -> Microsoft.CodeAnalysis.SyntaxNode?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.IsChildOrInstanceMember.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.IsLValueFlowCaptureEntity.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.IsThisOrMeInstance.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.Parent.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.Symbol.get -> Microsoft.CodeAnalysis.ISymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.Type.get -> Microsoft.CodeAnalysis.ITypeSymbol!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.WithMergedInstanceLocation(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntityToMerge) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.AddTrackedEntities(System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!>! builder) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.AnalysisEntityBasedPredicateAnalysisData() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.AnalysisEntityBasedPredicateAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>! data1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>! data2, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! coreDataAnalysisDomain) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.AnalysisEntityBasedPredicateAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>! fromData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.AnalysisEntityBasedPredicateAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! mergedCoreAnalysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! predicatedData1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! predicatedData2, bool isReachableData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! coreDataAnalysisDomain) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.AnalysisEntityBasedPredicateAnalysisData(System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! fromData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.ApplyPredicatedDataForEntity(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity, bool trueData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.BaseCompareHelper(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>! newData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! coreDataAnalysisDomain) -> int
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.CoreAnalysisData.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.Equals(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>! other) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.HasAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.RemoveEntries(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! key) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.StartTrackingPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>? truePredicateData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>? falsePredicateData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.TryGetValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! key, out TValue value) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.this[Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! key].get -> TValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.AddTrackedEntities(System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!>! builder, bool forInterproceduralAnalysis = false) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.AnalysisEntityDataFlowOperationVisitor(TAnalysisContext! analysisContext) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyInterproceduralAnalysisResultHelper(System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TAbstractAnalysisValue>! resultToApply) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyMissingCurrentAnalysisDataForUnhandledExceptionData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TAbstractAnalysisValue>! coreDataAtException, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TAbstractAnalysisValue>! coreCurrentAnalysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ThrownExceptionInfo! throwBranchWithExceptionType) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetChildAnalysisEntities(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue? instanceLocation) -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetClonedAnalysisDataHelper(System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TAbstractAnalysisValue>! analysisData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TAbstractAnalysisValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetTrimmedCurrentAnalysisDataHelper(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!>! withEntities, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TAbstractAnalysisValue>! existingValues, System.Action<TAnalysisData!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TAbstractAnalysisValue>! setAbstractValue) -> TAnalysisData!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TAbstractAnalysisValue>! currentAnalysisData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory.CreateWithNewInstanceRoot(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! newRootInstance) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory.ThisOrMeInstance.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory.TryCreate(Microsoft.CodeAnalysis.IOperation! operation, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? analysisEntity) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory.TryCreateForArrayElementInitializer(Microsoft.CodeAnalysis.Operations.IArrayCreationOperation! arrayCreation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex!> indices, Microsoft.CodeAnalysis.ITypeSymbol! elementType, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? analysisEntity) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory.TryCreateForSymbolDeclaration(Microsoft.CodeAnalysis.ISymbol! symbol, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? analysisEntity) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory.TryCreateForTupleElements(Microsoft.CodeAnalysis.Operations.ITupleOperation! tupleOperation, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!> elementEntities) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory.TryGetForFlowCapture(Microsoft.CodeAnalysis.FlowAnalysis.CaptureId captureId, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory.TryGetForInterproceduralAnalysis(Microsoft.CodeAnalysis.IOperation! operation, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? analysisEntity) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityMapAbstractDomain<TValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityMapAbstractDomain<TValue>.AnalysisEntityMapAbstractDomain(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<TValue>! valueDomain, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult? pointsToAnalysisResult) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>.AnalysisEntity.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>.ArgumentInfo(Microsoft.CodeAnalysis.IOperation! operation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? analysisEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! instanceLocation, TAbstractAnalysisValue value) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>.InstanceLocation.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>.Operation.get -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>.Value.get -> TAbstractAnalysisValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T>.CacheBasedEquatable() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T>.Equals(T? other) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue.AnalysisEntities.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue.Kind.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind.Invalid = 4 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind.KnownReferenceCopy = 1 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind.KnownValueCopy = 2 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind.NotApplicable = 0 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind.Unknown = 3 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysis
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisContext
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisData
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult.Data.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult.IsReachable.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>.AnalysisDomain.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisDomain<TAnalysisData!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>.DataFlowAnalysis(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisDomain<TAnalysisData!>! analysisDomain, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData!, TAnalysisContext!, TAnalysisResult!, TAbstractAnalysisValue>! operationVisitor) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>.TryGetOrComputeResultCore(TAnalysisContext! analysisContext, bool cacheResult) -> TAnalysisResult?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>.OperationVisitor.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData!, TAnalysisContext!, TAnalysisResult!, TAbstractAnalysisValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.ControlFlowGraph.get -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.DataFlowAnalysisResult(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult!, TAbstractAnalysisValue>! other) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.EntryBlockOutput.get -> TBlockAnalysisResult!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.ExceptionPathsExitBlockOutput.get -> TBlockAnalysisResult?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.ExitBlockOutput.get -> TBlockAnalysisResult!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.GetPredicateKind(Microsoft.CodeAnalysis.IOperation! operation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.MergedStateForUnhandledThrowOperations.get -> TBlockAnalysisResult?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.ReturnValueAndPredicateKind.get -> (TAbstractAnalysisValue Value, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind PredicateValueKind)?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.this[Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! block].get -> TBlockAnalysisResult!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.this[Microsoft.CodeAnalysis.IOperation! operation].get -> TAbstractAnalysisValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult, TAbstractAnalysisValue>.this[Microsoft.CodeAnalysis.OperationKind operationKind, Microsoft.CodeAnalysis.SyntaxNode! syntax].get -> TAbstractAnalysisValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.AnalysisEntityFactory.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityFactory!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyMissingCurrentAnalysisDataForUnhandledExceptionData<TKey>(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TAbstractAnalysisValue>! coreDataAtException, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TAbstractAnalysisValue>! coreCurrentAnalysisData, System.Func<TKey, bool>? predicate) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.CacheAbstractValue(Microsoft.CodeAnalysis.IOperation! operation, TAbstractAnalysisValue value) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.CurrentAnalysisData.get -> TAnalysisData!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.CurrentBasicBlock.get -> Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.DataFlowAnalysisContext.get -> TAnalysisContext!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.DataFlowOperationVisitor(TAnalysisContext! analysisContext) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.FlowBranchConditionKind.get -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowConditionKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetCachedAbstractValue(Microsoft.CodeAnalysis.IOperation! operation) -> TAbstractAnalysisValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetClonedCurrentAnalysisData() -> TAnalysisData!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetDefaultCopyValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetEscapedLocations(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! parameterEntity) -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetEscapedLocations(Microsoft.CodeAnalysis.IOperation! operation) -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetNullAbstractValue(Microsoft.CodeAnalysis.IOperation! operation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.HasCompletePointsToAnalysisResult.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsAnyAssertMethod(Microsoft.CodeAnalysis.IMethodSymbol! method) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsLValueFlowCapture(Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureOperation! flowCapture) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsLValueFlowCaptureReference(Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureReferenceOperation! flowCaptureReference) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.MergeAnalysisData(TAnalysisData! value1, TAnalysisData! value2, Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! forBlock, bool forBackEdge) -> TAnalysisData!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.OnStartBlockAnalysis(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! block, TAnalysisData! input) -> TAnalysisData!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TryGetOrComputeAnalysisResult.get -> System.Func<TAnalysisContext!, TAnalysisResult?>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.HasPointsToAnalysisResult.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.InterproceduralResultsMap.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.IOperation!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisResult<TAbstractAnalysisValue>!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsCurrentBlockReachable() -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsInsideAnonymousObjectInitializer.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsParameterEntityForCurrentMethod(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.OnEndBlockAnalysis(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! block, TAnalysisData! analysisData) -> TAnalysisData!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.OnLeavingRegions(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ILocalSymbol!>! leavingRegionLocals, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.FlowAnalysis.CaptureId>! leavingRegionFlowCaptures, Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! currentBasicBlock, TAnalysisData! input) -> TAnalysisData!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.OwningSymbol.get -> Microsoft.CodeAnalysis.ISymbol!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.PessimisticAnalysis.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.PredicateAnalysis.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ThisOrMePointsToAbstractValue.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TryGetAddressSharedCopyValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TryGetInterproceduralAnalysisResult(Microsoft.CodeAnalysis.IOperation! operation, out TAnalysisResult? analysisResult) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TryGetMergedNullAbstractValueAtUnhandledThrowOperationsInGraph(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue nullAbstractValue) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TryGetNullAbstractValueAtCurrentBlockEntry(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue nullAbstractValue) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.UpdateValuesForAnalysisData<TKey>(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TAbstractAnalysisValue>! targetAnalysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TAbstractAnalysisValue>! newAnalysisData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ValueDomain.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<TAbstractAnalysisValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitArray(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.IOperation!>! operations, object? argument) -> TAbstractAnalysisValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.WellKnownTypeProvider.get -> Analyzer.Utilities.WellKnownTypeProvider!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ExceptionNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TaskNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.MemoryStreamNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.InterlockedNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ContractNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IDisposableNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GenericIEquatableNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SerializationInfoNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.MonitorNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GenericTaskNamedType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StringReaderType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.CollectionNamedTypes.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.INamedTypeSymbol!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> item) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.Add(TKey key, TValue value) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.Clear() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> item) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.ContainsKey(TKey key) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[]! array, int arrayIndex) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.Count.get -> int
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.DictionaryAnalysisData() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.DictionaryAnalysisData(System.Collections.Generic.IDictionary<TKey, TValue>! initializer) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.IsReadOnly.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.Keys.get -> System.Collections.Generic.ICollection<TKey>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> item) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.Remove(TKey key) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.ToImmutableDictionary() -> System.Collections.Immutable.ImmutableDictionary<TKey, TValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.TryGetValue(TKey key, out TValue value) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.Values.get -> System.Collections.Generic.ICollection<TValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.this[TKey key].get -> TValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>.this[TKey key].set -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue.DisposingOrEscapingOperations.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.IOperation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue.Kind.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind.Disposed = 5 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind.Escaped = 3 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind.Invalid = 1 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind.MaybeDisposed = 6 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind.NotDisposable = 0 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind.NotDisposed = 2 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind.NotDisposedOrEscaped = 4 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind.Unknown = 7 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysis
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysisContext
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysisResult
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysisResult.TrackedInstanceFieldPointsToMap.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.IFieldSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeBlockAnalysisResult
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeBlockAnalysisResult.Data.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ForwardDataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ForwardDataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>.ForwardDataFlowAnalysis(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisDomain<TAnalysisData!>! analysisDomain, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData!, TAnalysisContext!, TAnalysisResult!, TAbstractAnalysisValue>! operationVisitor) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisContext
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisContext.ControlFlowGraph.get -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisContext.GetAnonymousFunctionControlFlowGraph(Microsoft.CodeAnalysis.FlowAnalysis.IFlowAnonymousFunctionOperation! lambda) -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisContext.GetLocalFunctionControlFlowGraph(Microsoft.CodeAnalysis.IMethodSymbol! localFunction) -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisContext.OwningSymbol.get -> Microsoft.CodeAnalysis.ISymbol!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisResult<TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisResult<TAbstractAnalysisValue>.AnalysisDataForUnhandledThrowOperations.get -> object?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisResult<TAbstractAnalysisValue>.ControlFlowGraph.get -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisResult<TAbstractAnalysisValue>.ReturnValueAndPredicateKind.get -> (TAbstractAnalysisValue Value, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind PredicateValueKind)?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisResult<TAbstractAnalysisValue>.TaskWrappedValuesMap.get -> object?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.Equals(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration other) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.InterproceduralAnalysisKind.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.MaxInterproceduralLambdaOrLocalFunctionCallChain.get -> uint
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.MaxInterproceduralMethodCallChain.get -> uint
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.AddressSharedEntities.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.ArgumentValuesMap.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.IParameterSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.CallStack.get -> System.Collections.Immutable.ImmutableStack<Microsoft.CodeAnalysis.IOperation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.CapturedVariablesMap.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.ISymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.GetAnalysisEntityForFlowCapture.get -> System.Func<Microsoft.CodeAnalysis.IOperation!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity?>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.GetCachedAbstractValueFromCaller.get -> System.Func<Microsoft.CodeAnalysis.IOperation!, TAbstractAnalysisValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.GetInterproceduralCallStackForOwningSymbol.get -> System.Func<Microsoft.CodeAnalysis.ISymbol!, System.Collections.Immutable.ImmutableStack<Microsoft.CodeAnalysis.IOperation!>?>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.GetInterproceduralControlFlowGraph.get -> System.Func<Microsoft.CodeAnalysis.IMethodSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph?>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.InitialAnalysisData.get -> TAnalysisData?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.InvocationInstance.get -> (Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? Instance, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! PointsToValue)?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.MethodsBeingAnalyzed.get -> System.Collections.Immutable.ImmutableHashSet<TAnalysisContext!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisData<TAnalysisData, TAnalysisContext, TAbstractAnalysisValue>.ThisOrMeInstanceForCaller.get -> (Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! Instance, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! PointsToValue)?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind.ContextSensitive = 1 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind.None = 0 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate.InterproceduralAnalysisPredicate(System.Func<Microsoft.CodeAnalysis.IMethodSymbol!, bool>? skipAnalysisForInvokedMethodPredicate, System.Func<Microsoft.CodeAnalysis.IMethodSymbol!, bool>? skipAnalysisForInvokedLambdaOrLocalFunctionPredicate, System.Func<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisContext!, bool>? skipAnalysisForInvokedContextPredicate) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate.SkipInterproceduralAnalysis(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.IDataFlowAnalysisContext! interproceduralAnalysisContext) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate.SkipInterproceduralAnalysis(Microsoft.CodeAnalysis.IMethodSymbol! invokedMethod, bool isLambdaOrLocalFunction) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId.ControlFlowGraph.get -> Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId.Equals(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId other) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId.Id.get -> Microsoft.CodeAnalysis.FlowAnalysis.CaptureId
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId.IsLValueFlowCapture.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<TKey, TValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<TKey, TValue>.MapAbstractDomain(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<TValue>! valueDomain) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<TKey, TValue>.ValueDomain.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<TValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue.Invalid = 0 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue.MaybeNull = 4 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue.NotNull = 3 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue.Null = 2 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue.Undefined = 1 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.Kind.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.LValueCapturedOperations.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.IOperation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.Locations.get -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.NullState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.NullAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind.Invalid = 0 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind.KnownLValueCaptures = 3 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind.KnownLocations = 2 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind.Undefined = 1 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind.Unknown = 6 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind.UnknownNotNull = 5 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind.UnknownNull = 4 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisContext
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisContext.PointsToAnalysisKind.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisData
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind.Complete = 2 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind.None = 0 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind.PartialWithoutTrackingFieldsAndProperties = 1 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult.GetEscapedAbstractLocations(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult.GetEscapedAbstractLocations(Microsoft.CodeAnalysis.IOperation! operation) -> System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult.PointsToAnalysisKind.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToBlockAnalysisResult
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToBlockAnalysisResult.Data.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToBlockAnalysisResult.IsReachable.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.PredicateAnalysisEntityDataFlowOperationVisitor(TAnalysisContext! analysisContext) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind.AlwaysFalse = 1 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind.AlwaysTrue = 0 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind.Unknown = 2 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.ApplyPredicatedDataForEntity(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! coreAnalysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity, bool trueData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.AssertValidPredicatedAnalysisData(System.Action<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>!>! assertValidAnalysisData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.BaseCompareHelper(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>! newData) -> int
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.Equals(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>! other) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.HasPredicatedData.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.HasPredicatedDataForEntity(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.IsReachableBlockData.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.IsReachableBlockData.set -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PerEntityPredicatedAnalysisData
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PerEntityPredicatedAnalysisData.Dispose() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PerEntityPredicatedAnalysisData.FalsePredicatedData.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PerEntityPredicatedAnalysisData.PerEntityPredicatedAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>? truePredicatedData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>? falsePredicatedData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PerEntityPredicatedAnalysisData.PerEntityPredicatedAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PerEntityPredicatedAnalysisData! fromData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PerEntityPredicatedAnalysisData.TruePredicatedData.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>?
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PredicatedAnalysisData() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PredicatedAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>! fromData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.PredicatedAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>! predicatedData1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>! predicatedData2, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! coreAnalysisData1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! coreAnalysisData2, bool isReachableData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<TKey, TValue>! coreDataAnalysisDomain) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.RemoveEntriesInPredicatedData(TKey key) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.ResetPredicatedData() -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.StartTrackingPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>? truePredicatedData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>? falsePredicatedData) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.StopTrackingPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.TransferPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! fromEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! toEntity) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisDataDomain<TAnalysisData, TValue>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisDataDomain<TAnalysisData, TValue>.CoreDataAnalysisDomain.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisDataDomain<TAnalysisData, TValue>.PredicatedAnalysisDataDomain(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! coreDataAnalysisDomain) -> void
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.SetAbstractDomain<T>
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.SetAbstractDomain<T>.Intersect(System.Collections.Immutable.ImmutableHashSet<T>! value1, System.Collections.Immutable.ImmutableHashSet<T>! value2) -> System.Collections.Immutable.ImmutableHashSet<T>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ThrownExceptionInfo
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ThrownExceptionInfo.Equals(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ThrownExceptionInfo? other) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState.Invalid = 0 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState.Maybe = 3 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState.No = 2 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState.Undefined = 1 -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.IsLiteralState.get -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.TryGetSingleNonNullLiteral<T>(out T literalValue) -> bool
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.LiteralValues.get -> System.Collections.Immutable.ImmutableHashSet<object?>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.NonLiteralState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContainsNonLiteralState
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysis
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisContext
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisData
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult.Data.get -> System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>!
Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentBlockAnalysisResult.IsReachable.get -> bool
Microsoft.CodeAnalysis.RulesetToEditorconfig.Converter
Analyzer.Utilities.WellKnownTypeProvider
Analyzer.Utilities.WellKnownTypeProvider.Compilation.get -> Microsoft.CodeAnalysis.Compilation!
Analyzer.Utilities.WellKnownTypeProvider.TryGetOrCreateTypeByMetadataName(string! fullTypeName, out Microsoft.CodeAnalysis.INamedTypeSymbol? namedTypeSymbol) -> bool
Analyzer.Utilities.WellKnownTypeProvider.GetOrCreateTypeByMetadataName(string! fullTypeName) -> Microsoft.CodeAnalysis.INamedTypeSymbol?
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisDomain<TAnalysisData>.Clone(TAnalysisData! value) -> TAnalysisData!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisDomain<TAnalysisData>.Compare(TAnalysisData! oldValue, TAnalysisData! newValue) -> int
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisDomain<TAnalysisData>.Equals(TAnalysisData! value1, TAnalysisData! value2) -> bool
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisDomain<TAnalysisData>.Merge(TAnalysisData! value1, TAnalysisData! value2) -> TAnalysisData!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDomain<T>.Bottom.get -> T
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDomain<T>.Compare(T oldValue, T newValue, bool assertMonotonicity) -> int
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDomain<T>.Merge(T value1, T value2) -> T
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.EscapeValueForParameterPointsToLocationOnExit(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!>! escapedLocations) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation! location) -> TAbstractAnalysisValue
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation! location, TAbstractAnalysisValue value) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetValueForParameterPointsToLocationOnEntry(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! pointsToAbstractValue) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StopTrackingAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation! location) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractValueDomain<T>.UnknownOrMayBeValue.get -> T
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.Clone() -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.Compare(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>! other, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! coreDataAnalysisDomain) -> int
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.WithMergedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>! data, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! coreDataAnalysisDomain) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.AddTrackedEntities(TAnalysisData! analysisData, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!>! builder, bool forInterproceduralAnalysis = false) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyInterproceduralAnalysisResultCore(TAnalysisData! resultData) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> TAbstractAnalysisValue
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetTrimmedCurrentAnalysisData(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!>! withEntities) -> TAnalysisData!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.HasAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> bool
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, TAbstractAnalysisValue value) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StopTrackingEntity(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, TAnalysisData! analysisData) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityMapAbstractDomain<TValue>.AssertValidEntryForMergedMap(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, TValue value) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityMapAbstractDomain<TValue>.CanSkipNewEntry(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, TValue value) -> bool
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityMapAbstractDomain<TValue>.GetDefaultValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> TValue
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>.ToBlockResult(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! basicBlock, TAnalysisData! blockAnalysisData) -> TBlockAnalysisResult!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>.ToResult(TAnalysisContext! analysisContext, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<TBlockAnalysisResult!, TAbstractAnalysisValue>! dataFlowAnalysisResult) -> TAnalysisResult!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyMissingCurrentAnalysisDataForUnhandledExceptionData(TAnalysisData! dataAtException, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ThrownExceptionInfo! throwBranchWithExceptionType) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.Equals(TAnalysisData! value1, TAnalysisData! value2) -> bool
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.EscapeValueForParameterOnExit(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetClonedAnalysisData(TAnalysisData! analysisData) -> TAnalysisData!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetEmptyAnalysisData() -> TAnalysisData!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetExitBlockOutputData(TAnalysisResult! analysisResult) -> TAnalysisData!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.HasAnyAbstractValue(TAnalysisData! data) -> bool
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.MergeAnalysisData(TAnalysisData! value1, TAnalysisData! value2) -> TAnalysisData!
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetCurrentAnalysisData() -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetReferenceTypeInstanceAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! pointsToAbstractValue) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetValueTypeInstanceAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValueForArrayElementInitializer(Microsoft.CodeAnalysis.Operations.IArrayCreationOperation! arrayCreation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex!> indices, Microsoft.CodeAnalysis.ITypeSymbol! elementType, Microsoft.CodeAnalysis.IOperation! initializer, TAbstractAnalysisValue value) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValueForAssignment(Microsoft.CodeAnalysis.IOperation! target, Microsoft.CodeAnalysis.IOperation? assignedValueOperation, TAbstractAnalysisValue assignedValue, bool mayBeAssignment = false) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValueForTupleElementAssignment(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! tupleElementEntity, Microsoft.CodeAnalysis.IOperation! assignedValueOperation, TAbstractAnalysisValue assignedValue) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetValueForParameterOnEntry(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>? assignedValue) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StopTrackingDataForParameter(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
abstract Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.UpdateValuesForAnalysisData(TAnalysisData! targetAnalysisData) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeAnalysisValueForEscapedRefOrOutArgument(Microsoft.CodeAnalysis.Operations.IArgumentOperation! operation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.EscapeValueForParameterOnExit(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetReferenceTypeInstanceAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! pointsToAbstractValue) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetValueTypeInstanceAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetValueForParameterOnEntry(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>? assignedValue) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StopTrackingDataForParameter(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitAnonymousObjectCreation(Microsoft.CodeAnalysis.Operations.IAnonymousObjectCreationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitArrayCreation(Microsoft.CodeAnalysis.Operations.IArrayCreationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitDelegateCreation(Microsoft.CodeAnalysis.Operations.IDelegateCreationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitDynamicObjectCreation(Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitObjectCreation(Microsoft.CodeAnalysis.Operations.IObjectCreationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitReDimClause(Microsoft.CodeAnalysis.Operations.IReDimClauseOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitTypeParameterObjectCreation(Microsoft.CodeAnalysis.Operations.ITypeParameterObjectCreationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.Dispose(bool disposing) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeAnalysisValueForReferenceOperation(Microsoft.CodeAnalysis.IOperation! operation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.EscapeValueForParameterOnExit(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetInitialInterproceduralAnalysisData(Microsoft.CodeAnalysis.IMethodSymbol! invokedMethod, (Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? Instance, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! PointsToValue)? invocationInstance, (Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! Instance, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! PointsToValue)? thisOrMeInstanceForCaller, System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.IParameterSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>!>! argumentValuesMap, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>? pointsToValues, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyValues, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? valueContentValues, bool isLambdaOrLocalFunction, bool hasParameterWithDelegateType) -> TAnalysisData!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetMergedAnalysisDataForPossibleThrowingOperation(TAnalysisData? existingData, Microsoft.CodeAnalysis.IOperation! operation) -> TAnalysisData!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetMergedDataForUnhandledThrowOperations() -> TAnalysisData?
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ProcessOutOfScopeLocalsAndFlowCaptures(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ILocalSymbol!>! locals, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.FlowAnalysis.CaptureId>! flowCaptures) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetReferenceTypeInstanceAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! pointsToAbstractValue) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ResetValueTypeInstanceAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValueForArrayElementInitializer(Microsoft.CodeAnalysis.Operations.IArrayCreationOperation! arrayCreation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex!> indices, Microsoft.CodeAnalysis.ITypeSymbol! elementType, Microsoft.CodeAnalysis.IOperation! initializer, TAbstractAnalysisValue value) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValueForAssignment(Microsoft.CodeAnalysis.IOperation! target, Microsoft.CodeAnalysis.IOperation? assignedValueOperation, TAbstractAnalysisValue assignedValue, bool mayBeAssignment = false) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValueForTupleElementAssignment(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! tupleElementEntity, Microsoft.CodeAnalysis.IOperation! assignedValueOperation, TAbstractAnalysisValue assignedValue) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetValueForParameterOnEntry(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>? assignedValue) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitDeconstructionAssignment(Microsoft.CodeAnalysis.Operations.IDeconstructionAssignmentOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityMapAbstractDomain<TValue>.Merge(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! map1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! map2) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisData.Clone() -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisData.Compare(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>! other, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>! coreDataAnalysisDomain) -> int
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisData.Reset(System.Func<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>! getResetValue) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisData.SetAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! key, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue! value) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysisData.WithMergedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>! data, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>! coreDataAnalysisDomain) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.DefaultVisit(Microsoft.CodeAnalysis.IOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitAnonymousObjectCreation(Microsoft.CodeAnalysis.Operations.IAnonymousObjectCreationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitArrayElementReference(Microsoft.CodeAnalysis.Operations.IArrayElementReferenceOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitArrayInitializer(Microsoft.CodeAnalysis.Operations.IArrayInitializerOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitAwait(Microsoft.CodeAnalysis.Operations.IAwaitOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitCaughtException(Microsoft.CodeAnalysis.FlowAnalysis.ICaughtExceptionOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitCompoundAssignment(Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitConstantPattern(Microsoft.CodeAnalysis.Operations.IConstantPatternOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitConversion(Microsoft.CodeAnalysis.Operations.IConversionOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitDeconstructionAssignment(Microsoft.CodeAnalysis.Operations.IDeconstructionAssignmentOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitDefaultValue(Microsoft.CodeAnalysis.Operations.IDefaultValueOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitDynamicMemberReference(Microsoft.CodeAnalysis.Operations.IDynamicMemberReferenceOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitEventReference(Microsoft.CodeAnalysis.Operations.IEventReferenceOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitFieldReference(Microsoft.CodeAnalysis.Operations.IFieldReferenceOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitFlowAnonymousFunction(Microsoft.CodeAnalysis.FlowAnalysis.IFlowAnonymousFunctionOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitFlowCapture(Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitFlowCaptureReference(Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureReferenceOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitIncrementOrDecrement(Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitInterpolatedStringText(Microsoft.CodeAnalysis.Operations.IInterpolatedStringTextOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitInterpolation(Microsoft.CodeAnalysis.Operations.IInterpolationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitIsNull(Microsoft.CodeAnalysis.FlowAnalysis.IIsNullOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitIsPattern(Microsoft.CodeAnalysis.Operations.IIsPatternOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitLocalReference(Microsoft.CodeAnalysis.Operations.ILocalReferenceOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitLock(Microsoft.CodeAnalysis.Operations.ILockOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitMethodReference(Microsoft.CodeAnalysis.Operations.IMethodReferenceOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitObjectCreation(Microsoft.CodeAnalysis.Operations.IObjectCreationOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitParameterReference(Microsoft.CodeAnalysis.Operations.IParameterReferenceOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitParenthesized(Microsoft.CodeAnalysis.Operations.IParenthesizedOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitPropertyReference(Microsoft.CodeAnalysis.Operations.IPropertyReferenceOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitSimpleAssignment(Microsoft.CodeAnalysis.Operations.ISimpleAssignmentOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitStaticLocalInitializationSemaphore(Microsoft.CodeAnalysis.FlowAnalysis.IStaticLocalInitializationSemaphoreOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitTranslatedQuery(Microsoft.CodeAnalysis.Operations.ITranslatedQueryOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitTuple(Microsoft.CodeAnalysis.Operations.ITupleOperation! operation, object? argument) -> TAbstractAnalysisValue
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.Equals(object! obj) -> bool
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.GetHashCode() -> int
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId.Equals(object! obj) -> bool
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId.GetHashCode() -> int
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<TKey, TValue>.Clone(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! value) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<TKey, TValue>.Merge(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! value1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! value2) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisData.Clone() -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisData.Compare(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>! other, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>! coreDataAnalysisDomain) -> int
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisData.Reset(System.Func<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>! getResetValue) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisData.SetAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! key, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! value) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisData.WithMergedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>! data, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>! coreDataAnalysisDomain) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsReachableBlockData(TAnalysisData! analysisData) -> bool
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetPredicateValueKind(Microsoft.CodeAnalysis.IOperation! operation, TAnalysisData! analysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind predicateValueKind) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.UpdateReachability(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! basicBlock, TAnalysisData! analysisData, bool isReachable) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.Dispose(bool disposing) -> void
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisDataDomain<TAnalysisData, TValue>.Clone(TAnalysisData! value) -> TAnalysisData!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisDataDomain<TAnalysisData, TValue>.Compare(TAnalysisData! oldValue, TAnalysisData! newValue) -> int
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisDataDomain<TAnalysisData, TValue>.Equals(TAnalysisData! value1, TAnalysisData! value2) -> bool
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisDataDomain<TAnalysisData, TValue>.Merge(TAnalysisData! value1, TAnalysisData! value2) -> TAnalysisData!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.SetAbstractDomain<T>.Bottom.get -> System.Collections.Immutable.ImmutableHashSet<T>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.SetAbstractDomain<T>.Compare(System.Collections.Immutable.ImmutableHashSet<T>! oldValue, System.Collections.Immutable.ImmutableHashSet<T>! newValue, bool assertMonotonicity) -> int
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.SetAbstractDomain<T>.Merge(System.Collections.Immutable.ImmutableHashSet<T>! value1, System.Collections.Immutable.ImmutableHashSet<T>! value2) -> System.Collections.Immutable.ImmutableHashSet<T>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ThrownExceptionInfo.Equals(object! obj) -> bool
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ThrownExceptionInfo.GetHashCode() -> int
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.ToString() -> string!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisData.Clone() -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>!
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisData.Compare(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>! other, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>! coreDataAnalysisDomain) -> int
override Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAnalysisData.WithMergedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>! data, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>! coreDataAnalysisDomain) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>!
override sealed Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.ToString() -> string!
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyInterproceduralAnalysisResult(TAnalysisData! resultData, bool isLambdaOrLocalFunction, bool hasDelegateTypeArgument, TAnalysisResult! analysisResult) -> void
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeAnalysisValueForEscapedRefOrOutArgument(Microsoft.CodeAnalysis.Operations.IArgumentOperation! operation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StopTrackingDataForParameter(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> void
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StopTrackingDataForParameters(System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.IParameterSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!>! parameterEntities) -> void
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T>.Equals(object? obj) -> bool
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T>.GetHashCode() -> int
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitAnonymousFunction(Microsoft.CodeAnalysis.Operations.IAnonymousFunctionOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitArgument(Microsoft.CodeAnalysis.Operations.IArgumentOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitBinaryOperator(Microsoft.CodeAnalysis.Operations.IBinaryOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitBlock(Microsoft.CodeAnalysis.Operations.IBlockOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitBranch(Microsoft.CodeAnalysis.Operations.IBranchOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitCatchClause(Microsoft.CodeAnalysis.Operations.ICatchClauseOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitCoalesce(Microsoft.CodeAnalysis.Operations.ICoalesceOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitConditional(Microsoft.CodeAnalysis.Operations.IConditionalOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitConditionalAccess(Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitConditionalAccessInstance(Microsoft.CodeAnalysis.Operations.IConditionalAccessInstanceOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitDefaultCaseClause(Microsoft.CodeAnalysis.Operations.IDefaultCaseClauseOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitEmpty(Microsoft.CodeAnalysis.Operations.IEmptyOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitEnd(Microsoft.CodeAnalysis.Operations.IEndOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitFieldInitializer(Microsoft.CodeAnalysis.Operations.IFieldInitializerOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitForEachLoop(Microsoft.CodeAnalysis.Operations.IForEachLoopOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitForLoop(Microsoft.CodeAnalysis.Operations.IForLoopOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitForToLoop(Microsoft.CodeAnalysis.Operations.IForToLoopOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitInvocation(Microsoft.CodeAnalysis.Operations.IInvocationOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitLabeled(Microsoft.CodeAnalysis.Operations.ILabeledOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitLocalFunction(Microsoft.CodeAnalysis.Operations.ILocalFunctionOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitMemberInitializer(Microsoft.CodeAnalysis.Operations.IMemberInitializerOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitNameOf(Microsoft.CodeAnalysis.Operations.INameOfOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitObjectOrCollectionInitializer(Microsoft.CodeAnalysis.Operations.IObjectOrCollectionInitializerOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitParameterInitializer(Microsoft.CodeAnalysis.Operations.IParameterInitializerOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitPatternCaseClause(Microsoft.CodeAnalysis.Operations.IPatternCaseClauseOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitPropertyInitializer(Microsoft.CodeAnalysis.Operations.IPropertyInitializerOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitRangeCaseClause(Microsoft.CodeAnalysis.Operations.IRangeCaseClauseOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitRelationalCaseClause(Microsoft.CodeAnalysis.Operations.IRelationalCaseClauseOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitReturn(Microsoft.CodeAnalysis.Operations.IReturnOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitSingleValueCaseClause(Microsoft.CodeAnalysis.Operations.ISingleValueCaseClauseOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitSwitch(Microsoft.CodeAnalysis.Operations.ISwitchOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitSwitchCase(Microsoft.CodeAnalysis.Operations.ISwitchCaseOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitThrow(Microsoft.CodeAnalysis.Operations.IThrowOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitTry(Microsoft.CodeAnalysis.Operations.ITryOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitUnaryOperator(Microsoft.CodeAnalysis.Operations.IUnaryOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitUsing(Microsoft.CodeAnalysis.Operations.IUsingOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitVariableDeclaration(Microsoft.CodeAnalysis.Operations.IVariableDeclarationOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitVariableDeclarationGroup(Microsoft.CodeAnalysis.Operations.IVariableDeclarationGroupOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitVariableDeclarator(Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitVariableInitializer(Microsoft.CodeAnalysis.Operations.IVariableInitializerOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitWhileLoop(Microsoft.CodeAnalysis.Operations.IWhileLoopOperation! operation, object? argument) -> TAbstractAnalysisValue
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<TKey, TValue>.Compare(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! oldValue, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! newValue) -> int
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.MapAbstractDomain<TKey, TValue>.Equals(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! value1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! value2) -> bool
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyPredicatedDataForEntity(TAnalysisData! analysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity, bool trueData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.HasPredicatedDataForEntity(TAnalysisData! analysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity) -> bool
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StartTrackingPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity, TAnalysisData? truePredicateData, TAnalysisData? falsePredicateData) -> void
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StopTrackingPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity) -> void
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SupportsPredicateAnalysis.get -> bool
override sealed Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateAnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TransferPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! fromEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! toEntity) -> void
static Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.ComputeAsync(Microsoft.CodeAnalysis.Compilation! compilation, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData!>!
static Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.ComputeAsync(Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.Compilation! compilation, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData!>!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDomain<T>.FireNonMonotonicAssertIfNeeded(bool assertMonotonicity) -> void
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex.Create(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex.Create(Microsoft.CodeAnalysis.IOperation! operation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex.Create(int index) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractIndex!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.CreateAllocationLocation(Microsoft.CodeAnalysis.IOperation! creation, Microsoft.CodeAnalysis.ITypeSymbol! locationType, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisContext! analysisContext) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.CreateAnalysisEntityDefaultLocation(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.CreateFlowCaptureLocation(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId captureId, Microsoft.CodeAnalysis.ITypeSymbol! locationType, System.Collections.Immutable.ImmutableStack<Microsoft.CodeAnalysis.IOperation!>? creationCallStack) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.CreateSymbolLocation(Microsoft.CodeAnalysis.ISymbol! symbol, System.Collections.Immutable.ImmutableStack<Microsoft.CodeAnalysis.IOperation!>? creationCallStack) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.CreateThisOrMeLocation(Microsoft.CodeAnalysis.INamedTypeSymbol! namedTypeSymbol, System.Collections.Immutable.ImmutableStack<Microsoft.CodeAnalysis.IOperation!>? creationCallStack) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetClonedAnalysisDataHelper(System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!, TAbstractAnalysisValue>! analysisData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!, TAbstractAnalysisValue>!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetEmptyAnalysisDataHelper() -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!, TAbstractAnalysisValue>!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.Create(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId interproceduralCaptureId, Microsoft.CodeAnalysis.ITypeSymbol! type, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! instanceLocation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.Create(Microsoft.CodeAnalysis.Operations.IInstanceReferenceOperation! instanceReferenceOperation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! instanceLocation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity.CreateThisOrMeInstance(Microsoft.CodeAnalysis.INamedTypeSymbol! typeSymbol, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! instanceLocation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsChildAnalysisEntity(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! entity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! ancestorEntity) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsChildAnalysisEntity(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! entity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! instanceLocation) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T>.operator !=(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T!>? value1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T!>? value2) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T>.operator ==(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T!>? value1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable<T!>? value2) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue.Invalid.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue.NotApplicable.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue.Unknown.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAnalysis.TryGetOrComputeResult(Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! cfg, Microsoft.CodeAnalysis.ISymbol! owningSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! analyzerOptions, Analyzer.Utilities.WellKnownTypeProvider! wellKnownTypeProvider, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate? interproceduralAnalysisPredicate, bool pessimisticAnalysis = true, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind pointsToAnalysisKind = Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind.PartialWithoutTrackingFieldsAndProperties, bool exceptionPathsAnalysis = false) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>?
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>.Flow(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData!, TAnalysisContext!, TAnalysisResult!, TAbstractAnalysisValue>! operationVisitor, Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! block, TAnalysisData! data) -> TAnalysisData!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis<TAnalysisData, TAnalysisContext, TAnalysisResult, TBlockAnalysisResult, TAbstractAnalysisValue>.FlowBranch(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData!, TAnalysisContext!, TAnalysisResult!, TAbstractAnalysisValue>! operationVisitor, Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowBranch! branch, TAnalysisData! data) -> TAnalysisData!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.EqualsHelper<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>! dict1, System.Collections.Generic.IDictionary<TKey, TValue>! dict2) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.operator !=(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration left, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration right) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration.operator ==(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration left, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration right) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId.operator !=(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId left, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId right) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId.operator ==(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId left, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralCaptureId right) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.Invalid.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.NoLocation.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.NullLocation.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.Undefined.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.Unknown.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.UnknownNotNull.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue.UnknownNull.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult(Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! cfg, Microsoft.CodeAnalysis.ISymbol! owningSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! analyzerOptions, Analyzer.Utilities.WellKnownTypeProvider! wellKnownTypeProvider, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind pointsToAnalysisKind, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate? interproceduralAnalysisPredicate, bool pessimisticAnalysis = true, bool performCopyAnalysis = false, bool exceptionPathsAnalysis = false) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult?
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult(Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph! cfg, Microsoft.CodeAnalysis.ISymbol! owningSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions! analyzerOptions, Analyzer.Utilities.WellKnownTypeProvider! wellKnownTypeProvider, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisKind pointsToAnalysisKind, out Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysisResult<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyBlockAnalysisResult!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyAnalysisResult, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.InterproceduralAnalysisPredicate? interproceduralAnalysisPredicate, bool pessimisticAnalysis = true, bool performCopyAnalysis = false, bool exceptionPathsAnalysis = false) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysisResult?
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.EqualsHelper(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>? dict1, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>? dict2) -> bool
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.SetAbstractDomain<T>.Default.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.SetAbstractDomain<T>!
static Analyzer.Utilities.WellKnownTypeProvider.GetOrCreate(Microsoft.CodeAnalysis.Compilation! compilation) -> Analyzer.Utilities.WellKnownTypeProvider!
static readonly Analyzer.Utilities.SymbolNamesWithValueOption<TValue>.Empty -> Analyzer.Utilities.SymbolNamesWithValueOption<TValue>!
static readonly Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.NoLocation -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!
static readonly Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation.Null -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocation!
static readonly Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue.Invalid -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue!
static readonly Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue.NotDisposable -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue!
static readonly Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue.NotDisposed -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue!
static readonly Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue.Unknown -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAbstractValue!
static Microsoft.CodeAnalysis.RulesetToEditorconfig.Converter.GenerateEditorconfig(string! rulesetFilePath, string! editorconfigFilePath) -> void
static Microsoft.CodeAnalysis.RulesetToEditorconfig.Converter.GetEditorconfig(string! rulesetFilePath) -> string!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.ContainsEmptyStringLiteralState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.ContainsOneIntergralLiteralState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.ContainsNullLiteralState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.ContainsZeroIntergralLiteralState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.DoesNotContainLiteralOrNonLiteralState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.InvalidState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.MayBeContainsNonLiteralState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!
static Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue.UndefinedState.get -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractAnalysisData.Dispose(bool disposing) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractLocationDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.HandleInstanceCreation(Microsoft.CodeAnalysis.IOperation! creation, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! instanceLocation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.HasAnyAbstractValue.get -> bool
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.Reset(System.Func<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue, TValue>! getResetValue) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityBasedPredicateAnalysisData<TValue>.SetAbstractValue(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! key, TValue value) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeAnalysisValueForEscapedRefOrOutArgument(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity, Microsoft.CodeAnalysis.Operations.IArgumentOperation! operation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetDefaultValueForParameterOnEntry(Microsoft.CodeAnalysis.IParameterSymbol! parameter, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! analysisEntity) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetDefaultValueForParameterOnExit(Microsoft.CodeAnalysis.ITypeSymbol! parameterType) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetAbstractValueForAssignment(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! targetAnalysisEntity, Microsoft.CodeAnalysis.IOperation? assignedValueOperation, TAbstractAnalysisValue assignedValue) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityDataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SupportsPredicateAnalysis.get -> bool
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityMapAbstractDomain<TValue>.AssertValidAnalysisData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, TValue>! map) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntityMapAbstractDomain<TValue>.OnNewMergedValue(TValue value) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyInterproceduralAnalysisResult(TAnalysisData! resultData, bool isLambdaOrLocalFunction, bool hasDelegateTypeArgument, TAnalysisResult! analysisResult) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ApplyPredicatedDataForEntity(TAnalysisData! analysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity, bool trueData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.AssertValidAnalysisData(TAnalysisData! analysisData) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeAnalysisValueForEscapedRefOrOutArgument(Microsoft.CodeAnalysis.Operations.IArgumentOperation! operation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeAnalysisValueForReferenceOperation(Microsoft.CodeAnalysis.IOperation! operation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeValueForCompoundAssignment(Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation! operation, TAbstractAnalysisValue targetValue, TAbstractAnalysisValue assignedValue, Microsoft.CodeAnalysis.ITypeSymbol? targetType, Microsoft.CodeAnalysis.ITypeSymbol? assignedValueType) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ComputeValueForIncrementOrDecrementOperation(Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation! operation, TAbstractAnalysisValue targetValue) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.Flow(Microsoft.CodeAnalysis.IOperation! statement, Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! block, TAnalysisData! input) -> TAnalysisData!
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.FlowBranch(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! fromBlock, Microsoft.CodeAnalysis.FlowAnalysis.BranchWithInfo! branch, TAnalysisData! input) -> (TAnalysisData! output, bool isFeasibleBranch)
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetAbstractDefaultValueForCatchVariable(Microsoft.CodeAnalysis.Operations.ICatchClauseOperation! catchClause) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetAssignedValueForPattern(Microsoft.CodeAnalysis.Operations.IIsPatternOperation! operation, TAbstractAnalysisValue operandValue) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetCopyAbstractValue(Microsoft.CodeAnalysis.IOperation! operation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetInitialInterproceduralAnalysisData(Microsoft.CodeAnalysis.IMethodSymbol! invokedMethod, (Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity? Instance, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! PointsToValue)? invocationInstance, (Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! Instance, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue! PointsToValue)? thisOrMeInstanceForCaller, System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.IParameterSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ArgumentInfo<TAbstractAnalysisValue>!>! argumentValuesMap, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!>? pointsToValues, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CopyAnalysis.CopyAbstractValue!>? copyValues, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!>? valueContentValues, bool isLambdaOrLocalFunction, bool hasParameterWithDelegateType) -> TAnalysisData!
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetMergedAnalysisDataForPossibleThrowingOperation(TAnalysisData? existingData, Microsoft.CodeAnalysis.IOperation! operation) -> TAnalysisData!
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetMergedDataForUnhandledThrowOperations() -> TAnalysisData?
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetPointsToAbstractValue(Microsoft.CodeAnalysis.IOperation! operation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAbstractValue!
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetValueContentAbstractValue(Microsoft.CodeAnalysis.IOperation! operation) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.ValueContentAnalysis.ValueContentAbstractValue!
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.GetReturnValueAndPredicateKind() -> (TAbstractAnalysisValue Value, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind PredicateValueKind)?
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.HandleEnterLockOperation(Microsoft.CodeAnalysis.IOperation! lockedObject) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.HandlePossibleThrowingOperation(Microsoft.CodeAnalysis.IOperation! operation) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.HasPredicatedDataForEntity(TAnalysisData! analysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity) -> bool
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.IsReachableBlockData(TAnalysisData! analysisData) -> bool
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.MergeAnalysisData(TAnalysisData! value1, TAnalysisData! value2, Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! forBlock) -> TAnalysisData!
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.MergeAnalysisDataForBackEdge(TAnalysisData! value1, TAnalysisData! value2, Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! forBlock) -> TAnalysisData!
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.PostProcessArgument(Microsoft.CodeAnalysis.Operations.IArgumentOperation! operation, bool isEscaped) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ProcessOutOfScopeLocalsAndFlowCaptures(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ILocalSymbol!>! locals, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.FlowAnalysis.CaptureId>! flowCaptures) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ProcessReturnValue(Microsoft.CodeAnalysis.IOperation? returnValue) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.ProcessThrowValue(Microsoft.CodeAnalysis.IOperation? thrownValue) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetPredicateValueKind(Microsoft.CodeAnalysis.IOperation! operation, TAnalysisData! analysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind predicateValueKind) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetValueForComparisonOperator(Microsoft.CodeAnalysis.Operations.IBinaryOperation! operation, TAnalysisData! targetAnalysisData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetValueForEqualsOrNotEqualsComparisonOperator(Microsoft.CodeAnalysis.IOperation! leftOperand, Microsoft.CodeAnalysis.IOperation! rightOperand, bool equals, bool isReferenceEquality, TAnalysisData! targetAnalysisData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.SetValueForIsNullComparisonOperator(Microsoft.CodeAnalysis.IOperation! leftOperand, bool equals, TAnalysisData! targetAnalysisData) -> Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicateValueKind
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StartTrackingPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity, TAnalysisData? truePredicateData, TAnalysisData? falsePredicateData) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StopTrackingDataForParameters(System.Collections.Immutable.ImmutableDictionary<Microsoft.CodeAnalysis.IParameterSymbol!, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity!>! parameterEntities) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.StopTrackingPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! predicatedEntity) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.TransferPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! fromEntity, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AnalysisEntity! toEntity) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.UpdateReachability(Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock! basicBlock, TAnalysisData! analysisData, bool isReachable) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitAssignmentOperation(Microsoft.CodeAnalysis.Operations.IAssignmentOperation! operation, object? argument) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitBinaryOperatorCore(Microsoft.CodeAnalysis.Operations.IBinaryOperation! operation, object? argument) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitInvocation_Lambda(Microsoft.CodeAnalysis.FlowAnalysis.IFlowAnonymousFunctionOperation! lambda, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Operations.IArgumentOperation!> visitedArguments, Microsoft.CodeAnalysis.IOperation! originalOperation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitInvocation_LocalFunction(Microsoft.CodeAnalysis.IMethodSymbol! localFunction, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Operations.IArgumentOperation!> visitedArguments, Microsoft.CodeAnalysis.IOperation! originalOperation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitInvocation_NonLambdaOrDelegateOrLocalFunction(Microsoft.CodeAnalysis.IMethodSymbol! method, Microsoft.CodeAnalysis.IOperation? visitedInstance, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Operations.IArgumentOperation!> visitedArguments, bool invokedAsDelegate, Microsoft.CodeAnalysis.IOperation! originalOperation, TAbstractAnalysisValue defaultValue) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor<TAnalysisData, TAnalysisContext, TAnalysisResult, TAbstractAnalysisValue>.VisitUnaryOperatorCore(Microsoft.CodeAnalysis.Operations.IUnaryOperation! operation, object? argument) -> TAbstractAnalysisValue
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.ApplyPredicatedData(Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! coreAnalysisData, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! predicatedData) -> void
virtual Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PredicatedAnalysisData<TKey, TValue>.RemoveEntryInPredicatedData(TKey key, Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DictionaryAnalysisData<TKey, TValue>! predicatedData) -> void
Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext
Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext.CodeMetricsAnalysisContext(Microsoft.CodeAnalysis.Compilation! compilation, System.Threading.CancellationToken cancellationToken, System.Func<Microsoft.CodeAnalysis.INamedTypeSymbol!, bool>? isExcludedFromInheritanceCountFunc = null) -> void
Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext.Compilation.get -> Microsoft.CodeAnalysis.Compilation!
Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext.IsExcludedFromInheritanceCountFunc.get -> System.Func<Microsoft.CodeAnalysis.INamedTypeSymbol!, bool>!
static Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.ComputeAsync(Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext! context) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData!>!
static Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData.ComputeAsync(Microsoft.CodeAnalysis.ISymbol! symbol, Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext! context) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData!>!
