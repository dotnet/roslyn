<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClosureCaptureRuleMessage" xml:space="preserve">
    <value>The compiler will emit a class that will hold this as a field to allow capturing of this closure</value>
  </data>
  <data name="ClosureCaptureRuleTitle" xml:space="preserve">
    <value>Display class allocation to capture closure</value>
  </data>
  <data name="ClosureDriverRuleMessage" xml:space="preserve">
    <value>Heap allocation of closure Captures: {0}</value>
  </data>
  <data name="ClosureDriverRuleTitle" xml:space="preserve">
    <value>Closure Allocation Source</value>
  </data>
  <data name="DelegateOnStructInstanceRuleMessage" xml:space="preserve">
    <value>Struct instance method being used for delegate creation, this will result in a boxing instruction</value>
  </data>
  <data name="DelegateOnStructInstanceRuleTitle" xml:space="preserve">
    <value>Delegate on struct instance caused a boxing allocation</value>
  </data>
  <data name="LambaOrAnonymousMethodInGenericMethodRuleMessage" xml:space="preserve">
    <value>Considering moving this out of the generic method</value>
  </data>
  <data name="LambaOrAnonymousMethodInGenericMethodRuleTitle" xml:space="preserve">
    <value>Lambda or anonymous method in a generic method allocates a delegate instance</value>
  </data>
  <data name="MethodGroupAllocationRuleMessage" xml:space="preserve">
    <value>This will allocate a delegate instance</value>
  </data>
  <data name="MethodGroupAllocationRuleTitle" xml:space="preserve">
    <value>Delegate allocation from a method group</value>
  </data>
  <data name="ParamsParameterRuleMessage" xml:space="preserve">
    <value>This call site is calling into a function with a 'params' parameter. This results in an array allocation.</value>
  </data>
  <data name="ParamsParameterRuleTitle" xml:space="preserve">
    <value>Array allocation for params parameter</value>
  </data>
  <data name="ReadonlyMethodGroupAllocationRuleMessage" xml:space="preserve">
    <value>This will allocate a delegate instance</value>
  </data>
  <data name="ReadonlyMethodGroupAllocationRuleTitle" xml:space="preserve">
    <value>Delegate allocation from a method group</value>
  </data>
  <data name="ReferenceTypeEnumeratorRuleMessage" xml:space="preserve">
    <value>Non-ValueType enumerator may result in a heap allocation</value>
  </data>
  <data name="ReferenceTypeEnumeratorRuleTitle" xml:space="preserve">
    <value>Possible allocation of reference type enumerator</value>
  </data>
  <data name="StringConcatenationAllocationRuleMessage" xml:space="preserve">
    <value>Considering using StringBuilder</value>
  </data>
  <data name="StringConcatenationAllocationRuleTitle" xml:space="preserve">
    <value>Implicit string concatenation allocation</value>
  </data>
  <data name="ValueTypeNonOverridenCallRuleMessage" xml:space="preserve">
    <value>Non-overridden virtual method call on a value type adds a boxing or constrained instruction</value>
  </data>
  <data name="ValueTypeNonOverridenCallRuleTitle" xml:space="preserve">
    <value>Non-overridden virtual method call on value type</value>
  </data>
  <data name="ValueTypeToReferenceTypeConversionRuleMessage" xml:space="preserve">
    <value>Value type to reference type conversion causes boxing at call site (here), and unboxing at the callee-site. Consider using generics if applicable.</value>
  </data>
  <data name="ValueTypeToReferenceTypeConversionRuleTitle" xml:space="preserve">
    <value>Value type to reference type conversion causing boxing allocation</value>
  </data>
  <data name="ValueTypeToReferenceTypeInAStringConcatenationRuleMessage" xml:space="preserve">
    <value>Value type ({0}) is being boxed to a reference type for a string concatenation</value>
  </data>
  <data name="ValueTypeToReferenceTypeInAStringConcatenationRuleTitle" xml:space="preserve">
    <value>Value type to reference type conversion allocation for string concatenation</value>
  </data>
</root>