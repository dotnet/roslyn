<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FlagsEnumsShouldHavePluralNamesTitle" xml:space="preserve">
    <value>Flags enums should have plural names</value>
  </data>
  <data name="FlagsEnumsShouldHavePluralNamesDescription" xml:space="preserve">
    <value>A public enumeration has the System.FlagsAttribute attribute, and its name does not end in ""s"". Types that are marked by using FlagsAttribute have names that are plural because the attribute indicates that more than one value can be specified.</value>
  </data>
  <data name="FlagsEnumsShouldHavePluralNamesMessage" xml:space="preserve">
    <value>Flags enums should have plural names</value>
  </data>
  <data name="OnlyFlagsEnumsShouldHavePluralNamesTitle" xml:space="preserve">
    <value>Only FlagsAttribute enums should have plural names</value>
  </data>
  <data name="OnlyFlagsEnumsShouldHavePluralNamesDescription" xml:space="preserve">
    <value>Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the enumeration can be specified at the same time.</value>
  </data>
  <data name="OnlyFlagsEnumsShouldHavePluralNamesMessage" xml:space="preserve">
    <value>Only FlagsAttribute enums should have plural names</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyTitle" xml:space="preserve">
    <value>Identifiers should be spelled correctly</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyDescription" xml:space="preserve">
    <value>The name of an externally visible identifier contains one or more words that are not recognized by the Microsoft spelling checker library.</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageAssembly" xml:space="preserve">
    <value>Correct the spelling of '{0}' in assembly name '{1}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageNamespace" xml:space="preserve">
    <value>Correct the spelling of '{0}' in namespace name '{1}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageType" xml:space="preserve">
    <value>Correct the spelling of '{0}' in type name '{1}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageMember" xml:space="preserve">
    <value>Correct the spelling of '{0}' in member name '{1}' or remove it entirely if it represents any sort of Hungarian notation</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageMemberParameter" xml:space="preserve">
    <value>In method '{0}', correct the spelling of '{1}' in parameter name '{2}' or remove it entirely if it represents any sort of Hungarian notation</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageDelegateParameter" xml:space="preserve">
    <value>In delegate '{0}', correct the spelling of '{1}' in parameter name '{2}' or remove it entirely if it represents any sort of Hungarian notation</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageTypeTypeParameter" xml:space="preserve">
    <value>On type '{0}', correct the spelling of '{1}' in generic type parameter name '{2}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageMethodTypeParameter" xml:space="preserve">
    <value>On method '{0}', correct the spelling of '{1}' in generic type parameter name '{2}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageAssemblyMoreMeaningfulName" xml:space="preserve">
    <value>Consider providing a more meaningful name than assembly name '{0}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageNamespaceMoreMeaningfulName" xml:space="preserve">
    <value>Consider providing a more meaningful name than namespace name '{0}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageTypeMoreMeaningfulName" xml:space="preserve">
    <value>Consider providing a more meaningful name than type name '{0}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageMemberMoreMeaningfulName" xml:space="preserve">
    <value>Consider providing a more meaningful name than member name '{0}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageMemberParameterMoreMeaningfulName" xml:space="preserve">
    <value>In method '{0}', consider providing a more meaningful name than parameter name '{1}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageDelegateParameterMoreMeaningfulName" xml:space="preserve">
    <value>In delegate '{0}', consider providing a more meaningful name than parameter name '{1}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageTypeTypeParameterMoreMeaningfulName" xml:space="preserve">
    <value>On type '{0}', consider providing a more meaningful name than generic type parameter name '{1}'</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageMethodTypeParameterMoreMeaningfulName" xml:space="preserve">
    <value>On method '{0}', consider providing a more meaningful name than generic type parameter name '{1}'</value>
  </data>
  <data name="CategoryNaming" xml:space="preserve">
    <value>Naming</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyFileParse" xml:space="preserve">
    <value>Error parsing dictionary '{0}': {1}</value>
  </data>
  <data name="IdentifiersShouldBeSpelledCorrectlyMessageVariable" xml:space="preserve">
    <value>Correct the spelling of '{0}' in variable name '{1}'</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Dictionary" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Dictionary.dic;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
</root>