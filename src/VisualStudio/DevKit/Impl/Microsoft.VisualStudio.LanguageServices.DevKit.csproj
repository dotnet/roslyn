<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFramework>$(NetVSCode)</TargetFramework>
    <Nullable>enable</Nullable>
    <PackageDescription>
      .NET Compiler Platform ("Roslyn") Language Server Protocol internal.
    </PackageDescription>
    <IsPackable>true</IsPackable>

    <!-- This is not a standard nuget package and only consumed by the extension build. We don't care if the folder structure doesn't match what nuget expects. -->
    <NoWarn>$(NoWarn);NU5100</NoWarn>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="..\..\..\EditorFeatures\Core\EditAndContinue\Contracts\ContractWrappers.cs" Link="EditAndContinue\ContractWrappers.cs" />
    <Compile Include="..\..\..\EditorFeatures\Core\EditAndContinue\Contracts\ManagedHotReloadServiceBridge.cs" Link="EditAndContinue\ManagedHotReloadServiceBridge.cs" />
    <Compile Include="..\..\..\VisualStudio\Core\Def\Telemetry\Shared\*.cs" LinkBase="Logging" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\..\LanguageServer\Microsoft.CodeAnalysis.LanguageServer\Microsoft.CodeAnalysis.LanguageServer.csproj" PrivateAssets="all" />
    <ProjectReference Include="..\..\..\Features\Core\Portable\Microsoft.CodeAnalysis.Features.csproj" PrivateAssets="all" />
    <ProjectReference Include="..\..\..\Workspaces\Core\Portable\Microsoft.CodeAnalysis.Workspaces.csproj" PrivateAssets="all" />
    <ProjectReference Include="..\..\..\Workspaces\Remote\Core\Microsoft.CodeAnalysis.Remote.Workspaces.csproj" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Composition" />
    <PackageReference Include="Microsoft.ServiceHub.Framework" />

    <!-- 
    Additional runtime dependencies that we must include in the NuGet package as they are not a part of the main language server package.
    Do not remove GeneratePathProperty="True" as it is required below to add the package to the package we generate.
    -->
    <PackageReference Include="Microsoft.VisualStudio.Telemetry" GeneratePathProperty="True" />
    <PackageReference Include="Microsoft.VisualStudio.RemoteControl" GeneratePathProperty="True" />
    <PackageReference Include="Microsoft.VisualStudio.Utilities.Internal" GeneratePathProperty="True" />
    <PackageReference Include="System.Configuration.ConfigurationManager" GeneratePathProperty="True" />
    <PackageReference Include="Microsoft.VisualStudio.Debugger.Contracts" GeneratePathProperty="True" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Microsoft.VisualStudio.LanguageServices.DevKit.UnitTests" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="$(PkgMicrosoft_VisualStudio_Telemetry)\lib\netstandard2.0\Microsoft.VisualStudio.Telemetry.dll" Pack="true" PackagePath="content" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="$(PkgMicrosoft_VisualStudio_RemoteControl)\lib\netstandard2.0\Microsoft.VisualStudio.RemoteControl.dll" Pack="true" PackagePath="content" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="$(PkgMicrosoft_VisualStudio_Utilities_Internal)\lib\netstandard2.0\Microsoft.VisualStudio.Utilities.Internal.dll" Pack="true" PackagePath="content" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="$(PkgSystem_Configuration_ConfigurationManager)\lib\netstandard2.0\System.Configuration.ConfigurationManager.dll" Pack="true" PackagePath="content" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="$(PkgMicrosoft_VisualStudio_Debugger_Contracts)\lib\netstandard2.0\Microsoft.VisualStudio.Debugger.Contracts.dll" Pack="true" PackagePath="content" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="$(TargetPath)" Pack="true" PackagePath="content" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <!-- Used by LanguageServer.UnitTests project to be able to copy all the content to its own directory -->
  <Target Name="GetPackInputs" DependsOnTargets="Build" Returns="@(_Content)">
    <ItemGroup>
      <_Content Include="@(Content)" Condition="'%(Content.Pack)'=='true'"/>
    </ItemGroup>
  </Target>
</Project>
