using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.RoslynEventSource;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class RoslynEventSourceTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "RoslynEventSource";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0xbf965e67), unchecked((short) 0xc7fb), unchecked((short) 0x5c5b), 0xd9, 0x8f, 0xcd, 0xf6, 0x8f, 0x81, 0x54, 0xc2);
        public enum Keywords : long
        {
            Session3 = 0x100000000000,
            Session2 = 0x200000000000,
            Session1 = 0x400000000000,
            Session0 = 0x800000000000,
        };

        public RoslynEventSourceTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<BlockCanceledArgs> BlockCanceled
        {
            add
            {
                source.RegisterEventTemplate(BlockCanceledTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<BlockStartArgs> BlockStart
        {
            add
            {
                source.RegisterEventTemplate(BlockStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<BlockStopArgs> BlockStop
        {
            add
            {
                source.RegisterEventTemplate(BlockStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<LogArgs> Log
        {
            add
            {
                source.RegisterEventTemplate(LogTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<SendFunctionDefinitionsArgs> SendFunctionDefinitions
        {
            add
            {
                source.RegisterEventTemplate(SendFunctionDefinitionsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private BlockCanceledArgs BlockCanceledTemplate(Action<BlockCanceledArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlockCanceledArgs(action, 5, 65529, "BlockCanceled", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private BlockStartArgs BlockStartTemplate(Action<BlockStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlockStartArgs(action, 2, 65532, "BlockStart", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private BlockStopArgs BlockStopTemplate(Action<BlockStopArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BlockStopArgs(action, 3, 65531, "BlockStop", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private LogArgs LogTemplate(Action<LogArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new LogArgs(action, 1, 65533, "Log", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private SendFunctionDefinitionsArgs SendFunctionDefinitionsTemplate(Action<SendFunctionDefinitionsArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SendFunctionDefinitionsArgs(action, 4, 65530, "SendFunctionDefinitions", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[5];
                templates[0] = LogTemplate(null);
                templates[1] = BlockStartTemplate(null);
                templates[2] = BlockStopTemplate(null);
                templates[3] = SendFunctionDefinitionsTemplate(null);
                templates[4] = BlockCanceledTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.RoslynEventSource
{
    public sealed class BlockCanceledArgs : TraceEvent
    {
        public FunctionId functionId { get { return (FunctionId)GetInt32At(0); } }
        public int tick { get { return GetInt32At(4); } }
        public int blockId { get { return GetInt32At(8); } }

        #region Private
        internal BlockCanceledArgs(Action<BlockCanceledArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlockCanceledArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "functionId", functionId);
             XmlAttrib(sb, "tick", tick);
             XmlAttrib(sb, "blockId", blockId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "functionId", "tick", "blockId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return functionId;
                case 1:
                    return tick;
                case 2:
                    return blockId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlockCanceledArgs> m_target;
        #endregion
    }
    public sealed class BlockStartArgs : TraceEvent
    {
        public string message { get { return GetUnicodeStringAt(0); } }
        public FunctionId functionId { get { return (FunctionId)GetInt32At(SkipUnicodeString(0)); } }
        public int blockId { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal BlockStartArgs(Action<BlockStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlockStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "message", message);
             XmlAttrib(sb, "functionId", functionId);
             XmlAttrib(sb, "blockId", blockId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "message", "functionId", "blockId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return message;
                case 1:
                    return functionId;
                case 2:
                    return blockId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlockStartArgs> m_target;
        #endregion
    }
    public sealed class BlockStopArgs : TraceEvent
    {
        public FunctionId functionId { get { return (FunctionId)GetInt32At(0); } }
        public int tick { get { return GetInt32At(4); } }
        public int blockId { get { return GetInt32At(8); } }

        #region Private
        internal BlockStopArgs(Action<BlockStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BlockStopArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "functionId", functionId);
             XmlAttrib(sb, "tick", tick);
             XmlAttrib(sb, "blockId", blockId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "functionId", "tick", "blockId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return functionId;
                case 1:
                    return tick;
                case 2:
                    return blockId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BlockStopArgs> m_target;
        #endregion
    }
    public sealed class LogArgs : TraceEvent
    {
        public string message { get { return GetUnicodeStringAt(0); } }
        public FunctionId functionId { get { return (FunctionId)GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal LogArgs(Action<LogArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<LogArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "message", message);
             XmlAttrib(sb, "functionId", functionId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "message", "functionId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return message;
                case 1:
                    return functionId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LogArgs> m_target;
        #endregion
    }
    public sealed class SendFunctionDefinitionsArgs : TraceEvent
    {
        public string definitions { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal SendFunctionDefinitionsArgs(Action<SendFunctionDefinitionsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SendFunctionDefinitionsArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "definitions", definitions);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "definitions"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return definitions;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SendFunctionDefinitionsArgs> m_target;
        #endregion
    }
    public enum FunctionId
    {
        TestEvent_NotUsed = 0x1,
        WorkCoordinator_DocumentWorker_Enqueue = 0x2,
        WorkCoordinator_ProcessProjectAsync = 0x3,
        WorkCoordinator_ProcessDocumentAsync = 0x4,
        WorkCoordinator_SemanticChange_Enqueue = 0x5,
        WorkCoordinator_SemanticChange_EnqueueFromMember = 0x6,
        WorkCoordinator_SemanticChange_EnqueueFromType = 0x7,
        WorkCoordinator_SemanticChange_FullProjects = 0x8,
        WorkCoordinator_Project_Enqueue = 0x9,
        WorkCoordinator_AsyncWorkItemQueue_LastItem = 0xa,
        WorkCoordinator_AsyncWorkItemQueue_FirstItem = 0xb,
        Diagnostics_SyntaxDiagnostic = 0xc,
        Diagnostics_SemanticDiagnostic = 0xd,
        Diagnostics_ProjectDiagnostic = 0xe,
        Diagnostics_DocumentReset = 0xf,
        Diagnostics_DocumentOpen = 0x10,
        Diagnostics_RemoveDocument = 0x11,
        Diagnostics_RemoveProject = 0x12,
        Run_Environment = 0x13,
        Run_Environment_Options = 0x14,
        Tagger_AdornmentManager_OnLayoutChanged = 0x15,
        Tagger_AdornmentManager_UpdateInvalidSpans = 0x16,
        Tagger_BatchChangeNotifier_NotifyEditorNow = 0x17,
        Tagger_BatchChangeNotifier_NotifyEditor = 0x18,
        Tagger_TagSource_RecomputeTags = 0x19,
        Tagger_TagSource_ProcessNewTags = 0x1a,
        Tagger_SyntacticClassification_TagComputer_GetTags = 0x1b,
        Tagger_SemanticClassification_TagProducer_ProduceTags = 0x1c,
        Tagger_BraceHighlighting_TagProducer_ProduceTags = 0x1d,
        Tagger_LineSeparator_TagProducer_ProduceTags = 0x1e,
        Tagger_Outlining_TagProducer_ProduceTags = 0x1f,
        Tagger_Highlighter_TagProducer_ProduceTags = 0x20,
        Tagger_ReferenceHighlighting_TagProducer_ProduceTags = 0x21,
        CaseCorrection_CaseCorrect = 0x22,
        CaseCorrection_ReplaceTokens = 0x23,
        CaseCorrection_AddReplacements = 0x24,
        CodeCleanup_CleanupAsync = 0x25,
        CodeCleanup_Cleanup = 0x26,
        CodeCleanup_IterateAllCodeCleanupProviders = 0x27,
        CodeCleanup_IterateOneCodeCleanup = 0x28,
        CommandHandler_GetCommandState = 0x29,
        CommandHandler_ExecuteHandlers = 0x2a,
        Workspace_SourceText_GetChangeRanges = 0x2b,
        Workspace_Recoverable_RecoverRootAsync = 0x2c,
        Workspace_Recoverable_RecoverRoot = 0x2d,
        Workspace_Recoverable_RecoverTextAsync = 0x2e,
        Workspace_Recoverable_RecoverText = 0x2f,
        Workspace_SkeletonAssembly_GetMetadataOnlyImage = 0x30,
        Workspace_SkeletonAssembly_EmitMetadataOnlyImage = 0x31,
        Workspace_Document_State_FullyParseSyntaxTree = 0x32,
        Workspace_Document_State_IncrementallyParseSyntaxTree = 0x33,
        Workspace_Document_GetSemanticModel = 0x34,
        Workspace_Document_GetSyntaxTree = 0x35,
        Workspace_Document_GetTextChanges = 0x36,
        Workspace_Project_GetCompilation = 0x37,
        Workspace_Project_CompilationTracker_BuildCompilationAsync = 0x38,
        Workspace_ApplyChanges = 0x39,
        Workspace_TryGetDocument = 0x3a,
        Workspace_TryGetDocumentFromInProgressSolution = 0x3b,
        Workspace_Solution_LinkedFileDiffMergingSession = 0x3c,
        Workspace_Solution_LinkedFileDiffMergingSession_LinkedFileGroup = 0x3d,
        EndConstruct_DoStatement = 0x3e,
        EndConstruct_XmlCData = 0x3f,
        EndConstruct_XmlComment = 0x40,
        EndConstruct_XmlElement = 0x41,
        EndConstruct_XmlEmbeddedExpression = 0x42,
        EndConstruct_XmlProcessingInstruction = 0x43,
        FindReference_Rename = 0x44,
        FindReference_ChangeSignature = 0x45,
        FindReference = 0x46,
        FindReference_DetermineAllSymbolsAsync = 0x47,
        FindReference_CreateProjectMapAsync = 0x48,
        FindReference_CreateDocumentMapAsync = 0x49,
        FindReference_ProcessAsync = 0x4a,
        FindReference_ProcessProjectAsync = 0x4b,
        FindReference_ProcessDocumentAsync = 0x4c,
        LineCommit_CommitRegion = 0x4d,
        Formatting_TokenStreamConstruction = 0x4e,
        Formatting_ContextInitialization = 0x4f,
        Formatting_Format = 0x50,
        Formatting_ApplyResultToBuffer = 0x51,
        Formatting_IterateNodes = 0x52,
        Formatting_CollectIndentBlock = 0x53,
        Formatting_CollectSuppressOperation = 0x54,
        Formatting_CollectAlignOperation = 0x55,
        Formatting_CollectAnchorOperation = 0x56,
        Formatting_CollectTokenOperation = 0x57,
        Formatting_BuildContext = 0x58,
        Formatting_ApplySpaceAndLine = 0x59,
        Formatting_ApplyAnchorOperation = 0x5a,
        Formatting_ApplyAlignOperation = 0x5b,
        Formatting_AggregateCreateTextChanges = 0x5c,
        Formatting_AggregateCreateFormattedRoot = 0x5d,
        Formatting_CreateTextChanges = 0x5e,
        Formatting_CreateFormattedRoot = 0x5f,
        SmartIndentation_Start = 0x60,
        SmartIndentation_OpenCurly = 0x61,
        SmartIndentation_CloseCurly = 0x62,
        Rename_InlineSession = 0x63,
        Rename_InlineSession_Session = 0x64,
        Rename_FindLinkedSpans = 0x65,
        Rename_GetSymbolRenameInfo = 0x66,
        Rename_OnTextBufferChanged = 0x67,
        Rename_ApplyReplacementText = 0x68,
        Rename_CommitCore = 0x69,
        Rename_CommitCoreWithPreview = 0x6a,
        Rename_GetAsynchronousLocationsSource = 0x6b,
        Rename_AllRenameLocations = 0x6c,
        Rename_StartSearchingForSpansInAllOpenDocuments = 0x6d,
        Rename_StartSearchingForSpansInOpenDocument = 0x6e,
        Rename_CreateOpenTextBufferManagerForAllOpenDocs = 0x6f,
        Rename_CreateOpenTextBufferManagerForAllOpenDocument = 0x70,
        Rename_ReportSpan = 0x71,
        Rename_GetNoChangeConflictResolution = 0x72,
        Rename_Tracking_BufferChanged = 0x73,
        TPLTask_TaskScheduled = 0x74,
        TPLTask_TaskStarted = 0x75,
        TPLTask_TaskCompleted = 0x76,
        QuickInfo_ModelComputation_ComputeModelInBackground = 0x77,
        Completion_ModelComputer_DoInBackground = 0x78,
        Completion_ModelComputation_FilterModelInBackground = 0x79,
        Completion_ModelComputation_WaitForModel = 0x7a,
        Completion_SymbolCompletionProvider_GetItemsWorker = 0x7b,
        Completion_KeywordCompletionProvider_GetItemsWorker = 0x7c,
        Completion_SnippetCompletionProvider_GetItemsWorker_CSharp = 0x7d,
        SignatureHelp_ModelComputation_ComputeModelInBackground = 0x7e,
        SignatureHelp_ModelComputation_UpdateModelInBackground = 0x7f,
        Refactoring_CodeRefactoringService_GetRefactoringsAsync = 0x80,
        Refactoring_AddImport = 0x81,
        Refactoring_FullyQualify = 0x82,
        Refactoring_GenerateFromMembers_AddConstructorParameters = 0x83,
        Refactoring_GenerateFromMembers_GenerateConstructor = 0x84,
        Refactoring_GenerateFromMembers_GenerateEqualsAndGetHashCode = 0x85,
        Refactoring_GenerateMember_GenerateConstructor = 0x86,
        Refactoring_GenerateMember_GenerateDefaultConstructors = 0x87,
        Refactoring_GenerateMember_GenerateEnumMember = 0x88,
        Refactoring_GenerateMember_GenerateMethod = 0x89,
        Refactoring_GenerateMember_GenerateVariable = 0x8a,
        Refactoring_ImplementAbstractClass = 0x8b,
        Refactoring_ImplementInterface = 0x8c,
        Refactoring_IntroduceVariable = 0x8d,
        Refactoring_GenerateType = 0x8e,
        Refactoring_RemoveUnnecessaryImports_CSharp = 0x8f,
        Refactoring_RemoveUnnecessaryImports_VisualBasic = 0x90,
        Snippet_OnBeforeInsertion = 0x91,
        Snippet_OnAfterInsertion = 0x92,
        Misc_NonReentrantLock_BlockingWait = 0x93,
        Misc_VisualStudioWaitIndicator_Wait = 0x94,
        Misc_SaveEventsSink_OnBeforeSave = 0x95,
        TaskList_Refresh = 0x96,
        TaskList_NavigateTo = 0x97,
        WinformDesigner_GenerateXML = 0x98,
        NavigateTo_Search = 0x99,
        NavigationService_VSDocumentNavigationService_NavigateTo = 0x9a,
        NavigationBar_ComputeModelAsync = 0x9b,
        NavigationBar_ItemService_GetMembersInTypes_CSharp = 0x9c,
        NavigationBar_ItemService_GetTypesInFile_CSharp = 0x9d,
        NavigationBar_UpdateDropDownsSynchronously_WaitForModel = 0x9e,
        NavigationBar_UpdateDropDownsSynchronously_WaitForSelectedItemInfo = 0x9f,
        EventHookup_Determine_If_Event_Hookup = 0xa0,
        EventHookup_Generate_Handler = 0xa1,
        EventHookup_Type_Char = 0xa2,
        Cache_Created = 0xa3,
        Cache_AddOrAccess = 0xa4,
        Cache_Remove = 0xa5,
        Cache_Evict = 0xa6,
        Cache_EvictAll = 0xa7,
        Cache_ItemRank = 0xa8,
        TextStructureNavigator_GetExtentOfWord = 0xa9,
        TextStructureNavigator_GetSpanOfEnclosing = 0xaa,
        TextStructureNavigator_GetSpanOfFirstChild = 0xab,
        TextStructureNavigator_GetSpanOfNextSibling = 0xac,
        TextStructureNavigator_GetSpanOfPreviousSibling = 0xad,
        Debugging_LanguageDebugInfoService_GetDataTipSpanAndText = 0xae,
        Debugging_VsLanguageDebugInfo_ValidateBreakpointLocation = 0xaf,
        Debugging_VsLanguageDebugInfo_GetProximityExpressions = 0xb0,
        Debugging_VsLanguageDebugInfo_ResolveName = 0xb1,
        Debugging_VsLanguageDebugInfo_GetNameOfLocation = 0xb2,
        Debugging_VsLanguageDebugInfo_GetDataTipText = 0xb3,
        Debugging_EncSession = 0xb4,
        Debugging_EncSession_EditSession = 0xb5,
        Debugging_EncSession_EditSession_EmitDeltaErrorId = 0xb6,
        Debugging_EncSession_EditSession_RudeEdit = 0xb7,
        Simplifier_ReduceAsync = 0xb8,
        Simplifier_ExpandNode = 0xb9,
        Simplifier_ExpandToken = 0xba,
        ForegroundNotificationService_Processed = 0xbb,
        ForegroundNotificationService_NotifyOnForeground = 0xbc,
        BackgroundCompiler_BuildCompilationsAsync = 0xbd,
        PersistenceService_ReadAsync = 0xbe,
        PersistenceService_WriteAsync = 0xbf,
        PersistenceService_ReadAsyncFailed = 0xc0,
        PersistenceService_WriteAsyncFailed = 0xc1,
        PersistenceService_Initialization = 0xc2,
        TemporaryStorageServiceFactory_ReadText = 0xc3,
        TemporaryStorageServiceFactory_WriteText = 0xc4,
        TemporaryStorageServiceFactory_ReadStream = 0xc5,
        TemporaryStorageServiceFactory_WriteStream = 0xc6,
        SmartTags_RefreshSession = 0xc7,
        SmartTags_SmartTagInitializeFixes = 0xc8,
        SmartTags_ApplyQuickFix = 0xc9,
        EditorTestApp_RefreshTask = 0xca,
        EditorTestApp_UpdateDiagnostics = 0xcb,
        IncrementalAnalyzerProcessor_Analyzers = 0xcc,
        IncrementalAnalyzerProcessor_Analyzer = 0xcd,
        IncrementalAnalyzerProcessor_ActiveFileAnalyzers = 0xce,
        IncrementalAnalyzerProcessor_ActiveFileAnalyzer = 0xcf,
        IncrementalAnalyzerProcessor_Shutdown = 0xd0,
        WorkCoordinatorRegistrationService_Register = 0xd1,
        WorkCoordinatorRegistrationService_Unregister = 0xd2,
        WorkCoordinatorRegistrationService_Reanalyze = 0xd3,
        WorkCoordinator_SolutionCrawlerOption = 0xd4,
        WorkCoordinator_PersistentStorageAdded = 0xd5,
        WorkCoordinator_PersistentStorageRemoved = 0xd6,
        WorkCoordinator_Shutdown = 0xd7,
        DiagnosticAnalyzerService_Analyzers = 0xd8,
        DiagnosticAnalyzerDriver_AnalyzerCrash = 0xd9,
        DiagnosticAnalyzerDriver_AnalyzerTypeCount = 0xda,
        PersistedSemanticVersion_Info = 0xdb,
        Esent_Exceptions = 0xdc,
        WorkCoordinator_ShutdownTimeout = 0xdd,
        Diagnostics_HyperLink = 0xde,
        CodeFixes_FixAllOccurrencesSession = 0xdf,
        CodeFixes_FixAllOccurrencesContext = 0xe0,
        CodeFixes_FixAllOccurrencesComputation = 0xe1,
        CodeFixes_FixAllOccurrencesComputation_Diagnostics = 0xe2,
        CodeFixes_FixAllOccurrencesComputation_Fixes = 0xe3,
        CodeFixes_FixAllOccurrencesComputation_Merge = 0xe4,
        CodeFixes_FixAllOccurrencesPreviewChanges = 0xe5,
        SolutionExplorer_AnalyzerItemSource_GetItems = 0xe6,
        SolutionExplorer_DiagnosticItemSource_GetItems = 0xe7,
        WorkCoordinator_ActivieFileEnqueue = 0xe8,
        SymbolFinder_FindDeclarationsAsync = 0xe9,
        SymbolFinder_Project_AddDeclarationsAsync = 0xea,
        SymbolFinder_Assembly_AddDeclarationsAsync = 0xeb,
        SymbolFinder_Solution_Name_FindSourceDeclarationsAsync = 0xec,
        SymbolFinder_Project_Name_FindSourceDeclarationsAsync = 0xed,
        SymbolFinder_Solution_Predicate_FindSourceDeclarationsAsync = 0xee,
        SymbolFinder_Project_Predicate_FindSourceDeclarationsAsync = 0xef,
        Tagger_Diagnostics_RecomputeTags = 0xf0,
        Tagger_Diagnostics_Updated = 0xf1,
        SuggestedActions_HasSuggestedActionsAsync = 0xf2,
        SuggestedActions_GetSuggestedActions = 0xf3,
    }
}
