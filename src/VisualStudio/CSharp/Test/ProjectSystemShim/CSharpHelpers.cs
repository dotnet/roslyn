// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// <auto-generated/>

using System;
using System.IO;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.VisualStudio;
using Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim;
using Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim.Interop;
using Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS;
using Microsoft.VisualStudio.LanguageServices.UnitTests.ProjectSystemShim.Framework;
using Microsoft.VisualStudio.Shell.Interop;

namespace Roslyn.VisualStudio.CSharp.UnitTests.ProjectSystemShim
{
    internal static class CSharpHelpers
    {
        public static CSharpProjectShimWithServices CreateCSharpProject(TestEnvironment environment, string projectName)
        {
            var projectBinPath = Path.GetTempPath();
            var hierarchy = environment.CreateHierarchy(projectName, projectBinPath, "CSharp");

            return new CSharpProjectShimWithServices(
                new MockCSharpProjectRoot(hierarchy),
                environment.ProjectTracker,
                reportExternalErrorCreatorOpt: null,
                projectSystemName: projectName,
                hierarchy: hierarchy,
                serviceProvider: environment.ServiceProvider,
                visualStudioWorkspaceOpt: null,
                hostDiagnosticUpdateSourceOpt: null);
        }

        public static CPSProject CreateCSharpCPSProject(TestEnvironment environment, string projectName, params string[] commandLineArguments)
        {
            return CreateCSharpCPSProject(environment, projectName, projectGuid: Guid.Empty, projectTypeGuid: Guid.Empty.ToString(), commandLineArguments: commandLineArguments);
        }

        public static CPSProject CreateCSharpCPSProject(TestEnvironment environment, string projectName, Guid projectGuid, string projectTypeGuid, params string[] commandLineArguments)
        {
            var tempPath = Path.GetTempPath();
            var projectFilePath = Path.Combine(tempPath, projectName);
            var hierarchy = environment.CreateHierarchy(projectName, projectFilePath, "CSharp");
            var parsedArguments = GetParsedCommandLineArguments(hierarchy, commandLineArguments);

            return CPSProjectFactory.CreateCPSProject(
                environment.ProjectTracker,
                environment.ServiceProvider,
                hierarchy,
                projectName,
                projectFilePath,
                LanguageNames.CSharp,
                projectGuid,
                projectTypeGuid,
                parsedArguments);
        }

        public static void SetCommandLineArguments(CPSProject project, params string[] commandLineArguments)
        {
            var parsedArguments = GetParsedCommandLineArguments(project.Hierarchy, commandLineArguments);
            project.SetCommandLineArguments(parsedArguments);
        }

        private static CommandLineArguments GetParsedCommandLineArguments(IVsHierarchy hierarchy, string[] commandLineArguments)
        {
            // Compute the output path from the argument.
            string outputPath = Path.GetTempPath();
            foreach (var arg in commandLineArguments)
            {
                const string outPrefix = "out:";
                var index = arg.IndexOf(outPrefix);
                if (index > 0)
                {
                    var outputPathArg = arg.Substring(index + outPrefix.Length).Trim();
                    outputPath = Path.GetDirectoryName(outputPathArg);

                    // AbstractProject computes the output path by querying the hierarchy.
                    // So we explicitly set the output path stored by the mock hierarchy.
                    var buildPropertyStorage = hierarchy as IVsBuildPropertyStorage;
                    if (buildPropertyStorage != null)
                    {
                        buildPropertyStorage.SetPropertyValue("OutDir", null, (uint)_PersistStorageType.PST_PROJECT_FILE, outputPath);
                        buildPropertyStorage.SetPropertyValue("TargetFileName", null, (uint)_PersistStorageType.PST_PROJECT_FILE, Path.GetFileName(outputPathArg));
                        break;
                    }
                }
            }

            return CSharpCommandLineParser.Default.Parse(commandLineArguments, outputPath, sdkDirectory: null);
        }

        private class MockCSharpProjectRoot : ICSharpProjectRoot
        {
            private IVsHierarchy _hierarchy;

            public MockCSharpProjectRoot(IVsHierarchy hierarchy)
            {
                _hierarchy = hierarchy;
            }

            int ICSharpProjectRoot.BelongsToProject(string pszFileName)
            {
                throw new NotImplementedException();
            }

            string ICSharpProjectRoot.BuildPerConfigCacheFileName()
            {
                throw new NotImplementedException();
            }

            bool ICSharpProjectRoot.CanCreateFileCodeModel(string pszFile)
            {
                throw new NotImplementedException();
            }

            void ICSharpProjectRoot.ConfigureCompiler(ICSCompiler compiler, ICSInputSet inputSet, bool addSources)
            {
                throw new NotImplementedException();
            }

            object ICSharpProjectRoot.CreateFileCodeModel(string pszFile, ref Guid riid)
            {
                throw new NotImplementedException();
            }

            string ICSharpProjectRoot.GetActiveConfigurationName()
            {
                throw new NotImplementedException();
            }

            string ICSharpProjectRoot.GetFullProjectName()
            {
                throw new NotImplementedException();
            }

            int ICSharpProjectRoot.GetHierarchyAndItemID(string pszFile, out IVsHierarchy ppHier, out uint pItemID)
            {
                ppHier = _hierarchy;

                // Each item should have it's own ItemID, but for simplicity we'll just hard-code a value of
                // no particular significance.
                pItemID = 42;

                return VSConstants.S_OK;
            }

            void ICSharpProjectRoot.GetHierarchyAndItemIDOptionallyInProject(string pszFile, out IVsHierarchy ppHier, out uint pItemID, bool mustBeInProject)
            {
                throw new NotImplementedException();
            }

            string ICSharpProjectRoot.GetProjectLocation()
            {
                throw new NotImplementedException();
            }

            object ICSharpProjectRoot.GetProjectSite(ref Guid riid)
            {
                throw new NotImplementedException();
            }

            void ICSharpProjectRoot.SetProjectSite(ICSharpProjectSite site)
            {
                throw new NotImplementedException();
            }
        }
    }
}
