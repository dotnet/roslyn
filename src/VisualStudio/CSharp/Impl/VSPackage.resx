<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="101" xml:space="preserve">
    <value>C#</value>
    <comment>Used many places.</comment>
  </data>
  <data name="102" xml:space="preserve">
    <value>Advanced</value>
    <comment>"Advanced" node under Tools &gt; Options, Text Editor, C#.</comment>
  </data>
  <data name="103" xml:space="preserve">
    <value>IntelliSense</value>
    <comment>"IntelliSense" node under Tools &gt; Options, Text Editor, C#.</comment>
  </data>
  <data name="104" xml:space="preserve">
    <value>C# Editor</value>
    <comment>"C# Editor" node in profile Import/Export.</comment>
  </data>
  <data name="105" xml:space="preserve">
    <value>Settings for the C# editor found under the Advanced, Formatting, and IntelliSense nodes in the Tools/Options dialog box.</value>
    <comment>"C# Editor" node help text in profile Import/Export.</comment>
  </data>
  <data name="106" xml:space="preserve">
    <value>Settings for general C# options found under the General and Tabs nodes in the Tools/Options dialog box.</value>
    <comment>"C#" node help text in profile Import/Export.</comment>
  </data>
  <data name="306" xml:space="preserve">
    <value>Highlight references to symbol under cursor;Highlight related keywords under cursor;Enter outlining mode when files open;Show procedure line separators;Generate XML documentation comments;Show diagnostics for closed files;Show preview for rename tracking;Place 'System' directives first when sorting usings;Don't put ref or out on custom structs</value>
    <comment>C# Advanced options page keywords</comment>
  </data>
  <data name="307" xml:space="preserve">
    <value>Automatically format statement on semicolon;Automatically format block on brace;Automatically format on paste</value>
    <comment>C# Formatting &gt; General options page keywords</comment>
  </data>
  <data name="308" xml:space="preserve">
    <value>Indent block contents;Indent open and close braces, indent case contents;indent case labels;label indentation</value>
    <comment>C# Formatting &gt; Indentation options page keywords</comment>
  </data>
  <data name="309" xml:space="preserve">
    <value>New line formatting option for braces;New line formatting options for keywords</value>
    <comment>C# Formatting &gt; New Lines options page keywords</comment>
  </data>
  <data name="310" xml:space="preserve">
    <value>Set spacing for method declarations;set spacing for method calls;set other spacing options;set spacing for brackets;set spacing for delimiters;set spacing for operators</value>
    <comment>C# Formatting &gt; Spacing options page keywords</comment>
  </data>
  <data name="311" xml:space="preserve">
    <value>Change formatting options for wrapping;leave block on single line;leave statements and member declarations on the same line</value>
    <comment>C# Formatting &gt; Wrapping options page keywords</comment>
  </data>
  <data name="312" xml:space="preserve">
    <value>Change completion list settings;Pre-select most recently used member</value>
    <comment>C# IntelliSense options page keywords</comment>
  </data>
  <data name="107" xml:space="preserve">
    <value>Formatting</value>
    <comment>"Formatting" category node under Tools &gt; Options, Text Editor, C#, Code Style (no corresponding keywords)</comment>
  </data>
  <data name="108" xml:space="preserve">
    <value>General</value>
    <comment>"General" node under Tools &gt; Options, Text Editor, C# (used for Code Style and Formatting)</comment>
  </data>
  <data name="109" xml:space="preserve">
    <value>Indentation</value>
    <comment>"Indentation" node under Tools &gt; Options, Text Editor, C#, Formatting.</comment>
  </data>
  <data name="110" xml:space="preserve">
    <value>Wrapping</value>
  </data>
  <data name="111" xml:space="preserve">
    <value>New Lines</value>
  </data>
  <data name="112" xml:space="preserve">
    <value>Spacing</value>
  </data>
  <data name="2358" xml:space="preserve">
    <value>CSharp Editor</value>
  </data>
  <data name="2359" xml:space="preserve">
    <value>CSharp Editor with Encoding</value>
  </data>
  <data name="113" xml:space="preserve">
    <value>Microsoft Visual C#</value>
    <comment>Used for String in Tools &gt; Options, Text Editor, File Extensions</comment>
  </data>
  <data name="114" xml:space="preserve">
    <value>Code Style</value>
    <comment>"Code Style" category node under Tools &gt; Options, Text Editor, C# (no corresponding keywords)</comment>
  </data>
  <data name="313" xml:space="preserve">
    <value>Style;Qualify;This;Code Style;var;member access;locals;parameters;var preferences;predefined type;framework type;built-in types;when variable type is apparent;elsewhere;qualify field access;qualify property access; qualify method access;qualify event access;</value>
    <comment>C# Code Style options page keywords</comment>
  </data>
  <data name="115" xml:space="preserve">
    <value>Naming</value>
  </data>
  <data name="314" xml:space="preserve">
    <value>Naming Style;Name Styles;Naming Rule;Naming Conventions</value>
    <comment>C# Naming Style options page keywords</comment>
  </data>
</root>