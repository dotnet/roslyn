<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="101" xml:space="preserve">
    <value>C#</value>
    <comment>Used many places.</comment>
  </data>
  <data name="102" xml:space="preserve">
    <value>Advanced</value>
    <comment>"Advanced" node under Tools &gt; Options, Text Editor, C#.</comment>
  </data>
  <data name="103" xml:space="preserve">
    <value>IntelliSense</value>
    <comment>"IntelliSense" node under Tools &gt; Options, Text Editor, C#.</comment>
  </data>
  <data name="104" xml:space="preserve">
    <value>C# Editor</value>
    <comment>"C# Editor" node in profile Import/Export.</comment>
  </data>
  <data name="105" xml:space="preserve">
    <value>Settings for the C# editor found under the Advanced, Formatting, and IntelliSense nodes in the Tools/Options dialog box.</value>
    <comment>"C# Editor" node help text in profile Import/Export.</comment>
  </data>
  <data name="106" xml:space="preserve">
    <value>Settings for general C# options found under the General and Tabs nodes in the Tools/Options dialog box.</value>
    <comment>"C#" node help text in profile Import/Export.</comment>
  </data>
  <data name="306" xml:space="preserve">
    <value>Show diagnostics for closed files;
Colorize regular expression; 
Highlight related components under cursor; 
Report invalid regular expressions;
Enable full solution analysis;
Perform editor feature analysis in external process;
Enable navigation to decompiled sources;
Using directives;
Place system directives first when sorting usings;
Separate using directive groups;
Suggest usings for types in reference assemblies;
Suggest usings for types in NuGet packages;
Highlighting;
Highlight references to symbol under cursor;
Highlight related keywords under cursor;
Outlining;
Enter outlining mode when files open;
Show procedure line separators;
Show outlining for declaration level constructs;
Show outlining for code level constructs;
Show outlining for comments and preprocessor regions;
Collapse regions when collapsing to definitions;
Fading;
Fade out unused usings;
Fade out unreachable code;
Block Structure Guides;
Show guides for declaration level constructs;
Show guides for code level constructs;
Editor Help;
Generate XML documentation comments for ///;
Insert * at the start of new lines when writing /* */ comments;
Show preview for rename tracking;
Split string literals on Enter;
Report invalid placeholders in string.Format calls;
Extract Method;
Don't put ref or out on custom struct;
Implement Interface or Abstract Class;
When inserting properties, events and methods, place them;
with other members of the same kind;
at the end;
When generating property;
prefer throwing properties;
prefer auto properties;
regex;
regular expression;
Use enhanced colors;</value>
    <comment>C# Advanced options page keywords</comment>
  </data>
  <data name="307" xml:space="preserve">
    <value>Automatically format when typing;
Automatically format statement on semicolon ;
Automatically format block on end brace;
Automatically format on return;
Automatically format on paste;</value>
    <comment>C# Formatting &gt; General options page keywords</comment>
  </data>
  <data name="308" xml:space="preserve">
    <value>Indent block contents; 
indent open and close braces; 
indent case contents; 
indent case contents (when block); 
indent case labels; 
label indentation; 
place goto labels in leftmost column; 
indent labels normally; 
place goto labels one indent less than current;</value>
    <comment>C# Formatting &gt; Indentation options page keywords</comment>
  </data>
  <data name="309" xml:space="preserve">
    <value>New line formatting option for braces;New line formatting options for keywords;New line options for braces;
Place open brace on new line for types;
Place open brace on new line for methods and local functions;
Place open brace on new line for properties, indexers, and events;
Place open brace on new line for property, indexer, and event accessors;
Place open brace on new line for anonymous methods;
Place open brace on new line for control blocks;
Place open brace on new line for anonymous types;
Place open brace on new line for object, collection and array initializers;
New line options for keywords;
Place else on new line;
Place catch on new line;
Place finally on new line;
New line options for expression;
Place members in object initializers on new line;
Place members in anonymous types on new line;
Place query expression clauses on new line;</value>
    <comment>C# Formatting &gt; New Lines options page keywords</comment>
  </data>
  <data name="310" xml:space="preserve">
    <value>Set spacing for method declarations;
Insert space between method name and its opening parenthesis;
Insert space within parameter list parentheses;
Insert space within empty parameter list parentheses;
Set spacing for method calls;
Insert space within argument list parentheses;
Insert space within empty argument list parentheses;
Set other spacing options;
Insert space after keywords in control flow statements;
Insert space within parentheses of expressions;
Insert space within parentheses of type casts;
Insert spaces within parentheses of control flow statements;
Insert space after cast;
Ignore spaces in declaration statements;
Set spacing for brackets;
Insert space before open square bracket;
Insert space within empty square brackets;
Insert spaces within square brackets;
Set spacing for delimiters;
Insert space after colon for base or interface in type declaration;
Insert space after comma;
Insert space after dot;
Insert space after semicolon in for statement;
Insert space before colon for base or interface in type declaration;
Insert space before comma;
Insert space before dot;
Insert space before semicolon in for statement;
Set spacing for operators;
Ignore spaces around binary operators;
Remove spaces before and after binary operators;
Insert space before and after binary operators;</value>
    <comment>C# Formatting &gt; Spacing options page keywords</comment>
  </data>
  <data name="311" xml:space="preserve">
    <value>Change formatting options for wrapping;leave block on single line;leave statements and member declarations on the same line</value>
    <comment>C# Formatting &gt; Wrapping options page keywords</comment>
  </data>
  <data name="312" xml:space="preserve">
    <value>Change completion list settings;Pre-select most recently used member; Completion Lists;
Show completion list after a character is typed;
Show completion list after a character is deleted;
Highlight matching portions of completion list items;
Show completion item filters;
Snippets behavior;
Never include snippets;
Always include snippets;
Include snippets when ?-Tab is typed after an identifier;
Enter key behavior;
Never add new line on enter;
Only add new line on enter after end of fully typed word;
Always add new line on enter;
Show name suggestions;</value>
    <comment>C# IntelliSense options page keywords</comment>
  </data>
  <data name="107" xml:space="preserve">
    <value>Formatting</value>
    <comment>"Formatting" category node under Tools &gt; Options, Text Editor, C#, Code Style (no corresponding keywords)</comment>
  </data>
  <data name="108" xml:space="preserve">
    <value>General</value>
    <comment>"General" node under Tools &gt; Options, Text Editor, C# (used for Code Style and Formatting)</comment>
  </data>
  <data name="109" xml:space="preserve">
    <value>Indentation</value>
    <comment>"Indentation" node under Tools &gt; Options, Text Editor, C#, Formatting.</comment>
  </data>
  <data name="110" xml:space="preserve">
    <value>Wrapping</value>
  </data>
  <data name="111" xml:space="preserve">
    <value>New Lines</value>
  </data>
  <data name="112" xml:space="preserve">
    <value>Spacing</value>
  </data>
  <data name="2358" xml:space="preserve">
    <value>C# Editor</value>
  </data>
  <data name="2359" xml:space="preserve">
    <value>C# Editor with Encoding</value>
  </data>
  <data name="113" xml:space="preserve">
    <value>Microsoft Visual C#</value>
    <comment>Used for String in Tools &gt; Options, Text Editor, File Extensions</comment>
  </data>
  <data name="114" xml:space="preserve">
    <value>Code Style</value>
    <comment>"Code Style" category node under Tools &gt; Options, Text Editor, C# (no corresponding keywords)</comment>
  </data>
  <data name="313" xml:space="preserve">
    <value>Style;Qualify;This;Code Style;var;member access;locals;parameters;var preferences;predefined type;framework type;built-in types;when variable type is apparent;elsewhere;qualify field access;qualify property access; qualify method access;qualify event access;</value>
    <comment>C# Code Style options page keywords</comment>
  </data>
  <data name="115" xml:space="preserve">
    <value>Naming</value>
  </data>
  <data name="314" xml:space="preserve">
    <value>Naming Style;Name Styles;Naming Rule;Naming Conventions</value>
    <comment>C# Naming Style options page keywords</comment>
  </data>
  <data name="116" xml:space="preserve">
    <value>C# Tools</value>
    <comment>Help &gt; About</comment>
  </data>
  <data name="117" xml:space="preserve">
    <value>C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.</value>
    <comment>Help &gt; About</comment>
  </data>
  <data name="Visual_CSharp_Script" xml:space="preserve">
    <value>Visual C# Script</value>
  </data>
  <data name="An_empty_CSharp_script_file" xml:space="preserve">
    <value>An empty C# script file.</value>
  </data>
</root>