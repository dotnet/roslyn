<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <RootNamespace>Microsoft.CodeAnalysis.LanguageServerIndexFormat.Generator</RootNamespace>
    <TargetFrameworks>net7.0;net472</TargetFrameworks>
    <RuntimeIdentifiers>$(RoslynPortableRuntimeIdentifiers)</RuntimeIdentifiers>

    <!-- We want to pack this entire project and it's dependencies as a tool in the tools/ subdirectory -->
    <IsPackable>true</IsPackable>
    <IsTool>true</IsTool>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <ContentTargetFolders>tools</ContentTargetFolders>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_GetFilesToPackage</TargetsForTfmSpecificContentInPackage>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>

    <!-- Suppress warning that we don't have anything in lib/ref folders, because since this is a tool there won't be anything there -->
    <NoWarn>$(NoWarn);NU5128</NoWarn>

    <!-- When our Pack runs, it runs ResolveReferences again, but since we're not in a "normal" build the invocation of ResolveAssemblyReferences doesn't
         look for dependencies. This forces that regardless. -->
    <_ResolveReferenceDependencies>true</_ResolveReferenceDependencies>

    <PackageId>Microsoft.CodeAnalysis.Lsif.Generator</PackageId>
    <PackageDescription>A tool to consume projects and compilations and emit an LSIF-compatible output that provides information about definitions, references and more.
    For more information about LSIF, see https://code.visualstudio.com/blogs/2019/02/19/lsif</PackageDescription>

    <IsShipping>false</IsShipping>

    <!-- Don't include other languages; at this point we don't have a end-to-end experience for LSIF indexing in other languages,
         but until then we can save the download/deploy cost for each indexing job. -->
    <SatelliteResourceLanguages>en</SatelliteResourceLanguages>
  </PropertyGroup>

  <Target Name="_GetFilesToPackage" DependsOnTargets="ResolveReferences;BuiltProjectOutputGroup">
    <ItemGroup>
      <!-- Include all dependencies; the DestinationSubDirectory is to handle culture-specific resource files that should be placed in
           subdirectories -->

      <!-- HACK: Setting SatelliteResourceLanguages still seems to be bringing satellite resources from other project references along,
           so we'll filter this in the condition here. --> 
      <TfmSpecificPackageFile Include="@(ReferenceCopyLocalPaths)"
                              PackagePath="tools\$(TargetFramework)\any\%(ReferenceCopyLocalPaths.DestinationSubDirectory)"
                              Condition="'%(ReferenceCopyLocalPaths.DestinationSubDirectory)' == '' and '%(Extension)' != '.pdb' and '%(Extension)' != '.xml'" />

      <TfmSpecificPackageFile Include="@(BuiltProjectOutputGroupOutput)" PackagePath="tools\$(TargetFramework)\any" />
      <TfmSpecificPackageFile Include="$(ProjectDepsFilePath)" PackagePath="tools\$(TargetFramework)\any" Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <Compile Include="..\..\..\Compilers\Core\Portable\InternalUtilities\IsExternalInit.cs" Link="Utilities\IsExternalInit.cs" />
    <Compile Include="..\..\..\Workspaces\Remote\Core\VisualStudioMefHostServices.cs" Link="VisualStudioMefHostServices.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Logging" Version="$(MicrosoftExtensionsLoggingVersion)" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="$(MicrosoftExtensionsLoggingAbstractionsVersion)" />
    <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="$(MicrosoftExtensionsLoggingConsoleVersion)" />
    <PackageReference Include="Microsoft.VisualStudio.Composition" Version="$(MicrosoftVisualStudioCompositionVersion)" />
    <PackageReference Include="MSBuild.StructuredLogger" Version="$(MSBuildStructuredLoggerVersion)" />
    <PackageReference Include="Newtonsoft.Json" Version="$(NewtonsoftJsonVersion)" />
    <PackageReference Include="System.CommandLine" Version="$(SystemCommandLineVersion)" />
  </ItemGroup>

  <!-- Since we may be loading analyzers in-process, we need to have the appropriate binding redirects in place -->
  <Import Project="$(RepositoryEngineeringDir)targets\GenerateCompilerExecutableBindingRedirects.targets" />

  <ItemGroup>
    <None Include=".editorconfig" />
    <None Include="App.config" />
    <None Include="README.md" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\LanguageServer\Protocol\Microsoft.CodeAnalysis.LanguageServer.Protocol.csproj" />
    <ProjectReference Include="..\..\..\Workspaces\Core\MSBuild\Microsoft.CodeAnalysis.Workspaces.MSBuild.csproj" />
    <ProjectReference Include="..\..\..\Workspaces\Core\MSBuild.BuildHost\Microsoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.csproj" />
    <ProjectReference Include="..\..\..\Workspaces\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj" />
    <ProjectReference Include="..\..\..\Workspaces\VisualBasic\Portable\Microsoft.CodeAnalysis.VisualBasic.Workspaces.vbproj" />
    <ProjectReference Include="..\..\Core\Portable\Microsoft.CodeAnalysis.Features.csproj" />

    <!-- Below is the transitive closure of the project references above to placate BuildBoss. If changes are made above this line,
         please update the stuff here accordingly. -->
    <ProjectReference Include="..\..\..\Compilers\Core\Portable\Microsoft.CodeAnalysis.csproj" />
    <ProjectReference Include="..\..\..\Compilers\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.csproj" />
    <ProjectReference Include="..\..\..\Compilers\VisualBasic\Portable\Microsoft.CodeAnalysis.VisualBasic.vbproj" />
    <ProjectReference Include="..\..\..\Workspaces\Core\Portable\Microsoft.CodeAnalysis.Workspaces.csproj" />
    <ProjectReference Include="..\..\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Features.csproj" />
    <ProjectReference Include="..\..\VisualBasic\Portable\Microsoft.CodeAnalysis.VisualBasic.Features.vbproj" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Microsoft.CodeAnalysis.LanguageServerIndexFormat.Generator.UnitTests" />
  </ItemGroup>
</Project>