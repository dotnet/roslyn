<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Inline_temporary_variable" xml:space="preserve">
    <value>Inline temporary variable</value>
  </data>
  <data name="Conflict_s_detected" xml:space="preserve">
    <value>Conflict(s) detected.</value>
  </data>
  <data name="Invert_if_statement" xml:space="preserve">
    <value>Invert if statement</value>
  </data>
  <data name="Simplify_lambda_expression" xml:space="preserve">
    <value>Simplify lambda expression</value>
  </data>
  <data name="Simplify_all_occurrences" xml:space="preserve">
    <value>Simplify all occurrences</value>
  </data>
  <data name="Move_declaration_near_reference" xml:space="preserve">
    <value>Move declaration near reference</value>
  </data>
  <data name="Warning_colon_Declaration_changes_scope_and_may_change_meaning" xml:space="preserve">
    <value>Warning: Declaration changes scope and may change meaning.</value>
  </data>
  <data name="Remove_Unnecessary_Usings" xml:space="preserve">
    <value>Remove Unnecessary Usings</value>
  </data>
  <data name="lambda_expression" xml:space="preserve">
    <value>&lt;lambda expression&gt;</value>
  </data>
  <data name="Autoselect_disabled_due_to_potential_lambda_declaration" xml:space="preserve">
    <value>Autoselect disabled due to potential lambda declaration.</value>
  </data>
  <data name="member_name" xml:space="preserve">
    <value>&lt;member name&gt; = </value>
  </data>
  <data name="Autoselect_disabled_due_to_possible_explicitly_named_anonymous_type_member_creation" xml:space="preserve">
    <value>Autoselect disabled due to possible explicitly named anonymous type member creation.</value>
  </data>
  <data name="element_name" xml:space="preserve">
    <value>&lt;element name&gt; : </value>
  </data>
  <data name="Autoselect_disabled_due_to_possible_tuple_type_element_creation" xml:space="preserve">
    <value>Autoselect disabled due to possible tuple type element creation.</value>
  </data>
  <data name="range_variable" xml:space="preserve">
    <value>&lt;range variable&gt;</value>
  </data>
  <data name="Autoselect_disabled_due_to_potential_range_variable_declaration" xml:space="preserve">
    <value>Autoselect disabled due to potential range variable declaration.</value>
  </data>
  <data name="Remove_Unnecessary_Cast" xml:space="preserve">
    <value>Remove Unnecessary Cast</value>
  </data>
  <data name="Cast_is_redundant" xml:space="preserve">
    <value>Cast is redundant</value>
  </data>
  <data name="Simplify_name_0" xml:space="preserve">
    <value>Simplify name '{0}'</value>
  </data>
  <data name="Simplify_member_access_0" xml:space="preserve">
    <value>Simplify member access '{0}'</value>
  </data>
  <data name="Remove_this_qualification" xml:space="preserve">
    <value>Remove 'this' qualification</value>
  </data>
  <data name="Name_can_be_simplified" xml:space="preserve">
    <value>Name can be simplified</value>
  </data>
  <data name="Can_t_determine_valid_range_of_statements_to_extract" xml:space="preserve">
    <value>Can't determine valid range of statements to extract</value>
  </data>
  <data name="Not_all_code_paths_return" xml:space="preserve">
    <value>Not all code paths return</value>
  </data>
  <data name="Selection_does_not_contain_a_valid_node" xml:space="preserve">
    <value>Selection does not contain a valid node</value>
  </data>
  <data name="Invalid_selection" xml:space="preserve">
    <value>Invalid selection.</value>
  </data>
  <data name="Selection_does_not_contain_a_valid_token" xml:space="preserve">
    <value>Selection does not contain a valid token.</value>
  </data>
  <data name="No_valid_selection_to_perform_extraction" xml:space="preserve">
    <value>No valid selection to perform extraction.</value>
  </data>
  <data name="No_common_root_node_for_extraction" xml:space="preserve">
    <value>No common root node for extraction.</value>
  </data>
  <data name="Contains_invalid_selection" xml:space="preserve">
    <value>Contains invalid selection.</value>
  </data>
  <data name="The_selection_contains_syntactic_errors" xml:space="preserve">
    <value>The selection contains syntactic errors</value>
  </data>
  <data name="Selection_can_not_cross_over_preprocessor_directives" xml:space="preserve">
    <value>Selection can not cross over preprocessor directives.</value>
  </data>
  <data name="Selection_can_not_contain_a_yield_statement" xml:space="preserve">
    <value>Selection can not contain a yield statement.</value>
  </data>
  <data name="Selection_can_not_contain_throw_statement" xml:space="preserve">
    <value>Selection can not contain throw statement.</value>
  </data>
  <data name="Selection_can_not_be_part_of_constant_initializer_expression" xml:space="preserve">
    <value>Selection can not be part of constant initializer expression.</value>
  </data>
  <data name="Selection_can_not_contain_a_pattern_expression" xml:space="preserve">
    <value>Selection can not contain a pattern expression.</value>
  </data>
  <data name="The_selected_code_is_inside_an_unsafe_context" xml:space="preserve">
    <value>The selected code is inside an unsafe context.</value>
  </data>
  <data name="No_valid_statement_range_to_extract" xml:space="preserve">
    <value>No valid statement range to extract</value>
  </data>
  <data name="deprecated" xml:space="preserve">
    <value>deprecated</value>
  </data>
  <data name="extension" xml:space="preserve">
    <value>extension</value>
  </data>
  <data name="awaitable" xml:space="preserve">
    <value>awaitable</value>
  </data>
  <data name="awaitable_extension" xml:space="preserve">
    <value>awaitable, extension</value>
  </data>
  <data name="Organize_Usings" xml:space="preserve">
    <value>Organize Usings</value>
  </data>
  <data name="Remove_and_Sort_Usings" xml:space="preserve">
    <value>R&amp;emove and Sort Usings</value>
  </data>
  <data name="Autoselect_disabled_due_to_potential_implicit_array_creation" xml:space="preserve">
    <value>Autoselect disabled due to potential implicit array creation.</value>
  </data>
  <data name="implicit_array_creation" xml:space="preserve">
    <value>&lt;implicit array creation&gt;</value>
  </data>
  <data name="Insert_await" xml:space="preserve">
    <value>Insert 'await'.</value>
  </data>
  <data name="Make_0_return_Task_instead_of_void" xml:space="preserve">
    <value>Make {0} return Task instead of void.</value>
  </data>
  <data name="Change_return_type_from_0_to_1" xml:space="preserve">
    <value>Change return type from {0} to {1}</value>
  </data>
  <data name="Replace_return_with_yield_return" xml:space="preserve">
    <value>Replace return with yield return</value>
  </data>
  <data name="Generate_explicit_conversion_operator_in_0" xml:space="preserve">
    <value>Generate explicit conversion operator in '{0}'</value>
  </data>
  <data name="Generate_implicit_conversion_operator_in_0" xml:space="preserve">
    <value>Generate implicit conversion operator in '{0}'</value>
  </data>
  <data name="Do_not_change_this_code_Put_cleanup_code_in_Dispose_bool_disposing_above" xml:space="preserve">
    <value>Do not change this code. Put cleanup code in Dispose(bool disposing) above.</value>
  </data>
  <data name="TODO_colon_free_unmanaged_resources_unmanaged_objects_and_override_a_finalizer_below" xml:space="preserve">
    <value>TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.</value>
  </data>
  <data name="TODO_colon_override_a_finalizer_only_if_Dispose_bool_disposing_above_has_code_to_free_unmanaged_resources" xml:space="preserve">
    <value>TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.</value>
  </data>
  <data name="This_code_added_to_correctly_implement_the_disposable_pattern" xml:space="preserve">
    <value>This code added to correctly implement the disposable pattern.</value>
  </data>
  <data name="TODO_colon_uncomment_the_following_line_if_the_finalizer_is_overridden_above" xml:space="preserve">
    <value>TODO: uncomment the following line if the finalizer is overridden above.</value>
  </data>
  <data name="Using_directive_is_unnecessary" xml:space="preserve">
    <value>Using directive is unnecessary.</value>
  </data>
  <data name="try_block" xml:space="preserve">
    <value>try block</value>
    <comment>{Locked="try"} "try" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="catch_clause" xml:space="preserve">
    <value>catch clause</value>
    <comment>{Locked="catch"} "catch" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="filter_clause" xml:space="preserve">
    <value>filter clause</value>
  </data>
  <data name="finally_clause" xml:space="preserve">
    <value>finally clause</value>
    <comment>{Locked="finally"} "finally" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="fixed_statement" xml:space="preserve">
    <value>fixed statement</value>
    <comment>{Locked="fixed"} "fixed" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="using_statement" xml:space="preserve">
    <value>using statement</value>
    <comment>{Locked="using"} "using" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="lock_statement" xml:space="preserve">
    <value>lock statement</value>
    <comment>{Locked="lock"} "lock" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="foreach_statement" xml:space="preserve">
    <value>foreach statement</value>
    <comment>{Locked="foreach"} "foreach" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="checked_statement" xml:space="preserve">
    <value>checked statement</value>
    <comment>{Locked="checked"} "checked" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="unchecked_statement" xml:space="preserve">
    <value>unchecked statement</value>
    <comment>{Locked="unchecked"} "unchecked" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="yield_statement" xml:space="preserve">
    <value>yield statement</value>
    <comment>{Locked="yield"} "yield" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="await_expression" xml:space="preserve">
    <value>await expression</value>
    <comment>{Locked="await"} "await" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="lambda" xml:space="preserve">
    <value>lambda</value>
  </data>
  <data name="anonymous_method" xml:space="preserve">
    <value>anonymous method</value>
  </data>
  <data name="from_clause" xml:space="preserve">
    <value>from clause</value>
  </data>
  <data name="join_clause" xml:space="preserve">
    <value>join clause</value>
    <comment>{Locked="join"} "join" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="let_clause" xml:space="preserve">
    <value>let clause</value>
    <comment>{Locked="let"} "let" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="where_clause" xml:space="preserve">
    <value>where clause</value>
    <comment>{Locked="where"} "where" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="orderby_clause" xml:space="preserve">
    <value>orderby clause</value>
    <comment>{Locked="orderby"} "orderby" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="select_clause" xml:space="preserve">
    <value>select clause</value>
    <comment>{Locked="select"} "select" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="groupby_clause" xml:space="preserve">
    <value>groupby clause</value>
    <comment>{Locked="groupby"} "groupby" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="query_body" xml:space="preserve">
    <value>query body</value>
  </data>
  <data name="into_clause" xml:space="preserve">
    <value>into clause</value>
    <comment>{Locked="into"} "into" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="is_pattern" xml:space="preserve">
    <value>is pattern</value>
    <comment>{Locked="is"} "is" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="deconstruction" xml:space="preserve">
    <value>deconstruction</value>
  </data>
  <data name="tuple" xml:space="preserve">
    <value>tuple</value>
  </data>
  <data name="local_function" xml:space="preserve">
    <value>local function</value>
  </data>
  <data name="out_var" xml:space="preserve">
    <value>out variable</value>
    <comment>{Locked="out"} "out" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="ref_local_or_expression" xml:space="preserve">
    <value>ref local or expression</value>
    <comment>{Locked="ref"} "ref" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="v7_switch" xml:space="preserve">
    <value>C# 7 enhanced switch statement</value>
  </data>
  <data name="global_statement" xml:space="preserve">
    <value>global statement</value>
    <comment>{Locked="global"} "global" is a C# keyword and should not be localized.</comment>
  </data>
  <data name="using_namespace" xml:space="preserve">
    <value>using namespace</value>
  </data>
  <data name="using_directive" xml:space="preserve">
    <value>using directive</value>
  </data>
  <data name="struct_" xml:space="preserve">
    <value>struct</value>
    <comment>{Locked}</comment>
  </data>
  <data name="event_field" xml:space="preserve">
    <value>event field</value>
  </data>
  <data name="conversion_operator" xml:space="preserve">
    <value>conversion operator</value>
  </data>
  <data name="destructor" xml:space="preserve">
    <value>destructor</value>
  </data>
  <data name="indexer" xml:space="preserve">
    <value>indexer</value>
  </data>
  <data name="property_getter" xml:space="preserve">
    <value>property getter</value>
  </data>
  <data name="indexer_getter" xml:space="preserve">
    <value>indexer getter</value>
  </data>
  <data name="property_setter" xml:space="preserve">
    <value>property setter</value>
  </data>
  <data name="indexer_setter" xml:space="preserve">
    <value>indexer setter</value>
  </data>
  <data name="attribute_target" xml:space="preserve">
    <value>attribute target</value>
  </data>
  <data name="_0_does_not_contain_a_constructor_that_takes_that_many_arguments" xml:space="preserve">
    <value>'{0}' does not contain a constructor that takes that many arguments.</value>
  </data>
  <data name="The_name_0_does_not_exist_in_the_current_context" xml:space="preserve">
    <value>The name '{0}' does not exist in the current context.</value>
  </data>
  <data name="Hide_base_member" xml:space="preserve">
    <value>Hide base member</value>
  </data>
  <data name="Delegate_invocation_can_be_simplified" xml:space="preserve">
    <value>Delegate invocation can be simplified.</value>
  </data>
  <data name="Properties" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="Use_explicit_type_instead_of_var" xml:space="preserve">
    <value>Use explicit type instead of 'var'</value>
  </data>
  <data name="Use_explicit_type" xml:space="preserve">
    <value>Use explicit type</value>
  </data>
  <data name="use_var_instead_of_explicit_type" xml:space="preserve">
    <value>use 'var' instead of explicit type</value>
  </data>
  <data name="Use_implicit_type" xml:space="preserve">
    <value>Use implicit type</value>
  </data>
  <data name="Autoselect_disabled_due_to_namespace_declaration" xml:space="preserve">
    <value>Autoselect disabled due to namespace declaration.</value>
  </data>
  <data name="namespace_name" xml:space="preserve">
    <value>&lt;namespace name&gt;</value>
  </data>
  <data name="Autoselect_disabled_due_to_type_declaration" xml:space="preserve">
    <value>Autoselect disabled due to type declaration.</value>
  </data>
  <data name="Autoselect_disabled_due_to_possible_deconstruction_declaration" xml:space="preserve">
    <value>Autoselect disabled due to possible deconstruction declaration.</value>
  </data>
  <data name="Upgrade_this_project_to_csharp_language_version_0" xml:space="preserve">
    <value>Upgrade this project to C# language version '{0}'</value>
  </data>
  <data name="Upgrade_all_csharp_projects_to_language_version_0" xml:space="preserve">
    <value>Upgrade all C# projects to language version '{0}'</value>
  </data>
  <data name="class_name" xml:space="preserve">
    <value>&lt;class name&gt;</value>
  </data>
  <data name="interface_name" xml:space="preserve">
    <value>&lt;interface name&gt;</value>
  </data>
  <data name="designation_name" xml:space="preserve">
    <value>&lt;designation name&gt;</value>
  </data>
  <data name="struct_name" xml:space="preserve">
    <value>&lt;struct name&gt;</value>
  </data>
  <data name="Make_method_async" xml:space="preserve">
    <value>Make method async</value>
  </data>
  <data name="Make_method_async_remain_void" xml:space="preserve">
    <value>Make method async (stay void)</value>
  </data>
  <data name="Add_this" xml:space="preserve">
    <value>Add 'this.'</value>
  </data>
  <data name="Convert_if_to_switch" xml:space="preserve">
    <value>Convert 'if' to 'switch'</value>
  </data>
  <data name="Warning_Extracting_a_local_function_reference_may_produce_invalid_code" xml:space="preserve">
    <value>Warning: Extracting a local function reference may produce invalid code</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>&lt;Name&gt;</value>
  </data>
  <data name="Autoselect_disabled_due_to_member_declaration" xml:space="preserve">
    <value>Autoselect disabled due to member declaration</value>
  </data>
</root>