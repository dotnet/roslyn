*REMOVED*static Microsoft.CodeAnalysis.Completion.CompletionItem.Create(string displayText, string filterText = null, string sortText = null, Microsoft.CodeAnalysis.Text.TextSpan span = default(Microsoft.CodeAnalysis.Text.TextSpan), System.Collections.Immutable.ImmutableDictionary<string, string> properties = null, System.Collections.Immutable.ImmutableArray<string> tags = default(System.Collections.Immutable.ImmutableArray<string>), Microsoft.CodeAnalysis.Completion.CompletionItemRules rules = null) -> Microsoft.CodeAnalysis.Completion.CompletionItem
Microsoft.CodeAnalysis.Completion.CompletionChange.TextChange.get -> Microsoft.CodeAnalysis.Text.TextChange
Microsoft.CodeAnalysis.Completion.CompletionChange.WithTextChange(Microsoft.CodeAnalysis.Text.TextChange textChange) -> Microsoft.CodeAnalysis.Completion.CompletionChange
Microsoft.CodeAnalysis.Completion.CompletionContext.CompletionListSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.Completion.CompletionContext.CompletionListSpan.set -> void
Microsoft.CodeAnalysis.Completion.CompletionItemRules.SelectionBehavior.get -> Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior
Microsoft.CodeAnalysis.Completion.CompletionItemRules.WithSelectionBehavior(Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior selectionBehavior) -> Microsoft.CodeAnalysis.Completion.CompletionItemRules
Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior
Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior.Default = 0 -> Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior
Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior.HardSelection = 2 -> Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior
Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior.SoftSelection = 1 -> Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior
Microsoft.CodeAnalysis.Completion.CompletionList.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.Completion.CompletionList.WithSpan(Microsoft.CodeAnalysis.Text.TextSpan span) -> Microsoft.CodeAnalysis.Completion.CompletionList
Microsoft.CodeAnalysis.Completion.CompletionRules.SnippetsRule.get -> Microsoft.CodeAnalysis.Completion.SnippetsRule
Microsoft.CodeAnalysis.Completion.CompletionRules.WithSnippetsRule(Microsoft.CodeAnalysis.Completion.SnippetsRule snippetsRule) -> Microsoft.CodeAnalysis.Completion.CompletionRules
Microsoft.CodeAnalysis.Completion.SnippetsRule
Microsoft.CodeAnalysis.Completion.SnippetsRule.AlwaysInclude = 2 -> Microsoft.CodeAnalysis.Completion.SnippetsRule
Microsoft.CodeAnalysis.Completion.SnippetsRule.Default = 0 -> Microsoft.CodeAnalysis.Completion.SnippetsRule
Microsoft.CodeAnalysis.Completion.SnippetsRule.IncludeAfterTypingIdentifierQuestionTab = 3 -> Microsoft.CodeAnalysis.Completion.SnippetsRule
Microsoft.CodeAnalysis.Completion.SnippetsRule.NeverInclude = 1 -> Microsoft.CodeAnalysis.Completion.SnippetsRule
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AbstractEditAndContinueAnalyzer() -> void
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AddRudeDeleteAroundActiveStatement(System.Collections.Generic.List<Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnostic> diagnostics, Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.Text.TextSpan newActiveStatementSpan) -> void
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AddRudeDiagnostic(System.Collections.Generic.List<Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnostic> diagnostics, Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.SyntaxNode newNode, Microsoft.CodeAnalysis.Text.TextSpan newActiveStatementSpan) -> void
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AddRudeInsertAroundActiveStatement(System.Collections.Generic.List<Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnostic> diagnostics, Microsoft.CodeAnalysis.SyntaxNode newNode) -> void
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AddRudeUpdateAroundActiveStatement(System.Collections.Generic.List<Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnostic> diagnostics, Microsoft.CodeAnalysis.SyntaxNode newNode) -> void
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AnalyzeDocumentAsync(Microsoft.CodeAnalysis.Solution baseSolution, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementSpan> baseActiveStatements, Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults>
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetEncompassingAncestor(Microsoft.CodeAnalysis.SyntaxNode bodyOrMatchRootOpt) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetSymbolSyntax(Microsoft.CodeAnalysis.ISymbol local, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.ReportUnmatchedStatements<TSyntaxNode>(System.Collections.Generic.List<Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnostic> diagnostics, Microsoft.CodeAnalysis.Differencing.Match<Microsoft.CodeAnalysis.SyntaxNode> match, int syntaxKind, Microsoft.CodeAnalysis.SyntaxNode oldActiveStatement, Microsoft.CodeAnalysis.SyntaxNode newActiveStatement, System.Func<TSyntaxNode, TSyntaxNode, bool> areEquivalent, System.Func<TSyntaxNode, TSyntaxNode, bool> areSimilar) -> void
Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags
Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.LeafFrame = 1 -> Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags
Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.NonUserCode = 4 -> Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags
Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.None = 0 -> Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags
Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.PartiallyExecuted = 2 -> Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags
Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementSpan
Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementSpan.ActiveStatementSpan(Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags flags, Microsoft.CodeAnalysis.Text.LinePositionSpan span) -> void
Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults
Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.HasChanges.get -> bool
Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.HasChangesAndCompilationErrors.get -> bool
Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.HasChangesAndErrors.get -> bool
Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnostic
Microsoft.CodeAnalysis.EditAndContinue.StateMachineKind
Microsoft.CodeAnalysis.EditAndContinue.StateMachineKind.Async = 1 -> Microsoft.CodeAnalysis.EditAndContinue.StateMachineKind
Microsoft.CodeAnalysis.EditAndContinue.StateMachineKind.Iterator = 2 -> Microsoft.CodeAnalysis.EditAndContinue.StateMachineKind
Microsoft.CodeAnalysis.EditAndContinue.StateMachineKind.None = 0 -> Microsoft.CodeAnalysis.EditAndContinue.StateMachineKind
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right) -> bool
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AreEquivalentActiveStatements(Microsoft.CodeAnalysis.SyntaxNode oldStatement, Microsoft.CodeAnalysis.SyntaxNode newStatement, int statementPart) -> bool
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.ComputeBodyMatch(Microsoft.CodeAnalysis.SyntaxNode oldBody, Microsoft.CodeAnalysis.SyntaxNode newBody, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode>> knownMatches) -> Microsoft.CodeAnalysis.Differencing.Match<Microsoft.CodeAnalysis.SyntaxNode>
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.ComputeTopLevelMatch(Microsoft.CodeAnalysis.SyntaxNode oldCompilationUnit, Microsoft.CodeAnalysis.SyntaxNode newCompilationUnit) -> Microsoft.CodeAnalysis.Differencing.Match<Microsoft.CodeAnalysis.SyntaxNode>
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.EnumerateNearStatements(Microsoft.CodeAnalysis.SyntaxNode statement) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.CodeAnalysis.SyntaxNode, int>>
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.ErrorDisplayFormat.get -> Microsoft.CodeAnalysis.SymbolDisplayFormat
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindEnclosingLambdaBody(Microsoft.CodeAnalysis.SyntaxNode containerOpt, Microsoft.CodeAnalysis.SyntaxNode node) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindStatementAndPartner(Microsoft.CodeAnalysis.SyntaxNode declarationBody, int position, Microsoft.CodeAnalysis.SyntaxNode partnerDeclarationBodyOpt, out Microsoft.CodeAnalysis.SyntaxNode partnerOpt, out int statementPart) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetCapturedVariables(Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.SyntaxNode memberBody) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetDiagnosticSpan(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Differencing.EditKind editKind) -> Microsoft.CodeAnalysis.Text.TextSpan
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetEncompassingAncestorImpl(Microsoft.CodeAnalysis.SyntaxNode bodyOrMatchRoot) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetExceptionHandlingAncestors(Microsoft.CodeAnalysis.SyntaxNode node, bool isLeaf) -> System.Collections.Generic.List<Microsoft.CodeAnalysis.SyntaxNode>
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetExceptionHandlingRegion(Microsoft.CodeAnalysis.SyntaxNode node, out bool coversAllChildren) -> Microsoft.CodeAnalysis.Text.TextSpan
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetLambdaBodyExpressionsAndStatements(Microsoft.CodeAnalysis.SyntaxNode lambdaBody) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetLambdaDisplayName(Microsoft.CodeAnalysis.SyntaxNode lambda) -> string
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetStateMachineInfo(Microsoft.CodeAnalysis.SyntaxNode body, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SyntaxNode> suspensionPoints, out Microsoft.CodeAnalysis.EditAndContinue.StateMachineKind kind) -> void
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetStatementDisplayName(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Differencing.EditKind editKind) -> string
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetSymbolForEdit(Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Differencing.EditKind editKind, System.Collections.Generic.Dictionary<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Differencing.EditKind> editMap, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.ISymbol
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetSyntaxSequenceEdits(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SyntaxNode> oldNodes, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SyntaxNode> newNodes) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Differencing.SequenceEdit>
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetTopLevelDisplayName(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Differencing.EditKind editKind) -> string
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetVariableUseSites(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> roots, Microsoft.CodeAnalysis.ISymbol localOrParameter, Microsoft.CodeAnalysis.SemanticModel model, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.StatementLabelEquals(Microsoft.CodeAnalysis.SyntaxNode node1, Microsoft.CodeAnalysis.SyntaxNode node2) -> bool
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetActiveSpan(Microsoft.CodeAnalysis.SyntaxNode node, int statementPart, out Microsoft.CodeAnalysis.Text.TextSpan span) -> bool
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetEnclosingBreakpointSpan(Microsoft.CodeAnalysis.SyntaxNode root, int position, out Microsoft.CodeAnalysis.Text.TextSpan span) -> bool
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetPartnerLambdaBody(Microsoft.CodeAnalysis.SyntaxNode oldBody, Microsoft.CodeAnalysis.SyntaxNode newLambda) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryMatchActiveStatement(Microsoft.CodeAnalysis.SyntaxNode oldStatement, int statementPart, Microsoft.CodeAnalysis.SyntaxNode oldBody, Microsoft.CodeAnalysis.SyntaxNode newBody, out Microsoft.CodeAnalysis.SyntaxNode newStatement) -> bool
readonly Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ActiveStatements -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Text.LinePositionSpan>
readonly Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ExceptionRegions -> System.Collections.Immutable.ImmutableArray<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Text.LinePositionSpan>>
readonly Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.RudeEditErrors -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnostic>
readonly Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.SemanticEdits -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Emit.SemanticEdit>
static Microsoft.CodeAnalysis.Completion.CompletionChange.Create(Microsoft.CodeAnalysis.Text.TextChange textChange, int? newPosition = null, bool includesCommitCharacter = false) -> Microsoft.CodeAnalysis.Completion.CompletionChange
static Microsoft.CodeAnalysis.Completion.CompletionItem.Create(string displayText, string filterText = null, string sortText = null, System.Collections.Immutable.ImmutableDictionary<string, string> properties = null, System.Collections.Immutable.ImmutableArray<string> tags = default(System.Collections.Immutable.ImmutableArray<string>), Microsoft.CodeAnalysis.Completion.CompletionItemRules rules = null) -> Microsoft.CodeAnalysis.Completion.CompletionItem
static Microsoft.CodeAnalysis.Completion.CompletionItem.Create(string displayText, string filterText, string sortText, Microsoft.CodeAnalysis.Text.TextSpan span, System.Collections.Immutable.ImmutableDictionary<string, string> properties, System.Collections.Immutable.ImmutableArray<string> tags, Microsoft.CodeAnalysis.Completion.CompletionItemRules rules) -> Microsoft.CodeAnalysis.Completion.CompletionItem
static Microsoft.CodeAnalysis.Completion.CompletionItemRules.Create(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule> filterCharacterRules = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule>), System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule> commitCharacterRules = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule>), Microsoft.CodeAnalysis.Completion.EnterKeyRule enterKeyRule = Microsoft.CodeAnalysis.Completion.EnterKeyRule.Default, bool formatOnCommit = false, int? matchPriority = null, Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior selectionBehavior = Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior.Default) -> Microsoft.CodeAnalysis.Completion.CompletionItemRules
static Microsoft.CodeAnalysis.Completion.CompletionRules.Create(bool dismissIfEmpty = false, bool dismissIfLastCharacterDeleted = false, System.Collections.Immutable.ImmutableArray<char> defaultCommitCharacters = default(System.Collections.Immutable.ImmutableArray<char>), Microsoft.CodeAnalysis.Completion.EnterKeyRule defaultEnterKeyRule = Microsoft.CodeAnalysis.Completion.EnterKeyRule.Default, Microsoft.CodeAnalysis.Completion.SnippetsRule snippetsRule = Microsoft.CodeAnalysis.Completion.SnippetsRule.Default) -> Microsoft.CodeAnalysis.Completion.CompletionRules
static Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.HasEdit(System.Collections.Generic.Dictionary<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Differencing.EditKind> editMap, Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Differencing.EditKind editKind) -> bool
static Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.HasParentEdit(System.Collections.Generic.Dictionary<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Differencing.EditKind> editMap, Microsoft.CodeAnalysis.Differencing.Edit<Microsoft.CodeAnalysis.SyntaxNode> edit) -> bool
static Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.MemberSignaturesEquivalent(Microsoft.CodeAnalysis.ISymbol oldMemberOpt, Microsoft.CodeAnalysis.ISymbol newMemberOpt, System.Func<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IParameterSymbol>, Microsoft.CodeAnalysis.ITypeSymbol, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IParameterSymbol>, Microsoft.CodeAnalysis.ITypeSymbol, bool> signatureComparer = null) -> bool
static Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.SignaturesEquivalent(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IParameterSymbol> oldParameters, Microsoft.CodeAnalysis.ITypeSymbol oldReturnType, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IParameterSymbol> newParameters, Microsoft.CodeAnalysis.ITypeSymbol newReturnType) -> bool
virtual Microsoft.CodeAnalysis.Completion.CompletionService.FilterItems(Microsoft.CodeAnalysis.Document document, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Completion.CompletionItem> items, string filterText) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Completion.CompletionItem>
virtual Microsoft.CodeAnalysis.Completion.CompletionService.GetDefaultCompletionListSpan(Microsoft.CodeAnalysis.Text.SourceText text, int caretPosition) -> Microsoft.CodeAnalysis.Text.TextSpan
virtual Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetDeclarationBodyEdit(Microsoft.CodeAnalysis.Differencing.Edit<Microsoft.CodeAnalysis.SyntaxNode> edit, System.Collections.Generic.Dictionary<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Differencing.EditKind> editMap, out Microsoft.CodeAnalysis.SyntaxNode oldBody, out Microsoft.CodeAnalysis.SyntaxNode newBody) -> bool
virtual Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetOverlappingActiveStatements(Microsoft.CodeAnalysis.Text.SourceText baseText, Microsoft.CodeAnalysis.Text.TextSpan declarationSpan, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementSpan> statements, out int start, out int end) -> bool