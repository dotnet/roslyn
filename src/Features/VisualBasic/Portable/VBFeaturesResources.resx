<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Insert_0" xml:space="preserve">
    <value>Insert '{0}'.</value>
  </data>
  <data name="Delete_the_0_statement1" xml:space="preserve">
    <value>Delete the '{0}' statement.</value>
  </data>
  <data name="Create_event_0_in_1" xml:space="preserve">
    <value>Create event {0} in {1}</value>
  </data>
  <data name="Insert_the_missing_End_Property_statement" xml:space="preserve">
    <value>Insert the missing 'End Property' statement.</value>
  </data>
  <data name="Insert_the_missing_0" xml:space="preserve">
    <value>Insert the missing '{0}'.</value>
  </data>
  <data name="Inline_temporary_variable" xml:space="preserve">
    <value>Inline temporary variable</value>
  </data>
  <data name="Conflict_s_detected" xml:space="preserve">
    <value>Conflict(s) detected.</value>
  </data>
  <data name="Invert_If_statement" xml:space="preserve">
    <value>Invert If statement</value>
  </data>
  <data name="Move_the_0_statement_to_line_1" xml:space="preserve">
    <value>Move the '{0}' statement to line {1}.</value>
  </data>
  <data name="Delete_the_0_statement2" xml:space="preserve">
    <value>Delete the '{0}' statement.</value>
  </data>
  <data name="Remove_Unnecessary_Imports" xml:space="preserve">
    <value>Remove Unnecessary Imports</value>
  </data>
  <data name="Type_a_name_here_to_declare_a_new_field" xml:space="preserve">
    <value>Type a name here to declare a new field.</value>
  </data>
  <data name="Note_colon_Space_completion_is_disabled_to_avoid_potential_interference_To_insert_a_name_from_the_list_use_tab" xml:space="preserve">
    <value>Note: Space completion is disabled to avoid potential interference. To insert a name from the list, use tab.</value>
  </data>
  <data name="new_field" xml:space="preserve">
    <value>&lt;new field&gt;</value>
  </data>
  <data name="Type_a_name_here_to_declare_a_parameter_If_no_preceding_keyword_is_used_ByVal_will_be_assumed_and_the_argument_will_be_passed_by_value" xml:space="preserve">
    <value>Type a name here to declare a parameter. If no preceding keyword is used; 'ByVal' will be assumed and the argument will be passed by value.</value>
  </data>
  <data name="parameter_name" xml:space="preserve">
    <value>&lt;parameter name&gt;</value>
  </data>
  <data name="Type_a_new_name_for_the_column_followed_by_Otherwise_the_original_column_name_with_be_used" xml:space="preserve">
    <value>Type a new name for the column, followed by '='. Otherwise, the original column name with be used.</value>
  </data>
  <data name="Note_colon_Use_tab_for_automatic_completion_space_completion_is_disabled_to_avoid_interfering_with_a_new_name" xml:space="preserve">
    <value>Note: Use tab for automatic completion; space completion is disabled to avoid interfering with a new name.</value>
  </data>
  <data name="result_alias" xml:space="preserve">
    <value>&lt;result alias&gt;</value>
  </data>
  <data name="Type_a_new_variable_name" xml:space="preserve">
    <value>Type a new variable name</value>
  </data>
  <data name="Note_colon_Space_and_completion_are_disabled_to_avoid_potential_interference_To_insert_a_name_from_the_list_use_tab" xml:space="preserve">
    <value>Note: Space and '=' completion are disabled to avoid potential interference. To insert a name from the list, use tab.</value>
  </data>
  <data name="new_resource" xml:space="preserve">
    <value>&lt;new resource&gt;</value>
  </data>
  <data name="AddHandler_statement" xml:space="preserve">
    <value>AddHandler statement</value>
  </data>
  <data name="RemoveHandler_statement" xml:space="preserve">
    <value>RemoveHandler statement</value>
  </data>
  <data name="_0_function" xml:space="preserve">
    <value>{0} function</value>
  </data>
  <data name="CType_function" xml:space="preserve">
    <value>CType function</value>
  </data>
  <data name="DirectCast_function" xml:space="preserve">
    <value>DirectCast function</value>
  </data>
  <data name="TryCast_function" xml:space="preserve">
    <value>TryCast function</value>
  </data>
  <data name="GetType_function" xml:space="preserve">
    <value>GetType function</value>
  </data>
  <data name="GetXmlNamespace_function" xml:space="preserve">
    <value>GetXmlNamespace function</value>
  </data>
  <data name="Mid_statement" xml:space="preserve">
    <value>Mid statement</value>
  </data>
  <data name="Fix_Incorrect_Function_Return_Type" xml:space="preserve">
    <value>Fix Incorrect Function Return Type</value>
  </data>
  <data name="Remove_Unnecessary_Cast" xml:space="preserve">
    <value>Remove Unnecessary Cast</value>
  </data>
  <data name="Cast_is_redundant" xml:space="preserve">
    <value>Cast is redundant</value>
  </data>
  <data name="Simplify_name_0" xml:space="preserve">
    <value>Simplify name '{0}'</value>
  </data>
  <data name="Simplify_member_access_0" xml:space="preserve">
    <value>Simplify member access '{0}'</value>
  </data>
  <data name="Remove_Me_qualification" xml:space="preserve">
    <value>Remove 'Me' qualification</value>
  </data>
  <data name="Name_can_be_simplified" xml:space="preserve">
    <value>Name can be simplified</value>
  </data>
  <data name="can_t_determine_valid_range_of_statements_to_extract_out" xml:space="preserve">
    <value>can't determine valid range of statements to extract out</value>
  </data>
  <data name="Not_all_code_paths_return" xml:space="preserve">
    <value>Not all code paths return</value>
  </data>
  <data name="contains_invalid_selection" xml:space="preserve">
    <value>contains invalid selection</value>
  </data>
  <data name="the_selection_contains_syntactic_errors" xml:space="preserve">
    <value>the selection contains syntactic errors</value>
  </data>
  <data name="Selection_can_t_be_crossed_over_preprocessors" xml:space="preserve">
    <value>Selection can't be crossed over preprocessors</value>
  </data>
  <data name="Selection_can_t_contain_throw_without_enclosing_catch_block" xml:space="preserve">
    <value>Selection can't contain throw without enclosing catch block</value>
  </data>
  <data name="Selection_can_t_be_parts_of_constant_initializer_expression" xml:space="preserve">
    <value>Selection can't be parts of constant initializer expression</value>
  </data>
  <data name="Argument_used_for_ByRef_parameter_can_t_be_extracted_out" xml:space="preserve">
    <value>Argument used for ByRef parameter can't be extracted out</value>
  </data>
  <data name="all_static_local_usages_defined_in_the_selection_must_be_included_in_the_selection" xml:space="preserve">
    <value>all static local usages defined in the selection must be included in the selection</value>
  </data>
  <data name="Implicit_member_access_can_t_be_included_in_the_selection_without_containing_statement" xml:space="preserve">
    <value>Implicit member access can't be included in the selection without containing statement</value>
  </data>
  <data name="Selection_must_be_part_of_executable_statements" xml:space="preserve">
    <value>Selection must be part of executable statements</value>
  </data>
  <data name="next_statement_control_variable_doesn_t_have_matching_declaration_statement" xml:space="preserve">
    <value>next statement control variable doesn't have matching declaration statement</value>
  </data>
  <data name="Selection_doesn_t_contain_any_valid_node" xml:space="preserve">
    <value>Selection doesn't contain any valid node</value>
  </data>
  <data name="no_valid_statement_range_to_extract_out" xml:space="preserve">
    <value>no valid statement range to extract out</value>
  </data>
  <data name="Invalid_selection" xml:space="preserve">
    <value>Invalid selection</value>
  </data>
  <data name="Selection_doesn_t_contain_any_valid_token" xml:space="preserve">
    <value>Selection doesn't contain any valid token</value>
  </data>
  <data name="No_valid_selection_to_perform_extraction" xml:space="preserve">
    <value>No valid selection to perform extraction</value>
  </data>
  <data name="No_common_root_node_for_extraction" xml:space="preserve">
    <value>No common root node for extraction</value>
  </data>
  <data name="Deprecated" xml:space="preserve">
    <value>Deprecated</value>
  </data>
  <data name="Extension" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Awaitable" xml:space="preserve">
    <value>Awaitable</value>
  </data>
  <data name="Awaitable_Extension" xml:space="preserve">
    <value>Awaitable, Extension</value>
  </data>
  <data name="new_variable" xml:space="preserve">
    <value>&lt;new variable&gt;</value>
  </data>
  <data name="Remove_and_Sort_Imports" xml:space="preserve">
    <value>R&amp;emove and Sort Imports</value>
  </data>
  <data name="Creates_a_delegate_procedure_instance_that_references_the_specified_procedure_AddressOf_procedureName" xml:space="preserve">
    <value>Creates a delegate procedure instance that references the specified procedure.
AddressOf &lt;procedureName&gt;</value>
  </data>
  <data name="Indicates_that_an_external_procedure_has_another_name_in_its_DLL" xml:space="preserve">
    <value>Indicates that an external procedure has another name in its DLL.</value>
  </data>
  <data name="Performs_a_short_circuit_logical_conjunction_on_two_expressions_Returns_True_if_both_operands_evaluate_to_True_If_the_first_expression_evaluates_to_False_the_second_is_not_evaluated_result_expression1_AndAlso_expression2" xml:space="preserve">
    <value>Performs a short-circuit logical conjunction on two expressions. Returns True if both operands evaluate to True. If the first expression evaluates to False, the second is not evaluated.
&lt;result&gt; = &lt;expression1&gt; AndAlso &lt;expression2&gt;</value>
  </data>
  <data name="Performs_a_logical_conjunction_on_two_Boolean_expressions_or_a_bitwise_conjunction_on_two_numeric_expressions_For_Boolean_expressions_returns_True_if_both_operands_evaluate_to_True_Both_expressions_are_always_evaluated_result_expression1_And_expression2" xml:space="preserve">
    <value>Performs a logical conjunction on two Boolean expressions, or a bitwise conjunction on two numeric expressions. For Boolean expressions, returns True if both operands evaluate to True. Both expressions are always evaluated.
&lt;result&gt; = &lt;expression1&gt; And &lt;expression2&gt;</value>
  </data>
  <data name="Used_in_a_Declare_statement_The_Ansi_modifier_specifies_that_Visual_Basic_should_marshal_all_strings_to_ANSI_values_and_should_look_up_the_procedure_without_modifying_its_name_during_the_search_If_no_character_set_is_specified_ANSI_is_the_default" xml:space="preserve">
    <value>Used in a Declare statement. The Ansi modifier specifies that Visual Basic should marshal all strings to ANSI values, and should look up the procedure without modifying its name during the search. If no character set is specified, ANSI is the default.</value>
  </data>
  <data name="Specifies_a_data_type_in_a_declaration_statement" xml:space="preserve">
    <value>Specifies a data type in a declaration statement.</value>
  </data>
  <data name="Specifies_that_an_attribute_at_the_beginning_of_a_source_file_applies_to_the_entire_assembly_Otherwise_the_attribute_will_apply_only_to_an_individual_programming_element_such_as_a_class_or_property" xml:space="preserve">
    <value>Specifies that an attribute at the beginning of a source file applies to the entire assembly. Otherwise the attribute will apply only to an individual programming element, such as a class or property.</value>
  </data>
  <data name="Indicates_an_asynchronous_method_that_can_use_the_Await_operator" xml:space="preserve">
    <value>Indicates an asynchronous method that can use the Await operator.</value>
  </data>
  <data name="Used_in_a_Declare_statement_The_Auto_modifier_specifies_that_Visual_Basic_should_marshal_strings_according_to_NET_Framework_rules_and_should_determine_the_base_character_set_of_the_run_time_platform_and_possibly_modify_the_external_procedure_name_if_the_initial_search_fails" xml:space="preserve">
    <value>Used in a Declare statement. The Auto modifier specifies that Visual Basic should marshal strings according to .NET Framework rules, and should determine the base character set of the run-time platform and possibly modify the external procedure name if the initial search fails.</value>
  </data>
  <data name="Specifies_that_an_argument_is_passed_in_such_a_way_that_the_called_procedure_can_change_the_underlying_value_of_the_argument_in_the_calling_code" xml:space="preserve">
    <value>Specifies that an argument is passed in such a way that the called procedure can change the underlying value of the argument in the calling code.</value>
  </data>
  <data name="Specifies_that_an_argument_is_passed_in_such_a_way_that_the_called_procedure_or_property_cannot_change_the_underlying_value_of_the_argument_in_the_calling_code" xml:space="preserve">
    <value>Specifies that an argument is passed in such a way that the called procedure or property cannot change the underlying value of the argument in the calling code.</value>
  </data>
  <data name="Declares_the_name_of_a_class_and_introduces_the_definitions_of_the_variables_properties_and_methods_that_make_up_the_class" xml:space="preserve">
    <value>Declares the name of a class and introduces the definitions of the variables, properties, and methods that make up the class.</value>
  </data>
  <data name="Generates_a_string_concatenation_of_two_expressions" xml:space="preserve">
    <value>Generates a string concatenation of two expressions.</value>
  </data>
  <data name="Declares_and_defines_one_or_more_constants" xml:space="preserve">
    <value>Declares and defines one or more constants.</value>
  </data>
  <data name="Use_In_for_a_type_that_will_only_be_used_for_ByVal_arguments_to_functions" xml:space="preserve">
    <value>Use 'In' for a type that will only be used for ByVal arguments to functions.</value>
  </data>
  <data name="Use_Out_for_a_type_that_will_only_be_used_as_a_return_from_functions" xml:space="preserve">
    <value>Use 'Out' for a type that will only be used as a return from functions.</value>
  </data>
  <data name="Returns_the_result_of_explicitly_converting_an_expression_to_a_specified_data_type_object_structure_class_or_interface_CType_Object_As_Expression_Object_As_Type_As_Type" xml:space="preserve">
    <value>Returns the result of explicitly converting an expression to a specified data type, object, structure, class, or interface.
CType(Object As Expression, Object As Type) As Type</value>
  </data>
  <data name="Specifies_that_an_event_has_additional_specialized_code_for_adding_handlers_removing_handlers_and_raising_events" xml:space="preserve">
    <value>Specifies that an event has additional, specialized code for adding handlers, removing handlers, and raising events.</value>
  </data>
  <data name="Declares_a_reference_to_a_procedure_implemented_in_an_external_file" xml:space="preserve">
    <value>Declares a reference to a procedure implemented in an external file.</value>
  </data>
  <data name="Identifies_a_property_as_the_default_property_of_its_class_structure_or_interface" xml:space="preserve">
    <value>Identifies a property as the default property of its class, structure, or interface.</value>
  </data>
  <data name="Used_to_declare_a_delegate_A_delegate_is_a_reference_type_that_refers_to_a_shared_method_of_a_type_or_to_an_instance_method_of_an_object_Any_procedure_that_is_convertible_or_that_has_matching_parameter_types_and_return_type_may_be_used_to_create_an_instance_of_this_delegate_class" xml:space="preserve">
    <value>Used to declare a delegate. A delegate is a reference type that refers to a shared method of a type or to an instance method of an object. Any procedure that is convertible, or that has matching parameter types and return type may be used to create an instance of this delegate class.</value>
  </data>
  <data name="Declares_and_allocates_storage_space_for_one_or_more_variables_Dim_var_bracket_As_bracket_New_bracket_dataType_bracket_boundList_bracket_bracket_bracket_initializer_bracket_bracket_var2_bracket" xml:space="preserve">
    <value>Declares and allocates storage space for one or more variables.
Dim {&lt;var&gt; [As [New] dataType [(boundList)]][= initializer]}[, var2]</value>
  </data>
  <data name="Divides_two_numbers_and_returns_a_floating_point_result" xml:space="preserve">
    <value>Divides two numbers and returns a floating-point result.</value>
  </data>
  <data name="Terminates_a_0_block" xml:space="preserve">
    <value>Terminates a {0} block.</value>
  </data>
  <data name="Terminates_an_0_block" xml:space="preserve">
    <value>Terminates an {0} block.</value>
  </data>
  <data name="Terminates_the_definition_of_a_0_statement" xml:space="preserve">
    <value>Terminates the definition of a {0} statement.</value>
  </data>
  <data name="Terminates_the_definition_of_an_0_statement" xml:space="preserve">
    <value>Terminates the definition of an {0} statement.</value>
  </data>
  <data name="Declares_an_enumeration_and_defines_the_values_of_its_members" xml:space="preserve">
    <value>Declares an enumeration and defines the values of its members.</value>
  </data>
  <data name="Compares_two_expressions_and_returns_True_if_they_are_equal_Otherwise_returns_False" xml:space="preserve">
    <value>Compares two expressions and returns True if they are equal. Otherwise, returns False.</value>
  </data>
  <data name="Used_to_release_array_variables_and_deallocate_the_memory_used_for_their_elements" xml:space="preserve">
    <value>Used to release array variables and deallocate the memory used for their elements.</value>
  </data>
  <data name="Declares_a_user_defined_event" xml:space="preserve">
    <value>Declares a user-defined event.</value>
  </data>
  <data name="Exits_a_Sub_procedure_and_transfers_execution_immediately_to_the_statement_following_the_call_to_the_Sub_procedure" xml:space="preserve">
    <value>Exits a Sub procedure and transfers execution immediately to the statement following the call to the Sub procedure.</value>
  </data>
  <data name="Raises_a_number_to_the_power_of_another_number" xml:space="preserve">
    <value>Raises a number to the power of another number.</value>
  </data>
  <data name="Specifies_that_the_external_procedure_being_referenced_in_the_Declare_statement_is_a_Function" xml:space="preserve">
    <value>Specifies that the external procedure being referenced in the Declare statement is a Function.</value>
  </data>
  <data name="Specifies_that_the_external_procedure_being_referenced_in_the_Declare_statement_is_a_Sub" xml:space="preserve">
    <value>Specifies that the external procedure being referenced in the Declare statement is a Sub.</value>
  </data>
  <data name="Specifies_that_one_or_more_declared_programming_elements_are_accessible_only_from_within_the_assembly_that_contains_their_declaration" xml:space="preserve">
    <value>Specifies that one or more declared programming elements are accessible only from within the assembly that contains their declaration.</value>
  </data>
  <data name="Specifies_a_collection_and_a_range_variable_to_use_in_a_query" xml:space="preserve">
    <value>Specifies a collection and a range variable to use in a query.</value>
  </data>
  <data name="Declares_the_name_parameters_and_code_that_define_a_Function_procedure_that_is_a_procedure_that_returns_a_value_to_the_calling_code" xml:space="preserve">
    <value>Declares the name, parameters, and code that define a Function procedure, that is, a procedure that returns a value to the calling code.</value>
  </data>
  <data name="Constrains_a_generic_type_parameter_to_require_that_any_type_argument_passed_to_it_be_a_reference_type" xml:space="preserve">
    <value>Constrains a generic type parameter to require that any type argument passed to it be a reference type.</value>
  </data>
  <data name="Specifies_a_constructor_constraint_on_a_generic_type_parameter" xml:space="preserve">
    <value>Specifies a constructor constraint on a generic type parameter.</value>
  </data>
  <data name="Constrains_a_generic_type_parameter_to_require_that_any_type_argument_passed_to_it_be_a_value_type" xml:space="preserve">
    <value>Constrains a generic type parameter to require that any type argument passed to it be a value type.</value>
  </data>
  <data name="Declares_a_Get_property_procedure_that_is_used_to_return_the_current_value_of_a_property" xml:space="preserve">
    <value>Declares a Get property procedure that is used to return the current value of a property.</value>
  </data>
  <data name="Compares_two_expressions_and_returns_True_if_the_first_is_greater_than_the_second_Otherwise_returns_False" xml:space="preserve">
    <value>Compares two expressions and returns True if the first is greater than the second. Otherwise, returns False.</value>
  </data>
  <data name="Compares_two_expressions_and_returns_True_if_the_first_is_greater_than_or_equal_to_the_second_Otherwise_returns_False" xml:space="preserve">
    <value>Compares two expressions and returns True if the first is greater than or equal to the second. Otherwise, returns False.</value>
  </data>
  <data name="Declares_that_a_procedure_handles_a_specified_event" xml:space="preserve">
    <value>Declares that a procedure handles a specified event.</value>
  </data>
  <data name="Indicates_that_a_class_or_structure_member_is_providing_the_implementation_for_a_member_defined_in_an_interface" xml:space="preserve">
    <value>Indicates that a class or structure member is providing the implementation for a member defined in an interface.</value>
  </data>
  <data name="Specifies_one_or_more_interfaces_or_interface_members_that_must_be_implemented_in_the_class_or_structure_definition_in_which_the_Implements_statement_appears" xml:space="preserve">
    <value>Specifies one or more interfaces, or interface members, that must be implemented in the class or structure definition in which the Implements statement appears.</value>
  </data>
  <data name="Imports_all_or_specified_elements_of_a_namespace_into_a_file" xml:space="preserve">
    <value>Imports all or specified elements of a namespace into a file.</value>
  </data>
  <data name="Specifies_the_group_that_the_loop_variable_in_a_For_Each_statement_is_to_traverse" xml:space="preserve">
    <value>Specifies the group that the loop variable in a For Each statement is to traverse.</value>
  </data>
  <data name="Specifies_the_group_that_the_loop_variable_is_to_traverse_in_a_For_Each_statement_or_specifies_the_range_variable_in_a_query" xml:space="preserve">
    <value>Specifies the group that the loop variable is to traverse in a For Each statement, or specifies the range variable in a query.</value>
  </data>
  <data name="Causes_the_current_class_or_interface_to_inherit_the_attributes_variables_properties_procedures_and_events_from_another_class_or_set_of_interfaces" xml:space="preserve">
    <value>Causes the current class or interface to inherit the attributes, variables, properties, procedures, and events from another class or set of interfaces.</value>
  </data>
  <data name="Specifies_the_group_that_the_range_variable_is_to_traverse_in_a_query" xml:space="preserve">
    <value>Specifies the group that the range variable is to traverse in a query.</value>
  </data>
  <data name="Divides_two_numbers_and_returns_an_integer_result" xml:space="preserve">
    <value>Divides two numbers and returns an integer result.</value>
  </data>
  <data name="Declares_the_name_of_an_interface_and_the_definitions_of_the_members_of_the_interface" xml:space="preserve">
    <value>Declares the name of an interface and the definitions of the members of the interface.</value>
  </data>
  <data name="Determines_whether_an_expression_is_false_If_instances_of_any_class_or_structure_will_be_used_in_an_OrElse_clause_you_must_define_IsFalse_on_that_class_or_structure" xml:space="preserve">
    <value>Determines whether an expression is false. If instances of any class or structure will be used in an OrElse clause, you must define IsFalse on that class or structure.</value>
  </data>
  <data name="Compares_two_object_reference_variables_and_returns_True_if_the_objects_are_equal_result_object1_Is_object2" xml:space="preserve">
    <value>Compares two object reference variables and returns True if the objects are equal.
&lt;result&gt; = &lt;object1&gt; Is &lt;object2&gt;</value>
  </data>
  <data name="Compares_two_object_reference_variables_and_returns_True_if_the_objects_are_not_equal_result_object1_IsNot_object2" xml:space="preserve">
    <value>Compares two object reference variables and returns True if the objects are not equal.
&lt;result&gt; = &lt;object1&gt; IsNot &lt;object2&gt;</value>
  </data>
  <data name="Determines_whether_an_expression_is_true_If_instances_of_any_class_or_structure_will_be_used_in_an_OrElse_clause_you_must_define_IsTrue_on_that_class_or_structure" xml:space="preserve">
    <value>Determines whether an expression is true. If instances of any class or structure will be used in an OrElse clause, you must define IsTrue on that class or structure.</value>
  </data>
  <data name="Indicates_an_iterator_method_that_can_use_the_Yield_statement" xml:space="preserve">
    <value>Indicates an iterator method that can use the Yield statement.</value>
  </data>
  <data name="Defines_an_iterator_lambda_expression_that_can_use_the_Yield_statement_Iterator_Function_parameterList_As_IEnumerable_Of_T" xml:space="preserve">
    <value>Defines an iterator lambda expression that can use the Yield statement.
Iterator Function(&lt;parameterList&gt;) As IEnumerable(Of &lt;T&gt;)</value>
  </data>
  <data name="Performs_an_arithmetic_left_shift_on_a_bit_pattern" xml:space="preserve">
    <value>Performs an arithmetic left shift on a bit pattern.</value>
  </data>
  <data name="Compares_two_expressions_and_returns_True_if_the_first_is_less_than_the_second_Otherwise_returns_False" xml:space="preserve">
    <value>Compares two expressions and returns True if the first is less than the second. Otherwise, returns False.</value>
  </data>
  <data name="Compares_two_expressions_and_returns_True_if_the_first_is_less_than_or_equal_to_the_second_Otherwise_returns_False" xml:space="preserve">
    <value>Compares two expressions and returns True if the first is less than or equal to the second. Otherwise, returns False.</value>
  </data>
  <data name="Introduces_a_clause_that_identifies_the_external_file_DLL_or_code_resource_containing_an_external_procedure" xml:space="preserve">
    <value>Introduces a clause that identifies the external file (DLL or code resource) containing an external procedure.</value>
  </data>
  <data name="Compares_a_string_against_a_pattern_Wildcards_available_include_to_match_1_character_and_to_match_0_or_more_characters_result_string_Like_pattern" xml:space="preserve">
    <value>Compares a string against a pattern. Wildcards available include ? to match 1 character and * to match 0 or more characters.
&lt;result&gt; = &lt;string&gt; Like &lt;pattern&gt;</value>
  </data>
  <data name="Returns_the_difference_between_two_numeric_expressions_or_the_negative_value_of_a_numeric_expression" xml:space="preserve">
    <value>Returns the difference between two numeric expressions, or the negative value of a numeric expression.</value>
  </data>
  <data name="Divides_two_numbers_and_returns_only_the_remainder_number1_Mod_number2" xml:space="preserve">
    <value>Divides two numbers and returns only the remainder.
&lt;number1&gt; Mod &lt;number2&gt;</value>
  </data>
  <data name="Specifies_that_an_attribute_at_the_beginning_of_a_source_file_applies_to_the_entire_module_Otherwise_the_attribute_will_apply_only_to_an_individual_programming_element_such_as_a_class_or_property" xml:space="preserve">
    <value>Specifies that an attribute at the beginning of a source file applies to the entire module. Otherwise the attribute will apply only to an individual programming element, such as a class or property.</value>
  </data>
  <data name="Multiplies_two_numbers_and_returns_the_product" xml:space="preserve">
    <value>Multiplies two numbers and returns the product.</value>
  </data>
  <data name="Specifies_that_a_class_can_be_used_only_as_a_base_class_and_that_you_cannot_create_an_object_directly_from_it" xml:space="preserve">
    <value>Specifies that a class can be used only as a base class, and that you cannot create an object directly from it.</value>
  </data>
  <data name="Specifies_that_a_property_or_procedure_is_not_implemented_in_the_class_and_must_be_overridden_in_a_derived_class_before_it_can_be_used" xml:space="preserve">
    <value>Specifies that a property or procedure is not implemented in the class and must be overridden in a derived class before it can be used.</value>
  </data>
  <data name="Declares_the_name_of_a_namespace_and_causes_the_source_code_following_the_declaration_to_be_compiled_within_that_namespace" xml:space="preserve">
    <value>Declares the name of a namespace, and causes the source code following the declaration to be compiled within that namespace.</value>
  </data>
  <data name="Indicates_that_a_conversion_operator_CType_converts_a_class_or_structure_to_a_type_that_might_not_be_able_to_hold_some_of_the_possible_values_of_the_original_class_or_structure" xml:space="preserve">
    <value>Indicates that a conversion operator (CType) converts a class or structure to a type that might not be able to hold some of the possible values of the original class or structure.</value>
  </data>
  <data name="Compares_two_expressions_and_returns_True_if_they_are_not_equal_Otherwise_returns_False" xml:space="preserve">
    <value>Compares two expressions and returns True if they are not equal. Otherwise, returns False.</value>
  </data>
  <data name="Specifies_that_a_class_cannot_be_used_as_a_base_class" xml:space="preserve">
    <value>Specifies that a class cannot be used as a base class.</value>
  </data>
  <data name="Performs_logical_negation_on_a_Boolean_expression_or_bitwise_negation_on_a_numeric_expression_result_Not_expression" xml:space="preserve">
    <value>Performs logical negation on a Boolean expression, or bitwise negation on a numeric expression.
&lt;result&gt; = Not &lt;expression&gt;</value>
  </data>
  <data name="Specifies_that_a_property_or_procedure_cannot_be_overridden_in_a_derived_class" xml:space="preserve">
    <value>Specifies that a property or procedure cannot be overridden in a derived class.</value>
  </data>
  <data name="Identifies_a_type_parameter_on_a_generic_class_structure_interface_delegate_or_procedure" xml:space="preserve">
    <value>Identifies a type parameter on a generic class, structure, interface, delegate, or procedure.</value>
  </data>
  <data name="Declares_the_operator_symbol_operands_and_code_that_define_an_operator_procedure_on_a_class_or_structure" xml:space="preserve">
    <value>Declares the operator symbol, operands, and code that define an operator procedure on a class or structure.</value>
  </data>
  <data name="Specifies_that_a_procedure_argument_can_be_omitted_when_the_procedure_is_called" xml:space="preserve">
    <value>Specifies that a procedure argument can be omitted when the procedure is called.</value>
  </data>
  <data name="Introduces_a_statement_that_specifies_a_compiler_option_that_applies_to_the_entire_source_file" xml:space="preserve">
    <value>Introduces a statement that specifies a compiler option that applies to the entire source file.</value>
  </data>
  <data name="Performs_short_circuit_inclusive_logical_disjunction_on_two_expressions_Returns_True_if_either_operand_evaluates_to_True_If_the_first_expression_evaluates_to_True_the_second_expression_is_not_evaluated_result_expression1_OrElse_expression2" xml:space="preserve">
    <value>Performs short-circuit inclusive logical disjunction on two expressions. Returns True if either operand evaluates to True. If the first expression evaluates to True, the second expression is not evaluated.
&lt;result&gt; = &lt;expression1&gt; OrElse &lt;expression2&gt;</value>
  </data>
  <data name="Performs_an_inclusive_logical_disjunction_on_two_Boolean_expressions_or_a_bitwise_disjunction_on_two_numeric_expressions_For_Boolean_expressions_returns_True_if_at_least_one_operand_evaluates_to_True_Both_expressions_are_always_evaluated_result_expression1_Or_expression2" xml:space="preserve">
    <value>Performs an inclusive logical disjunction on two Boolean expressions, or a bitwise disjunction on two numeric expressions. For Boolean expressions, returns True if at least one operand evaluates to True. Both expressions are always evaluated.
&lt;result&gt; = &lt;expression1&gt; Or &lt;expression2&gt;</value>
  </data>
  <data name="Specifies_that_a_property_or_procedure_re_declares_one_or_more_existing_properties_or_procedures_with_the_same_name" xml:space="preserve">
    <value>Specifies that a property or procedure re-declares one or more existing properties or procedures with the same name.</value>
  </data>
  <data name="Specifies_that_a_property_or_procedure_can_be_overridden_by_an_identically_named_property_or_procedure_in_a_derived_class" xml:space="preserve">
    <value>Specifies that a property or procedure can be overridden by an identically named property or procedure in a derived class.</value>
  </data>
  <data name="Specifies_that_a_property_or_procedure_overrides_an_identically_named_property_or_procedure_inherited_from_a_base_class" xml:space="preserve">
    <value>Specifies that a property or procedure overrides an identically named property or procedure inherited from a base class.</value>
  </data>
  <data name="Specifies_that_a_procedure_parameter_takes_an_optional_array_of_elements_of_the_specified_type" xml:space="preserve">
    <value>Specifies that a procedure parameter takes an optional array of elements of the specified type.</value>
  </data>
  <data name="Indicates_that_a_method_class_or_structure_declaration_is_a_partial_definition_of_the_method_class_or_structure" xml:space="preserve">
    <value>Indicates that a method, class, or structure declaration is a partial definition of the method, class, or structure.</value>
  </data>
  <data name="Returns_the_sum_of_two_numbers_or_the_positive_value_of_a_numeric_expression" xml:space="preserve">
    <value>Returns the sum of two numbers, or the positive value of a numeric expression.</value>
  </data>
  <data name="Prevents_the_contents_of_an_array_from_being_cleared_when_the_dimensions_of_the_array_are_changed" xml:space="preserve">
    <value>Prevents the contents of an array from being cleared when the dimensions of the array are changed.</value>
  </data>
  <data name="Specifies_that_one_or_more_declared_programming_elements_are_accessible_only_from_within_their_module_class_or_structure" xml:space="preserve">
    <value>Specifies that one or more declared programming elements are accessible only from within their module, class, or structure.</value>
  </data>
  <data name="Declares_the_name_of_a_property_and_the_property_procedures_used_to_store_and_retrieve_the_value_of_the_property" xml:space="preserve">
    <value>Declares the name of a property, and the property procedures used to store and retrieve the value of the property.</value>
  </data>
  <data name="Specifies_that_one_or_more_declared_members_of_a_class_are_accessible_from_anywhere_in_the_same_assembly_their_own_classes_and_derived_classes" xml:space="preserve">
    <value>Specifies that one or more declared members of a class are accessible from anywhere in the same assembly, their own classes, and derived classes.</value>
  </data>
  <data name="Specifies_that_one_or_more_declared_programming_elements_are_accessible_only_from_within_their_own_class_or_from_a_derived_class" xml:space="preserve">
    <value>Specifies that one or more declared programming elements are accessible only from within their own class or from a derived class.</value>
  </data>
  <data name="Specifies_that_one_or_more_declared_programming_elements_have_no_access_restrictions" xml:space="preserve">
    <value>Specifies that one or more declared programming elements have no access restrictions.</value>
  </data>
  <data name="Specifies_that_a_variable_or_property_can_be_read_but_not_written_to" xml:space="preserve">
    <value>Specifies that a variable or property can be read but not written to.</value>
  </data>
  <data name="Reallocates_storage_space_for_an_array_variable" xml:space="preserve">
    <value>Reallocates storage space for an array variable.</value>
  </data>
  <data name="Performs_an_arithmetic_right_shift_on_a_bit_pattern" xml:space="preserve">
    <value>Performs an arithmetic right shift on a bit pattern</value>
  </data>
  <data name="Declares_a_Set_property_procedure_that_is_used_to_assign_a_value_to_a_property" xml:space="preserve">
    <value>Declares a Set property procedure that is used to assign a value to a property.</value>
  </data>
  <data name="Specifies_that_a_declared_programming_element_redeclares_and_hides_an_identically_named_element_in_a_base_class" xml:space="preserve">
    <value>Specifies that a declared programming element redeclares and hides an identically named element in a base class.</value>
  </data>
  <data name="Specifies_that_one_or_more_declared_programming_elements_are_associated_with_all_instances_of_a_class_or_structure" xml:space="preserve">
    <value>Specifies that one or more declared programming elements are associated with all instances of a class or structure.</value>
  </data>
  <data name="Specifies_that_one_or_more_declared_local_variables_are_to_remain_in_existence_and_retain_their_latest_values_after_the_procedure_in_which_they_are_declared_terminates" xml:space="preserve">
    <value>Specifies that one or more declared local variables are to remain in existence and retain their latest values after the procedure in which they are declared terminates.</value>
  </data>
  <data name="Declares_the_name_of_a_structure_and_introduces_the_definition_of_the_variables_properties_events_and_procedures_that_make_up_the_structure" xml:space="preserve">
    <value>Declares the name of a structure and introduces the definition of the variables, properties, events, and procedures that make up the structure.</value>
  </data>
  <data name="Declares_the_name_parameters_and_code_that_define_a_Sub_procedure_that_is_a_procedure_that_does_not_return_a_value_to_the_calling_code" xml:space="preserve">
    <value>Declares the name, parameters, and code that define a Sub procedure, that is, a procedure that does not return a value to the calling code.</value>
  </data>
  <data name="Separates_the_beginning_and_ending_values_of_a_loop_counter_or_array_bounds_or_that_of_a_value_match_range" xml:space="preserve">
    <value>Separates the beginning and ending values of a loop counter or array bounds or that of a value match range.</value>
  </data>
  <data name="Determines_the_run_time_type_of_an_object_reference_variable_and_compares_it_to_a_data_type_Returns_True_or_False_depending_on_whether_the_two_types_are_compatible_result_TypeOf_objectExpression_Is_typeName" xml:space="preserve">
    <value>Determines the run-time type of an object reference variable and compares it to a data type. Returns True or False depending, on whether the two types are compatible.
&lt;result&gt; = TypeOf &lt;objectExpression&gt; Is &lt;typeName&gt;</value>
  </data>
  <data name="Used_in_a_Declare_statement_Specifies_that_Visual_Basic_should_marshal_all_strings_to_Unicode_values_in_a_call_into_an_external_procedure_and_should_look_up_the_procedure_without_modifying_its_name" xml:space="preserve">
    <value>Used in a Declare statement. Specifies that Visual Basic should marshal all strings to Unicode values in a call into an external procedure, and should look up the procedure without modifying its name.</value>
  </data>
  <data name="Indicates_that_a_conversion_operator_CType_converts_a_class_or_structure_to_a_type_that_can_hold_all_possible_values_of_the_original_class_or_structure" xml:space="preserve">
    <value>Indicates that a conversion operator (CType) converts a class or structure to a type that can hold all possible values of the original class or structure.</value>
  </data>
  <data name="Specifies_that_one_or_more_declared_member_variables_refer_to_an_instance_of_a_class_that_can_raise_events" xml:space="preserve">
    <value>Specifies that one or more declared member variables refer to an instance of a class that can raise events</value>
  </data>
  <data name="Specifies_that_a_property_can_be_written_to_but_not_read" xml:space="preserve">
    <value>Specifies that a property can be written to but not read.</value>
  </data>
  <data name="Performs_a_logical_exclusion_on_two_Boolean_expressions_or_a_bitwise_exclusion_on_two_numeric_expressions_For_Boolean_expressions_returns_True_if_exactly_one_of_the_expressions_evaluates_to_True_Both_expressions_are_always_evaluated_result_expression1_Xor_expression2" xml:space="preserve">
    <value>Performs a logical exclusion on two Boolean expressions, or a bitwise exclusion on two numeric expressions. For Boolean expressions, returns True if exactly one of the expressions evaluates to True. Both expressions are always evaluated.
&lt;result&gt; = &lt;expression1&gt; Xor &lt;expression2&gt;</value>
  </data>
  <data name="Applies_an_aggregation_function_such_as_Sum_Average_or_Count_to_a_sequence" xml:space="preserve">
    <value>Applies an aggregation function, such as Sum, Average, or Count to a sequence.</value>
  </data>
  <data name="Specifies_the_sort_order_for_an_Order_By_clause_in_a_query_The_smallest_element_will_appear_first" xml:space="preserve">
    <value>Specifies the sort order for an Order By clause in a query. The smallest element will appear first.</value>
  </data>
  <data name="Asynchronously_waits_for_the_task_to_finish" xml:space="preserve">
    <value>Asynchronously waits for the task to finish.</value>
  </data>
  <data name="Sets_the_string_comparison_method_specified_in_Option_Compare_to_a_strict_binary_sort_order" xml:space="preserve">
    <value>Sets the string comparison method specified in Option Compare to a strict binary sort order.</value>
  </data>
  <data name="Specifies_the_element_keys_used_for_grouping_in_Group_By_or_sort_order_in_Order_By" xml:space="preserve">
    <value>Specifies the element keys used for grouping (in Group By) or sort order (in Order By).</value>
  </data>
  <data name="Transfers_execution_to_a_Function_Sub_or_dynamic_link_library_DLL_procedure_bracket_Call_bracket_procedureName_bracket_argumentList_bracket" xml:space="preserve">
    <value>Transfers execution to a Function, Sub, or dynamic-link library (DLL) procedure.
[Call] &lt;procedureName&gt; [(&lt;argumentList&gt;)]</value>
  </data>
  <data name="Introduces_the_statements_to_run_if_none_of_the_previous_cases_in_the_Select_Case_statement_returns_True" xml:space="preserve">
    <value>Introduces the statements to run if none of the previous cases in the Select Case statement returns True.</value>
  </data>
  <data name="Followed_by_a_comparison_operator_and_then_an_expression_Case_Is_introduces_the_statements_to_run_if_the_Select_Case_expression_combined_with_the_Case_Is_expression_evaluates_to_True" xml:space="preserve">
    <value>Followed by a comparison operator and then an expression, Case Is introduces the statements to run if the Select Case expression combined with the Case Is expression evaluates to True.</value>
  </data>
  <data name="Introduces_a_value_or_set_of_values_against_which_the_value_of_an_expression_in_a_Select_Case_statement_is_to_be_tested_Case_expression_expression1_To_expression2_bracket_Is_bracket_comparisonOperator_expression" xml:space="preserve">
    <value>Introduces a value, or set of values, against which the value of an expression in a Select Case statement is to be tested.
Case {&lt;expression&gt;|&lt;expression1&gt; To &lt;expression2&gt;|[Is] &lt;comparisonOperator&gt; &lt;expression&gt;}</value>
  </data>
  <data name="Introduces_a_statement_block_to_be_run_if_the_specified_exception_occurs_inside_a_Try_block" xml:space="preserve">
    <value>Introduces a statement block to be run if the specified exception occurs inside a Try block.</value>
  </data>
  <data name="Sets_the_default_comparison_method_to_use_when_comparing_string_data_When_set_to_Text_uses_a_text_sort_order_that_is_not_case_sensitive_When_set_to_Binary_uses_a_strict_binary_sort_order_Option_Compare_Binary_Text" xml:space="preserve">
    <value>Sets the default comparison method to use when comparing string data. When set to Text, uses a text sort order that is not case sensitive. When set to Binary, uses a strict binary sort order.
Option Compare {Binary | Text}</value>
  </data>
  <data name="Defines_a_conditional_compiler_constant_Conditional_compiler_constants_are_always_private_to_the_file_in_which_they_appear_The_expressions_used_to_initialize_them_can_contain_only_conditional_compiler_constants_and_literals" xml:space="preserve">
    <value>Defines a conditional compiler constant. Conditional compiler constants are always private to the file in which they appear. The expressions used to initialize them can contain only conditional compiler constants and literals.</value>
  </data>
  <data name="Transfers_execution_immediately_to_the_next_iteration_of_the_Do_loop" xml:space="preserve">
    <value>Transfers execution immediately to the next iteration of the Do loop.</value>
  </data>
  <data name="Transfers_execution_immediately_to_the_next_iteration_of_the_For_loop" xml:space="preserve">
    <value>Transfers execution immediately to the next iteration of the For loop.</value>
  </data>
  <data name="Transfers_execution_immediately_to_the_next_iteration_of_the_loop_Can_be_used_in_a_Do_loop_a_For_loop_or_a_While_loop" xml:space="preserve">
    <value>Transfers execution immediately to the next iteration of the loop. Can be used in a Do loop, a For loop, or a While loop.</value>
  </data>
  <data name="Transfers_execution_immediately_to_the_next_iteration_of_the_While_loop" xml:space="preserve">
    <value>Transfers execution immediately to the next iteration of the While loop.</value>
  </data>
  <data name="Specifies_the_sort_order_for_an_Order_By_clause_in_a_query_The_largest_element_will_appear_first" xml:space="preserve">
    <value>Specifies the sort order for an Order By clause in a query. The largest element will appear first.</value>
  </data>
  <data name="Restricts_the_values_of_a_query_result_to_eliminate_duplicate_values" xml:space="preserve">
    <value>Restricts the values of a query result to eliminate duplicate values.</value>
  </data>
  <data name="Repeats_a_block_of_statements_while_a_Boolean_condition_is_true_or_until_the_condition_becomes_true_Do_Loop_While_Until_condition" xml:space="preserve">
    <value>Repeats a block of statements while a Boolean condition is true, or until the condition becomes true.
Do...Loop {While | Until} &lt;condition&gt;</value>
  </data>
  <data name="Repeats_a_block_of_statements_until_a_Boolean_condition_becomes_true_Do_Until_condition_Loop" xml:space="preserve">
    <value>Repeats a block of statements until a Boolean condition becomes true.
Do Until &lt;condition&gt;...Loop</value>
  </data>
  <data name="Repeats_a_block_of_statements_while_a_Boolean_condition_is_true_Do_While_condition_Loop" xml:space="preserve">
    <value>Repeats a block of statements while a Boolean condition is true.
Do While &lt;condition&gt;...Loop</value>
  </data>
  <data name="Introduces_a_group_of_statements_in_an_SharpIf_statement_that_is_compiled_if_no_previous_condition_evaluates_to_True" xml:space="preserve">
    <value>Introduces a group of statements in an #If statement that is compiled if no previous condition evaluates to True.</value>
  </data>
  <data name="Introduces_a_condition_in_an_SharpIf_statement_that_is_tested_if_the_previous_conditional_test_evaluates_to_False" xml:space="preserve">
    <value>Introduces a condition in an #If statement that is tested if the previous conditional test evaluates to False.</value>
  </data>
  <data name="Introduces_a_condition_in_an_If_statement_that_is_to_be_tested_if_the_previous_conditional_test_fails" xml:space="preserve">
    <value>Introduces a condition in an If statement that is to be tested if the previous conditional test fails.</value>
  </data>
  <data name="Introduces_a_group_of_statements_in_an_If_statement_that_is_executed_if_no_previous_condition_evaluates_to_True" xml:space="preserve">
    <value>Introduces a group of statements in an If statement that is executed if no previous condition evaluates to True.</value>
  </data>
  <data name="Terminates_the_definition_of_an_SharpIf_block" xml:space="preserve">
    <value>Terminates the definition of an #If block.</value>
  </data>
  <data name="Stops_execution_immediately" xml:space="preserve">
    <value>Stops execution immediately.</value>
  </data>
  <data name="Terminates_a_SharpRegion_block" xml:space="preserve">
    <value>Terminates a #Region block.</value>
  </data>
  <data name="Specifies_the_relationship_between_element_keys_to_use_as_the_basis_of_a_join_operation" xml:space="preserve">
    <value>Specifies the relationship between element keys to use as the basis of a join operation.</value>
  </data>
  <data name="Simulates_the_occurrence_of_an_error" xml:space="preserve">
    <value>Simulates the occurrence of an error.</value>
  </data>
  <data name="Exits_a_Do_loop_and_transfers_execution_immediately_to_the_statement_following_the_Loop_statement" xml:space="preserve">
    <value>Exits a Do loop and transfers execution immediately to the statement following the Loop statement.</value>
  </data>
  <data name="Exits_a_For_loop_and_transfers_execution_immediately_to_the_statement_following_the_Next_statement" xml:space="preserve">
    <value>Exits a For loop and transfers execution immediately to the statement following the Next statement.</value>
  </data>
  <data name="Exits_a_procedure_or_block_and_transfers_execution_immediately_to_the_statement_following_the_procedure_call_or_block_definition_Exit_Do_For_Function_Property_Select_Sub_Try_While" xml:space="preserve">
    <value>Exits a procedure or block and transfers execution immediately to the statement following the procedure call or block definition.
Exit {Do | For | Function | Property | Select | Sub | Try | While}</value>
  </data>
  <data name="Exits_a_Select_block_and_transfers_execution_immediately_to_the_statement_following_the_End_Select_statement" xml:space="preserve">
    <value>Exits a Select block and transfers execution immediately to the statement following the End Select statement.</value>
  </data>
  <data name="Exits_a_Try_block_and_transfers_execution_immediately_to_the_statement_following_the_End_Try_statement" xml:space="preserve">
    <value>Exits a Try block and transfers execution immediately to the statement following the End Try statement.</value>
  </data>
  <data name="Exits_a_While_loop_and_transfers_execution_immediately_to_the_statement_following_the_End_While_statement" xml:space="preserve">
    <value>Exits a While loop and transfers execution immediately to the statement following the End While statement.</value>
  </data>
  <data name="When_set_to_On_requires_explicit_declaration_of_all_variables_using_a_Dim_Private_Public_or_ReDim_statement_Option_Explicit_On_Off" xml:space="preserve">
    <value>When set to On, requires explicit declaration of all variables, using a Dim, Private, Public, or ReDim statement.
Option Explicit {On | Off}</value>
  </data>
  <data name="Represents_a_Boolean_value_that_fails_a_conditional_test" xml:space="preserve">
    <value>Represents a Boolean value that fails a conditional test.</value>
  </data>
  <data name="Introduces_a_statement_block_to_be_run_before_exiting_a_Try_structure" xml:space="preserve">
    <value>Introduces a statement block to be run before exiting a Try structure.</value>
  </data>
  <data name="Introduces_a_loop_that_is_repeated_for_each_element_in_a_collection" xml:space="preserve">
    <value>Introduces a loop that is repeated for each element in a collection.</value>
  </data>
  <data name="Introduces_a_loop_that_is_iterated_a_specified_number_of_times" xml:space="preserve">
    <value>Introduces a loop that is iterated a specified number of times.</value>
  </data>
  <data name="Identifies_a_list_of_values_as_a_collection_initializer" xml:space="preserve">
    <value>Identifies a list of values as a collection initializer</value>
  </data>
  <data name="Branches_unconditionally_to_a_specified_line_in_a_procedure" xml:space="preserve">
    <value>Branches unconditionally to a specified line in a procedure.</value>
  </data>
  <data name="Groups_elements_that_have_a_common_key" xml:space="preserve">
    <value>Groups elements that have a common key.</value>
  </data>
  <data name="Combines_the_elements_of_two_sequences_and_groups_the_results_The_join_operation_is_based_on_matching_keys" xml:space="preserve">
    <value>Combines the elements of two sequences and groups the results. The join operation is based on matching keys.</value>
  </data>
  <data name="Use_Group_to_specify_that_a_group_named_0_should_be_created" xml:space="preserve">
    <value>Use 'Group' to specify that a group named '{0}' should be created.</value>
  </data>
  <data name="Use_Group_to_specify_that_a_group_named_Group_should_be_created" xml:space="preserve">
    <value>Use 'Group' to specify that a group named 'Group' should be created.</value>
  </data>
  <data name="Conditionally_compiles_selected_blocks_of_code_depending_on_the_value_of_an_expression" xml:space="preserve">
    <value>Conditionally compiles selected blocks of code, depending on the value of an expression.</value>
  </data>
  <data name="Conditionally_executes_a_group_of_statements_depending_on_the_value_of_an_expression" xml:space="preserve">
    <value>Conditionally executes a group of statements, depending on the value of an expression.</value>
  </data>
  <data name="When_set_to_On_allows_the_use_of_local_type_inference_in_declaring_variables_Option_Infer_On_Off" xml:space="preserve">
    <value>When set to On, allows the use of local type inference in declaring variables.
Option Infer {On | Off}</value>
  </data>
  <data name="Specifies_an_identifier_that_can_serve_as_a_reference_to_the_results_of_a_join_or_grouping_subexpression" xml:space="preserve">
    <value>Specifies an identifier that can serve as a reference to the results of a join or grouping subexpression.</value>
  </data>
  <data name="Combines_the_elements_of_two_sequences_The_join_operation_is_based_on_matching_keys" xml:space="preserve">
    <value>Combines the elements of two sequences. The join operation is based on matching keys.</value>
  </data>
  <data name="Identifies_a_key_field_in_an_anonymous_type_definition" xml:space="preserve">
    <value>Identifies a key field in an anonymous type definition.</value>
  </data>
  <data name="Computes_a_value_for_each_item_in_the_query_and_assigns_the_value_to_a_new_range_variable" xml:space="preserve">
    <value>Computes a value for each item in the query, and assigns the value to a new range variable.</value>
  </data>
  <data name="Terminates_a_loop_that_is_introduced_with_a_Do_statement" xml:space="preserve">
    <value>Terminates a loop that is introduced with a Do statement.</value>
  </data>
  <data name="Repeats_a_block_of_statements_until_a_Boolean_condition_becomes_true_Do_Loop_Until_condition" xml:space="preserve">
    <value>Repeats a block of statements until a Boolean condition becomes true.
Do...Loop Until &lt;condition&gt;</value>
  </data>
  <data name="Repeats_a_block_of_statements_while_a_Boolean_condition_is_true_Do_Loop_While_condition" xml:space="preserve">
    <value>Repeats a block of statements while a Boolean condition is true.
Do...Loop While &lt;condition&gt;</value>
  </data>
  <data name="Provides_a_way_to_refer_to_the_current_instance_of_a_class_or_structure_that_is_the_instance_in_which_the_code_is_running" xml:space="preserve">
    <value>Provides a way to refer to the current instance of a class or structure, that is, the instance in which the code is running.</value>
  </data>
  <data name="Provides_a_way_to_refer_to_the_base_class_of_the_current_class_instance_You_cannot_use_MyBase_to_call_MustOverride_base_methods" xml:space="preserve">
    <value>Provides a way to refer to the base class of the current class instance. You cannot use MyBase to call MustOverride base methods.</value>
  </data>
  <data name="Provides_a_way_to_refer_to_the_class_instance_members_as_originally_implemented_ignoring_any_derived_class_overrides" xml:space="preserve">
    <value>Provides a way to refer to the class instance members as originally implemented, ignoring any derived class overrides.</value>
  </data>
  <data name="Creates_a_new_object_instance" xml:space="preserve">
    <value>Creates a new object instance.</value>
  </data>
  <data name="Terminates_a_loop_that_iterates_through_the_values_of_a_loop_variable" xml:space="preserve">
    <value>Terminates a loop that iterates through the values of a loop variable.</value>
  </data>
  <data name="Represents_the_default_value_of_any_data_type" xml:space="preserve">
    <value>Represents the default value of any data type.</value>
  </data>
  <data name="Turns_a_compiler_option_off" xml:space="preserve">
    <value>Turns a compiler option off.</value>
  </data>
  <data name="Enables_the_error_handling_routine_that_starts_at_the_line_specified_in_the_line_argument_The_specified_line_must_be_in_the_same_procedure_as_the_On_Error_statement_On_Error_GoTo_bracket_label_0_1_bracket" xml:space="preserve">
    <value>Enables the error-handling routine that starts at the line specified in the line argument.
The specified line must be in the same procedure as the On Error statement.
On Error GoTo [&lt;label&gt; | 0 | -1]</value>
  </data>
  <data name="When_a_run_time_error_occurs_execution_transfers_to_the_statement_following_the_statement_or_procedure_call_that_resulted_in_the_error" xml:space="preserve">
    <value>When a run-time error occurs, execution transfers to the statement following the statement or procedure call that resulted in the error.</value>
  </data>
  <data name="Turns_a_compiler_option_on" xml:space="preserve">
    <value>Turns a compiler option on.</value>
  </data>
  <data name="Specifies_the_element_keys_used_to_correlate_sequences_for_a_join_operation" xml:space="preserve">
    <value>Specifies the element keys used to correlate sequences for a join operation.</value>
  </data>
  <data name="Specifies_the_sort_order_for_columns_in_a_query_Can_be_followed_by_either_the_Ascending_or_the_Descending_keyword_If_neither_is_specified_Ascending_is_used" xml:space="preserve">
    <value>Specifies the sort order for columns in a query. Can be followed by either the Ascending or the Descending keyword. If neither is specified, Ascending is used.</value>
  </data>
  <data name="Specifies_the_statements_to_run_when_the_event_is_raised_by_the_RaiseEvent_statement_RaiseEvent_delegateSignature_End_RaiseEvent" xml:space="preserve">
    <value>Specifies the statements to run when the event is raised by the RaiseEvent statement.
RaiseEvent(&lt;delegateSignature&gt;)...End RaiseEvent</value>
  </data>
  <data name="Triggers_an_event_declared_at_module_level_within_a_class_form_or_document_RaiseEvent_eventName_bracket_argumentList_bracket" xml:space="preserve">
    <value>Triggers an event declared at module level within a class, form, or document.
RaiseEvent &lt;eventName&gt; [(&lt;argumentList&gt;)]</value>
  </data>
  <data name="Collapses_and_hides_sections_of_code_in_Visual_Basic_files" xml:space="preserve">
    <value>Collapses and hides sections of code in Visual Basic files.</value>
  </data>
  <data name="Returns_execution_to_the_code_that_called_the_Function_Sub_Get_Set_or_Operator_procedure_Return_or_Return_expression" xml:space="preserve">
    <value>Returns execution to the code that called the Function, Sub, Get, Set, or Operator procedure.
Return -or- Return &lt;expression&gt;</value>
  </data>
  <data name="Runs_one_of_several_groups_of_statements_depending_on_the_value_of_an_expression" xml:space="preserve">
    <value>Runs one of several groups of statements, depending on the value of an expression.</value>
  </data>
  <data name="Specifies_which_columns_to_include_in_the_result_of_a_query" xml:space="preserve">
    <value>Specifies which columns to include in the result of a query.</value>
  </data>
  <data name="Skips_elements_up_to_a_specified_position_in_the_collection" xml:space="preserve">
    <value>Skips elements up to a specified position in the collection.</value>
  </data>
  <data name="Specifies_how_much_to_increment_between_each_loop_iteration" xml:space="preserve">
    <value>Specifies how much to increment between each loop iteration.</value>
  </data>
  <data name="Suspends_program_execution" xml:space="preserve">
    <value>Suspends program execution.</value>
  </data>
  <data name="When_set_to_On_restricts_implicit_data_type_conversions_to_only_widening_conversions_Option_Strict_On_Off" xml:space="preserve">
    <value>When set to On, restricts implicit data type conversions to only widening conversions.
Option Strict {On | Off}</value>
  </data>
  <data name="Ensures_that_multiple_threads_do_not_execute_the_statement_block_at_the_same_time_SyncLock_object_End_Synclock" xml:space="preserve">
    <value>Ensures that multiple threads do not execute the statement block at the same time.
SyncLock &lt;object&gt;...End Synclock</value>
  </data>
  <data name="Includes_elements_up_to_a_specified_position_in_the_collection" xml:space="preserve">
    <value>Includes elements up to a specified position in the collection.</value>
  </data>
  <data name="Sets_the_string_comparison_method_specified_in_Option_Compare_to_a_text_sort_order_that_is_not_case_sensitive" xml:space="preserve">
    <value>Sets the string comparison method specified in Option Compare to a text sort order that is not case sensitive.</value>
  </data>
  <data name="Introduces_a_statement_block_to_be_compiled_or_executed_if_a_tested_condition_is_true" xml:space="preserve">
    <value>Introduces a statement block to be compiled or executed if a tested condition is true.</value>
  </data>
  <data name="Throws_an_exception_within_a_procedure_so_that_you_can_handle_it_with_structured_or_unstructured_exception_handling_code" xml:space="preserve">
    <value>Throws an exception within a procedure so that you can handle it with structured or unstructured exception-handling code.</value>
  </data>
  <data name="Represents_a_Boolean_value_that_passes_a_conditional_test" xml:space="preserve">
    <value>Represents a Boolean value that passes a conditional test.</value>
  </data>
  <data name="Provides_a_way_to_handle_some_or_all_possible_errors_that_might_occur_in_a_given_block_of_code_while_still_running_the_code_Try_bracket_Catch_bracket_Catch_Finally_End_Try" xml:space="preserve">
    <value>Provides a way to handle some or all possible errors that might occur in a given block of code, while still running the code.
Try...[Catch]...{Catch | Finally}...End Try</value>
  </data>
  <data name="A_Using_block_does_three_things_colon_it_creates_and_initializes_variables_in_the_resource_list_it_runs_the_code_in_the_block_and_it_disposes_of_the_variables_before_exiting_Resources_used_in_the_Using_block_must_implement_System_IDisposable_Using_resource1_bracket_resource2_bracket_End_Using" xml:space="preserve">
    <value>A Using block does three things: it creates and initializes variables in the resource list, it runs the code in the block, and it disposes of the variables before exiting. Resources used in the Using block must implement System.IDisposable.
Using &lt;resource1&gt;[, &lt;resource2&gt;]...End Using</value>
  </data>
  <data name="Adds_a_conditional_test_to_a_Catch_statement_Exceptions_are_caught_by_that_Catch_statement_only_when_the_conditional_test_that_follows_the_When_keyword_evaluates_to_True" xml:space="preserve">
    <value>Adds a conditional test to a Catch statement. Exceptions are caught by that Catch statement only when the conditional test that follows the When keyword evaluates to True.</value>
  </data>
  <data name="Specifies_the_filtering_condition_for_a_range_variable_in_a_query" xml:space="preserve">
    <value>Specifies the filtering condition for a range variable in a query.</value>
  </data>
  <data name="Runs_a_series_of_statements_as_long_as_a_given_condition_is_true" xml:space="preserve">
    <value>Runs a series of statements as long as a given condition is true.</value>
  </data>
  <data name="Specifies_a_condition_for_Skip_and_Take_operations_Elements_will_be_bypassed_or_included_as_long_as_the_condition_is_true" xml:space="preserve">
    <value>Specifies a condition for Skip and Take operations. Elements will be bypassed or included as long as the condition is true.</value>
  </data>
  <data name="Specifies_the_declaration_of_property_initializations_in_an_object_initializer_New_typeName_With_bracket_property_expression_bracket_bracket_bracket" xml:space="preserve">
    <value>Specifies the declaration of property initializations in an object initializer.
New &lt;typeName&gt; With {[.&lt;property&gt; = &lt;expression&gt;][,...]}</value>
  </data>
  <data name="Runs_a_series_of_statements_that_refer_to_a_single_object_or_structure_With_object_End_With" xml:space="preserve">
    <value>Runs a series of statements that refer to a single object or structure.
With &lt;object&gt;...End With</value>
  </data>
  <data name="Produces_an_element_of_an_IEnumerable_or_IEnumerator" xml:space="preserve">
    <value>Produces an element of an IEnumerable or IEnumerator.</value>
  </data>
  <data name="Defines_an_asynchronous_lambda_expression_that_can_use_the_Await_operator_Can_be_used_wherever_a_delegate_type_is_expected_Async_Sub_Function_parameterList_expression" xml:space="preserve">
    <value>Defines an asynchronous lambda expression that can use the Await operator. Can be used wherever a delegate type is expected.
Async Sub/Function(&lt;parameterList&gt;) &lt;expression&gt;</value>
  </data>
  <data name="Defines_a_lambda_expression_that_calculates_and_returns_a_single_value_Can_be_used_wherever_a_delegate_type_is_expected_Function_parameterList_expression" xml:space="preserve">
    <value>Defines a lambda expression that calculates and returns a single value. Can be used wherever a delegate type is expected.
Function(&lt;parameterList&gt;) &lt;expression&gt;</value>
  </data>
  <data name="Defines_a_lambda_expression_that_can_execute_statements_and_does_not_return_a_value_Can_be_used_wherever_a_delegate_type_is_expected_Sub_parameterList_statement" xml:space="preserve">
    <value>Defines a lambda expression that can execute statements and does not return a value. Can be used wherever a delegate type is expected.
Sub(&lt;parameterList&gt;) &lt;statement&gt;</value>
  </data>
  <data name="Disables_reporting_of_specified_warnings_in_the_portion_of_the_source_file_below_the_current_line" xml:space="preserve">
    <value>Disables reporting of specified warnings in the portion of the source file below the current line.</value>
  </data>
  <data name="Enables_reporting_of_specified_warnings_in_the_portion_of_the_source_file_below_the_current_line" xml:space="preserve">
    <value>Enables reporting of specified warnings in the portion of the source file below the current line.</value>
  </data>
  <data name="Insert_Await" xml:space="preserve">
    <value>Insert 'Await'.</value>
  </data>
  <data name="Make_0_an_Async_Function" xml:space="preserve">
    <value>Make {0} an Async Function.</value>
  </data>
  <data name="Insert_Missing_Cast" xml:space="preserve">
    <value>Insert Missing Cast</value>
  </data>
  <data name="Convert_0_to_Iterator" xml:space="preserve">
    <value>Convert {0} to Iterator</value>
  </data>
  <data name="Replace_Return_with_Yield" xml:space="preserve">
    <value>Replace 'Return' with 'Yield</value>
  </data>
  <data name="Use_the_correct_control_variable" xml:space="preserve">
    <value>Use the correct control variable</value>
  </data>
  <data name="NameOf_function" xml:space="preserve">
    <value>NameOf function</value>
  </data>
  <data name="Generate_narrowing_conversion_in_0" xml:space="preserve">
    <value>Generate narrowing conversion in '{0}'</value>
  </data>
  <data name="Generate_widening_conversion_in_0" xml:space="preserve">
    <value>Generate widening conversion in '{0}'</value>
  </data>
  <data name="Do_not_change_this_code_Put_cleanup_code_in_Dispose_disposing_As_Boolean_above" xml:space="preserve">
    <value>Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.</value>
  </data>
  <data name="TODO_colon_free_unmanaged_resources_unmanaged_objects_and_override_Finalize_below" xml:space="preserve">
    <value>TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.</value>
  </data>
  <data name="TODO_colon_override_Finalize_only_if_Dispose_disposing_As_Boolean_above_has_code_to_free_unmanaged_resources" xml:space="preserve">
    <value>TODO: override Finalize() only if Dispose(disposing As Boolean) above has code to free unmanaged resources.</value>
  </data>
  <data name="This_code_added_by_Visual_Basic_to_correctly_implement_the_disposable_pattern" xml:space="preserve">
    <value>This code added by Visual Basic to correctly implement the disposable pattern.</value>
  </data>
  <data name="TODO_colon_uncomment_the_following_line_if_Finalize_is_overridden_above" xml:space="preserve">
    <value>TODO: uncomment the following line if Finalize() is overridden above.</value>
  </data>
  <data name="Imports_statement_is_unnecessary" xml:space="preserve">
    <value>Imports statement is unnecessary.</value>
  </data>
  <data name="Try_block" xml:space="preserve">
    <value>Try block</value>
    <comment>{Locked="Try"} "Try" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Catch_clause" xml:space="preserve">
    <value>Catch clause</value>
    <comment>{Locked="Catch"} "Catch" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Finally_clause" xml:space="preserve">
    <value>Finally clause</value>
    <comment>{Locked="Finally"} "Finally" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Using_statement" xml:space="preserve">
    <value>Using statement</value>
    <comment>{Locked="Using"} "Using" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Using_block" xml:space="preserve">
    <value>Using block</value>
    <comment>{Locked="Using"} "Using" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="With_statement" xml:space="preserve">
    <value>With statement</value>
    <comment>{Locked="With"} "With" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="With_block" xml:space="preserve">
    <value>With block</value>
    <comment>{Locked="With"} "With" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="SyncLock_statement" xml:space="preserve">
    <value>SyncLock statement</value>
    <comment>{Locked="SyncLock"} "SyncLock" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="SyncLock_block" xml:space="preserve">
    <value>SyncLock block</value>
    <comment>{Locked="SyncLock"} "SyncLock" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="For_Each_statement" xml:space="preserve">
    <value>For Each statement</value>
    <comment>{Locked="For Each"} "For Each" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="For_Each_block" xml:space="preserve">
    <value>For Each block</value>
    <comment>{Locked="For Each"} "For Each" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="On_Error_statement" xml:space="preserve">
    <value>On Error statement</value>
    <comment>{Locked="On Error"} "On Error" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Resume_statement" xml:space="preserve">
    <value>Resume statement</value>
    <comment>{Locked="Resume"} "Resume" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Yield_statement" xml:space="preserve">
    <value>Yield statement</value>
    <comment>{Locked="Yield"} "Yield" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Await_expression" xml:space="preserve">
    <value>Await expression</value>
    <comment>{Locked="Await"} "Await" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Lambda" xml:space="preserve">
    <value>Lambda</value>
  </data>
  <data name="Where_clause" xml:space="preserve">
    <value>Where clause</value>
    <comment>{Locked="Where"} "Where" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Select_clause" xml:space="preserve">
    <value>Select clause</value>
    <comment>{Locked="Select"} "Select" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="From_clause" xml:space="preserve">
    <value>From clause</value>
    <comment>{Locked="From"} "From" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Aggregate_clause" xml:space="preserve">
    <value>Aggregate clause</value>
    <comment>{Locked="Aggregate"} "Aggregate" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Let_clause" xml:space="preserve">
    <value>Let clause</value>
    <comment>{Locked="Let"} "Let" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Join_clause" xml:space="preserve">
    <value>Join clause</value>
    <comment>{Locked="Join"} "Join" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Group_Join_clause" xml:space="preserve">
    <value>Group Join clause</value>
    <comment>{Locked="Group Join"} "Group Join" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Group_By_clause" xml:space="preserve">
    <value>Group By clause</value>
    <comment>{Locked="Group By"} "Group By" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Function_aggregation" xml:space="preserve">
    <value>Function aggregation</value>
  </data>
  <data name="Take_While_clause" xml:space="preserve">
    <value>Take While clause</value>
    <comment>{Locked="Take While"} "Take While" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Skip_While_clause" xml:space="preserve">
    <value>Skip While clause</value>
    <comment>{Locked="Skip While"} "Skip While" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Ordering_clause" xml:space="preserve">
    <value>Ordering clause</value>
    <comment>{Locked="Ordering"} "Ordering" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="Join_condition" xml:space="preserve">
    <value>Join condition</value>
    <comment>{Locked="Join"} "Join" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="option_" xml:space="preserve">
    <value>option</value>
    <comment>{Locked}</comment>
  </data>
  <data name="import" xml:space="preserve">
    <value>import</value>
    <comment>{Locked}</comment>
  </data>
  <data name="structure_" xml:space="preserve">
    <value>structure</value>
    <comment>{Locked}</comment>
  </data>
  <data name="module_" xml:space="preserve">
    <value>module</value>
    <comment>{Locked}</comment>
  </data>
  <data name="WithEvents_field" xml:space="preserve">
    <value>WithEvents field</value>
    <comment>{Locked="WithEvents"} "WithEvents" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="property_accessor" xml:space="preserve">
    <value>property accessor</value>
  </data>
  <data name="as_clause" xml:space="preserve">
    <value>as clause</value>
    <comment>{Locked="as"} "as" is a VB keyword and should not be localized.</comment>
  </data>
  <data name="type_parameters" xml:space="preserve">
    <value>type parameters</value>
  </data>
  <data name="parameters" xml:space="preserve">
    <value>parameters</value>
  </data>
  <data name="attributes" xml:space="preserve">
    <value>attributes</value>
  </data>
  <data name="Too_many_arguments_to_0" xml:space="preserve">
    <value>Too many arguments to '{0}'.</value>
  </data>
  <data name="Type_0_is_not_defined" xml:space="preserve">
    <value>Type '{0}' is not defined.</value>
  </data>
  <data name="Add_Overloads" xml:space="preserve">
    <value>Add Overloads</value>
  </data>
  <data name="Add_a_metadata_reference_to_specified_assembly_and_all_its_dependencies_e_g_Sharpr_myLib_dll" xml:space="preserve">
    <value>Add a metadata reference to specified assembly and all its dependencies, e.g. #r "myLib.dll".</value>
  </data>
  <data name="Properties" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="namespace_name" xml:space="preserve">
    <value>&lt;namespace name&gt;</value>
  </data>
  <data name="Type_a_name_here_to_declare_a_namespace" xml:space="preserve">
    <value>Type a name here to declare a namespace.</value>
  </data>
  <data name="Type_a_name_here_to_declare_a_partial_class" xml:space="preserve">
    <value>Type a name here to declare a partial class.</value>
  </data>
  <data name="class_name" xml:space="preserve">
    <value>&lt;class name&gt;</value>
  </data>
  <data name="interface_name" xml:space="preserve">
    <value>&lt;interface name&gt;</value>
  </data>
  <data name="module_name" xml:space="preserve">
    <value>&lt;module name&gt;</value>
  </data>
  <data name="structure_name" xml:space="preserve">
    <value>&lt;structure name&gt;</value>
  </data>
  <data name="Type_a_name_here_to_declare_a_partial_interface" xml:space="preserve">
    <value>Type a name here to declare a partial interface.</value>
  </data>
  <data name="Type_a_name_here_to_declare_a_partial_module" xml:space="preserve">
    <value>Type a name here to declare a partial module.</value>
  </data>
  <data name="Type_a_name_here_to_declare_a_partial_structure" xml:space="preserve">
    <value>Type a name here to declare a partial structure.</value>
  </data>
  <data name="Event_add_handler_name" xml:space="preserve">
    <value>{0}.add</value>
    <comment>The name of an event add handler where "{0}" is the event name.</comment>
  </data>
  <data name="Event_remove_handler_name" xml:space="preserve">
    <value>{0}.remove</value>
    <comment>The name of an event remove handler where "{0}" is the event name.</comment>
  </data>
  <data name="Property_getter_name" xml:space="preserve">
    <value>{0}.get</value>
    <comment>The name of a property getter like "public int MyProperty { get; }" where "{0}" is the property name</comment>
  </data>
  <data name="Property_setter_name" xml:space="preserve">
    <value>{0}.set</value>
    <comment>The name of a property setter like "public int MyProperty { set; }" where "{0}" is the property name</comment>
  </data>
  <data name="Make_Async_Function" xml:space="preserve">
    <value>Make Async Function</value>
  </data>
  <data name="Make_Async_Sub" xml:space="preserve">
    <value>Make Async Sub</value>
  </data>
  <data name="Add_Me" xml:space="preserve">
    <value>Add 'Me.'</value>
  </data>
  <data name="Convert_to_Select_Case" xml:space="preserve">
    <value>Convert to 'Select Case'</value>
  </data>
  <data name="Use_Is_Nothing_check" xml:space="preserve">
    <value>Use 'Is Nothing' check</value>
  </data>
  <data name="Use_IsNot_Nothing_check" xml:space="preserve">
    <value>Use 'IsNot Nothing' check</value>
  </data>
  <data name="Convert_to_For_Each" xml:space="preserve">
    <value>Convert to 'For Each'</value>
  </data>
  <data name="Convert_to_For" xml:space="preserve">
    <value>Convert  to 'For'</value>
  </data>
</root>