//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Runtime.Analyzers {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SystemRuntimeAnalyzersResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SystemRuntimeAnalyzersResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Runtime.Analyzers.SystemRuntimeAnalyzersResources", typeof(SystemRuntimeAnalyzersResources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because {0} exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true)..
        /// </summary>
        internal static string AddAssemblyLevelComVisibleFalse {
            get {
                return ResourceManager.GetString("AddAssemblyLevelComVisibleFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assemblies should be marked with AssemblyVersionAttribute.
        /// </summary>
        internal static string AssembliesShouldBeMarkedWithAssemblyVersionAttribute {
            get {
                return ResourceManager.GetString("AssembliesShouldBeMarkedWithAssemblyVersionAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid unsealed attributes..
        /// </summary>
        internal static string AvoidUnsealedAttributes {
            get {
                return ResourceManager.GetString("AvoidUnsealedAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seal attribute type..
        /// </summary>
        internal static string AvoidUnsealedAttributesCodeFix {
            get {
                return ResourceManager.GetString("AvoidUnsealedAttributesCodeFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design.
        /// </summary>
        internal static string CategoryDesign {
            get {
                return ResourceManager.GetString("CategoryDesign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Globalization.
        /// </summary>
        internal static string CategoryGlobalization {
            get {
                return ResourceManager.GetString("CategoryGlobalization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interoperability.
        /// </summary>
        internal static string CategoryInteroperability {
            get {
                return ResourceManager.GetString("CategoryInteroperability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Naming.
        /// </summary>
        internal static string CategoryNaming {
            get {
                return ResourceManager.GetString("CategoryNaming", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performance.
        /// </summary>
        internal static string CategoryPerformance {
            get {
                return ResourceManager.GetString("CategoryPerformance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reliability.
        /// </summary>
        internal static string CategoryReliability {
            get {
                return ResourceManager.GetString("CategoryReliability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage.
        /// </summary>
        internal static string CategoryUsage {
            get {
                return ResourceManager.GetString("CategoryUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider changing the ComVisible attribute on {0} to false, and opting in at the type level..
        /// </summary>
        internal static string ChangeAssemblyLevelComVisibleToFalse {
            get {
                return ResourceManager.GetString("ChangeAssemblyLevelComVisibleToFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a property accessor..
        /// </summary>
        internal static string CreatePropertyAccessorForParameter {
            get {
                return ResourceManager.GetString("CreatePropertyAccessorForParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom attributes should have AttributeUsage attribute defined..
        /// </summary>
        internal static string CustomAttrShouldHaveAttributeUsage {
            get {
                return ResourceManager.GetString("CustomAttrShouldHaveAttributeUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Define accessors for attribute arguments..
        /// </summary>
        internal static string DefineAccessorsForAttributeArguments {
            get {
                return ResourceManager.GetString("DefineAccessorsForAttributeArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a public read-only property accessor for positional argument &apos;{0}&apos; of attribute &apos;{1}&apos;..
        /// </summary>
        internal static string DefineAccessorsForAttributeArgumentsDefault {
            get {
                return ResourceManager.GetString("DefineAccessorsForAttributeArgumentsDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If &apos;{0}&apos; is the property accessor for positional argument &apos;{1}&apos;, ensure that property getter is public..
        /// </summary>
        internal static string DefineAccessorsForAttributeArgumentsIncreaseVisibility {
            get {
                return ResourceManager.GetString("DefineAccessorsForAttributeArgumentsIncreaseVisibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove the property setter from &apos;{0}&apos; or reduce its accessibility because it corresponds to positional argument &apos;{1}&apos;..
        /// </summary>
        internal static string DefineAccessorsForAttributeArgumentsRemoveSetter {
            get {
                return ResourceManager.GetString("DefineAccessorsForAttributeArgumentsRemoveSetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disposable fields should be disposed.
        /// </summary>
        internal static string DisposableFieldsShouldBeDisposed {
            get {
                return ResourceManager.GetString("DisposableFieldsShouldBeDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on objects with weak identity..
        /// </summary>
        internal static string DoNotLockOnObjectsWithWeakIdentity {
            get {
                return ResourceManager.GetString("DoNotLockOnObjectsWithWeakIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on a reference of type &apos;{0}&apos; as it has weak identity. Replace that with a lock against an object with strong identity..
        /// </summary>
        internal static string DoNotLockOnWeakIdentity {
            get {
                return ResourceManager.GetString("DoNotLockOnWeakIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not mark Enum with FlagsAttribute.
        /// </summary>
        internal static string DoNotMarkEnumsWithFlags {
            get {
                return ResourceManager.GetString("DoNotMarkEnumsWithFlags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove FlagsAttribute from enum..
        /// </summary>
        internal static string DoNotMarkEnumsWithFlagsCodeFix {
            get {
                return ResourceManager.GetString("DoNotMarkEnumsWithFlagsCodeFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enumeration does not appear to contain a consistent set values that can be combined using  the OR (|) and AND (&amp;amp;amp;amp;) operators. Using the Flags attribute on an enumeration suggests that the enumeration values are meant to be combined using the AND and OR operators. Typically, a flags enumeration uses values that are either powers of two, or combine other values that are powers of two..
        /// </summary>
        internal static string DoNotMarkEnumsWithFlagsDescription {
            get {
                return ResourceManager.GetString("DoNotMarkEnumsWithFlagsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is marked with FlagsAttribute but a discrete member cannot be found for every settable bit that is used across the range of enum values. Remove FlagsAttribute from the type or define new members for the following (currently missing) values: &apos;{1}&apos;..
        /// </summary>
        internal static string DoNotMarkEnumsWithFlagsMessage {
            get {
                return ResourceManager.GetString("DoNotMarkEnumsWithFlagsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement Equality and Comparison methods and operators.
        /// </summary>
        internal static string ImplementComparable {
            get {
                return ResourceManager.GetString("ImplementComparable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement IDisposable Interface.
        /// </summary>
        internal static string ImplementIDisposableInterface {
            get {
                return ResourceManager.GetString("ImplementIDisposableInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make the getter of the property public.
        /// </summary>
        internal static string MakeGetterPublic {
            get {
                return ResourceManager.GetString("MakeGetterPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make the setter of the property non-public.
        /// </summary>
        internal static string MakeSetterNonPublic {
            get {
                return ResourceManager.GetString("MakeSetterNonPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark all assemblies with ComVisible.
        /// </summary>
        internal static string MarkAllAssembliesWithComVisible {
            get {
                return ResourceManager.GetString("MarkAllAssembliesWithComVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The System.Runtime.InteropServices.ComVisible attribute indicates whether COM clients can use the library. Good design dictates that developers explicitly indicate COM visibility. The default value for this attribute is &apos;true&apos;. However, the best design is to mark the assembly ComVisible false, and then mark types, interfaces, and individual members as ComVisible true, as appropriate..
        /// </summary>
        internal static string MarkAllAssembliesWithComVisibleDescription {
            get {
                return ResourceManager.GetString("MarkAllAssembliesWithComVisibleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark assemblies with CLSCompliantAttribute.
        /// </summary>
        internal static string MarkAssembliesWithCLSCompliantAttribute {
            get {
                return ResourceManager.GetString("MarkAssembliesWithCLSCompliantAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied f [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MarkAssembliesWithCLSCompliantDescription {
            get {
                return ResourceManager.GetString("MarkAssembliesWithCLSCompliantDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify AttributeUsage attribute on &apos;{0}&apos; attribute class..
        /// </summary>
        internal static string MarkAttributesWithAttributeUsage {
            get {
                return ResourceManager.GetString("MarkAttributesWithAttributeUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark Enum with FlagsAttribute.
        /// </summary>
        internal static string MarkEnumsWithFlags {
            get {
                return ResourceManager.GetString("MarkEnumsWithFlags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply FlagsAttribute to enum..
        /// </summary>
        internal static string MarkEnumsWithFlagsCodeFix {
            get {
                return ResourceManager.GetString("MarkEnumsWithFlagsCodeFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enumeration appears to be made up of combinable flags. If this true, apply the Flags attribute to the enumeration..
        /// </summary>
        internal static string MarkEnumsWithFlagsDescription {
            get {
                return ResourceManager.GetString("MarkEnumsWithFlagsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constituent members of &apos;{0}&apos; appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute..
        /// </summary>
        internal static string MarkEnumsWithFlagsMessage {
            get {
                return ResourceManager.GetString("MarkEnumsWithFlagsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overload operator Equals and comparison operators when implementing System.IComparable.
        /// </summary>
        internal static string OverloadOperatorEqualsOnIComparableInterface {
            get {
                return ResourceManager.GetString("OverloadOperatorEqualsOnIComparableInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types that implement IComparable should redefine Equals and comparison operators to keep the meanings of less than, greater than, and equals consistent throughout the type..
        /// </summary>
        internal static string OverloadOperatorEqualsOnIComparableInterfaceDescription {
            get {
                return ResourceManager.GetString("OverloadOperatorEqualsOnIComparableInterfaceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overload operator equals on overriding ValueType.Equals.
        /// </summary>
        internal static string OverloadOperatorEqualsOnOverridingValueTypeEquals {
            get {
                return ResourceManager.GetString("OverloadOperatorEqualsOnOverridingValueTypeEquals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overload operator equals on overriding ValueType.Equals.
        /// </summary>
        internal static string OverloadOperatorEqualsOnOverridingValueTypeEquals1 {
            get {
                return ResourceManager.GetString("OverloadOperatorEqualsOnOverridingValueTypeEquals1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value types that redefine System.ValueType.Equals should redefine the equality operator as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator..
        /// </summary>
        internal static string OverloadOperatorEqualsOnOverridingValueTypeEqualsDescription {
            get {
                return ResourceManager.GetString("OverloadOperatorEqualsOnOverridingValueTypeEqualsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes..
        /// </summary>
        internal static string SealAttributeTypesForImprovedPerf {
            get {
                return ResourceManager.GetString("SealAttributeTypesForImprovedPerf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For non-linguistic comparisons, StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase should be used instead of the linguistically-sensitive StringComparison.InvariantCulture..
        /// </summary>
        internal static string StringComparisonShouldBeOrdinalDescription {
            get {
                return ResourceManager.GetString("StringComparisonShouldBeOrdinalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String comparison should use StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase.
        /// </summary>
        internal static string StringComparisonShouldBeOrdinalOrOrdinalIgnoreCase {
            get {
                return ResourceManager.GetString("StringComparisonShouldBeOrdinalOrOrdinalIgnoreCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test for empty strings using &apos;string.Length&apos; property or &apos;string.IsNullOrEmpty&apos; method instead of an Equality check..
        /// </summary>
        internal static string TestForEmptyStringsUsingStringLength {
            get {
                return ResourceManager.GetString("TestForEmptyStringsUsingStringLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparing strings using the string.Length property or the string.IsNullOrEmpty method is significantly faster than using string.Equals. This is because Equals executes significantly more MSIL instructions than either IsNullOrEmpty or the number of instructions executed to retrieve the Length property value and compare it to zero..
        /// </summary>
        internal static string TestForEmptyStringsUsingStringLengthDescription {
            get {
                return ResourceManager.GetString("TestForEmptyStringsUsingStringLengthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; owns disposable fields but is not disposable.
        /// </summary>
        internal static string TypeOwnsDisposableFieldButIsNotDisposable {
            get {
                return ResourceManager.GetString("TypeOwnsDisposableFieldButIsNotDisposable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types that own disposable fields should be disposable.
        /// </summary>
        internal static string TypesThatOwnDisposableFieldsShouldBeDisposable {
            get {
                return ResourceManager.GetString("TypesThatOwnDisposableFieldsShouldBeDisposable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use System.EventHandler&lt;T&gt; where T inherits System.EventArgs or use System.EventHandler.
        /// </summary>
        internal static string UseGenericEventHandlerInstances {
            get {
                return ResourceManager.GetString("UseGenericEventHandlerInstances", resourceCulture);
            }
        }
    }
}
