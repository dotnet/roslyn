Microsoft.CodeAnalysis.AdhocWorkspace
Microsoft.CodeAnalysis.AdhocWorkspace.AddDocument(Microsoft.CodeAnalysis.DocumentInfo documentInfo)
Microsoft.CodeAnalysis.AdhocWorkspace.AddDocument(Microsoft.CodeAnalysis.ProjectId projectId, string name, Microsoft.CodeAnalysis.Text.SourceText text)
Microsoft.CodeAnalysis.AdhocWorkspace.AddProject(Microsoft.CodeAnalysis.ProjectInfo projectInfo)
Microsoft.CodeAnalysis.AdhocWorkspace.AddProject(string name, string language)
Microsoft.CodeAnalysis.AdhocWorkspace.AddProjects(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ProjectInfo> projectInfos)
Microsoft.CodeAnalysis.AdhocWorkspace.AddSolution(Microsoft.CodeAnalysis.SolutionInfo solutionInfo)
Microsoft.CodeAnalysis.AdhocWorkspace.AdhocWorkspace()
Microsoft.CodeAnalysis.AdhocWorkspace.AdhocWorkspace(Microsoft.CodeAnalysis.Host.HostServices host, string workspaceKind = "Custom")
Microsoft.CodeAnalysis.AdhocWorkspace.ClearSolution()
Microsoft.CodeAnalysis.ApplyChangesKind
Microsoft.CodeAnalysis.ApplyChangesKind.AddAdditionalDocument = 11
Microsoft.CodeAnalysis.ApplyChangesKind.AddAnalyzerReference = 9
Microsoft.CodeAnalysis.ApplyChangesKind.AddDocument = 6
Microsoft.CodeAnalysis.ApplyChangesKind.AddMetadataReference = 4
Microsoft.CodeAnalysis.ApplyChangesKind.AddProject = 0
Microsoft.CodeAnalysis.ApplyChangesKind.AddProjectReference = 2
Microsoft.CodeAnalysis.ApplyChangesKind.ChangeAdditionalDocument = 13
Microsoft.CodeAnalysis.ApplyChangesKind.ChangeCompilationOptions = 14
Microsoft.CodeAnalysis.ApplyChangesKind.ChangeDocument = 8
Microsoft.CodeAnalysis.ApplyChangesKind.ChangeParseOptions = 15
Microsoft.CodeAnalysis.ApplyChangesKind.RemoveAdditionalDocument = 12
Microsoft.CodeAnalysis.ApplyChangesKind.RemoveAnalyzerReference = 10
Microsoft.CodeAnalysis.ApplyChangesKind.RemoveDocument = 7
Microsoft.CodeAnalysis.ApplyChangesKind.RemoveMetadataReference = 5
Microsoft.CodeAnalysis.ApplyChangesKind.RemoveProject = 1
Microsoft.CodeAnalysis.ApplyChangesKind.RemoveProjectReference = 3
Microsoft.CodeAnalysis.Classification.ClassificationTypeNames
Microsoft.CodeAnalysis.Classification.ClassifiedSpan
Microsoft.CodeAnalysis.Classification.ClassifiedSpan.ClassificationType.get
Microsoft.CodeAnalysis.Classification.ClassifiedSpan.ClassifiedSpan(Microsoft.CodeAnalysis.Text.TextSpan textSpan, string classificationType)
Microsoft.CodeAnalysis.Classification.ClassifiedSpan.ClassifiedSpan(string classificationType, Microsoft.CodeAnalysis.Text.TextSpan textSpan)
Microsoft.CodeAnalysis.Classification.ClassifiedSpan.Equals(Microsoft.CodeAnalysis.Classification.ClassifiedSpan other)
Microsoft.CodeAnalysis.Classification.ClassifiedSpan.TextSpan.get
Microsoft.CodeAnalysis.Classification.Classifier
Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation
Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.ApplyChangesOperation(Microsoft.CodeAnalysis.Solution changedSolution)
Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.ChangedSolution.get
Microsoft.CodeAnalysis.CodeActions.CodeAction
Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsAsync(System.Threading.CancellationToken cancellationToken)
Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)
Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessAsync(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.CodeActions.CodeActionOperation> operations, System.Threading.CancellationToken cancellationToken)
Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(Microsoft.CodeAnalysis.Solution changedSolution, System.Threading.CancellationToken cancellationToken)
Microsoft.CodeAnalysis.CodeActions.CodeActionOperation
Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions
Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOperationsAsync(object options, System.Threading.CancellationToken cancellationToken)
Microsoft.CodeAnalysis.CodeActions.ConflictAnnotation
Microsoft.CodeAnalysis.CodeActions.OpenDocumentOperation
Microsoft.CodeAnalysis.CodeActions.OpenDocumentOperation.DocumentId.get
Microsoft.CodeAnalysis.CodeActions.OpenDocumentOperation.OpenDocumentOperation(Microsoft.CodeAnalysis.DocumentId documentId, bool activateIfAlreadyOpen = false)
Microsoft.CodeAnalysis.CodeActions.PreviewOperation
Microsoft.CodeAnalysis.CodeActions.RenameAnnotation
Microsoft.CodeAnalysis.CodeActions.WarningAnnotation
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.CancellationToken.get
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.CodeFixContext(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Diagnostic diagnostic, System.Action<Microsoft.CodeAnalysis.CodeActions.CodeAction, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>> registerCodeFix, System.Threading.CancellationToken cancellationToken)
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.CodeFixContext(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> diagnostics, System.Action<Microsoft.CodeAnalysis.CodeActions.CodeAction, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>> registerCodeFix, System.Threading.CancellationToken cancellationToken)
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Diagnostics.get
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Document.get
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.RegisterCodeFix(Microsoft.CodeAnalysis.CodeActions.CodeAction action, Microsoft.CodeAnalysis.Diagnostic diagnostic)
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.RegisterCodeFix(Microsoft.CodeAnalysis.CodeActions.CodeAction action, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic> diagnostics)
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.RegisterCodeFix(Microsoft.CodeAnalysis.CodeActions.CodeAction action, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> diagnostics)
Microsoft.CodeAnalysis.CodeFixes.CodeFixContext.Span.get
Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider
Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute
Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute.ExportCodeFixProviderAttribute(string firstLanguage, params string[] additionalLanguages)
Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute.Languages.get
Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute.Name.get
Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute.Name.set
Microsoft.CodeAnalysis.CodeFixes.FixAllContext
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.CancellationToken.get
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.CodeActionEquivalenceKey.get
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.CodeFixProvider.get
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.DiagnosticIds.get
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.Document.get
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetAllDiagnosticsAsync(Microsoft.CodeAnalysis.Project project)
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetDocumentDiagnosticsAsync(Microsoft.CodeAnalysis.Document document)
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.GetProjectDiagnosticsAsync(Microsoft.CodeAnalysis.Project project)
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.Project.get
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.Scope.get
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.Solution.get
Microsoft.CodeAnalysis.CodeFixes.FixAllContext.WithCancellationToken(System.Threading.CancellationToken cancellationToken)
Microsoft.CodeAnalysis.CodeFixes.FixAllProvider
Microsoft.CodeAnalysis.CodeFixes.FixAllScope
Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Custom = 3
Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Document = 0
Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Project = 1
Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Solution = 2
Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders
Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext
Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.CancellationToken.get
Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.CodeRefactoringContext(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, System.Action<Microsoft.CodeAnalysis.CodeActions.CodeAction> registerRefactoring, System.Threading.CancellationToken cancellationToken)
Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.Document.get
Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.RegisterRefactoring(Microsoft.CodeAnalysis.CodeActions.CodeAction action)
Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext.Span.get
Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider
Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute
Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute.ExportCodeRefactoringProviderAttribute(string firstLanguage, params string[] additionalLanguages)
Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute.Languages.get
Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute.Name.get
Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute.Name.set
Microsoft.CodeAnalysis.Differencing.Edit<TNode>
Microsoft.CodeAnalysis.Differencing.Edit<TNode>.Equals(Microsoft.CodeAnalysis.Differencing.Edit<TNode> other)
Microsoft.CodeAnalysis.Differencing.Edit<TNode>.Kind.get
Microsoft.CodeAnalysis.Differencing.Edit<TNode>.NewNode.get
Microsoft.CodeAnalysis.Differencing.Edit<TNode>.OldNode.get
Microsoft.CodeAnalysis.Differencing.EditKind
Microsoft.CodeAnalysis.Differencing.EditKind.Delete = 3
Microsoft.CodeAnalysis.Differencing.EditKind.Insert = 2
Microsoft.CodeAnalysis.Differencing.EditKind.Move = 4
Microsoft.CodeAnalysis.Differencing.EditKind.None = 0
Microsoft.CodeAnalysis.Differencing.EditKind.Reorder = 5
Microsoft.CodeAnalysis.Differencing.EditKind.Update = 1
Microsoft.CodeAnalysis.Differencing.EditScript<TNode>
Microsoft.CodeAnalysis.Differencing.EditScript<TNode>.Edits.get
Microsoft.CodeAnalysis.Differencing.EditScript<TNode>.Match.get
Microsoft.CodeAnalysis.Differencing.Match<TNode>
Microsoft.CodeAnalysis.Differencing.Match<TNode>.Comparer.get
Microsoft.CodeAnalysis.Differencing.Match<TNode>.GetSequenceEdits(System.Collections.Generic.IEnumerable<TNode> oldNodes, System.Collections.Generic.IEnumerable<TNode> newNodes)
Microsoft.CodeAnalysis.Differencing.Match<TNode>.GetTreeEdits()
Microsoft.CodeAnalysis.Differencing.Match<TNode>.Matches.get
Microsoft.CodeAnalysis.Differencing.Match<TNode>.NewRoot.get
Microsoft.CodeAnalysis.Differencing.Match<TNode>.OldRoot.get
Microsoft.CodeAnalysis.Differencing.Match<TNode>.ReverseMatches.get
Microsoft.CodeAnalysis.Differencing.Match<TNode>.TryGetNewNode(TNode oldNode, out TNode newNode)
Microsoft.CodeAnalysis.Differencing.Match<TNode>.TryGetOldNode(TNode newNode, out TNode oldNode)
Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>
Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.ComputeEditScript(TNode oldRoot, TNode newRoot)
Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.ComputeMatch(TNode oldRoot, TNode newRoot, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TNode, TNode>> knownMatches = null)
Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.TreeComparer()
Microsoft.CodeAnalysis.Document
Microsoft.CodeAnalysis.Document.GetLinkedDocumentIds()
Microsoft.CodeAnalysis.Document.GetSemanticModelAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Document.GetSyntaxRootAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Document.GetSyntaxVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Document.GetTextChangesAsync(Microsoft.CodeAnalysis.Document oldDocument, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Document.SourceCodeKind.get
Microsoft.CodeAnalysis.Document.SupportsSemanticModel.get
Microsoft.CodeAnalysis.Document.SupportsSyntaxTree.get
Microsoft.CodeAnalysis.Document.TryGetSemanticModel(out Microsoft.CodeAnalysis.SemanticModel semanticModel)
Microsoft.CodeAnalysis.Document.TryGetSyntaxRoot(out Microsoft.CodeAnalysis.SyntaxNode root)
Microsoft.CodeAnalysis.Document.TryGetSyntaxTree(out Microsoft.CodeAnalysis.SyntaxTree syntaxTree)
Microsoft.CodeAnalysis.Document.TryGetSyntaxVersion(out Microsoft.CodeAnalysis.VersionStamp version)
Microsoft.CodeAnalysis.Document.WithSourceCodeKind(Microsoft.CodeAnalysis.SourceCodeKind kind)
Microsoft.CodeAnalysis.Document.WithSyntaxRoot(Microsoft.CodeAnalysis.SyntaxNode root)
Microsoft.CodeAnalysis.Document.WithText(Microsoft.CodeAnalysis.Text.SourceText text)
Microsoft.CodeAnalysis.DocumentDiagnostic
Microsoft.CodeAnalysis.DocumentDiagnostic.DocumentDiagnostic(Microsoft.CodeAnalysis.WorkspaceDiagnosticKind kind, string message, Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.DocumentDiagnostic.DocumentId.get
Microsoft.CodeAnalysis.DocumentEventArgs
Microsoft.CodeAnalysis.DocumentEventArgs.Document.get
Microsoft.CodeAnalysis.DocumentEventArgs.DocumentEventArgs(Microsoft.CodeAnalysis.Document document)
Microsoft.CodeAnalysis.DocumentId
Microsoft.CodeAnalysis.DocumentId.Equals(Microsoft.CodeAnalysis.DocumentId other)
Microsoft.CodeAnalysis.DocumentId.Id.get
Microsoft.CodeAnalysis.DocumentId.ProjectId.get
Microsoft.CodeAnalysis.DocumentInfo
Microsoft.CodeAnalysis.DocumentInfo.FilePath.get
Microsoft.CodeAnalysis.DocumentInfo.Folders.get
Microsoft.CodeAnalysis.DocumentInfo.Id.get
Microsoft.CodeAnalysis.DocumentInfo.IsGenerated.get
Microsoft.CodeAnalysis.DocumentInfo.Name.get
Microsoft.CodeAnalysis.DocumentInfo.SourceCodeKind.get
Microsoft.CodeAnalysis.DocumentInfo.TextLoader.get
Microsoft.CodeAnalysis.DocumentInfo.WithFilePath(string filePath)
Microsoft.CodeAnalysis.DocumentInfo.WithFolders(System.Collections.Generic.IEnumerable<string> folders)
Microsoft.CodeAnalysis.DocumentInfo.WithId(Microsoft.CodeAnalysis.DocumentId id)
Microsoft.CodeAnalysis.DocumentInfo.WithName(string name)
Microsoft.CodeAnalysis.DocumentInfo.WithSourceCodeKind(Microsoft.CodeAnalysis.SourceCodeKind kind)
Microsoft.CodeAnalysis.DocumentInfo.WithTextLoader(Microsoft.CodeAnalysis.TextLoader loader)
Microsoft.CodeAnalysis.Editing.DeclarationKind
Microsoft.CodeAnalysis.Editing.DeclarationKind.AddAccessor = 26
Microsoft.CodeAnalysis.Editing.DeclarationKind.Attribute = 22
Microsoft.CodeAnalysis.Editing.DeclarationKind.Class = 2
Microsoft.CodeAnalysis.Editing.DeclarationKind.CompilationUnit = 1
Microsoft.CodeAnalysis.Editing.DeclarationKind.Constructor = 10
Microsoft.CodeAnalysis.Editing.DeclarationKind.ConversionOperator = 9
Microsoft.CodeAnalysis.Editing.DeclarationKind.CustomEvent = 17
Microsoft.CodeAnalysis.Editing.DeclarationKind.Delegate = 6
Microsoft.CodeAnalysis.Editing.DeclarationKind.Destructor = 11
Microsoft.CodeAnalysis.Editing.DeclarationKind.Enum = 5
Microsoft.CodeAnalysis.Editing.DeclarationKind.EnumMember = 15
Microsoft.CodeAnalysis.Editing.DeclarationKind.Event = 16
Microsoft.CodeAnalysis.Editing.DeclarationKind.Field = 12
Microsoft.CodeAnalysis.Editing.DeclarationKind.GetAccessor = 24
Microsoft.CodeAnalysis.Editing.DeclarationKind.Indexer = 14
Microsoft.CodeAnalysis.Editing.DeclarationKind.Interface = 4
Microsoft.CodeAnalysis.Editing.DeclarationKind.LambdaExpression = 23
Microsoft.CodeAnalysis.Editing.DeclarationKind.Method = 7
Microsoft.CodeAnalysis.Editing.DeclarationKind.Namespace = 18
Microsoft.CodeAnalysis.Editing.DeclarationKind.NamespaceImport = 19
Microsoft.CodeAnalysis.Editing.DeclarationKind.None = 0
Microsoft.CodeAnalysis.Editing.DeclarationKind.Operator = 8
Microsoft.CodeAnalysis.Editing.DeclarationKind.Parameter = 20
Microsoft.CodeAnalysis.Editing.DeclarationKind.Property = 13
Microsoft.CodeAnalysis.Editing.DeclarationKind.RaiseAccessor = 28
Microsoft.CodeAnalysis.Editing.DeclarationKind.RemoveAccessor = 27
Microsoft.CodeAnalysis.Editing.DeclarationKind.SetAccessor = 25
Microsoft.CodeAnalysis.Editing.DeclarationKind.Struct = 3
Microsoft.CodeAnalysis.Editing.DeclarationKind.Variable = 21
Microsoft.CodeAnalysis.Editing.DeclarationModifiers
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Equals(Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsAbstract.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsAsync.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsConst.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsNew.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsOverride.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsPartial.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsReadOnly.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsSealed.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsStatic.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsUnsafe.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsVirtual.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsWithEvents.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.IsWriteOnly.get
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithAsync(bool isAsync)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsAbstract(bool isAbstract)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsConst(bool isConst)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsNew(bool isNew)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsOverride(bool isOverride)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsReadOnly(bool isReadOnly)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsSealed(bool isSealed)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsStatic(bool isStatic)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsUnsafe(bool isUnsafe)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsVirtual(bool isVirtual)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithIsWriteOnly(bool isWriteOnly)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithPartial(bool isPartial)
Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithWithEvents(bool withEvents)
Microsoft.CodeAnalysis.Editing.DocumentEditor
Microsoft.CodeAnalysis.Editing.DocumentEditor.GetChangedDocument()
Microsoft.CodeAnalysis.Editing.DocumentEditor.OriginalDocument.get
Microsoft.CodeAnalysis.Editing.DocumentEditor.SemanticModel.get
Microsoft.CodeAnalysis.Editing.ImportAdder
Microsoft.CodeAnalysis.Editing.SolutionEditor
Microsoft.CodeAnalysis.Editing.SolutionEditor.GetChangedSolution()
Microsoft.CodeAnalysis.Editing.SolutionEditor.GetDocumentEditorAsync(Microsoft.CodeAnalysis.DocumentId id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SolutionEditor.OriginalSolution.get
Microsoft.CodeAnalysis.Editing.SolutionEditor.SolutionEditor(Microsoft.CodeAnalysis.Solution solution)
Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind
Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind.Constructor = 4
Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind.None = 0
Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind.ReferenceType = 1
Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind.ValueType = 2
Microsoft.CodeAnalysis.Editing.SymbolEditor
Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction
Microsoft.CodeAnalysis.Editing.SymbolEditor.ChangedSolution.get
Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction
Microsoft.CodeAnalysis.Editing.SymbolEditor.EditAllDeclarationsAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction editAction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.EditAllDeclarationsAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction editAction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction editAction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction editAction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.ISymbol member, Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction editAction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.ISymbol member, Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction editAction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Location location, Microsoft.CodeAnalysis.Editing.SymbolEditor.AsyncDeclarationEditAction editAction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.EditOneDeclarationAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Location location, Microsoft.CodeAnalysis.Editing.SymbolEditor.DeclarationEditAction editAction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.GetChangedDocuments()
Microsoft.CodeAnalysis.Editing.SymbolEditor.GetCurrentDeclarationsAsync(Microsoft.CodeAnalysis.ISymbol symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.GetCurrentSymbolAsync(Microsoft.CodeAnalysis.ISymbol symbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Editing.SymbolEditor.OriginalSolution.get
Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions
Microsoft.CodeAnalysis.Editing.SyntaxEditor
Microsoft.CodeAnalysis.Editing.SyntaxEditor.Generator.get
Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()
Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxNode newNode)
Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> newNodes)
Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxNode newNode)
Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> newNodes)
Microsoft.CodeAnalysis.Editing.SyntaxEditor.OriginalRoot.get
Microsoft.CodeAnalysis.Editing.SyntaxEditor.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode node)
Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxNode newNode)
Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode node, System.Func<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Editing.SyntaxGenerator, Microsoft.CodeAnalysis.SyntaxNode> computeReplacement)
Microsoft.CodeAnalysis.Editing.SyntaxEditor.SyntaxEditor(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.Workspace workspace)
Microsoft.CodeAnalysis.Editing.SyntaxEditor.TrackNode(Microsoft.CodeAnalysis.SyntaxNode node)
Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions
Microsoft.CodeAnalysis.Editing.SyntaxGenerator
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAccessors(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> accessors)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> attributeArguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> attributes)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] attributes)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> members)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] members)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> imports)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] imports)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddParameters(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> parameters)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> attributes)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] attributes)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.RefKind refKind, Microsoft.CodeAnalysis.SyntaxNode expression)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.SyntaxNode expression)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.AttributeData attribute)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(string name, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> attributeArguments = null)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(string name, params Microsoft.CodeAnalysis.SyntaxNode[] attributeArguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(Microsoft.CodeAnalysis.SyntaxNode expression)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.ITypeSymbol type, Microsoft.CodeAnalysis.SyntaxNode expression)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.ITypeSymbol type, string identifer, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClearTrivia<TNode>(System.Collections.Generic.IEnumerable<TNode> nodes)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(params Microsoft.CodeAnalysis.SyntaxNode[] declarations)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(Microsoft.CodeAnalysis.IMethodSymbol constructorMethod, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> baseConstructorArguments = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements = null)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.ITypeSymbol type, Microsoft.CodeAnalysis.SyntaxNode expression)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(Microsoft.CodeAnalysis.IEventSymbol symbol, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> addAccessorStatements = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> removeAccessorStatements = null)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Declaration(Microsoft.CodeAnalysis.ISymbol symbol)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DottedName(string dottedName)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode expression, params Microsoft.CodeAnalysis.SyntaxNode[] arguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(Microsoft.CodeAnalysis.IEventSymbol symbol)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FalseLiteralExpression()
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol field)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol field, Microsoft.CodeAnalysis.SyntaxNode initializer)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(string identifier, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ITypeSymbol> typeArguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(string identifier, params Microsoft.CodeAnalysis.ITypeSymbol[] typeArguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(string identifier, params Microsoft.CodeAnalysis.SyntaxNode[] typeArguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessor(Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.Editing.DeclarationKind kind)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode node)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Editing.DeclarationKind kind)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode condition, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> trueStatements, Microsoft.CodeAnalysis.SyntaxNode falseStatement)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexOf<T>(System.Collections.Generic.IReadOnlyList<T> list, T element)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(Microsoft.CodeAnalysis.IPropertySymbol indexer, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> getAccessorStatements = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> setAccessorStatements = null)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, params Microsoft.CodeAnalysis.SyntaxNode[] attributes)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, params Microsoft.CodeAnalysis.SyntaxNode[] members)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, params Microsoft.CodeAnalysis.SyntaxNode[] imports)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, params Microsoft.CodeAnalysis.SyntaxNode[] attributes)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode expression, params Microsoft.CodeAnalysis.SyntaxNode[] arguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.ITypeSymbol type)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(string identifier, Microsoft.CodeAnalysis.ITypeSymbol type)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.ITypeSymbol type, string name, Microsoft.CodeAnalysis.SyntaxNode initializer = null, bool isConst = false)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(string name, Microsoft.CodeAnalysis.SyntaxNode initializer)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode expression, string memberName)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(Microsoft.CodeAnalysis.IMethodSymbol method, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements = null)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode name, params Microsoft.CodeAnalysis.SyntaxNode[] declarations)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(string name, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> declarations)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(string name, params Microsoft.CodeAnalysis.SyntaxNode[] declarations)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(string name)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullLiteralExpression()
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol type, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> arguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol type, params Microsoft.CodeAnalysis.SyntaxNode[] arguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode type, params Microsoft.CodeAnalysis.SyntaxNode[] arguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(Microsoft.CodeAnalysis.IParameterSymbol symbol, Microsoft.CodeAnalysis.SyntaxNode initializer = null)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(Microsoft.CodeAnalysis.IPropertySymbol property, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> getAccessorStatements = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> setAccessorStatements = null)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveAllAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNodes(Microsoft.CodeAnalysis.SyntaxNode root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> declarations)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(Microsoft.CodeAnalysis.SyntaxNode caseExpression, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode expression, params Microsoft.CodeAnalysis.SyntaxNode[] sections)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TrueLiteralExpression()
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.ITypeSymbol type)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> tryStatements, params Microsoft.CodeAnalysis.SyntaxNode[] catchClauses)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryFinallyStatement(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> tryStatements, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> finallyStatements)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(string name, Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode expression)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(string parameterName, Microsoft.CodeAnalysis.SyntaxNode expression)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(string parameterName, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode expression)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(string parameterName, Microsoft.CodeAnalysis.SyntaxNode expression)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(string parameterName, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode expression, params Microsoft.CodeAnalysis.SyntaxNode[] typeArguments)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind kinds, params Microsoft.CodeAnalysis.SyntaxNode[] types)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, params Microsoft.CodeAnalysis.SyntaxNode[] types)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode declaration, params string[] typeParameters)
Microsoft.CodeAnalysis.ExtensionOrderAttribute
Microsoft.CodeAnalysis.ExtensionOrderAttribute.After.get
Microsoft.CodeAnalysis.ExtensionOrderAttribute.After.set
Microsoft.CodeAnalysis.ExtensionOrderAttribute.Before.get
Microsoft.CodeAnalysis.ExtensionOrderAttribute.Before.set
Microsoft.CodeAnalysis.ExtensionOrderAttribute.ExtensionOrderAttribute()
Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress
Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress.OnCompleted()
Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress.OnDefinitionFound(Microsoft.CodeAnalysis.ISymbol symbol)
Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress.OnFindInDocumentCompleted(Microsoft.CodeAnalysis.Document document)
Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress.OnFindInDocumentStarted(Microsoft.CodeAnalysis.Document document)
Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress.OnReferenceFound(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation location)
Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress.OnStarted()
Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress.ReportProgress(int current, int maximum)
Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Alias.get
Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.CandidateReason.get
Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.CompareTo(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation other)
Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Document.get
Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Equals(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation other)
Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.IsCandidateLocation.get
Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.IsImplicit.get
Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Location.get
Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol
Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol.Definition.get
Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol.Locations.get
Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CalledSymbol.get
Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CallingSymbol.get
Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.IsDirect.get
Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.Locations.get
Microsoft.CodeAnalysis.FindSymbols.SymbolFinder
Microsoft.CodeAnalysis.Formatting.Formatter
Microsoft.CodeAnalysis.Formatting.FormattingOptions
Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle
Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle.Block = 1
Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle.None = 0
Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle.Smart = 2
Microsoft.CodeAnalysis.Host.HostLanguageServices
Microsoft.CodeAnalysis.Host.HostLanguageServices.GetRequiredService<TLanguageService>()
Microsoft.CodeAnalysis.Host.HostServices
Microsoft.CodeAnalysis.Host.HostWorkspaceServices
Microsoft.CodeAnalysis.Host.HostWorkspaceServices.GetRequiredService<TWorkspaceService>()
Microsoft.CodeAnalysis.Host.HostWorkspaceServices.MetadataFilter
Microsoft.CodeAnalysis.Host.ICompilationFactoryService
Microsoft.CodeAnalysis.Host.ICompilationFactoryService.CreateCompilation(string assemblyName, Microsoft.CodeAnalysis.CompilationOptions options)
Microsoft.CodeAnalysis.Host.ICompilationFactoryService.CreateSubmissionCompilation(string assemblyName, Microsoft.CodeAnalysis.CompilationOptions options, System.Type hostObjectType)
Microsoft.CodeAnalysis.Host.ICompilationFactoryService.GetCompilationFromCompilationReference(Microsoft.CodeAnalysis.MetadataReference reference)
Microsoft.CodeAnalysis.Host.ICompilationFactoryService.GetDefaultCompilationOptions()
Microsoft.CodeAnalysis.Host.ICompilationFactoryService.IsCompilationReference(Microsoft.CodeAnalysis.MetadataReference reference)
Microsoft.CodeAnalysis.Host.ILanguageService
Microsoft.CodeAnalysis.Host.IPersistentStorage
Microsoft.CodeAnalysis.Host.IPersistentStorage.ReadStreamAsync(Microsoft.CodeAnalysis.Document document, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.IPersistentStorage.ReadStreamAsync(Microsoft.CodeAnalysis.Project project, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.IPersistentStorage.ReadStreamAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.IPersistentStorage.WriteStreamAsync(Microsoft.CodeAnalysis.Document document, string name, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.IPersistentStorage.WriteStreamAsync(Microsoft.CodeAnalysis.Project project, string name, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.IPersistentStorage.WriteStreamAsync(string name, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.IPersistentStorageService
Microsoft.CodeAnalysis.Host.IPersistentStorageService.GetStorage(Microsoft.CodeAnalysis.Solution solution)
Microsoft.CodeAnalysis.Host.ITemporaryStorageService
Microsoft.CodeAnalysis.Host.ITemporaryStorageService.CreateTemporaryStreamStorage(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.ITemporaryStorageService.CreateTemporaryTextStorage(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage
Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.ReadStream(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.ReadStreamAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.WriteStream(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.WriteStreamAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.ITemporaryTextStorage
Microsoft.CodeAnalysis.Host.ITemporaryTextStorage.ReadText(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.ITemporaryTextStorage.ReadTextAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.ITemporaryTextStorage.WriteText(Microsoft.CodeAnalysis.Text.SourceText text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.ITemporaryTextStorage.WriteTextAsync(Microsoft.CodeAnalysis.Text.SourceText text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Host.IWorkspaceService
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute.ExportLanguageServiceAttribute(System.Type type, string language, string layer = "Default")
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute.Language.get
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute.Layer.get
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceAttribute.ServiceType.get
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute.ExportLanguageServiceFactoryAttribute(System.Type type, string language, string layer = "Default")
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute.Language.get
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute.Layer.get
Microsoft.CodeAnalysis.Host.Mef.ExportLanguageServiceFactoryAttribute.ServiceType.get
Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceAttribute
Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceAttribute.ExportWorkspaceServiceAttribute(System.Type serviceType, string layer = "Default")
Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceAttribute.Layer.get
Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceAttribute.ServiceType.get
Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceFactoryAttribute
Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceFactoryAttribute.ExportWorkspaceServiceFactoryAttribute(System.Type serviceType, string layer = "Default")
Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceFactoryAttribute.Layer.get
Microsoft.CodeAnalysis.Host.Mef.ExportWorkspaceServiceFactoryAttribute.ServiceType.get
Microsoft.CodeAnalysis.Host.Mef.ILanguageServiceFactory
Microsoft.CodeAnalysis.Host.Mef.ILanguageServiceFactory.CreateLanguageService(Microsoft.CodeAnalysis.Host.HostLanguageServices languageServices)
Microsoft.CodeAnalysis.Host.Mef.IWorkspaceServiceFactory
Microsoft.CodeAnalysis.Host.Mef.IWorkspaceServiceFactory.CreateService(Microsoft.CodeAnalysis.Host.HostWorkspaceServices workspaceServices)
Microsoft.CodeAnalysis.Host.Mef.MefHostServices
Microsoft.CodeAnalysis.Host.Mef.MefHostServices.MefHostServices(System.Composition.CompositionContext compositionContext)
Microsoft.CodeAnalysis.Host.Mef.ServiceLayer
Microsoft.CodeAnalysis.Options.IOption
Microsoft.CodeAnalysis.Options.IOption.DefaultValue.get
Microsoft.CodeAnalysis.Options.IOption.Feature.get
Microsoft.CodeAnalysis.Options.IOption.IsPerLanguage.get
Microsoft.CodeAnalysis.Options.IOption.Name.get
Microsoft.CodeAnalysis.Options.IOption.Type.get
Microsoft.CodeAnalysis.Options.Option<T>
Microsoft.CodeAnalysis.Options.Option<T>.DefaultValue.get
Microsoft.CodeAnalysis.Options.Option<T>.Feature.get
Microsoft.CodeAnalysis.Options.Option<T>.Name.get
Microsoft.CodeAnalysis.Options.Option<T>.Option(string feature, string name, T defaultValue = default(T))
Microsoft.CodeAnalysis.Options.Option<T>.Type.get
Microsoft.CodeAnalysis.Options.OptionKey
Microsoft.CodeAnalysis.Options.OptionKey.Equals(Microsoft.CodeAnalysis.Options.OptionKey other)
Microsoft.CodeAnalysis.Options.OptionKey.OptionKey(Microsoft.CodeAnalysis.Options.IOption option, string language = null)
Microsoft.CodeAnalysis.Options.OptionSet
Microsoft.CodeAnalysis.Options.OptionSet.GetOption(Microsoft.CodeAnalysis.Options.OptionKey optionKey)
Microsoft.CodeAnalysis.Options.OptionSet.GetOption<T>(Microsoft.CodeAnalysis.Options.Option<T> option)
Microsoft.CodeAnalysis.Options.OptionSet.GetOption<T>(Microsoft.CodeAnalysis.Options.PerLanguageOption<T> option, string language)
Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption(Microsoft.CodeAnalysis.Options.OptionKey optionAndLanguage, object value)
Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption<T>(Microsoft.CodeAnalysis.Options.Option<T> option, T value)
Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption<T>(Microsoft.CodeAnalysis.Options.PerLanguageOption<T> option, string language, T value)
Microsoft.CodeAnalysis.Options.PerLanguageOption<T>
Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.DefaultValue.get
Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.Feature.get
Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.Name.get
Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.PerLanguageOption(string feature, string name, T defaultValue)
Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.Type.get
Microsoft.CodeAnalysis.PreservationMode
Microsoft.CodeAnalysis.PreservationMode.PreserveIdentity = 1
Microsoft.CodeAnalysis.PreservationMode.PreserveValue = 0
Microsoft.CodeAnalysis.Project
Microsoft.CodeAnalysis.Project.AddAdditionalDocument(string name, Microsoft.CodeAnalysis.Text.SourceText text, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null)
Microsoft.CodeAnalysis.Project.AddAdditionalDocument(string name, string text, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null)
Microsoft.CodeAnalysis.Project.AddAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
Microsoft.CodeAnalysis.Project.AddAnalyzerReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> analyzerReferences)
Microsoft.CodeAnalysis.Project.AddDocument(string name, Microsoft.CodeAnalysis.SyntaxNode syntaxRoot, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null)
Microsoft.CodeAnalysis.Project.AddDocument(string name, Microsoft.CodeAnalysis.Text.SourceText text, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null)
Microsoft.CodeAnalysis.Project.AddDocument(string name, string text, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null)
Microsoft.CodeAnalysis.Project.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference metadataReference)
Microsoft.CodeAnalysis.Project.AddMetadataReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences)
Microsoft.CodeAnalysis.Project.AddProjectReference(Microsoft.CodeAnalysis.ProjectReference projectReference)
Microsoft.CodeAnalysis.Project.AddProjectReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ProjectReference> projectReferences)
Microsoft.CodeAnalysis.Project.AdditionalDocumentIds.get
Microsoft.CodeAnalysis.Project.AdditionalDocuments.get
Microsoft.CodeAnalysis.Project.AllProjectReferences.get
Microsoft.CodeAnalysis.Project.AnalyzerOptions.get
Microsoft.CodeAnalysis.Project.AnalyzerReferences.get
Microsoft.CodeAnalysis.Project.AssemblyName.get
Microsoft.CodeAnalysis.Project.CompilationOptions.get
Microsoft.CodeAnalysis.Project.ContainsAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Project.ContainsDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Project.DocumentIds.get
Microsoft.CodeAnalysis.Project.Documents.get
Microsoft.CodeAnalysis.Project.FilePath.get
Microsoft.CodeAnalysis.Project.GetAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Project.GetChanges(Microsoft.CodeAnalysis.Project oldProject)
Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Project.GetDependentSemanticVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Project.GetDependentVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Project.GetDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Project.GetDocument(Microsoft.CodeAnalysis.SyntaxTree syntaxTree)
Microsoft.CodeAnalysis.Project.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree syntaxTree)
Microsoft.CodeAnalysis.Project.GetLatestDocumentVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Project.GetSemanticVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Project.HasDocuments.get
Microsoft.CodeAnalysis.Project.Id.get
Microsoft.CodeAnalysis.Project.IsSubmission.get
Microsoft.CodeAnalysis.Project.Language.get
Microsoft.CodeAnalysis.Project.LanguageServices.get
Microsoft.CodeAnalysis.Project.MetadataReferences.get
Microsoft.CodeAnalysis.Project.Name.get
Microsoft.CodeAnalysis.Project.OutputFilePath.get
Microsoft.CodeAnalysis.Project.ParseOptions.get
Microsoft.CodeAnalysis.Project.ProjectReferences.get
Microsoft.CodeAnalysis.Project.RemoveAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Project.RemoveAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
Microsoft.CodeAnalysis.Project.RemoveDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Project.RemoveMetadataReference(Microsoft.CodeAnalysis.MetadataReference metadataReference)
Microsoft.CodeAnalysis.Project.RemoveProjectReference(Microsoft.CodeAnalysis.ProjectReference projectReference)
Microsoft.CodeAnalysis.Project.Solution.get
Microsoft.CodeAnalysis.Project.SupportsCompilation.get
Microsoft.CodeAnalysis.Project.TryGetCompilation(out Microsoft.CodeAnalysis.Compilation compilation)
Microsoft.CodeAnalysis.Project.Version.get
Microsoft.CodeAnalysis.Project.WithAnalyzerReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> analyzerReferencs)
Microsoft.CodeAnalysis.Project.WithAssemblyName(string assemblyName)
Microsoft.CodeAnalysis.Project.WithCompilationOptions(Microsoft.CodeAnalysis.CompilationOptions options)
Microsoft.CodeAnalysis.Project.WithMetadataReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences)
Microsoft.CodeAnalysis.Project.WithParseOptions(Microsoft.CodeAnalysis.ParseOptions options)
Microsoft.CodeAnalysis.Project.WithProjectReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ProjectReference> projectReferences)
Microsoft.CodeAnalysis.ProjectChanges
Microsoft.CodeAnalysis.ProjectChanges.GetAddedAdditionalDocuments()
Microsoft.CodeAnalysis.ProjectChanges.GetAddedAnalyzerReferences()
Microsoft.CodeAnalysis.ProjectChanges.GetAddedDocuments()
Microsoft.CodeAnalysis.ProjectChanges.GetAddedMetadataReferences()
Microsoft.CodeAnalysis.ProjectChanges.GetAddedProjectReferences()
Microsoft.CodeAnalysis.ProjectChanges.GetChangedAdditionalDocuments()
Microsoft.CodeAnalysis.ProjectChanges.GetChangedDocuments()
Microsoft.CodeAnalysis.ProjectChanges.GetRemovedAdditionalDocuments()
Microsoft.CodeAnalysis.ProjectChanges.GetRemovedAnalyzerReferences()
Microsoft.CodeAnalysis.ProjectChanges.GetRemovedDocuments()
Microsoft.CodeAnalysis.ProjectChanges.GetRemovedMetadataReferences()
Microsoft.CodeAnalysis.ProjectChanges.GetRemovedProjectReferences()
Microsoft.CodeAnalysis.ProjectChanges.NewProject.get
Microsoft.CodeAnalysis.ProjectChanges.OldProject.get
Microsoft.CodeAnalysis.ProjectChanges.ProjectId.get
Microsoft.CodeAnalysis.ProjectDependencyGraph
Microsoft.CodeAnalysis.ProjectDependencyGraph.GetDependencySets(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.ProjectDependencyGraph.GetProjectsThatDirectlyDependOnThisProject(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.ProjectDependencyGraph.GetProjectsThatThisProjectDirectlyDependsOn(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.ProjectDependencyGraph.GetProjectsThatThisProjectTransitivelyDependsOn(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.ProjectDependencyGraph.GetProjectsThatTransitivelyDependOnThisProject(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.ProjectDependencyGraph.GetTopologicallySortedProjects(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.ProjectDiagnostic
Microsoft.CodeAnalysis.ProjectDiagnostic.ProjectDiagnostic(Microsoft.CodeAnalysis.WorkspaceDiagnosticKind kind, string message, Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.ProjectDiagnostic.ProjectId.get
Microsoft.CodeAnalysis.ProjectId
Microsoft.CodeAnalysis.ProjectId.Equals(Microsoft.CodeAnalysis.ProjectId other)
Microsoft.CodeAnalysis.ProjectId.Id.get
Microsoft.CodeAnalysis.ProjectInfo
Microsoft.CodeAnalysis.ProjectInfo.AdditionalDocuments.get
Microsoft.CodeAnalysis.ProjectInfo.AnalyzerReferences.get
Microsoft.CodeAnalysis.ProjectInfo.AssemblyName.get
Microsoft.CodeAnalysis.ProjectInfo.CompilationOptions.get
Microsoft.CodeAnalysis.ProjectInfo.Documents.get
Microsoft.CodeAnalysis.ProjectInfo.FilePath.get
Microsoft.CodeAnalysis.ProjectInfo.HostObjectType.get
Microsoft.CodeAnalysis.ProjectInfo.Id.get
Microsoft.CodeAnalysis.ProjectInfo.IsSubmission.get
Microsoft.CodeAnalysis.ProjectInfo.Language.get
Microsoft.CodeAnalysis.ProjectInfo.MetadataReferences.get
Microsoft.CodeAnalysis.ProjectInfo.Name.get
Microsoft.CodeAnalysis.ProjectInfo.OutputFilePath.get
Microsoft.CodeAnalysis.ProjectInfo.ParseOptions.get
Microsoft.CodeAnalysis.ProjectInfo.ProjectReferences.get
Microsoft.CodeAnalysis.ProjectInfo.Version.get
Microsoft.CodeAnalysis.ProjectInfo.WithAdditionalDocuments(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentInfo> additionalDocuments)
Microsoft.CodeAnalysis.ProjectInfo.WithAnalyzerReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> analyzerReferences)
Microsoft.CodeAnalysis.ProjectInfo.WithAssemblyName(string assemblyName)
Microsoft.CodeAnalysis.ProjectInfo.WithCompilationOptions(Microsoft.CodeAnalysis.CompilationOptions compilationOptions)
Microsoft.CodeAnalysis.ProjectInfo.WithDocuments(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentInfo> documents)
Microsoft.CodeAnalysis.ProjectInfo.WithFilePath(string filePath)
Microsoft.CodeAnalysis.ProjectInfo.WithMetadataReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences)
Microsoft.CodeAnalysis.ProjectInfo.WithName(string name)
Microsoft.CodeAnalysis.ProjectInfo.WithOutputFilePath(string outputFilePath)
Microsoft.CodeAnalysis.ProjectInfo.WithParseOptions(Microsoft.CodeAnalysis.ParseOptions parseOptions)
Microsoft.CodeAnalysis.ProjectInfo.WithProjectReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ProjectReference> projectReferences)
Microsoft.CodeAnalysis.ProjectInfo.WithVersion(Microsoft.CodeAnalysis.VersionStamp version)
Microsoft.CodeAnalysis.ProjectReference
Microsoft.CodeAnalysis.ProjectReference.Aliases.get
Microsoft.CodeAnalysis.ProjectReference.EmbedInteropTypes.get
Microsoft.CodeAnalysis.ProjectReference.Equals(Microsoft.CodeAnalysis.ProjectReference reference)
Microsoft.CodeAnalysis.ProjectReference.ProjectId.get
Microsoft.CodeAnalysis.ProjectReference.ProjectReference(Microsoft.CodeAnalysis.ProjectId projectId, System.Collections.Immutable.ImmutableArray<string> aliases = default(System.Collections.Immutable.ImmutableArray<string>), bool embedInteropTypes = false)
Microsoft.CodeAnalysis.Recommendations.RecommendationOptions
Microsoft.CodeAnalysis.Recommendations.Recommender
Microsoft.CodeAnalysis.Rename.RenameEntityKind
Microsoft.CodeAnalysis.Rename.RenameEntityKind.BaseSymbol = 0
Microsoft.CodeAnalysis.Rename.RenameEntityKind.OverloadedSymbols = 1
Microsoft.CodeAnalysis.Rename.RenameOptions
Microsoft.CodeAnalysis.Rename.Renamer
Microsoft.CodeAnalysis.Simplification.SimplificationOptions
Microsoft.CodeAnalysis.Simplification.Simplifier
Microsoft.CodeAnalysis.Solution
Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId, string name, Microsoft.CodeAnalysis.Text.SourceText text, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null)
Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId, string name, string text, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null)
Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentInfo documentInfo)
Microsoft.CodeAnalysis.Solution.AddAnalyzerReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
Microsoft.CodeAnalysis.Solution.AddAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId projectId, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> analyzerReferences)
Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId documentId, string name, Microsoft.CodeAnalysis.SyntaxNode syntaxRoot, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null, bool isGenerated = false, Microsoft.CodeAnalysis.PreservationMode preservationMode = Microsoft.CodeAnalysis.PreservationMode.PreserveValue)
Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId documentId, string name, Microsoft.CodeAnalysis.Text.SourceText text, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null, bool isGenerated = false)
Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId documentId, string name, Microsoft.CodeAnalysis.TextLoader loader, System.Collections.Generic.IEnumerable<string> folders = null)
Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId documentId, string name, string text, System.Collections.Generic.IEnumerable<string> folders = null, string filePath = null)
Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentInfo documentInfo)
Microsoft.CodeAnalysis.Solution.AddMetadataReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.MetadataReference metadataReference)
Microsoft.CodeAnalysis.Solution.AddMetadataReferences(Microsoft.CodeAnalysis.ProjectId projectId, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences)
Microsoft.CodeAnalysis.Solution.AddProject(Microsoft.CodeAnalysis.ProjectId projectId, string name, string assemblyName, string language)
Microsoft.CodeAnalysis.Solution.AddProject(Microsoft.CodeAnalysis.ProjectInfo projectInfo)
Microsoft.CodeAnalysis.Solution.AddProject(string name, string assemblyName, string language)
Microsoft.CodeAnalysis.Solution.AddProjectReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ProjectReference projectReference)
Microsoft.CodeAnalysis.Solution.AddProjectReferences(Microsoft.CodeAnalysis.ProjectId projectId, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ProjectReference> projectReferences)
Microsoft.CodeAnalysis.Solution.ContainsAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Solution.ContainsDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Solution.ContainsProject(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.Solution.FilePath.get
Microsoft.CodeAnalysis.Solution.GetAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Solution.GetChanges(Microsoft.CodeAnalysis.Solution oldSolution)
Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.SyntaxTree syntaxTree)
Microsoft.CodeAnalysis.Solution.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree syntaxTree)
Microsoft.CodeAnalysis.Solution.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.Solution.GetDocumentIdsWithFilePath(string filePath)
Microsoft.CodeAnalysis.Solution.GetIsolatedSolution()
Microsoft.CodeAnalysis.Solution.GetLatestProjectVersion()
Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.IAssemblySymbol assemblySymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.Solution.GetProjectDependencyGraph()
Microsoft.CodeAnalysis.Solution.Id.get
Microsoft.CodeAnalysis.Solution.ProjectIds.get
Microsoft.CodeAnalysis.Solution.Projects.get
Microsoft.CodeAnalysis.Solution.RemoveAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Solution.RemoveAnalyzerReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
Microsoft.CodeAnalysis.Solution.RemoveDocument(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Solution.RemoveMetadataReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.MetadataReference metadataReference)
Microsoft.CodeAnalysis.Solution.RemoveProject(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.Solution.RemoveProjectReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ProjectReference projectReference)
Microsoft.CodeAnalysis.Solution.Version.get
Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.PreservationMode mode = Microsoft.CodeAnalysis.PreservationMode.PreserveValue)
Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.TextAndVersion textAndVersion, Microsoft.CodeAnalysis.PreservationMode mode = Microsoft.CodeAnalysis.PreservationMode.PreserveValue)
Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.TextLoader loader, Microsoft.CodeAnalysis.PreservationMode mode)
Microsoft.CodeAnalysis.Solution.WithDocumentFolders(Microsoft.CodeAnalysis.DocumentId documentId, System.Collections.Generic.IEnumerable<string> folders)
Microsoft.CodeAnalysis.Solution.WithDocumentSourceCodeKind(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.SourceCodeKind sourceCodeKind)
Microsoft.CodeAnalysis.Solution.WithDocumentSyntaxRoot(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.PreservationMode mode = Microsoft.CodeAnalysis.PreservationMode.PreserveValue)
Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.PreservationMode mode = Microsoft.CodeAnalysis.PreservationMode.PreserveValue)
Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.TextAndVersion textAndVersion, Microsoft.CodeAnalysis.PreservationMode mode = Microsoft.CodeAnalysis.PreservationMode.PreserveValue)
Microsoft.CodeAnalysis.Solution.WithDocumentText(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentId> documentIds, Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.PreservationMode mode = Microsoft.CodeAnalysis.PreservationMode.PreserveValue)
Microsoft.CodeAnalysis.Solution.WithDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.TextLoader loader, Microsoft.CodeAnalysis.PreservationMode mode)
Microsoft.CodeAnalysis.Solution.WithProjectAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId projectId, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> analyzerReferences)
Microsoft.CodeAnalysis.Solution.WithProjectAssemblyName(Microsoft.CodeAnalysis.ProjectId projectId, string assemblyName)
Microsoft.CodeAnalysis.Solution.WithProjectCompilationOptions(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.CompilationOptions options)
Microsoft.CodeAnalysis.Solution.WithProjectFilePath(Microsoft.CodeAnalysis.ProjectId projectId, string filePath)
Microsoft.CodeAnalysis.Solution.WithProjectMetadataReferences(Microsoft.CodeAnalysis.ProjectId projectId, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences)
Microsoft.CodeAnalysis.Solution.WithProjectName(Microsoft.CodeAnalysis.ProjectId projectId, string name)
Microsoft.CodeAnalysis.Solution.WithProjectOutputFilePath(Microsoft.CodeAnalysis.ProjectId projectId, string outputFilePath)
Microsoft.CodeAnalysis.Solution.WithProjectParseOptions(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ParseOptions options)
Microsoft.CodeAnalysis.Solution.WithProjectReferences(Microsoft.CodeAnalysis.ProjectId projectId, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ProjectReference> projectReferences)
Microsoft.CodeAnalysis.Solution.Workspace.get
Microsoft.CodeAnalysis.SolutionChanges
Microsoft.CodeAnalysis.SolutionChanges.GetAddedProjects()
Microsoft.CodeAnalysis.SolutionChanges.GetProjectChanges()
Microsoft.CodeAnalysis.SolutionChanges.GetRemovedProjects()
Microsoft.CodeAnalysis.SolutionId
Microsoft.CodeAnalysis.SolutionId.Equals(Microsoft.CodeAnalysis.SolutionId other)
Microsoft.CodeAnalysis.SolutionId.Id.get
Microsoft.CodeAnalysis.SolutionInfo
Microsoft.CodeAnalysis.SolutionInfo.FilePath.get
Microsoft.CodeAnalysis.SolutionInfo.Id.get
Microsoft.CodeAnalysis.SolutionInfo.Projects.get
Microsoft.CodeAnalysis.SolutionInfo.Version.get
Microsoft.CodeAnalysis.TextAndVersion
Microsoft.CodeAnalysis.TextAndVersion.FilePath.get
Microsoft.CodeAnalysis.TextAndVersion.Text.get
Microsoft.CodeAnalysis.TextAndVersion.Version.get
Microsoft.CodeAnalysis.TextDocument
Microsoft.CodeAnalysis.TextDocument.FilePath.get
Microsoft.CodeAnalysis.TextDocument.Folders.get
Microsoft.CodeAnalysis.TextDocument.GetTextAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.TextDocument.GetTextVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
Microsoft.CodeAnalysis.TextDocument.Id.get
Microsoft.CodeAnalysis.TextDocument.Name.get
Microsoft.CodeAnalysis.TextDocument.Project.get
Microsoft.CodeAnalysis.TextDocument.Project.set
Microsoft.CodeAnalysis.TextDocument.TextDocument()
Microsoft.CodeAnalysis.TextDocument.TryGetText(out Microsoft.CodeAnalysis.Text.SourceText text)
Microsoft.CodeAnalysis.TextDocument.TryGetTextVersion(out Microsoft.CodeAnalysis.VersionStamp version)
Microsoft.CodeAnalysis.TextLoader
Microsoft.CodeAnalysis.VersionStamp
Microsoft.CodeAnalysis.VersionStamp.Equals(Microsoft.CodeAnalysis.VersionStamp version)
Microsoft.CodeAnalysis.VersionStamp.GetNewerVersion()
Microsoft.CodeAnalysis.VersionStamp.GetNewerVersion(Microsoft.CodeAnalysis.VersionStamp version)
Microsoft.CodeAnalysis.Workspace
Microsoft.CodeAnalysis.Workspace.CheckAdditionalDocumentIsInCurrentSolution(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Workspace.CheckAdditionalDocumentIsNotInCurrentSolution(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Workspace.CheckCanOpenDocuments()
Microsoft.CodeAnalysis.Workspace.CheckDocumentIsClosed(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Workspace.CheckDocumentIsInCurrentSolution(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Workspace.CheckDocumentIsNotInCurrentSolution(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Workspace.CheckDocumentIsOpen(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Workspace.CheckProjectDoesNotContainOpenDocuments(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.Workspace.CheckProjectDoesNotHaveAnalyzerReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
Microsoft.CodeAnalysis.Workspace.CheckProjectDoesNotHaveMetadataReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.MetadataReference metadataReference)
Microsoft.CodeAnalysis.Workspace.CheckProjectDoesNotHaveProjectReference(Microsoft.CodeAnalysis.ProjectId fromProjectId, Microsoft.CodeAnalysis.ProjectReference projectReference)
Microsoft.CodeAnalysis.Workspace.CheckProjectDoesNotHaveTransitiveProjectReference(Microsoft.CodeAnalysis.ProjectId fromProjectId, Microsoft.CodeAnalysis.ProjectId toProjectId)
Microsoft.CodeAnalysis.Workspace.CheckProjectHasAnalyzerReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
Microsoft.CodeAnalysis.Workspace.CheckProjectHasMetadataReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.MetadataReference metadataReference)
Microsoft.CodeAnalysis.Workspace.CheckProjectHasProjectReference(Microsoft.CodeAnalysis.ProjectId fromProjectId, Microsoft.CodeAnalysis.ProjectReference projectReference)
Microsoft.CodeAnalysis.Workspace.CheckProjectIsInCurrentSolution(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.Workspace.CheckProjectIsNotInCurrentSolution(Microsoft.CodeAnalysis.ProjectId projectId)
Microsoft.CodeAnalysis.Workspace.CheckSolutionIsEmpty()
Microsoft.CodeAnalysis.Workspace.ClearOpenDocument(Microsoft.CodeAnalysis.DocumentId documentId, bool isSolutionClosing = false)
Microsoft.CodeAnalysis.Workspace.ClearSolution()
Microsoft.CodeAnalysis.Workspace.CreateSolution(Microsoft.CodeAnalysis.SolutionId id)
Microsoft.CodeAnalysis.Workspace.CreateSolution(Microsoft.CodeAnalysis.SolutionInfo solutionInfo)
Microsoft.CodeAnalysis.Workspace.CurrentSolution.get
Microsoft.CodeAnalysis.Workspace.Dispose()
Microsoft.CodeAnalysis.Workspace.DocumentClosed
Microsoft.CodeAnalysis.Workspace.DocumentOpened
Microsoft.CodeAnalysis.Workspace.Kind.get
Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo documentInfo)
Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentClosed(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.TextLoader reloader)
Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentOpened(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceTextContainer textContainer, bool isCurrentContext = true)
Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentRemoved(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceText newText, Microsoft.CodeAnalysis.PreservationMode mode)
Microsoft.CodeAnalysis.Workspace.OnAdditionalDocumentTextLoaderChanged(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.TextLoader loader)
Microsoft.CodeAnalysis.Workspace.OnAnalyzerReferenceAdded(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
Microsoft.CodeAnalysis.Workspace.OnAnalyzerReferenceRemoved(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
Microsoft.CodeAnalysis.Workspace.OnAssemblyNameChanged(Microsoft.CodeAnalysis.ProjectId projectId, string assemblyName)
Microsoft.CodeAnalysis.Workspace.OnCompilationOptionsChanged(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.CompilationOptions options)
Microsoft.CodeAnalysis.Workspace.OnDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo documentInfo)
Microsoft.CodeAnalysis.Workspace.OnDocumentClosed(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.TextLoader reloader, bool updateActiveContext = false)
Microsoft.CodeAnalysis.Workspace.OnDocumentContextUpdated(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Workspace.OnDocumentOpened(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceTextContainer textContainer, bool isCurrentContext = true)
Microsoft.CodeAnalysis.Workspace.OnDocumentReloaded(Microsoft.CodeAnalysis.DocumentInfo newDocumentInfo)
Microsoft.CodeAnalysis.Workspace.OnDocumentRemoved(Microsoft.CodeAnalysis.DocumentId documentId)
Microsoft.CodeAnalysis.Workspace.OnDocumentSourceCodeKindChanged(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.SourceCodeKind sourceCodeKind)
Microsoft.CodeAnalysis.Workspace.OnDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceText newText, Microsoft.CodeAnalysis.PreservationMode mode)
Microsoft.CodeAnalysis.Workspace.OnDocumentTextLoaderChanged(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.TextLoader loader)
Microsoft.CodeAnalysis.Workspace.OnMetadataReferenceAdded(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.MetadataReference metadataReference)
Microsoft.CodeAnalysis.Workspace.OnMetadataReferenceRemoved(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.MetadataReference metadataReference)
Microsoft.CodeAnalysis.Workspace.OnOutputFilePathChanged(Microsoft.CodeAnalysis.ProjectId projectId, string outputFilePath)
Microsoft.CodeAnalysis.Workspace.OnParseOptionsChanged(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ParseOptions options)
Microsoft.CodeAnalysis.Workspace.OnProjectAdded(Microsoft.CodeAnalysis.ProjectInfo projectInfo)
Microsoft.CodeAnalysis.Workspace.OnProjectNameChanged(Microsoft.CodeAnalysis.ProjectId projectId, string name, string filePath)
Microsoft.CodeAnalysis.Workspace.OnProjectReferenceAdded(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ProjectReference projectReference)
Microsoft.CodeAnalysis.Workspace.OnProjectReferenceRemoved(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ProjectReference projectReference)
Microsoft.CodeAnalysis.Workspace.OnSolutionAdded(Microsoft.CodeAnalysis.SolutionInfo solutionInfo)
Microsoft.CodeAnalysis.Workspace.OnSolutionReloaded(Microsoft.CodeAnalysis.SolutionInfo reloadedSolutionInfo)
Microsoft.CodeAnalysis.Workspace.OnSolutionRemoved()
Microsoft.CodeAnalysis.Workspace.Options.get
Microsoft.CodeAnalysis.Workspace.Options.set
Microsoft.CodeAnalysis.Workspace.RaiseDocumentActiveContextChangedEventAsync(Microsoft.CodeAnalysis.Document document)
Microsoft.CodeAnalysis.Workspace.RaiseDocumentClosedEventAsync(Microsoft.CodeAnalysis.Document document)
Microsoft.CodeAnalysis.Workspace.RaiseDocumentOpenedEventAsync(Microsoft.CodeAnalysis.Document document)
Microsoft.CodeAnalysis.Workspace.RaiseWorkspaceChangedEventAsync(Microsoft.CodeAnalysis.WorkspaceChangeKind kind, Microsoft.CodeAnalysis.Solution oldSolution, Microsoft.CodeAnalysis.Solution newSolution, Microsoft.CodeAnalysis.ProjectId projectId = null, Microsoft.CodeAnalysis.DocumentId documentId = null)
Microsoft.CodeAnalysis.Workspace.RegisterText(Microsoft.CodeAnalysis.Text.SourceTextContainer textContainer)
Microsoft.CodeAnalysis.Workspace.ScheduleTask(System.Action action, string taskName = "Workspace.Task")
Microsoft.CodeAnalysis.Workspace.ScheduleTask<T>(System.Func<T> func, string taskName = "Workspace.Task")
Microsoft.CodeAnalysis.Workspace.Services.get
Microsoft.CodeAnalysis.Workspace.SetCurrentSolution(Microsoft.CodeAnalysis.Solution solution)
Microsoft.CodeAnalysis.Workspace.UnregisterText(Microsoft.CodeAnalysis.Text.SourceTextContainer textContainer)
Microsoft.CodeAnalysis.Workspace.Workspace(Microsoft.CodeAnalysis.Host.HostServices host, string workspaceKind)
Microsoft.CodeAnalysis.Workspace.WorkspaceChanged
Microsoft.CodeAnalysis.Workspace.WorkspaceFailed
Microsoft.CodeAnalysis.WorkspaceChangeEventArgs
Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.DocumentId.get
Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.Kind.get
Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.NewSolution.get
Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.OldSolution.get
Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.ProjectId.get
Microsoft.CodeAnalysis.WorkspaceChangeEventArgs.WorkspaceChangeEventArgs(Microsoft.CodeAnalysis.WorkspaceChangeKind kind, Microsoft.CodeAnalysis.Solution oldSolution, Microsoft.CodeAnalysis.Solution newSolution, Microsoft.CodeAnalysis.ProjectId projectId = null, Microsoft.CodeAnalysis.DocumentId documentId = null)
Microsoft.CodeAnalysis.WorkspaceChangeKind
Microsoft.CodeAnalysis.WorkspaceChangeKind.AdditionalDocumentAdded = 13
Microsoft.CodeAnalysis.WorkspaceChangeKind.AdditionalDocumentChanged = 16
Microsoft.CodeAnalysis.WorkspaceChangeKind.AdditionalDocumentReloaded = 15
Microsoft.CodeAnalysis.WorkspaceChangeKind.AdditionalDocumentRemoved = 14
Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentAdded = 9
Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentChanged = 12
Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentReloaded = 11
Microsoft.CodeAnalysis.WorkspaceChangeKind.DocumentRemoved = 10
Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectAdded = 5
Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectChanged = 7
Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectReloaded = 8
Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectRemoved = 6
Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionAdded = 1
Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionChanged = 0
Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionCleared = 3
Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionReloaded = 4
Microsoft.CodeAnalysis.WorkspaceChangeKind.SolutionRemoved = 2
Microsoft.CodeAnalysis.WorkspaceDiagnostic
Microsoft.CodeAnalysis.WorkspaceDiagnostic.Kind.get
Microsoft.CodeAnalysis.WorkspaceDiagnostic.Message.get
Microsoft.CodeAnalysis.WorkspaceDiagnostic.WorkspaceDiagnostic(Microsoft.CodeAnalysis.WorkspaceDiagnosticKind kind, string message)
Microsoft.CodeAnalysis.WorkspaceDiagnosticEventArgs
Microsoft.CodeAnalysis.WorkspaceDiagnosticEventArgs.Diagnostic.get
Microsoft.CodeAnalysis.WorkspaceDiagnosticEventArgs.WorkspaceDiagnosticEventArgs(Microsoft.CodeAnalysis.WorkspaceDiagnostic diagnostic)
Microsoft.CodeAnalysis.WorkspaceDiagnosticKind
Microsoft.CodeAnalysis.WorkspaceDiagnosticKind.Failure = 0
Microsoft.CodeAnalysis.WorkspaceDiagnosticKind.Warning = 1
Microsoft.CodeAnalysis.WorkspaceKind
Microsoft.CodeAnalysis.WorkspaceRegistration
Microsoft.CodeAnalysis.WorkspaceRegistration.Workspace.get
Microsoft.CodeAnalysis.WorkspaceRegistration.WorkspaceChanged
abstract Microsoft.CodeAnalysis.CodeActions.CodeAction.Title.get
abstract Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.ComputeOperationsAsync(object options, System.Threading.CancellationToken cancellationToken)
abstract Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOptions(System.Threading.CancellationToken cancellationToken)
abstract Microsoft.CodeAnalysis.CodeActions.PreviewOperation.GetPreview()
abstract Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds.get
abstract Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext context)
abstract Microsoft.CodeAnalysis.CodeFixes.FixAllProvider.GetFixAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext fixAllContext)
abstract Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.ComputeRefactoringsAsync(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext context)
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.GetChildren(TNode node)
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.GetDescendants(TNode node)
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.GetDistance(TNode oldNode, TNode newNode)
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.GetLabel(TNode node)
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.GetSpan(TNode node)
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.LabelCount.get
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.TiedToAncestor(int label)
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.TreesEqual(TNode oldNode, TNode newNode)
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.TryGetParent(TNode node, out TNode parent)
abstract Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.ValuesEqual(TNode oldNode, TNode newNode)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddBaseType(Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode baseType)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddInterfaceType(Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode interfaceType)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(string name, Microsoft.CodeAnalysis.RefKind refKind, Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayTypeExpression(Microsoft.CodeAnalysis.SyntaxNode type)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPrivateInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode interfaceType)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPublicInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode interfaceType)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AssignmentStatement(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.SyntaxNode name, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> attributeArguments = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(string name, Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BaseExpression()
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseAndExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseNotExpression(Microsoft.CodeAnalysis.SyntaxNode operand)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseOrExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.SyntaxNode type, string identifier, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClassDeclaration(string name, System.Collections.Generic.IEnumerable<string> typeParameters = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers), Microsoft.CodeAnalysis.SyntaxNode baseType = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> interfaceTypes = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> members = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClearTrivia<TNode>(TNode node)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CoalesceExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> declarations)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConditionalExpression(Microsoft.CodeAnalysis.SyntaxNode condition, Microsoft.CodeAnalysis.SyntaxNode whenTrue, Microsoft.CodeAnalysis.SyntaxNode whenFalse)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(string containingTypeName = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> parameters = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers), System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> baseConstructorArguments = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(string name, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers), System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> parameters = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> addAccessorStatements = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> removeAccessorStatements = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.ITypeSymbol type)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.SyntaxNode type)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultSwitchSection(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DelegateDeclaration(string name, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> parameters = null, System.Collections.Generic.IEnumerable<string> typeParameters = null, Microsoft.CodeAnalysis.SyntaxNode returnType = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers))
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DivideExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> arguments)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumDeclaration(string name, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers), System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> members = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumMember(string name, Microsoft.CodeAnalysis.SyntaxNode expression = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(string name, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers))
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExitSwitchStatement()
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExpressionStatement(Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(string name, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers), Microsoft.CodeAnalysis.SyntaxNode initializer = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(string identifier, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> typeArguments)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessibility(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessors(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetBaseAndInterfaceTypes(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclarationKind(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetExpression(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetMembers(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetModifiers(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetName(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetParameters(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetStatements(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetType(Microsoft.CodeAnalysis.SyntaxNode declaration)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IdentifierName(string identifier)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode condition, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> trueStatements, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> falseStatements = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> parameters, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers), System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> getAccessorStatements = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> setAccessorStatements = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAccessors(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> accessors)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> attributeArguments)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> attributes)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> members)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> imports)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertParameters(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> parameters)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> attributes)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InterfaceDeclaration(string name, System.Collections.Generic.IEnumerable<string> typeParameters = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> interfaceTypes = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> members = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> arguments)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SyntaxNode type)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(string identifier, Microsoft.CodeAnalysis.SyntaxNode type = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LiteralExpression(object value)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxNode type, string identifier, Microsoft.CodeAnalysis.SyntaxNode initializer = null, bool isConst = false)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalAndExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalNotExpression(Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalOrExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SyntaxNode memberName)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(string name, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> parameters = null, System.Collections.Generic.IEnumerable<string> typeParameters = null, Microsoft.CodeAnalysis.SyntaxNode returnType = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers), System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ModuloExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MultiplyExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode name, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> declarations)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(Microsoft.CodeAnalysis.SyntaxNode name)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NegateExpression(Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullableTypeExpression(Microsoft.CodeAnalysis.SyntaxNode type)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode namedType, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> arguments)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(string name, Microsoft.CodeAnalysis.SyntaxNode type = null, Microsoft.CodeAnalysis.SyntaxNode initializer = null, Microsoft.CodeAnalysis.RefKind refKind = Microsoft.CodeAnalysis.RefKind.None)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(string name, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers), System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> getAccessorStatements = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> setAccessorStatements = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.QualifiedName(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReturnStatement(Microsoft.CodeAnalysis.SyntaxNode expression = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.StructDeclaration(string name, System.Collections.Generic.IEnumerable<string> typeParameters = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = default(Microsoft.CodeAnalysis.Editing.DeclarationModifiers), System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> interfaceTypes = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> members = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SubtractExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> caseExpressions, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> sections)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThisExpression()
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowStatement(Microsoft.CodeAnalysis.SyntaxNode expression = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SyntaxNode type)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> tryStatements, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> catchClauses, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> finallyStatements = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol typeSymbol)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.SpecialType specialType)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode type, string name, Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> lambdaParameters, Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> lambdaParameters, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> lambdaParameters, Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> lambdaParameters, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WhileStatement(Microsoft.CodeAnalysis.SyntaxNode condition, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessibility(Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.Accessibility accessibility)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithExpression(Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode expression)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithModifiers(Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithName(Microsoft.CodeAnalysis.SyntaxNode declaration, string name)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithStatements(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithType(Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode type)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> typeArguments)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind kinds, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> types = null)
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<string> typeParameters)
abstract Microsoft.CodeAnalysis.Host.HostLanguageServices.GetService<TLanguageService>()
abstract Microsoft.CodeAnalysis.Host.HostLanguageServices.Language.get
abstract Microsoft.CodeAnalysis.Host.HostLanguageServices.WorkspaceServices.get
abstract Microsoft.CodeAnalysis.Host.HostServices.CreateWorkspaceServices(Microsoft.CodeAnalysis.Workspace workspace)
abstract Microsoft.CodeAnalysis.Host.HostWorkspaceServices.FindLanguageServices<TLanguageService>(Microsoft.CodeAnalysis.Host.HostWorkspaceServices.MetadataFilter filter)
abstract Microsoft.CodeAnalysis.Host.HostWorkspaceServices.GetService<TWorkspaceService>()
abstract Microsoft.CodeAnalysis.Host.HostWorkspaceServices.HostServices.get
abstract Microsoft.CodeAnalysis.Host.HostWorkspaceServices.Workspace.get
abstract Microsoft.CodeAnalysis.TextLoader.LoadTextAndVersionAsync(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, System.Threading.CancellationToken cancellationToken)
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.ClassName = "class name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.Comment = "comment"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.DelegateName = "delegate name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.EnumName = "enum name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.ExcludedCode = "excluded code"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.Identifier = "identifier"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.InterfaceName = "interface name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.Keyword = "keyword"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.ModuleName = "module name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.NumericLiteral = "number"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.Operator = "operator"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.PreprocessorKeyword = "preprocessor keyword"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.PreprocessorText = "preprocessor text"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.Punctuation = "punctuation"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.StringLiteral = "string"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.StructName = "struct name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.Text = "text"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.TypeParameterName = "type parameter name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.VerbatimStringLiteral = "string - verbatim"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.WhiteSpace = "whitespace"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentAttributeName = "xml doc comment - attribute name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentAttributeQuotes = "xml doc comment - attribute quotes"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentAttributeValue = "xml doc comment - attribute value"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentCDataSection = "xml doc comment - cdata section"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentComment = "xml doc comment - comment"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentDelimiter = "xml doc comment - delimiter"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentEntityReference = "xml doc comment - entity reference"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentName = "xml doc comment - name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentProcessingInstruction = "xml doc comment - processing instruction"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlDocCommentText = "xml doc comment - text"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralAttributeName = "xml literal - attribute name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralAttributeQuotes = "xml literal - attribute quotes"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralAttributeValue = "xml literal - attribute value"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralCDataSection = "xml literal - cdata section"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralComment = "xml literal - comment"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralDelimiter = "xml literal - delimiter"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralEmbeddedExpression = "xml literal - embedded expression"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralEntityReference = "xml literal - entity reference"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralName = "xml literal - name"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralProcessingInstruction = "xml literal - processing instruction"
const Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.XmlLiteralText = "xml literal - text"
const Microsoft.CodeAnalysis.CodeActions.ConflictAnnotation.Kind = "CodeAction_Conflict"
const Microsoft.CodeAnalysis.CodeActions.RenameAnnotation.Kind = "CodeAction_Rename"
const Microsoft.CodeAnalysis.CodeActions.WarningAnnotation.Kind = "CodeAction_Warning"
const Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Default = "Default"
const Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Desktop = "Desktop"
const Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Editor = "Editor"
const Microsoft.CodeAnalysis.Host.Mef.ServiceLayer.Host = "Host"
const Microsoft.CodeAnalysis.WorkspaceKind.Debugger = "Debugger"
const Microsoft.CodeAnalysis.WorkspaceKind.Host = "Host"
const Microsoft.CodeAnalysis.WorkspaceKind.Interactive = "Interactive"
const Microsoft.CodeAnalysis.WorkspaceKind.MetadataAsSource = "MetadataAsSource"
const Microsoft.CodeAnalysis.WorkspaceKind.MiscellaneousFiles = "MiscellaneousFiles"
const Microsoft.CodeAnalysis.WorkspaceKind.Preview = "Preview"
override Microsoft.CodeAnalysis.AdhocWorkspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind feature)
override Microsoft.CodeAnalysis.AdhocWorkspace.CanOpenDocuments.get
override Microsoft.CodeAnalysis.AdhocWorkspace.CloseAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId)
override Microsoft.CodeAnalysis.AdhocWorkspace.CloseDocument(Microsoft.CodeAnalysis.DocumentId documentId)
override Microsoft.CodeAnalysis.AdhocWorkspace.OpenAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId, bool activate = true)
override Microsoft.CodeAnalysis.AdhocWorkspace.OpenDocument(Microsoft.CodeAnalysis.DocumentId documentId, bool activate = true)
override Microsoft.CodeAnalysis.Classification.ClassifiedSpan.Equals(object obj)
override Microsoft.CodeAnalysis.Classification.ClassifiedSpan.GetHashCode()
override Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.Apply(Microsoft.CodeAnalysis.Workspace workspace, System.Threading.CancellationToken cancellationToken)
override Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.ComputeOperationsAsync(System.Threading.CancellationToken cancellationToken)
override Microsoft.CodeAnalysis.CodeActions.OpenDocumentOperation.Apply(Microsoft.CodeAnalysis.Workspace workspace, System.Threading.CancellationToken cancellationToken)
override Microsoft.CodeAnalysis.Differencing.Edit<TNode>.Equals(object obj)
override Microsoft.CodeAnalysis.Differencing.Edit<TNode>.GetHashCode()
override Microsoft.CodeAnalysis.DocumentId.Equals(object obj)
override Microsoft.CodeAnalysis.DocumentId.GetHashCode()
override Microsoft.CodeAnalysis.DocumentId.ToString()
override Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Equals(object obj)
override Microsoft.CodeAnalysis.Editing.DeclarationModifiers.GetHashCode()
override Microsoft.CodeAnalysis.Editing.DeclarationModifiers.ToString()
override Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Equals(object obj)
override Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.GetHashCode()
override Microsoft.CodeAnalysis.Host.Mef.MefHostServices.CreateWorkspaceServices(Microsoft.CodeAnalysis.Workspace workspace)
override Microsoft.CodeAnalysis.Options.Option<T>.ToString()
override Microsoft.CodeAnalysis.Options.OptionKey.Equals(object obj)
override Microsoft.CodeAnalysis.Options.OptionKey.GetHashCode()
override Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.ToString()
override Microsoft.CodeAnalysis.ProjectId.Equals(object obj)
override Microsoft.CodeAnalysis.ProjectId.GetHashCode()
override Microsoft.CodeAnalysis.ProjectId.ToString()
override Microsoft.CodeAnalysis.ProjectReference.Equals(object obj)
override Microsoft.CodeAnalysis.ProjectReference.GetHashCode()
override Microsoft.CodeAnalysis.SolutionId.Equals(object obj)
override Microsoft.CodeAnalysis.SolutionId.GetHashCode()
override Microsoft.CodeAnalysis.VersionStamp.Equals(object obj)
override Microsoft.CodeAnalysis.VersionStamp.GetHashCode()
override Microsoft.CodeAnalysis.VersionStamp.ToString()
override Microsoft.CodeAnalysis.WorkspaceDiagnostic.ToString()
readonly Microsoft.CodeAnalysis.Options.OptionKey.Language
readonly Microsoft.CodeAnalysis.Options.OptionKey.Option
static Microsoft.CodeAnalysis.Classification.Classifier.GetClassifiedSpans(Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Text.TextSpan textSpan, Microsoft.CodeAnalysis.Workspace workspace, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Classification.Classifier.GetClassifiedSpansAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.CodeActions.CodeAction.Create(string title, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Document>> createChangedDocument, string equivalenceKey = null)
static Microsoft.CodeAnalysis.CodeActions.CodeAction.Create(string title, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Solution>> createChangedSolution, string equivalenceKey = null)
static Microsoft.CodeAnalysis.CodeActions.ConflictAnnotation.Create(string description)
static Microsoft.CodeAnalysis.CodeActions.ConflictAnnotation.GetDescription(Microsoft.CodeAnalysis.SyntaxAnnotation annotation)
static Microsoft.CodeAnalysis.CodeActions.RenameAnnotation.Create()
static Microsoft.CodeAnalysis.CodeActions.WarningAnnotation.Create(string description)
static Microsoft.CodeAnalysis.CodeActions.WarningAnnotation.GetDescription(Microsoft.CodeAnalysis.SyntaxAnnotation annotation)
static Microsoft.CodeAnalysis.DocumentId.CreateNewId(Microsoft.CodeAnalysis.ProjectId projectId, string debugName = null)
static Microsoft.CodeAnalysis.DocumentId.operator !=(Microsoft.CodeAnalysis.DocumentId left, Microsoft.CodeAnalysis.DocumentId right)
static Microsoft.CodeAnalysis.DocumentId.operator ==(Microsoft.CodeAnalysis.DocumentId left, Microsoft.CodeAnalysis.DocumentId right)
static Microsoft.CodeAnalysis.DocumentInfo.Create(Microsoft.CodeAnalysis.DocumentId id, string name, System.Collections.Generic.IEnumerable<string> folders = null, Microsoft.CodeAnalysis.SourceCodeKind sourceCodeKind = Microsoft.CodeAnalysis.SourceCodeKind.Regular, Microsoft.CodeAnalysis.TextLoader loader = null, string filePath = null, bool isGenerated = false)
static Microsoft.CodeAnalysis.Editing.DeclarationModifiers.From(Microsoft.CodeAnalysis.ISymbol symbol)
static Microsoft.CodeAnalysis.Editing.DeclarationModifiers.operator !=(Microsoft.CodeAnalysis.Editing.DeclarationModifiers left, Microsoft.CodeAnalysis.Editing.DeclarationModifiers right)
static Microsoft.CodeAnalysis.Editing.DeclarationModifiers.operator &(Microsoft.CodeAnalysis.Editing.DeclarationModifiers left, Microsoft.CodeAnalysis.Editing.DeclarationModifiers right)
static Microsoft.CodeAnalysis.Editing.DeclarationModifiers.operator +(Microsoft.CodeAnalysis.Editing.DeclarationModifiers left, Microsoft.CodeAnalysis.Editing.DeclarationModifiers right)
static Microsoft.CodeAnalysis.Editing.DeclarationModifiers.operator -(Microsoft.CodeAnalysis.Editing.DeclarationModifiers left, Microsoft.CodeAnalysis.Editing.DeclarationModifiers right)
static Microsoft.CodeAnalysis.Editing.DeclarationModifiers.operator ==(Microsoft.CodeAnalysis.Editing.DeclarationModifiers left, Microsoft.CodeAnalysis.Editing.DeclarationModifiers right)
static Microsoft.CodeAnalysis.Editing.DeclarationModifiers.operator |(Microsoft.CodeAnalysis.Editing.DeclarationModifiers left, Microsoft.CodeAnalysis.Editing.DeclarationModifiers right)
static Microsoft.CodeAnalysis.Editing.DocumentEditor.CreateAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxAnnotation annotation, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Editing.ImportAdder.AddImportsAsync(Microsoft.CodeAnalysis.Document document, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Text.TextSpan> spans, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Editing.SymbolEditor.Create(Microsoft.CodeAnalysis.Document document)
static Microsoft.CodeAnalysis.Editing.SymbolEditor.Create(Microsoft.CodeAnalysis.Solution solution)
static Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.GetBaseOrInterfaceDeclarationReferenceAsync(this Microsoft.CodeAnalysis.Editing.SymbolEditor editor, Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.ITypeSymbol baseOrInterfaceType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(this Microsoft.CodeAnalysis.Editing.SymbolEditor editor, Microsoft.CodeAnalysis.INamedTypeSymbol symbol, Microsoft.CodeAnalysis.ITypeSymbol newBaseType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(this Microsoft.CodeAnalysis.Editing.SymbolEditor editor, Microsoft.CodeAnalysis.INamedTypeSymbol symbol, System.Func<Microsoft.CodeAnalysis.Editing.SyntaxGenerator, Microsoft.CodeAnalysis.SyntaxNode> getNewBaseType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.AddAttribute(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode attribute)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.AddAttributeArgument(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration, Microsoft.CodeAnalysis.SyntaxNode attributeArgument)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.AddBaseType(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode baseType)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.AddInterfaceType(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode interfaceType)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.AddMember(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode member)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.AddParameter(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode parameter)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.AddReturnAttribute(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode attribute)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.InsertMembers(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> members)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetAccessibility(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.Accessibility accessibility)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetExpression(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode expression)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetGetAccessorStatements(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetModifiers(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetName(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, string name)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetSetAccessorStatements(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetStatements(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetType(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode type)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetTypeConstraint(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind kind, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> types)
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.SetTypeParameters(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<string> typeParameters)
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultRemoveOptions
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Document document)
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Workspace workspace, string language)
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia<TNode>(TNode node, System.Func<TNode, Microsoft.CodeAnalysis.SyntaxNode> nodeChanger)
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> list, int offset, int count)
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode> list, int offset, int count)
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> replacements)
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode original, Microsoft.CodeAnalysis.SyntaxNode replacement)
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxToken original, Microsoft.CodeAnalysis.SyntaxToken replacement)
static Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia<TNode>(Microsoft.CodeAnalysis.SyntaxNode root, TNode original, System.Func<TNode, Microsoft.CodeAnalysis.SyntaxNode> replacer)
static Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.operator !=(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation left, Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation right)
static Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.operator ==(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation left, Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation right)
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindCallersAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Document> documents, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindCallersAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Solution solution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDeclarationsAsync(Microsoft.CodeAnalysis.Project project, string name, bool ignoreCase, Microsoft.CodeAnalysis.SymbolFilter filter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindDeclarationsAsync(Microsoft.CodeAnalysis.Project project, string name, bool ignoreCase, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Project> projects = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementedInterfaceMembersAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Project> projects = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindOverridesAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Project> projects = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress progress, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Document> documents, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Document> documents, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindReferencesAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Solution solution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSimilarSymbols<TSymbol>(TSymbol symbol, Microsoft.CodeAnalysis.Compilation compilation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Project project, System.Func<string, bool> predicate, Microsoft.CodeAnalysis.SymbolFilter filter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Project project, System.Func<string, bool> predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Project project, string name, bool ignoreCase, Microsoft.CodeAnalysis.SymbolFilter filter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Project project, string name, bool ignoreCase, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Solution solution, System.Func<string, bool> predicate, Microsoft.CodeAnalysis.SymbolFilter filter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Solution solution, System.Func<string, bool> predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Solution solution, string name, bool ignoreCase, Microsoft.CodeAnalysis.SymbolFilter filter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDeclarationsAsync(Microsoft.CodeAnalysis.Solution solution, string name, bool ignoreCase, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSourceDefinitionAsync(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Solution solution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSymbolAtPosition(Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.Workspace workspace, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindSymbolAtPositionAsync(Microsoft.CodeAnalysis.Document document, int position, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxAnnotation annotation, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Text.TextSpan span, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Text.TextSpan> spans, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxAnnotation annotation, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document document, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Text.TextSpan> spans, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies)
static Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(System.Composition.CompositionContext compositionContext)
static Microsoft.CodeAnalysis.Host.Mef.MefHostServices.DefaultAssemblies.get
static Microsoft.CodeAnalysis.Host.Mef.MefHostServices.DefaultHost.get
static Microsoft.CodeAnalysis.Options.Option<T>.implicit operator Microsoft.CodeAnalysis.Options.OptionKey(Microsoft.CodeAnalysis.Options.Option<T> option)
static Microsoft.CodeAnalysis.Options.OptionKey.operator !=(Microsoft.CodeAnalysis.Options.OptionKey left, Microsoft.CodeAnalysis.Options.OptionKey right)
static Microsoft.CodeAnalysis.Options.OptionKey.operator ==(Microsoft.CodeAnalysis.Options.OptionKey left, Microsoft.CodeAnalysis.Options.OptionKey right)
static Microsoft.CodeAnalysis.ProjectId.CreateNewId(string debugName = null)
static Microsoft.CodeAnalysis.ProjectId.operator !=(Microsoft.CodeAnalysis.ProjectId left, Microsoft.CodeAnalysis.ProjectId right)
static Microsoft.CodeAnalysis.ProjectId.operator ==(Microsoft.CodeAnalysis.ProjectId left, Microsoft.CodeAnalysis.ProjectId right)
static Microsoft.CodeAnalysis.ProjectInfo.Create(Microsoft.CodeAnalysis.ProjectId id, Microsoft.CodeAnalysis.VersionStamp version, string name, string assemblyName, string language, string filePath = null, string outputFilePath = null, Microsoft.CodeAnalysis.CompilationOptions compilationOptions = null, Microsoft.CodeAnalysis.ParseOptions parseOptions = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentInfo> documents = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ProjectReference> projectReferences = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> metadataReferences = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> analyzerReferences = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentInfo> additionalDocuments = null, bool isSubmission = false, System.Type hostObjectType = null)
static Microsoft.CodeAnalysis.ProjectReference.operator !=(Microsoft.CodeAnalysis.ProjectReference left, Microsoft.CodeAnalysis.ProjectReference right)
static Microsoft.CodeAnalysis.ProjectReference.operator ==(Microsoft.CodeAnalysis.ProjectReference left, Microsoft.CodeAnalysis.ProjectReference right)
static Microsoft.CodeAnalysis.Recommendations.Recommender.GetRecommendedSymbolsAtPosition(Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolAsync(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.ISymbol symbol, string newName, Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Simplification.Simplifier.Expand(Microsoft.CodeAnalysis.SyntaxToken token, Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Workspace workspace, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> expandInsideNode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Simplification.Simplifier.Expand<TNode>(TNode node, Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Workspace workspace, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> expandInsideNode = null, bool expandParameter = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Simplification.Simplifier.ExpandAsync(Microsoft.CodeAnalysis.SyntaxToken token, Microsoft.CodeAnalysis.Document document, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> expandInsideNode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Simplification.Simplifier.ExpandAsync<TNode>(TNode node, Microsoft.CodeAnalysis.Document document, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> expandInsideNode = null, bool expandParameter = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Options.OptionSet optionSet = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxAnnotation annotation, Microsoft.CodeAnalysis.Options.OptionSet optionSet = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, Microsoft.CodeAnalysis.Options.OptionSet optionSet = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document document, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Text.TextSpan> spans, Microsoft.CodeAnalysis.Options.OptionSet optionSet = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
static Microsoft.CodeAnalysis.SolutionId.CreateNewId(string debugName = null)
static Microsoft.CodeAnalysis.SolutionId.operator !=(Microsoft.CodeAnalysis.SolutionId left, Microsoft.CodeAnalysis.SolutionId right)
static Microsoft.CodeAnalysis.SolutionId.operator ==(Microsoft.CodeAnalysis.SolutionId left, Microsoft.CodeAnalysis.SolutionId right)
static Microsoft.CodeAnalysis.SolutionInfo.Create(Microsoft.CodeAnalysis.SolutionId id, Microsoft.CodeAnalysis.VersionStamp version, string filePath = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ProjectInfo> projects = null)
static Microsoft.CodeAnalysis.TextAndVersion.Create(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.VersionStamp version, string filePath = null)
static Microsoft.CodeAnalysis.TextLoader.From(Microsoft.CodeAnalysis.Text.SourceTextContainer container, Microsoft.CodeAnalysis.VersionStamp version, string filePath = null)
static Microsoft.CodeAnalysis.TextLoader.From(Microsoft.CodeAnalysis.TextAndVersion textAndVersion)
static Microsoft.CodeAnalysis.VersionStamp.Create()
static Microsoft.CodeAnalysis.VersionStamp.Create(System.DateTime utcIimeLastModified)
static Microsoft.CodeAnalysis.VersionStamp.operator !=(Microsoft.CodeAnalysis.VersionStamp left, Microsoft.CodeAnalysis.VersionStamp right)
static Microsoft.CodeAnalysis.VersionStamp.operator ==(Microsoft.CodeAnalysis.VersionStamp left, Microsoft.CodeAnalysis.VersionStamp right)
static Microsoft.CodeAnalysis.Workspace.GetWorkspaceRegistration(Microsoft.CodeAnalysis.Text.SourceTextContainer textContainer)
static Microsoft.CodeAnalysis.Workspace.TryGetWorkspace(Microsoft.CodeAnalysis.Text.SourceTextContainer textContainer, out Microsoft.CodeAnalysis.Workspace workspace)
static readonly Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders.BatchFixer
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Abstract
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Async
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Const
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.New
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.None
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Override
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Partial
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.ReadOnly
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Sealed
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Static
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Unsafe
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.Virtual
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WithEvents
static readonly Microsoft.CodeAnalysis.Editing.DeclarationModifiers.WriteOnly
static readonly Microsoft.CodeAnalysis.Formatting.Formatter.Annotation
static readonly Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentationSize
static readonly Microsoft.CodeAnalysis.Formatting.FormattingOptions.NewLine
static readonly Microsoft.CodeAnalysis.Formatting.FormattingOptions.SmartIndent
static readonly Microsoft.CodeAnalysis.Formatting.FormattingOptions.TabSize
static readonly Microsoft.CodeAnalysis.Formatting.FormattingOptions.UseTabs
static readonly Microsoft.CodeAnalysis.Recommendations.RecommendationOptions.FilterOutOfScopeLocals
static readonly Microsoft.CodeAnalysis.Recommendations.RecommendationOptions.HideAdvancedMembers
static readonly Microsoft.CodeAnalysis.Rename.RenameOptions.PreviewChanges
static readonly Microsoft.CodeAnalysis.Rename.RenameOptions.RenameInComments
static readonly Microsoft.CodeAnalysis.Rename.RenameOptions.RenameInStrings
static readonly Microsoft.CodeAnalysis.Rename.RenameOptions.RenameOverloads
static readonly Microsoft.CodeAnalysis.Simplification.SimplificationOptions.AllowSimplificationToBaseType
static readonly Microsoft.CodeAnalysis.Simplification.SimplificationOptions.AllowSimplificationToGenericType
static readonly Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferAliasToQualification
static readonly Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferImplicitTypeInLocalDeclaration
static readonly Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferImplicitTypeInference
static readonly Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferIntrinsicPredefinedTypeKeywordInDeclaration
static readonly Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferIntrinsicPredefinedTypeKeywordInMemberAccess
static readonly Microsoft.CodeAnalysis.Simplification.SimplificationOptions.PreferOmittingModuleNamesInQualification
static readonly Microsoft.CodeAnalysis.Simplification.SimplificationOptions.QualifyMemberAccessWithThisOrMe
static readonly Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation
static readonly Microsoft.CodeAnalysis.Simplification.Simplifier.SpecialTypeAnnotation
static readonly Microsoft.CodeAnalysis.VersionStamp.Default
virtual Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(System.Threading.CancellationToken cancellationToken)
virtual Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputePreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)
virtual Microsoft.CodeAnalysis.CodeActions.CodeAction.EquivalenceKey.get
virtual Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedDocumentAsync(System.Threading.CancellationToken cancellationToken)
virtual Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(System.Threading.CancellationToken cancellationToken)
virtual Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken)
virtual Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.Apply(Microsoft.CodeAnalysis.Workspace workspace, System.Threading.CancellationToken cancellationToken)
virtual Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.Title.get
virtual Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.GetFixAllProvider()
virtual Microsoft.CodeAnalysis.CodeFixes.FixAllProvider.GetSupportedFixAllDiagnosticIds(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider originalCodeFixProvider)
virtual Microsoft.CodeAnalysis.CodeFixes.FixAllProvider.GetSupportedFixAllScopes()
virtual Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesAfter(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> newDeclarations)
virtual Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesBefore(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> newDeclarations)
virtual Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node)
virtual Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxNode newDeclaration)
virtual Microsoft.CodeAnalysis.Host.HostLanguageServices.CompilationFactory.get
virtual Microsoft.CodeAnalysis.Host.HostWorkspaceServices.GetLanguageServices(string languageName)
virtual Microsoft.CodeAnalysis.Host.HostWorkspaceServices.IsSupported(string languageName)
virtual Microsoft.CodeAnalysis.Host.HostWorkspaceServices.PersistentStorage.get
virtual Microsoft.CodeAnalysis.Host.HostWorkspaceServices.SupportedLanguages.get
virtual Microsoft.CodeAnalysis.Host.HostWorkspaceServices.TemporaryStorage.get
virtual Microsoft.CodeAnalysis.Workspace.AdjustReloadedProject(Microsoft.CodeAnalysis.Project oldProject, Microsoft.CodeAnalysis.Project reloadedProject)
virtual Microsoft.CodeAnalysis.Workspace.AdjustReloadedSolution(Microsoft.CodeAnalysis.Solution oldSolution, Microsoft.CodeAnalysis.Solution reloadedSolution)
virtual Microsoft.CodeAnalysis.Workspace.ApplyAdditionalDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo info, Microsoft.CodeAnalysis.Text.SourceText text)
virtual Microsoft.CodeAnalysis.Workspace.ApplyAdditionalDocumentRemoved(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.ApplyAdditionalDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId id, Microsoft.CodeAnalysis.Text.SourceText text)
virtual Microsoft.CodeAnalysis.Workspace.ApplyAnalyzerReferenceAdded(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
virtual Microsoft.CodeAnalysis.Workspace.ApplyAnalyzerReferenceRemoved(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference analyzerReference)
virtual Microsoft.CodeAnalysis.Workspace.ApplyCompilationOptionsChanged(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.CompilationOptions options)
virtual Microsoft.CodeAnalysis.Workspace.ApplyDocumentAdded(Microsoft.CodeAnalysis.DocumentInfo info, Microsoft.CodeAnalysis.Text.SourceText text)
virtual Microsoft.CodeAnalysis.Workspace.ApplyDocumentRemoved(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.ApplyDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId id, Microsoft.CodeAnalysis.Text.SourceText text)
virtual Microsoft.CodeAnalysis.Workspace.ApplyMetadataReferenceAdded(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.MetadataReference metadataReference)
virtual Microsoft.CodeAnalysis.Workspace.ApplyMetadataReferenceRemoved(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.MetadataReference metadataReference)
virtual Microsoft.CodeAnalysis.Workspace.ApplyParseOptionsChanged(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ParseOptions options)
virtual Microsoft.CodeAnalysis.Workspace.ApplyProjectAdded(Microsoft.CodeAnalysis.ProjectInfo project)
virtual Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(Microsoft.CodeAnalysis.ProjectChanges projectChanges)
virtual Microsoft.CodeAnalysis.Workspace.ApplyProjectReferenceAdded(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ProjectReference projectReference)
virtual Microsoft.CodeAnalysis.Workspace.ApplyProjectReferenceRemoved(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ProjectReference projectReference)
virtual Microsoft.CodeAnalysis.Workspace.ApplyProjectRemoved(Microsoft.CodeAnalysis.ProjectId projectId)
virtual Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind feature)
virtual Microsoft.CodeAnalysis.Workspace.CanOpenDocuments.get
virtual Microsoft.CodeAnalysis.Workspace.CheckDocumentCanBeRemoved(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.CheckProjectCanBeRemoved(Microsoft.CodeAnalysis.ProjectId projectId)
virtual Microsoft.CodeAnalysis.Workspace.ClearDocumentData(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.ClearProjectData(Microsoft.CodeAnalysis.ProjectId projectId)
virtual Microsoft.CodeAnalysis.Workspace.ClearSolutionData()
virtual Microsoft.CodeAnalysis.Workspace.CloseAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.CloseDocument(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.Dispose(bool finalize)
virtual Microsoft.CodeAnalysis.Workspace.GetAdditionalDocumentName(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.GetDocumentIdInCurrentContext(Microsoft.CodeAnalysis.Text.SourceTextContainer container)
virtual Microsoft.CodeAnalysis.Workspace.GetDocumentName(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.GetOpenDocumentIds(Microsoft.CodeAnalysis.ProjectId projectId = null)
virtual Microsoft.CodeAnalysis.Workspace.GetProjectName(Microsoft.CodeAnalysis.ProjectId projectId)
virtual Microsoft.CodeAnalysis.Workspace.GetRelatedDocumentIds(Microsoft.CodeAnalysis.Text.SourceTextContainer container)
virtual Microsoft.CodeAnalysis.Workspace.IsDocumentOpen(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.OnDocumentClosing(Microsoft.CodeAnalysis.DocumentId documentId)
virtual Microsoft.CodeAnalysis.Workspace.OnDocumentTextChanged(Microsoft.CodeAnalysis.Document document)
virtual Microsoft.CodeAnalysis.Workspace.OnProjectReloaded(Microsoft.CodeAnalysis.ProjectInfo reloadedProjectInfo)
virtual Microsoft.CodeAnalysis.Workspace.OnProjectRemoved(Microsoft.CodeAnalysis.ProjectId projectId)
virtual Microsoft.CodeAnalysis.Workspace.OnWorkspaceFailed(Microsoft.CodeAnalysis.WorkspaceDiagnostic diagnostic)
virtual Microsoft.CodeAnalysis.Workspace.OpenAdditionalDocument(Microsoft.CodeAnalysis.DocumentId documentId, bool activate = true)
virtual Microsoft.CodeAnalysis.Workspace.OpenDocument(Microsoft.CodeAnalysis.DocumentId documentId, bool activate = true)
virtual Microsoft.CodeAnalysis.Workspace.PartialSemanticsEnabled.get
virtual Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution newSolution)