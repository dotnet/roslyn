<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <PropertyGroup>
    <!--
    The purpose of this project is to include all dependecies of Microsoft.CodeAnalysis.Remote.ServiceHub and C# and VB features layer targeting .Net Core.
    -->
    <IsShipping>false</IsShipping>

    <GenerateReadyToRun Condition="'$(GenerateReadyToRun)' == '' and '$(Configuration)' == 'Release' and '$(OfficialBuild)' == 'true'">true</GenerateReadyToRun>
    <MicrosoftNETCoreAppcrossgen2winx64Version>$(MicrosoftNetCoreAppRuntimePackagesVersion)</MicrosoftNETCoreAppcrossgen2winx64Version>
  </PropertyGroup>  

  <ItemGroup>
    <Compile Include="$(MSBuildThisFileDirectory)Program.cs" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="$(MSBuildThisFileDirectory)..\ServiceHub\Microsoft.CodeAnalysis.Remote.ServiceHub.csproj" />
    <ProjectReference Include="$(MSBuildThisFileDirectory)..\..\..\Features\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Features.csproj" />
    <ProjectReference Include="$(MSBuildThisFileDirectory)..\..\..\Features\VisualBasic\Portable\Microsoft.CodeAnalysis.VisualBasic.Features.vbproj" />
  </ItemGroup>

  <ItemGroup>
    <!-- These references need to be deployed to the vsix subfolder containing servicehub bits for .Net Core -->
    <PackageReference Include="Microsoft.VisualStudio.Telemetry" Version="$(MicrosoftVisualStudioTelemetryVersion)" />
    <PackageReference Include="SQLitePCLRaw.bundle_green" Version="$(SQLitePCLRawbundle_greenVersion)" />
    <!--
      Following packages are being referenced to: 
        - exclude BCL library from the dependencies we need to deploy as part of Roslyn vsix.
        - compile ReadyToRun binaries

      "Microsoft.NETCore.App.Runtime.win-{arch}"
      "Microsoft.WindowsDesktop.App.Runtime.win-{arch}"
    -->    
    <PackageReference Include="Microsoft.NETCore.App.crossgen2.win-x64" Version="$(MicrosoftNETCoreAppcrossgen2winx64Version)" Condition="'$(GenerateReadyToRun)' == 'true'" ExcludeAssets="all" PrivateAssets="all" GeneratePathProperty="true" />    
  </ItemGroup>

  <Target Name="LocateCrossgenTargets" DependsOnTargets="Publish">
    <ItemGroup>
      <!-- Find all Roslyn assemblies that we want to crossgen -->
      <_R2RAssemblies Include="@(ReferencePath->'%(FileName)%(Extension)')" Condition="'%(ReferenceSourceTarget)' == 'ProjectReference'" />

      <!-- Also crossgen a few assemblies we don't own but insert into VS -->
      <_R2RAssemblies Include="Microsoft.CodeAnalysis.Elfie.dll" />
      <_R2RAssemblies Include="Microsoft.ServiceHub.Framework.dll" />
      <_R2RAssemblies Include="Microsoft.VisualStudio.Composition.dll" />
      <_R2RAssemblies Include="Microsoft.VisualStudio.Telemetry.dll" />
      <_R2RAssemblies Include="Microsoft.VisualStudio.Threading.dll" />
      <_R2RAssemblies Include="MessagePack.dll" />
      <_R2RAssemblies Include="Nerdback.Streams.dll" />
      <_R2RAssemblies Include="Newtonsoft.Json.dll" />
      <_R2RAssemblies Include="SQLitePCLRaw.batteries_v2.dll" />
      <_R2RAssemblies Include="StreamJsonRpc.dll" />
      <_R2RAssemblies Include="System.IO.Pipelines.dll" />
      <_R2RAssemblies Include="System.Text.Json.dll" />
      <_R2RAssemblies Include="System.Text.Encodings.Web.dll" />
      <_R2RAssemblies Include="Microsoft.NET.StringTools.dll" />

      <!-- Find all assemblies (including Roslyn and all dependencies) from the actual published location -->
      <_AllPublishedAssemblyPaths Include="$(PublishDir)**\*.dll" Exclude="$(PublishDir)**\*.resources.dll" />
      <_AllPublishedAssemblies Include="@(_AllPublishedAssemblyPaths->'%(FileName)%(Extension)')" >
        <_FullFilePath>%(FullPath)</_FullFilePath>
      </_AllPublishedAssemblies>

      <!-- Get all non-Roslyn assemblies as a subset of all published ones, we don't crossgen those -->
      <_NoR2RAssemblies Include="@(_AllPublishedAssemblies)" Exclude="@(_R2RAssemblies)" >
        <_FullFilePath>%(_AllPublishedAssemblies._FullFilePath)</_FullFilePath>
      </_NoR2RAssemblies>
      <_NoR2RAssemblyPaths Include="@(_NoR2RAssemblies->'%(_FullFilePath)')" />

      <!-- Now we get all Roslyn assemblies in the publish folder -->
      <_R2RAssemblyPaths Include="@(_AllPublishedAssemblyPaths)" Exclude="@(_NoR2RAssemblyPaths)" />
    </ItemGroup>
    
    <PropertyGroup>
      <CrossgenWorkDir>$(PublishDir)CrossGen\</CrossgenWorkDir>
      <OriginalAssemblyDir>$(CrossgenWorkDir)OriginalAssemblies\</OriginalAssemblyDir>
    </PropertyGroup>   
  </Target>

  <Target Name="PrepareCrossgenTargets" DependsOnTargets="LocateCrossgenTargets" Condition="'$(GenerateReadyToRun)' == 'true'">
    <Move SourceFiles="@(_R2RAssemblyPaths)" DestinationFolder="$(OriginalAssemblyDir)">
      <Output TaskParameter="DestinationFiles" ItemName="_FilesWritten" />
    </Move>
    <ItemGroup>
      <_CrossgenTargetsAsDependencies Include="$(OriginalAssemblyDir)*.dll" />
      <_NonCrossgenTargetsAsDependencies Include="@(_NonRuntimeAssembliesInPublishDir)" Exclude="@(_R2RAssemblyPaths)" />      
      <_CrossgenTargetPaths Include="@(_CrossgenTargetsAsDependencies)">      
        <OutputPath>$(PublishDir)%(_CrossgenTargetsAsDependencies.Filename)%(_CrossgenTargetsAsDependencies.Extension)</OutputPath>
      </_CrossgenTargetPaths>
    </ItemGroup>
  </Target>

  <Target Name="CompileReadyToRun"
          DependsOnTargets="LocateDependencies;PrepareCrossgenTargets"
          Condition="'$(GenerateReadyToRun)' == 'true'"
          Inputs="%(_CrossgenTargetPaths.FullPath)"
          Outputs="%(_CrossgenTargetPaths.OutputPath)">    
    <PropertyGroup>
      <_Crossgen2ExePath>$(PkgMicrosoft_NETCore_App_crossgen2_win-x64)\tools\crossgen2.exe</_Crossgen2ExePath>
      <_R2ROptimizeAssemblyPath>%(_CrossgenTargetPaths.FullPath)</_R2ROptimizeAssemblyPath>
      <_R2ROptimizeAssemblyOutputPath>$(PublishDir)%(_CrossgenTargetPaths.Filename)%(_CrossgenTargetPaths.Extension)</_R2ROptimizeAssemblyOutputPath>      
      <_RspFilePath>$(CrossgenWorkDir)%(_CrossgenTargetPaths.Filename).CrossgenArgs.rsp</_RspFilePath>
    </PropertyGroup>
    <ItemGroup>
      <_RspFileLines Include="$(_R2ROptimizeAssemblyPath)" />
      <_RspFileLines Include="--out:$(_R2ROptimizeAssemblyOutputPath)" />
      <_RspFileLines Include="--targetarch:$(TargetArch)" />
      <_RspFileLines Include="--optimize" />
      <_RspFileLines Include="--opt-cross-module:*" />
      <_RspFileLines Include="@(_RuntimeLibraries->'--reference:%(FullPath)')" />
      <_RspFileLines Include="@(_CrossgenTargetsAsDependencies->'--reference:%(FullPath)')" />
      <_RspFileLines Include="@(_NonCrossgenTargetsAsDependencies->'--reference:%(FullPath)')" />
    </ItemGroup>

    <WriteLinesToFile File="$(_RspFilePath)" Lines="" Overwrite="true" />
    <WriteLinesToFile File="$(_RspFilePath)" Lines="@(_RspFileLines)" />
  
    <Exec Command='"$(_Crossgen2ExePath)" @"$(_RspFilePath)"' ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="_Crossgen2Output" />
      <Output TaskParameter="ExitCode" PropertyName="_Crossgen2ErrorCode" />
    </Exec>
    <Message Text="$(_Crossgen2Output)" />             
    <Error Text="Crossgen2 failed with exit code $(_Crossgen2ErrorCode)." Condition="'$(_Crossgen2ErrorCode)' != '0'" />
  </Target>

  <Target Name="LocateDependencies" DependsOnTargets="Publish">
    <ItemGroup>
      <_RuntimeLibraries Include="$(_RuntimeLibrariesPath)**\*.dll" />
      <_WinRuntimeLibraries Include="$(_WinRuntimeLibrariesPath)**\*.dll" />

      <_RuntimeLibrariesInPublishDir Include="@(_RuntimeLibraries->'$(PublishDir)%(FileName)%(Extension)')" />
      <_RuntimeLibrariesInPublishDir Include="@(_WinRuntimeLibraries->'$(PublishDir)%(FileName)%(Extension)')" />

      <_NonRuntimeAssembliesInPublishDir Include="$(PublishDir)*.dll" Exclude="@(_RuntimeLibrariesInPublishDir)" />
    </ItemGroup>
  </Target>

  <Target Name="BeforePublishProjectOutputGroup" DependsOnTargets="LocateDependencies;LocateCrossgenTargets" />

  <Target Name="PublishProjectOutputGroup" DependsOnTargets="BeforePublishProjectOutputGroup;CompileReadyToRun" Returns="@(_PublishedFiles)">
    <PropertyGroup>
      <!-- 
        For BCL, we want to use the version provided by the runtime in VS, not the ones from the NuGet packages. 
        This might not be possible if Roslyn is referencing a higher version than the one shipped as part of runtime in VS.
        For example, we could be referecing S.C.I 7.0 but VS still ships .NET 6. Usually this is a transient state, and the
        two would eventually be in sync. But we'd need to include those binaries during the out-of-sync period.
        Note, for the same reasone, we can't safely exclude shared dependencies from ServiceHub host folder.

        Always include BCL in the vsix for non-official build to avoid breakage. Since VS used on CI machines
        as well as by external contributors usually lags behind our insertion target.
      -->
      <_ExcludeRuntimeLibraries Condition="'$(OfficialBuild)' == 'true'">true</_ExcludeRuntimeLibraries>
    </PropertyGroup>
    <ItemGroup>
      <_ExcludedFiles Include="$(PublishDir)**\Microsoft.CodeAnalysis.Remote.ServiceHub.CoreComponents.*" />
      <_ExcludedFiles Include="$(PublishDir)**\*.pdb" />
      <_ExcludedFiles Include="$(CrossgenWorkDir)**\*" />

      <!-- the only assembly we need under runtime folder (runtimes\win-x64\native\e_sqlite3.dll) is handled by the vsix project directly -->
      <_ExcludedFiles Include="$(PublishDir)runtimes\**\*.*" />
      <_ExcludedFiles Condition="'$(_ExcludeRuntimeLibraries)' == 'true'" Include="@(_RuntimeLibrariesInPublishDir)" />
    </ItemGroup>
    <ItemGroup>
      <!-- Need to include and then update items (https://github.com/microsoft/msbuild/issues/1053) -->
      <_PublishedFiles Include="$(PublishDir)**\*.*" Exclude="@(_ExcludedFiles)"/>
      <!-- Set TargetPath -->
      <_PublishedFiles Update="@(_PublishedFiles)" TargetPath="%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>
  </Target>
</Project>
