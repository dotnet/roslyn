<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Arg_ArrayPlusOffTooSmall" xml:space="preserve">
    <value>Destination array is not long enough to copy all the items in the collection. Check array index and length.</value>
  </data>
  <data name="Arg_HTCapacityOverflow" xml:space="preserve">
    <value>Hashtable's capacity overflowed and went negative. Check load factor, capacity and the current size of the table.</value>
  </data>
  <data name="Arg_KeyNotFoundWithKey" xml:space="preserve">
    <value>The given key '{0}' was not present in the dictionary.</value>
  </data>
  <data name="Arg_LongerThanDestArray" xml:space="preserve">
    <value>Destination array was not long enough. Check the destination index, length, and the array's lower bounds.</value>
  </data>
  <data name="Arg_LongerThanSrcArray" xml:space="preserve">
    <value>Source array was not long enough. Check the source index, length, and the array's lower bounds.</value>
  </data>
  <data name="Arg_NonZeroLowerBound" xml:space="preserve">
    <value>The lower bound of target array must be zero.</value>
  </data>
  <data name="Arg_RankMultiDimNotSupported" xml:space="preserve">
    <value>Only single dimensional arrays are supported for the requested action.</value>
  </data>
  <data name="Arg_WrongType" xml:space="preserve">
    <value>The value "{0}" is not of type "{1}" and cannot be used in this generic collection.</value>
  </data>
  <data name="Argument_AddingDuplicateWithKey" xml:space="preserve">
    <value>An item with the same key has already been added. Key: {0}</value>
  </data>
  <data name="Argument_InvalidArrayType" xml:space="preserve">
    <value>Target array type is not compatible with the type of items in the collection.</value>
  </data>
  <data name="Argument_InvalidOffLen" xml:space="preserve">
    <value>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</value>
  </data>
  <data name="ArgumentOutOfRange_ArrayLB" xml:space="preserve">
    <value>Number was less than the array's lower bound in the first dimension.</value>
  </data>
  <data name="ArgumentOutOfRange_BiggerThanCollection" xml:space="preserve">
    <value>Larger than collection size.</value>
  </data>
  <data name="ArgumentOutOfRange_Count" xml:space="preserve">
    <value>Count must be positive and count must refer to a location within the string/array/collection.</value>
  </data>
  <data name="ArgumentOutOfRange_Index" xml:space="preserve">
    <value>Index was out of range. Must be non-negative and less than the size of the collection.</value>
  </data>
  <data name="ArgumentOutOfRange_ListInsert" xml:space="preserve">
    <value>Index must be within the bounds of the List.</value>
  </data>
  <data name="ArgumentOutOfRange_NeedNonNegNum" xml:space="preserve">
    <value>Non-negative number required.</value>
  </data>
  <data name="ArgumentOutOfRange_SmallCapacity" xml:space="preserve">
    <value>capacity was less than the current size.</value>
  </data>
  <data name="InvalidOperation_ConcurrentOperationsNotSupported" xml:space="preserve">
    <value>Operations that change non-concurrent collections must have exclusive access. A concurrent update was performed on this collection and corrupted its state. The collection's state is no longer correct.</value>
  </data>
  <data name="InvalidOperation_EnumFailedVersion" xml:space="preserve">
    <value>Collection was modified; enumeration operation may not execute.</value>
  </data>
  <data name="InvalidOperation_EnumOpCantHappen" xml:space="preserve">
    <value>Enumeration has either not started or has already finished.</value>
  </data>
  <data name="InvalidOperation_IComparerFailed" xml:space="preserve">
    <value>Failed to compare two elements in the array.</value>
  </data>
  <data name="NotSupported_KeyCollectionSet" xml:space="preserve">
    <value>Mutating a key collection derived from a dictionary is not allowed.</value>
  </data>
  <data name="NotSupported_ValueCollectionSet" xml:space="preserve">
    <value>Mutating a value collection derived from a dictionary is not allowed.</value>
  </data>
  <data name="Rank_MustMatch" xml:space="preserve">
    <value>The specified arrays must have the same number of dimensions.</value>
  </data>
  <data name="NotSupported_FixedSizeCollection" xml:space="preserve">
    <value>Collection was of a fixed size.</value>
  </data>
  <data name="ArgumentException_OtherNotArrayOfCorrectLength" xml:space="preserve">
    <value>Object is not a array with the same number of elements as the array to compare it to.</value>
  </data>
  <data name="Arg_BogusIComparer" xml:space="preserve">
    <value>Unable to sort because the IComparer.Compare() method returns inconsistent results. Either a value does not compare equal to itself, or one value repeatedly compared to another value yields different results. IComparer: '{0}'.</value>
  </data>
</root>