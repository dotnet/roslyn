<?xml version="1.0" encoding="utf-8"?>
<Project>

  <PropertyGroup>
    <MSBuildWarningsAsMessages>MSB4181</MSBuildWarningsAsMessages>
  </PropertyGroup>
  
  <Target Name="MetalamaCompilerSetAnalyzerAssembliesInPackage" DependsOnTargets="ResolveReferences;BuiltProjectOutputGroup" Condition="$(IsPackable) == 'true' AND $(MetalamaCompilerDisablePackCustomization)!='true'">
    <ItemGroup>
      <!-- include assemblies from the current project -->
      <None Include="@(BuiltProjectOutputGroupOutput)" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false"/>
      <!-- include assemblies from references -->
      <None Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false"/>
    </ItemGroup>
  </Target>

  <!-- based on https://stackoverflow.com/a/56018426/41071 -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);MetalamaCompilerSetLibAssembliesInPackage</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <Target Name="MetalamaCompilerSetLibAssembliesInPackage" DependsOnTargets="ResolveReferences" Condition="$(IsPackable) == 'true'  AND $(MetalamaCompilerDisablePackCustomization)!='true'">
    <ItemGroup>
      <!-- include assemblies from references -->
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))"/>
      <!-- exclude assemblies from the current project -->
      <BuiltProjectOutputGroupOutput Remove="@(BuiltProjectOutputGroupOutput)"/>
    </ItemGroup>
  </Target>

  <!-- based on https://github.com/NuGet/NuGet.Client/blob/1f3a4d9/src/NuGet.Core/NuGet.Build.Tasks.Pack/NuGet.Build.Tasks.Pack.targets#L195 -->
  <Target Name="MetalamaCompilerGenerateNuspec"
          DependsOnTargets="$(GenerateNuspecDependsOn);_CalculateInputsOutputsForPack;_GetProjectReferenceVersions;_InitializeNuspecRepositoryInformationProperties"
          Condition="$(IsPackable) == 'true'" Inputs="@(NuGetPackInput)" Outputs="@(NuGetPackOutput)">
    <PackTask PackItem="$(PackProjectInputFile)"
              PackageFiles="@(_PackageFiles)"
              PackageFilesToExclude="@(_PackageFilesToExclude)"
              PackageVersion="$(PackageVersion)"
              PackageId="$(PackageId)"
              Title="$(Title)"
              Authors="$(Authors)"
              Description="$(PackageDescription)"
              Copyright="$(Copyright)"
              RequireLicenseAcceptance="$(PackageRequireLicenseAcceptance)"
              LicenseUrl="$(PackageLicenseUrl)"
              ProjectUrl="$(PackageProjectUrl)"
              IconUrl="$(PackageIconUrl)"
              ReleaseNotes="$(PackageReleaseNotes)"
              Tags="$(PackageTags)"
              DevelopmentDependency="$(DevelopmentDependency)"
              BuildOutputInPackage="@(_BuildOutputInPackage)"
              ProjectReferencesWithVersions="@(_ProjectReferencesWithVersions)"
              TargetPathsToSymbols="@(_TargetPathsToSymbols)"
              TargetFrameworks="@(_TargetFrameworks)"
              FrameworksWithSuppressedDependencies="@(_FrameworksWithSuppressedDependencies)"
              AssemblyName="$(AssemblyName)"
              PackageOutputPath="$(PackageOutputAbsolutePath)"
              IncludeSymbols="$(IncludeSymbols)"
              IncludeSource="$(IncludeSource)"
              PackageTypes="$(PackageType)"
              IsTool="$(IsTool)"
              RepositoryUrl="$(RepositoryUrl)"
              RepositoryType="$(RepositoryType)"
              RepositoryBranch="$(RepositoryBranch)"
              RepositoryCommit="$(RepositoryCommit)"
              SourceFiles="@(_SourceFiles->Distinct())"
              NoPackageAnalysis="$(NoPackageAnalysis)"
              NoDefaultExcludes="$(NoDefaultExcludes)"
              MinClientVersion="$(MinClientVersion)"
              Serviceable="$(Serviceable)"
              FrameworkAssemblyReferences="@(_FrameworkAssemblyReferences)"
              ContinuePackingAfterGeneratingNuspec="$(ContinuePackingAfterGeneratingNuspec)"
              NuspecOutputPath="$(NuspecOutputAbsolutePath)"
              IncludeBuildOutput="$(IncludeBuildOutput)"
              BuildOutputFolders="$(BuildOutputTargetFolder)"
              ContentTargetFolders="$(ContentTargetFolders)"
              RestoreOutputPath="$(RestoreOutputAbsolutePath)"
              NuspecFile="$(NuspecFileAbsolutePath)"
              NuspecBasePath="$(NuspecBasePath)"
              NuspecProperties="$(NuspecProperties)"
              AllowedOutputExtensionsInPackageBuildOutputFolder="$(AllowedOutputExtensionsInPackageBuildOutputFolder)"
              AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder="$(AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder)"
              NoWarn="$(NoWarn)"
              WarningsAsErrors="$(WarningsAsErrors)"
              TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
              OutputFileNamesWithoutVersion="$(OutputFileNamesWithoutVersion)"
              InstallPackageToOutputPath="$(InstallPackageToOutputPath)"
              SymbolPackageFormat="$(SymbolPackageFormat)"
              PackageLicenseFile="$(PackageLicenseFile)"
              PackageLicenseExpression="$(PackageLicenseExpression)"
              PackageLicenseExpressionVersion="$(PackageLicenseExpressionVersion)"
              Deterministic="$(Deterministic)"
              PackageIcon="$(PackageIcon)"
              ContinueOnError="true"
    />
  </Target>

  <Target Name="MetalamaCompilerUpdateNuspec" DependsOnTargets="MetalamaCompilerGenerateNuspec" Condition="$(IsPackable) == 'true'  AND $(MetalamaCompilerDisablePackCustomization)!='true'">

    <ItemGroup>
      <NuspecFileAbsolutePaths Include="@(NuGetPackOutput)" Condition="%(Extension) == '.nuspec'"/>
    </ItemGroup>

    <ItemGroup>
      <MetalamaSdkPackageReplacement Include="Metalama.Compiler.Sdk" ReplacedBy="Metalama.Compiler"/>
    </ItemGroup>

    <RewriteMetalamaSdkNuspec File="%(NuspecFileAbsolutePaths.Identity)" Replacements="@(MetalamaSdkPackageReplacement)"/>

  </Target>

  <PropertyGroup Condition="$(MetalamaCompilerDisablePackCustomization)!='true'">
    <BeforePack>$(BeforePack); MetalamaCompilerSetAnalyzerAssembliesInPackage; MetalamaCompilerUpdateNuspec</BeforePack>
  </PropertyGroup>

</Project>