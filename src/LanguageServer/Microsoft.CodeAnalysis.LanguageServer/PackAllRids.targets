<Project>
  <!-- We are defining our own Pack target, so opt out of the SDK version. -->
  <PropertyGroup>
    <ImportNuGetBuildTasksPackTargetsFromSdk>false</ImportNuGetBuildTasksPackTargetsFromSdk>
    <_RoslynPublishReadyToRun>false</_RoslynPublishReadyToRun>
    <_RoslynPublishReadyToRun Condition="'$(Configuration)' == 'Release'">true</_RoslynPublishReadyToRun>

    <!-- 
      List of runtime identifiers that we want to publish an executable for.
      This cannot be set in the base project as it will cause issues when roslyn is built
      as a test project for SDK insertions.  The RuntimeIdentifiers property will cause the build to
      attempt to download unpublished packages, which fails (until the packages eventually get published).

      The test doesn't actually run pack, so we can instead skip setting the RuntimeIdentifiers property unless
      we're actually trying to build packages.
    -->
    <!-- 
      When building a VMR vertical, we don't need to pack everything. Just pack the passed in TargetRid or BaseOS.
      TargetRid and BaseOS are provided to roslyn via the build arguments passed in the VMR orchestrator's repo project.
      https://github.com/dotnet/dotnet/blob/main/repo-projects/roslyn.proj. For definitions of the TargetRid
      and other common properties, see https://github.com/dotnet/arcade/blob/main/Documentation/UnifiedBuild/Unified-Build-Controls.md 
    -->
    <RuntimeIdentifiers Condition="'$(TargetRid)' != ''">$(TargetRid)</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="'$(BaseOS)' != ''">$(BaseOS)</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="'$(TargetRid)' == '' and '$(BaseOS)' == ''">win-x64;win-arm64;linux-x64;linux-arm64;linux-musl-x64;linux-musl-arm64;osx-x64;osx-arm64</RuntimeIdentifiers>
  </PropertyGroup>

  <Target Name="Pack">
    <ItemGroup>
      <!-- Transform RuntimeIdentifiers property to item -->
      <RuntimeIdentifierForPack Include="$(RuntimeIdentifiers)" />
      <RuntimeIdentifierForPack Include="neutral" />

      <!-- Transform RuntimeIdentifierForPublish items to project items to pass to MSBuild task -->
      <ProjectToPublish Include="@(RuntimeIdentifierForPack->'$(MSBuildProjectFullPath)')">
          <AdditionalProperties>PackRuntimeIdentifier=%(RuntimeIdentifierForPack.Identity)</AdditionalProperties>
      </ProjectToPublish>
    </ItemGroup>

    <!--
      We have to run restore first with the PublishReadyToRun flag set to true to ensure that the correct crossgen packages get restored.
      See https://github.com/dotnet/sdk/issues/20701

      We also pass the RestoreUseStaticGraphEvaluation=false flag to workaround a long path issue when calling the restore target.
      See https://github.com/NuGet/Home/issues/11968
    -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="Restore" Properties="PublishReadyToRun=$(_RoslynPublishReadyToRun);RestoreUseStaticGraphEvaluation=false" />

    <MSBuild Projects="@(ProjectToPublish)" Targets="Pack" BuildInParallel="true" />
  </Target>

  <!--
    Make sure the _GetPackageFiles target exists, since it is always expected for design time builds, but only
    defined when ImportNuGetBuildTasksPackTargetsFromSdk is true.
  -->
  <Target Name="_GetPackageFiles" />
</Project>
