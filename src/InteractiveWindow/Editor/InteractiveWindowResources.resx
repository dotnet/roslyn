<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyInitialized" xml:space="preserve">
    <value>The interactive window has already been initialized.</value>
  </data>
  <data name="AltDownArrowHelp" xml:space="preserve">
    <value>Replace the current submission with a subsequent submission (after having previously navigated backwards).</value>
  </data>
  <data name="AltUpArrowHelp" xml:space="preserve">
    <value>Replace the current submission with a previous submission.</value>
  </data>
  <data name="ClearScreenCommandDescription" xml:space="preserve">
    <value>Clears the contents of the editor window, leaving history and execution context intact.</value>
  </data>
  <data name="CommandFailed" xml:space="preserve">
    <value>Command '{0}' failed: {1}</value>
  </data>
  <data name="CommandNamePlaceholder" xml:space="preserve">
    <value>[command-name]</value>
  </data>
  <data name="CtrlAHelp" xml:space="preserve">
    <value>First press, select the submission containing the cursor.  Second press, select all text in the window.</value>
  </data>
  <data name="CtrlAltDownArrowHelp" xml:space="preserve">
    <value>Replace the current submission with a subsequent submission beginning with the same text (after having previously navigated backwards).</value>
  </data>
  <data name="CtrlAltUpArrowHelp" xml:space="preserve">
    <value>Replace the current submission with a previous submission beginning with the same text.</value>
  </data>
  <data name="CtrlECtrlEnterHelp" xml:space="preserve">
    <value>Paste and execute the selection before any pending input in the interactive buffer.</value>
  </data>
  <data name="CtrlEnterHelp1" xml:space="preserve">
    <value>Within the current submission, evaluate the current submission.</value>
  </data>
  <data name="CtrlEnterHelp2" xml:space="preserve">
    <value>Within a previous submission, append the previous submission to the current submission.</value>
  </data>
  <data name="CtrlKCtrlEnterHelp" xml:space="preserve">
    <value>Paste the selection at the end of interactive buffer, leave caret at the end of input.</value>
  </data>
  <data name="DownArrowHelp1" xml:space="preserve">
    <value>At the end of the current submission, replace the current submission with a subsequent submission (after having previously navigated backwards).</value>
  </data>
  <data name="DownArrowHelp2" xml:space="preserve">
    <value>Elsewhere, move the cursor down one line.</value>
  </data>
  <data name="DuplicateCommand" xml:space="preserve">
    <value>A command with the name '{0}' has already been registered.</value>
  </data>
  <data name="EnterHelp" xml:space="preserve">
    <value>If the current submission appears to be complete, evaluate it.  Otherwise, insert a new line.</value>
  </data>
  <data name="EscapeHelp" xml:space="preserve">
    <value>Clear the current submission.</value>
  </data>
  <data name="HelpCommandDescription" xml:space="preserve">
    <value>Display help on specified command, or all available commands and key bindings if none specified.</value>
  </data>
  <data name="InternalError" xml:space="preserve">
    <value>An internal error has occurred in the Interactive window.  Please restart Visual Studio.</value>
  </data>
  <data name="KeyboardShortcuts" xml:space="preserve">
    <value>Keyboard shortcuts:</value>
  </data>
  <data name="MissingCommandName" xml:space="preserve">
    <value>The command of type '{0}' has no command names.</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>The interactive window has not yet been initialized.</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Parameters:</value>
  </data>
  <data name="ReplCommands" xml:space="preserve">
    <value>REPL commands:</value>
  </data>
  <data name="RequireNonUIThread" xml:space="preserve">
    <value>This method may not be called on the UI thread (to avoid hangs).</value>
  </data>
  <data name="RequireUIThread" xml:space="preserve">
    <value>This method may only be called on the UI thread.</value>
  </data>
  <data name="ResetCommandDescription" xml:space="preserve">
    <value>Reset the execution environment to the initial state, keep history.</value>
  </data>
  <data name="ResetCommandParametersDescription" xml:space="preserve">
    <value>Reset to a clean environment (only mscorlib referenced), do not run initialization script.</value>
  </data>
  <data name="ShiftEnterHelp" xml:space="preserve">
    <value>Insert a new line.</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Unknown command '{0}'</value>
  </data>
  <data name="UpArrowHelp1" xml:space="preserve">
    <value>At the end of the current submission, replace the current submission with a previous submission.</value>
  </data>
  <data name="UpArrowHelp2" xml:space="preserve">
    <value>Elsewhere, move the cursor up one line.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage:</value>
  </data>
  <data name="WaitTitle" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="WaitMessage" xml:space="preserve">
    <value>Generating Rich Text Format representation from selection.</value>
  </data>
  <data name="Backspace" xml:space="preserve">
    <value>Delete Character To Left</value>
  </data>
  <data name="BreakLine" xml:space="preserve">
    <value>Insert New Line</value>
  </data>
  <data name="Paste" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="Cut" xml:space="preserve">
    <value>Cut Selection</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete Text</value>
  </data>
  <data name="CutLine" xml:space="preserve">
    <value>Cut Line</value>
  </data>
  <data name="DeleteLine" xml:space="preserve">
    <value>Delete Line</value>
  </data>
  <data name="TypeChar" xml:space="preserve">
    <value>Insert Text</value>
  </data>
  <data name="CSVBScriptDirectives" xml:space="preserve">
    <value>Script directives:</value>
  </data>
  <data name="RefHelp" xml:space="preserve">
    <value>Add a metadata reference to specified assembly and all its dependencies, e.g. #r "myLib.dll".</value>
  </data>
  <data name="LoadHelp" xml:space="preserve">
    <value>Load specified script file and execute it, e.g. #load "myScript.csx".</value>
  </data>
</root>