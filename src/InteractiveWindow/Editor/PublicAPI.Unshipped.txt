Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand.ClassifyArguments(Microsoft.VisualStudio.Text.ITextSnapshot snapshot, Microsoft.VisualStudio.Text.Span argumentsSpan, Microsoft.VisualStudio.Text.Span spanToClassify) -> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Text.Classification.ClassificationSpan>
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand.CommandLine.get -> string
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand.Description.get -> string
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand.DetailedDescription.get -> System.Collections.Generic.IEnumerable<string>
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand.Execute(Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow window, string arguments) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.InteractiveWindow.ExecutionResult>
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand.Names.get -> System.Collections.Generic.IEnumerable<string>
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand.ParametersDescription.get -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands.Classify(Microsoft.VisualStudio.Text.SnapshotSpan span) -> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Text.Classification.ClassificationSpan>
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands.CommandPrefix.get -> string
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands.DisplayCommandHelp(Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand command) -> void
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands.DisplayCommandUsage(Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand command, System.IO.TextWriter writer, bool displayDetails) -> void
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands.DisplayHelp() -> void
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands.GetCommands() -> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand>
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands.InCommand.get -> bool
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands.TryExecuteCommand() -> System.Threading.Tasks.Task<Microsoft.VisualStudio.InteractiveWindow.ExecutionResult>
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands.this[string name].get -> Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommandsFactory
Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommandsFactory.CreateInteractiveCommands(Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow window, string prefix, System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommand> commands) -> Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands
Microsoft.VisualStudio.InteractiveWindow.Commands.InteractiveWindowCommandExtensions
Microsoft.VisualStudio.InteractiveWindow.Commands.PredefinedInteractiveCommandsContentTypes
Microsoft.VisualStudio.InteractiveWindow.ExecutionResult
Microsoft.VisualStudio.InteractiveWindow.ExecutionResult.ExecutionResult(bool isSuccessful) -> void
Microsoft.VisualStudio.InteractiveWindow.ExecutionResult.IsSuccessful.get -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator.AbortExecution() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator.CanExecuteCode(string text) -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator.CurrentWindow.get -> Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator.CurrentWindow.set -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator.ExecuteCodeAsync(string text) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.InteractiveWindow.ExecutionResult>
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator.FormatClipboard() -> string
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator.GetPrompt() -> string
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator.InitializeAsync() -> System.Threading.Tasks.Task<Microsoft.VisualStudio.InteractiveWindow.ExecutionResult>
Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator.ResetAsync(bool initialize = true) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.InteractiveWindow.ExecutionResult>
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.AddInput(string input) -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.Close() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.CurrentLanguageBuffer.get -> Microsoft.VisualStudio.Text.ITextBuffer
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.ErrorOutputWriter.get -> System.IO.TextWriter
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.Evaluator.get -> Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.FlushOutput() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.InitializeAsync() -> System.Threading.Tasks.Task<Microsoft.VisualStudio.InteractiveWindow.ExecutionResult>
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.InsertCode(string text) -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.IsInitializing.get -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.IsResetting.get -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.IsRunning.get -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.Operations.get -> Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.OutputBuffer.get -> Microsoft.VisualStudio.Text.ITextBuffer
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.OutputWriter.get -> System.IO.TextWriter
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.ReadStandardInput() -> System.IO.TextReader
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.ReadyForInput -> System.Action
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.SubmissionBufferAdded -> System.EventHandler<Microsoft.VisualStudio.InteractiveWindow.SubmissionBufferAddedEventArgs>
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.SubmitAsync(System.Collections.Generic.IEnumerable<string> inputs) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.TextView.get -> Microsoft.VisualStudio.Text.Editor.IWpfTextView
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.Write(System.Windows.UIElement element) -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.Write(string text) -> Microsoft.VisualStudio.Text.Span
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.WriteError(string text) -> Microsoft.VisualStudio.Text.Span
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.WriteErrorLine(string text) -> Microsoft.VisualStudio.Text.Span
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.WriteLine(string text) -> Microsoft.VisualStudio.Text.Span
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowEditorFactoryService
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowEditorFactoryService.CreateAndActivateBuffer(Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow window) -> Microsoft.VisualStudio.Text.ITextBuffer
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowEditorFactoryService.CreateTextView(Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow window, Microsoft.VisualStudio.Text.ITextBuffer buffer, Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet roles) -> Microsoft.VisualStudio.Text.Editor.IWpfTextView
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowFactoryService
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowFactoryService.CreateWindow(Microsoft.VisualStudio.InteractiveWindow.IInteractiveEvaluator evaluator) -> Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.Backspace() -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.BreakLine() -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.Cancel() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.ClearHistory() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.ClearView() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.Cut() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.Delete() -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.End(bool extendSelection) -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.ExecuteInput() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.HistoryNext(string search = null) -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.HistoryPrevious(string search = null) -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.HistorySearchNext() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.HistorySearchPrevious() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.Home(bool extendSelection) -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.Paste() -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.ResetAsync(bool initialize = true) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.InteractiveWindow.ExecutionResult>
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.Return() -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.SelectAll() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations.TrySubmitStandardInput() -> bool
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations2
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations2.Copy() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations2.CutLine() -> void
Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindowOperations2.DeleteLine() -> void
Microsoft.VisualStudio.InteractiveWindow.InteractiveWindowExtensions
Microsoft.VisualStudio.InteractiveWindow.InteractiveWindowOptions
Microsoft.VisualStudio.InteractiveWindow.PredefinedInteractiveContentTypes
Microsoft.VisualStudio.InteractiveWindow.PredefinedInteractiveTextViewRoles
Microsoft.VisualStudio.InteractiveWindow.SubmissionBufferAddedEventArgs
Microsoft.VisualStudio.InteractiveWindow.SubmissionBufferAddedEventArgs.NewBuffer.get -> Microsoft.VisualStudio.Text.ITextBuffer
Microsoft.VisualStudio.InteractiveWindow.SubmissionBufferAddedEventArgs.SubmissionBufferAddedEventArgs(Microsoft.VisualStudio.Text.ITextBuffer newBuffer) -> void
const Microsoft.VisualStudio.InteractiveWindow.Commands.PredefinedInteractiveCommandsContentTypes.InteractiveCommandContentTypeName = "Interactive Command" -> string
const Microsoft.VisualStudio.InteractiveWindow.PredefinedInteractiveContentTypes.InteractiveContentTypeName = "Interactive Content" -> string
const Microsoft.VisualStudio.InteractiveWindow.PredefinedInteractiveContentTypes.InteractiveOutputContentTypeName = "Interactive Output" -> string
const Microsoft.VisualStudio.InteractiveWindow.PredefinedInteractiveTextViewRoles.InteractiveTextViewRole = "REPL" -> string
static Microsoft.VisualStudio.InteractiveWindow.Commands.InteractiveWindowCommandExtensions.GetInteractiveCommands(this Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow window) -> Microsoft.VisualStudio.InteractiveWindow.Commands.IInteractiveWindowCommands
static Microsoft.VisualStudio.InteractiveWindow.InteractiveWindowExtensions.GetInteractiveWindow(this Microsoft.VisualStudio.Text.ITextBuffer buffer) -> Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow
static Microsoft.VisualStudio.InteractiveWindow.InteractiveWindowOptions.SmartUpDown.get -> Microsoft.VisualStudio.Text.Editor.EditorOptionKey<bool>
static readonly Microsoft.VisualStudio.InteractiveWindow.ExecutionResult.Failed -> System.Threading.Tasks.Task<Microsoft.VisualStudio.InteractiveWindow.ExecutionResult>
static readonly Microsoft.VisualStudio.InteractiveWindow.ExecutionResult.Failure -> Microsoft.VisualStudio.InteractiveWindow.ExecutionResult
static readonly Microsoft.VisualStudio.InteractiveWindow.ExecutionResult.Succeeded -> System.Threading.Tasks.Task<Microsoft.VisualStudio.InteractiveWindow.ExecutionResult>
static readonly Microsoft.VisualStudio.InteractiveWindow.ExecutionResult.Success -> Microsoft.VisualStudio.InteractiveWindow.ExecutionResult