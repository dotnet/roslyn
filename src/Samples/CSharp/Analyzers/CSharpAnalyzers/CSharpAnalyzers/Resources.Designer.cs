//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSharpAnalyzers {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CSharpAnalyzers.Resources", typeof(Resources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove unnecessary methods..
        /// </summary>
        public static string CodeBlockAnalyzerDescription {
            get {
                return ResourceManager.GetString("CodeBlockAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; is a non-virtual method with an empty body. Consider removing this method from your assembly..
        /// </summary>
        public static string CodeBlockAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("CodeBlockAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove unnecessary methods.
        /// </summary>
        public static string CodeBlockAnalyzerTitle {
            get {
                return ResourceManager.GetString("CodeBlockAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove unused parameters..
        /// </summary>
        public static string CodeBlockStartedAnalyzerDescription {
            get {
                return ResourceManager.GetString("CodeBlockStartedAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is unused in the method &apos;{1}&apos;..
        /// </summary>
        public static string CodeBlockStartedAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("CodeBlockStartedAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove unused parameters.
        /// </summary>
        public static string CodeBlockStartedAnalyzerTitle {
            get {
                return ResourceManager.GetString("CodeBlockStartedAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dont suppress analyzer diagnostics..
        /// </summary>
        public static string CompilationAnalyzerDescription {
            get {
                return ResourceManager.GetString("CompilationAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer diagnostic &apos;{0}&apos; is suppressed, consider removing this compilation wide suppression..
        /// </summary>
        public static string CompilationAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("CompilationAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dont suppress analyzer diagnostics.
        /// </summary>
        public static string CompilationAnalyzerTitle {
            get {
                return ResourceManager.GetString("CompilationAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not implement unsupported interface..
        /// </summary>
        public static string CompilationStartedAnalyzerDescription {
            get {
                return ResourceManager.GetString("CompilationStartedAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; implements interface &apos;{1}&apos;, which is only meant for public implementation and might change in future. You should avoid implementing this interface..
        /// </summary>
        public static string CompilationStartedAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("CompilationStartedAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not implement unsupported interface.
        /// </summary>
        public static string CompilationStartedAnalyzerTitle {
            get {
                return ResourceManager.GetString("CompilationStartedAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secure types must not implement interfaces with unsecure methods..
        /// </summary>
        public static string CompilationStartedAnalyzerWithCompilationWideAnalysisDescription {
            get {
                return ResourceManager.GetString("CompilationStartedAnalyzerWithCompilationWideAnalysisDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is a secure type as it implements interface &apos;{1}&apos;, but it also implements interface &apos;{2}&apos; which has unsecure method(s)..
        /// </summary>
        public static string CompilationStartedAnalyzerWithCompilationWideAnalysisMessageFormat {
            get {
                return ResourceManager.GetString("CompilationStartedAnalyzerWithCompilationWideAnalysisMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secure types must not implement interfaces with unsecure methods.
        /// </summary>
        public static string CompilationStartedAnalyzerWithCompilationWideAnalysisTitle {
            get {
                return ResourceManager.GetString("CompilationStartedAnalyzerWithCompilationWideAnalysisTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file declaration diagnostic count..
        /// </summary>
        public static string SemanticModelAnalyzerDescription {
            get {
                return ResourceManager.GetString("SemanticModelAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file &apos;{0}&apos; has &apos;{1}&apos; declaration diagnostic(s).
        /// </summary>
        public static string SemanticModelAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("SemanticModelAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file declaration diagnostics count.
        /// </summary>
        public static string SemanticModelAnalyzerTitle {
            get {
                return ResourceManager.GetString("SemanticModelAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not declare members with same name as containing type..
        /// </summary>
        public static string SymbolAnalyzerDescription {
            get {
                return ResourceManager.GetString("SymbolAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; has one or more members with the same name, considering renaming the type or the members..
        /// </summary>
        public static string SymbolAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("SymbolAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not declare members with same name as containing type.
        /// </summary>
        public static string SymbolAnalyzerTitle {
            get {
                return ResourceManager.GetString("SymbolAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declare explicit type for local declarations..
        /// </summary>
        public static string SyntaxNodeAnalyzerDescription {
            get {
                return ResourceManager.GetString("SyntaxNodeAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local &apos;{0}&apos; is implicitly typed. Consider specifying its type explicitly in the declaration..
        /// </summary>
        public static string SyntaxNodeAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("SyntaxNodeAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declare explicit type for local declarations.
        /// </summary>
        public static string SyntaxNodeAnalyzerTitle {
            get {
                return ResourceManager.GetString("SyntaxNodeAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suppress documentation comment diagnostics..
        /// </summary>
        public static string SyntaxTreeAnalyzerDescription {
            get {
                return ResourceManager.GetString("SyntaxTreeAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable documentation comment diagnostics on source file &apos;{0}&apos;..
        /// </summary>
        public static string SyntaxTreeAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("SyntaxTreeAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suppress documentation comment diagnostics.
        /// </summary>
        public static string SyntaxTreeAnalyzerTitle {
            get {
                return ResourceManager.GetString("SyntaxTreeAnalyzerTitle", resourceCulture);
            }
        }
    }
}
