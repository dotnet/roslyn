<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- This should really be net6.0-macos. See notes on Microsoft.macOS.Ref
         below, and https://github.com/dotnet/roslyn/issues/60078 . -->
    <TargetFramework>net6.0</TargetFramework>
    <DefineConstants>$(DefineConstants);COCOA</DefineConstants>
    <!-- https://github.com/xamarin/xamarin-macios/issues/14331 -->
    <EnableDefaultmacOSItems>false</EnableDefaultmacOSItems>

    <!-- CA1416 can go away when we target net6.0-macos -->
    <NoWarn>$(NoWarn);NU1701;CA1416;CS8601;CS8618;CS8622</NoWarn>

    <!-- NuGet -->
    <IsPackable>true</IsPackable>
    <PackageDescription>
      .NET Compiler Platform ("Roslyn") support for Cocoa-dependent editor features inside the Visual Studio for Mac editor.
    </PackageDescription>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="..\Core.Wpf\ExternalAccess\VSTypeScript\**\*.cs" LinkBase="ExternalAccess\VSTypeScript" />
    <Compile Include="..\Core.Wpf\InlineRename\**\*.cs" Exclude="..\Core.Wpf\InlineRename\UI\**\*.cs" LinkBase="InlineRename" />
    <Compile Include="..\Core.Wpf\Classification\**\*.cs" LinkBase="Classification" />
    <Compile Include="..\Core.Wpf\Diagnostics\**\*.cs" LinkBase="Diagnostics" />
    <Compile Include="..\Core.Wpf\NavigableSymbols\**\*.cs" LinkBase="NavigableSymbols" />
    <Compile Include="..\Core.Wpf\SignatureHelp\**\*.cs" LinkBase="SignatureHelp" />
    <Compile Include="..\Core.Wpf\Suggestions\**\*.cs" LinkBase="Suggestions" />
    <Compile Include="..\Core.Wpf\IDebuggerTextView2.cs" Link="IDebuggerTextView2.cs" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Features\Core\Portable\Microsoft.CodeAnalysis.Features.csproj" />
    <ProjectReference Include="..\..\Features\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Features.csproj" />
    <ProjectReference Include="..\Core\Microsoft.CodeAnalysis.EditorFeatures.csproj" />
    <ProjectReference Include="..\Text\Microsoft.CodeAnalysis.EditorFeatures.Text.csproj" />
    <ProjectReference Include="..\..\Workspaces\Core\Portable\Microsoft.CodeAnalysis.Workspaces.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.VisualStudio.Composition" Version="$(MicrosoftVisualStudioCompositionVersion)" />
    <PackageReference Include="Microsoft.VisualStudio.Imaging" Version="$(MicrosoftVisualStudioImagingVersion)" />
    <PackageReference Include="Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime" Version="$(MicrosoftVisualStudioImagingInterop140DesignTimeVersion)" />
    <PackageReference Include="Microsoft.VisualStudio.Text.Data" Version="$(MicrosoftVisualStudioTextDataVersion)" />
    <PackageReference Include="Microsoft.VisualStudio.Text.UI" Version="$(MicrosoftVisualStudioTextUIVersion)" />
    <PackageReference Include="Microsoft.VisualStudio.Language" Version="$(MicrosoftVisualStudioLanguageVersion)" />
    <PackageReference Include="Microsoft.VisualStudio.Language.Intellisense" Version="$(MicrosoftVisualStudioLanguageIntellisenseVersion)" />
    <PackageReference Include="Microsoft.VisualStudio.Language.StandardClassification" Version="$(MicrosoftVisualStudioLanguageStandardClassificationVersion)" />
    <PackageReference Include="System.ValueTuple" Version="$(SystemValueTupleVersion)" />

    <!-- This project should target net6.0-macos, but due to repeated issues
         provisioning the macos workload on Windows (generally hitting signature
         validation errors on workload dependencies), we are instead manually
         referencing what we need out of the macos SDK. -->
    <PackageDownload Include="Microsoft.macOS.Ref" Version="[$(MicrosoftmacOSRefVersion)]" />
    <Reference Include="$(NuGetPackageRoot)microsoft.macos.ref\$(MicrosoftmacOSRefVersion)\ref\net6.0\Xamarin.Mac.dll" />

    <!-- There are net6.0-macos packages. Manually referencing them for the same
         reason. There is no dependency resolution here so must manually list
         WindowsBase and PresentationCore. -->
    <PackageDownload Include="Microsoft.VisualStudio.FPF.PresentationFramework" Version="[$(MicrosoftVisualStudioFPFPresentationFrameworkVersion)]" />
    <Reference Include="$(NuGetPackageRoot)microsoft.visualstudio.fpf.presentationframework\$(MicrosoftVisualStudioFPFPresentationFrameworkVersion)\lib\net6.0-macos10.15\PresentationFramework.dll" />
    <PackageDownload Include="Microsoft.VisualStudio.FPF.PresentationCore" Version="[$(MicrosoftVisualStudioFPFPresentationCoreVersion)]" />
    <Reference Include="$(NuGetPackageRoot)microsoft.visualstudio.fpf.presentationcore\$(MicrosoftVisualStudioFPFPresentationCoreVersion)\lib\net6.0-macos10.15\PresentationCore.dll" />
    <PackageDownload Include="Microsoft.VisualStudio.FPF.WindowsBase" Version="[$(MicrosoftVisualStudioFPFWindowsBaseVersion)]" />
    <Reference Include="$(NuGetPackageRoot)microsoft.visualstudio.fpf.windowsbase\$(MicrosoftVisualStudioFPFWindowsBaseVersion)\lib\net6.0-macos10.15\WindowsBase.dll" />
    <PackageDownload Include="Microsoft.VisualStudio.Text.UI.Cocoa" Version="[$(MicrosoftVisualStudioTextUICocoaVersion)]" />
    <Reference Include="$(NuGetPackageRoot)microsoft.visualstudio.text.ui.cocoa\$(MicrosoftVisualStudioTextUICocoaVersion)\lib\net6.0-macos10.15\Microsoft.VisualStudio.Text.UI.Cocoa.dll" />
  </ItemGroup>

  <ItemGroup>
    <!--
      Mono doesn't support embedded interop types, and this package has a targets file that turns it on for all VS SDK librarys, and
      the package ends up being transitively brought in. To combat this for Mac, we can explictly include the package and exclude
      its assets so its targets file is not used.
    -->
    <PackageReference Include="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="$(MicrosoftVisualStudioSDKEmbedInteropTypesVersion)" ExcludeAssets="all" />
  </ItemGroup>
  <ItemGroup>
    <PublicAPI Include="PublicAPI.Shipped.txt" />
    <PublicAPI Include="PublicAPI.Unshipped.txt" />
  </ItemGroup>
  <ItemGroup>
    <!-- VS Mac has its own ExternalAccess.FSharp -->
    <InternalsVisibleTo Include="Microsoft.CodeAnalysis.ExternalAccess.FSharp" />
    <InternalsVisibleTo Include="Microsoft.CodeAnalysis.ExternalAccess.FSharp.UnitTests" />
  </ItemGroup>

  <!-- Turn off windows dependency check. Microsoft.VisualStudio.Language.Intellisense
       is still a net472 package with WPF dependencies. -->
  <Target Name="IgnoreWindowsReferenceError" BeforeTargets="_CheckForTransitiveWindowsDesktopDependencies">
    <ItemGroup>
      <TransitiveFrameworkReference Remove="Microsoft.WindowsDesktop.App" />
      <TransitiveFrameworkReference Remove="Microsoft.WindowsDesktop.App.WPF" />
    </ItemGroup>
  </Target>
</Project>