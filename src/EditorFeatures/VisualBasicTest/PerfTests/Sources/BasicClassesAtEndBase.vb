Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
	''' <summary>
	''' 
	''' </summary>
	<Microsoft.VisualStudio.Modeling.InheritBaseModel("2b131234-7959-458d-834f-2dc0769ce683"), Microsoft.VisualStudio.Modeling.InheritBaseModel("be20b98c-bf95-4e41-96a9-f8f38b7e0c35"), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.MetaModelGuidString, "DesignerDefinitionObjectModel")>
	Partial Public Class DesignerDefinitionObjectModel
		Inherits Microsoft.VisualStudio.Modeling.SubStore
		#Region "DesignerDefinitionObjectModel's Generated MetaClass Code"
		''' <summary>
		''' MetaModel Guid String
		''' </summary>
		Public Const MetaModelGuidString As System.String = "d6d72f16-7925-493b-b393-5b60c29c589d"
		''' <summary>
		''' MetaModel Guid
		''' </summary>
		Public Shared ReadOnly MetaModelGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.MetaModelGuidString)
		''' <summary>
		''' Default Constructor called by the IMS -- do not call directly
		''' </summary>
		Public Sub New()
			MyBase.New()
		End Sub
		''' <summary>
		''' Constructor
		''' </summary>
		Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store)
			MyBase.New(store.DefaultPartition, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.MetaModelGuid)
		End Sub
		''' <summary>
		''' Constructor
		''' </summary>
		Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition)
			MyBase.New(partition, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.MetaModelGuid)
		End Sub
		#End Region

	End Class
	#Region "DesignerDefinitionObjectModel's ResourceManager Code"
	Partial Public Class DesignerDefinitionObjectModel
'INSTANT VB NOTE: The variable resourceManager was renamed since Visual Basic does not allow class members with the same name:
		Private Shared resourceManager_Renamed As System.Resources.ResourceManager = Nothing
		''' <summary>
		''' The base name of this models resources.
		''' </summary>
		Public Const ResourceBaseName As String = "Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel"
		''' <summary>
		''' Returns the SubStore's ResourceManager. If the ResourceManager does not already exist, then it is created.
		''' </summary>
		Public Overrides ReadOnly Property ResourceManager() As System.Resources.ResourceManager
			Get
				Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.SingletonResourceManager
			End Get
		End Property
		''' <summary>
		''' A internal object used for synchronization.
		''' </summary>
'INSTANT VB NOTE: The variable internalSyncObject was renamed since Visual Basic does not allow class members with the same name:
		Private Shared internalSyncObject_Renamed As Object
		''' <summary>
		''' Gets the internal object used for synchronization.
		''' </summary>
		Private Shared ReadOnly Property InternalSyncObject() As Object
			Get
				If internalSyncObject_Renamed Is Nothing Then
					Dim o As New Object()
					System.Threading.Interlocked.CompareExchange(internalSyncObject_Renamed, o, Nothing)
				End If
				Return internalSyncObject_Renamed
			End Get
		End Property
		''' <summary>
		''' Gets the Singleton ResourceManager for this SubStore
		''' </summary>
		Public Shared ReadOnly Property SingletonResourceManager() As System.Resources.ResourceManager
			Get
				If Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.resourceManager Is Nothing Then
					SyncLock Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.InternalSyncObject
						If Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.resourceManager Is Nothing Then
							Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.resourceManager = New System.Resources.ResourceManager(ResourceBaseName, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel).Assembly)
						End If
					End SyncLock
				End If
				Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.resourceManager
			End Get
		End Property
	End Class
	#End Region
	''' <summary>
	''' Copy closure visitor filter
	''' </summary>
	<System.CLSCompliant(True), System.Serializable>
	Public NotInheritable Class ExampleACopyClosure
		Implements Microsoft.VisualStudio.Modeling.IElementVisitorFilter
		''' <summary>
		''' MetaRoles
		''' </summary>
		Private metaRolesMember As System.Collections.Generic.Dictionary(Of System.Guid, System.Guid)
		''' <summary>
		''' Constructor
		''' </summary>
		Public Sub New()
'			#Region "Initialize MetaData Table"
'			#End Region
		End Sub
		''' <summary>
		''' Called to ask the filter if a particular relationship from a source element should be included in the traversal
		''' </summary>
		''' <param name="walker">ElementWalker traversing the model</param>
		''' <param name="sourceElement">Model Element playing the source role</param>
		''' <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		''' <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		''' <param name="targetRelationship">Relationship in question</param>
		''' <returns>Yes if the relationship should be traversed</returns>
		Public Function ShouldVisitRelationship(ByVal walker As Microsoft.VisualStudio.Modeling.ElementWalker, ByVal sourceElement As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceRoleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo, ByVal metaRelationshipInfo As Microsoft.VisualStudio.Modeling.MetaRelationshipInfo, ByVal targetRelationship As Microsoft.VisualStudio.Modeling.ElementLink) As Microsoft.VisualStudio.Modeling.VisitorFilterResult
			Return If(Me.MetaRoles.ContainsKey(sourceRoleInfo.Id), Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes, Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare)
		End Function
		''' <summary>
		''' Called to ask the filter if a particular role player should be Visited during traversal
		''' </summary>
		''' <param name="walker">ElementWalker traversing the model</param>
		''' <param name="sourceElement">Model Element playing the source role</param>
		''' <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		''' <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		''' <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		''' <returns></returns>
		Public Function ShouldVisitRolePlayer(ByVal walker As Microsoft.VisualStudio.Modeling.ElementWalker, ByVal sourceElement As Microsoft.VisualStudio.Modeling.ModelElement, ByVal elementLink As Microsoft.VisualStudio.Modeling.ElementLink, ByVal targetRoleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo, ByVal targetRolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) As Microsoft.VisualStudio.Modeling.VisitorFilterResult
			For Each metaRoleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo In elementLink.MetaRelationship.MetaRoles
				If metaRoleInfo IsNot targetRoleInfo AndAlso Me.MetaRoles.ContainsKey(metaRoleInfo.Id) Then
					Return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes
				End If
			Next metaRoleInfo
			Return Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare
		End Function
		''' <summary>
		''' MetaRoles
		''' </summary>
		Private ReadOnly Property MetaRoles() As System.Collections.Generic.Dictionary(Of System.Guid, System.Guid)
			Get
				If Me.metaRolesMember Is Nothing Then
					Me.metaRolesMember = New System.Collections.Generic.Dictionary(Of System.Guid, System.Guid)()
				End If
				Return Me.metaRolesMember
			End Get
		End Property

	End Class
	''' <summary>
	''' Remove closure visitor filter
	''' </summary>
	<System.CLSCompliant(True), System.Serializable>
	Public NotInheritable Class ExampleARemoveClosure
		Implements Microsoft.VisualStudio.Modeling.IElementVisitorFilter
		''' <summary>
		''' MetaRoles
		''' </summary>
		Private metaRolesMember As System.Collections.Generic.Dictionary(Of System.Guid, System.Guid)
		''' <summary>
		''' Constructor
		''' </summary>
		Public Sub New()
'			#Region "Initialize MetaData Table"
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.NotationMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.NotationMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.ExplorerMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.ExplorerMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.PropertiesWindowMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.PropertiesWindowMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.ValidationBehaviorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.ValidationBehaviorMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.DiagramsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.DiagramsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.ShapesMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.ShapesMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.ConnectorsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.ConnectorsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.ToolboxMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.ToolboxMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ItemsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ItemsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.DiagramMapsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.DiagramMapsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.ShapeMapsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.ShapeMapsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.TextMapsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.TextMapsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.FillColorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.FillColorMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.RootsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.RootsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.ChildCollectionsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.ChildCollectionsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertySetsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertySetsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.RenderingMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.RenderingMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.RenderingMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.RenderingMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.ChildNodesMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.ChildNodesMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.DefaultRenderingsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.DefaultRenderingsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.ConnectorMapsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.ConnectorMapsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.TextMapsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.TextMapsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.IconMapsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.IconMapsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.DecoratorsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.DecoratorsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlineColorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlineColorMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.IconMapsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.IconMapsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.SourceMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.SourceMapMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.TargetMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.TargetMapMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.TargetMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.TargetMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.SourceMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.SourceMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ValueExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ValueExpressionMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.RolePropertiesMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.RolePropertiesMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.StringToDisplayMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.StringToDisplayMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MelCollectionExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MelCollectionExpressionMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.DashStyleMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.DashStyleMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ColorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ColorMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ValueExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ValueExpressionMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.DecoratorsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.DecoratorsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.ChoicesMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.ChoicesMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconDecoratorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconDecoratorMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.VisibilityExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.VisibilityExpressionMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.CompartmentMapsMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.CompartmentMapsMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.ValueExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.ValueExpressionMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentFillColorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentFillColorMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.TitleFillColorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.TitleFillColorMetaRoleGuid)
			MetaRoles.Add(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuid)
'			#End Region
		End Sub
		''' <summary>
		''' Called to ask the filter if a particular relationship from a source element should be included in the traversal
		''' </summary>
		''' <param name="walker">ElementWalker that is traversing the model</param>
		''' <param name="sourceElement">Model Element playing the source role</param>
		''' <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		''' <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		''' <param name="targetRelationship">Relationship in question</param>
		''' <returns>Yes if the relationship should be traversed</returns>
		Public Function ShouldVisitRelationship(ByVal walker As Microsoft.VisualStudio.Modeling.ElementWalker, ByVal sourceElement As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceRoleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo, ByVal metaRelationshipInfo As Microsoft.VisualStudio.Modeling.MetaRelationshipInfo, ByVal targetRelationship As Microsoft.VisualStudio.Modeling.ElementLink) As Microsoft.VisualStudio.Modeling.VisitorFilterResult
			Return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes
		End Function
		''' <summary>
		''' Called to ask the filter if a particular role player should be Visited during traversal
		''' </summary>
		''' <param name="walker">ElementWalker that is traversing the model</param>
		''' <param name="sourceElement">Model Element playing the source role</param>
		''' <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		''' <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		''' <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		''' <returns></returns>
		Public Function ShouldVisitRolePlayer(ByVal walker As Microsoft.VisualStudio.Modeling.ElementWalker, ByVal sourceElement As Microsoft.VisualStudio.Modeling.ModelElement, ByVal elementLink As Microsoft.VisualStudio.Modeling.ElementLink, ByVal targetRoleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo, ByVal targetRolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) As Microsoft.VisualStudio.Modeling.VisitorFilterResult
			Return If(Me.MetaRoles.ContainsKey(targetRoleInfo.Id), Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes, Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare)
		End Function
		''' <summary>
		''' MetaRoles
		''' </summary>
		Private ReadOnly Property MetaRoles() As System.Collections.Generic.Dictionary(Of System.Guid, System.Guid)
			Get
				If Me.metaRolesMember Is Nothing Then
					Me.metaRolesMember = New System.Collections.Generic.Dictionary(Of System.Guid, System.Guid)()
				End If
				Return Me.metaRolesMember
			End Get
		End Property

	End Class
	#Region "DesignerDefinitionObjectModel's Generated Closure Code"
	Partial Public Class DesignerDefinitionObjectModel
		''' <summary>
		''' CopyClosure cache
		''' </summary>
		Private Shared copyClosureMember As Microsoft.VisualStudio.Modeling.IElementVisitorFilter
		''' <summary>
		''' RemoveClosure cache
		''' </summary>
		Private Shared removeClosureMember As Microsoft.VisualStudio.Modeling.IElementVisitorFilter
		''' <summary>
		''' Returns an IElementVisitorFilter that corresponds to the ClosureType.
		''' </summary>
		''' <param name="type">closure type</param>
		''' <param name="rootElements">collection of root elements</param>
		''' <returns>IElementVisitorFilter or null</returns>
		Public Overrides Function GetClosureFilter(ByVal type As Microsoft.VisualStudio.Modeling.ClosureType, ByVal rootElements As System.Collections.ICollection) As Microsoft.VisualStudio.Modeling.IElementVisitorFilter
			Select Case type
				Case Microsoft.VisualStudio.Modeling.ClosureType.CopyClosure
					Return DesignerDefinitionObjectModel.CopyClosure
				Case Microsoft.VisualStudio.Modeling.ClosureType.RemoveClosure
					Return DesignerDefinitionObjectModel.RemoveClosure
			End Select
			Return MyBase.GetClosureFilter(type, rootElements)
		End Function
		''' <summary>
		''' CopyClosure cache
		''' </summary>
		Private Shared ReadOnly Property CopyClosure() As Microsoft.VisualStudio.Modeling.IElementVisitorFilter
			Get
				If DesignerDefinitionObjectModel.copyClosureMember Is Nothing Then
					DesignerDefinitionObjectModel.copyClosureMember = New ExampleACopyClosure()
				End If
				Return DesignerDefinitionObjectModel.copyClosureMember
			End Get
		End Property
		''' <summary>
		''' RemoveClosure cache
		''' </summary>
		Private Shared ReadOnly Property RemoveClosure() As Microsoft.VisualStudio.Modeling.IElementVisitorFilter
			Get
				If DesignerDefinitionObjectModel.removeClosureMember Is Nothing Then
					DesignerDefinitionObjectModel.removeClosureMember = New ExampleARemoveClosure()
				End If
				Return DesignerDefinitionObjectModel.removeClosureMember
			End Get
		End Property
	End Class
	#End Region
	''' <summary>
	''' 
	''' </summary>
	Partial Public Class DesignerDefinitionObjectModel
		Inherits Microsoft.VisualStudio.Modeling.SubStore
		#Region "DesignerDefinitionObjectModel's AllGeneratedMetaModelTypes Code"
		''' <summary>
		''' Virtual method that returns a collection of all types for metamodel 
		''' </summary>
		Protected NotOverridable Overrides Function AllGeneratedMetaModelTypes() As System.Type()
			Dim typeArray() As System.Type = { GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItemElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNodeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNodeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetailsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetailsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExpandCollapse), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExpandCollapseElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetailsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRenderingElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRenderingElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShapeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShapeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShapeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartmentElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotationElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorerElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindowElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehaviorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapesElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectorsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolboxElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItemsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMapsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagramElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModelElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMapsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMapsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecoratorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShapeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRootsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClassElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollectionsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortPropertyElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSetElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClassElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptionsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplayElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroupsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroupsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroupsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRenderingElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRenderingElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodesElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRenderingElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartmentsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMapsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMapsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClassElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnectorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMapsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecoratorsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShapeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartmentElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnectorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecoratorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMapsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMapElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTargetElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShapeElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEndElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValuePropertyElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRoleElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRolePropertiesElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplayElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClassElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClassElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClassElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModelElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyleElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecoratorsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteralElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIconElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValuePropertyElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMapsElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartmentElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpressionElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColorElementFactoryCreator), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation), GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationElementFactoryCreator) }
			Return typeArray
		End Function
		#End Region
	End Class
	''' <summary>
	''' 
	''' </summary>
	Partial Public Class DesignerDefinitionObjectModel
		Inherits Microsoft.VisualStudio.Modeling.SubStore
		#Region "DesignerDefinitionObjectModel's GeneratedReflectedMetaAttributes Code"
		''' <summary>
		''' Virtual method that returns a collection of all fields for all types in metamodel DesignerDefinitionObjectModel
		''' </summary>
		Protected NotOverridable Overrides Function GeneratedReflectedMetaAttributes() As Microsoft.VisualStudio.Modeling.MetaFieldInfo()
			Dim typeArray() As Microsoft.VisualStudio.Modeling.MetaFieldInfo = { New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition), "Namespace", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.NamespaceMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DesignerDefinitionNamespaceFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition), "DslName", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DslNameMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DesignerDefinitionDslNameFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition), "CompanyName", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.CompanyNameMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DesignerDefinitionCompanyNameFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition), "ProductName", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.ProductNameMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DesignerDefinitionProductNameFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition), "PackageName", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.PackageNameMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DesignerDefinitionPackageNameFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition), "FileExtension", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.FileExtensionMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DesignerDefinitionFileExtensionFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition), "ProductVersion", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.ProductVersionMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DesignerDefinitionProductVersionFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram), "MayUseAsRoot", Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.MayUseAsRootMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.DiagramMayUseAsRootFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem), "CaptionId", Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.CaptionIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemCaptionIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem), "IconId", Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.IconIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemIconIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem), "Order", Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.OrderMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemOrderFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem), "ContextSensitiveHelpId", Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ContextSensitiveHelpIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemContextSensitiveHelpIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode), "StructureAsXmlFromHere", Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.StructureAsXmlFromHereMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.ExplorerNodeStructureAsXmlFromHereFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode), "UseDefaultRendering", Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.UseDefaultRenderingMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.ElementNodeUseDefaultRenderingFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode), "SortOrder", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.SortOrderMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.CollectionNodeSortOrderFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode), "RenderCollectionNode", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.RenderCollectionNodeMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.CollectionNodeRenderCollectionNodeFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails), "Variability", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.VariabilityMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.DiagramElementDetailsVariabilityFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails), "Color", Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.ColorMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.ColorDetailsColorFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator), "Position", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.PositionMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.ShapeDecoratorPositionFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText), "DefaultTextId", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.DefaultTextIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.ShapeTextDefaultTextIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon), "IconId", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.IconIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.ShapeIconIconIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator), "Position", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.PositionMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.ConnectorDecoratorPositionFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText), "DefaultTextId", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.DefaultTextIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.ConnectorTextDefaultTextIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon), "IconId", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.IconIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.ConnectorIconIconIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails), "DashStyle", Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.DashStyleMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.DashStyleDetailsDashStyleFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering), "IconId", Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.IconIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.NodeRenderingIconIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering), "AppendClassNameToCaption", Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.AppendClassNameToCaptionMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.ClassNodeRenderingAppendClassNameToCaptionFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering), "CaptionId", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.CaptionIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.CollectionNodeRenderingCaptionIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape), "InitialWidth", Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.InitialWidthMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.OutlinedShapeInitialWidthFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape), "InitialHeight", Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.InitialHeightMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.OutlinedShapeInitialHeightFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape), "Geometry", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.GeometryMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.CompartmentShapeGeometryFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape), "IsSingleCompartmentHeaderVisible", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.IsSingleCompartmentHeaderVisibleMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape), "Geometry", Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.GeometryMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.GeometryShapeGeometryFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape), "Path", Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.PathMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.PathShapePathFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape), "ImageId", Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.ImageIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.ImageShapeImageIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment), "CaptionId", Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.CaptionIdMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.CompartmentCaptionIdFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd), "ArrowStyle", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.ArrowStyleMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.ConnectorEndArrowStyleFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel), "FileName", Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.FileNameMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.ObjectModelFileNameFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression), "ModelXPath", Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.ModelXPathMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.XPathValueExpressionModelXPathFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression), "ModelXPath", Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.ModelXPathMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.XPathMelCollectionExpressionModelXPathFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty), "ReadWriteState", Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.ReadWriteStateMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.RolePropertyReadWriteStateFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation), "Open", Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.OpenMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationOpenFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation), "Save", Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.SaveMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationSaveFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation), "Menu", Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.MenuMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationMenuFieldHandler)), New Microsoft.VisualStudio.Modeling.MetaFieldInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation), "Custom", Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.CustomMetaAttributeGuid, GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationCustomFieldHandler)) }
			Return typeArray
		End Function
		#End Region
	End Class
	''' <summary>
	''' 
	''' </summary>
	Partial Public Class DesignerDefinitionObjectModel
		Inherits Microsoft.VisualStudio.Modeling.SubStore
		#Region "DesignerDefinitionObjectModel's GeneratedReflectedMetaRoleAttributes Code"
		''' <summary>
		''' Virtual method that returns a collection of all fields for all types in metamodel DesignerDefinitionObjectModel
		''' </summary>
		Protected NotOverridable Overrides Function GeneratedReflectedMetaRoles() As Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo()
			Dim typeArray() As Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo = { New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation), "Notation", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.NotationMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation), "DesignerDefinition", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.DesignerDefinitionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer), "Explorer", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.ExplorerMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer), "DesignerDefinition", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.DesignerDefinitionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow), "PropertiesWindow", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.PropertiesWindowMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow), "DesignerDefinition", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.DesignerDefinitionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior), "ValidationBehavior", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.ValidationBehaviorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior), "DesignerDefinition", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.DesignerDefinitionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams), "Diagrams", Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.DiagramsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams), "Notation", Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.NotationMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes), "Shapes", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.ShapesMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes), "Diagram", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.DiagramMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors), "Connectors", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.ConnectorsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors), "Diagram", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.DiagramMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox), "Toolbox", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.ToolboxMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox), "Diagram", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.DiagramMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems), "Items", Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ItemsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems), "Toolbox", Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ToolboxMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps), "DiagramMaps", Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.DiagramMapsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps), "Notation", Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.NotationMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram), "Diagram", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram), "DiagramMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel), "ObjectModels", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.ObjectModelsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel), "DesignerDefinition", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.DesignerDefinitionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps), "ShapeMaps", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.ShapeMapsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps), "DiagramMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.DiagramMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps), "TextMaps", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.TextMapsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps), "ShapeMapClass", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.ShapeMapClassMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator), "TextDecorator", Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextDecoratorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator), "TextMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor), "FillColor", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.FillColorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor), "Shape", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.ShapeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape), "Shape", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape), "ShapeMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots), "Roots", Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.RootsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots), "Explorer", Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.ExplorerMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass), "Class", Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass), "ClassNode", Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassNodeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections), "ChildCollections", Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.ChildCollectionsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections), "NodeType", Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.NodeTypeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty), "SortProperty", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.SortPropertyMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty), "CollectionNode", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.CollectionNodeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet), "PropertySets", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertySetsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet), "PropertiesWindow", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertiesWindowMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass), "Class", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.ClassMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass), "PropertiesSet", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.PropertiesSetMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions), "ValuePropertiesToExclude", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.ValuePropertiesToExcludeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions), "PropertiesSet", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.PropertiesSetMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay), "Role", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RoleMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay), "RoleProperties", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RolePropertiesMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups), "ContextMenuGroups", Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.ContextMenuGroupsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups), "ValidationBehavior", Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.ValidationBehaviorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups), "LoadGroups", Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.LoadGroupsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups), "ValidationBehavior", Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.ValidationBehaviorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups), "SaveGroups", Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.SaveGroupsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups), "ValidationBehavior", Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.ValidationBehaviorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering), "Rendering", Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.RenderingMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering), "ClassNode", Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.ClassNodeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering), "Rendering", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.RenderingMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering), "CollectionNode", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.CollectionNodeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes), "ChildNodes", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.ChildNodesMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes), "CollectionNode", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.CollectionNodeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering), "DefaultRenderings", Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.DefaultRenderingsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering), "Explorer", Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.ExplorerMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments), "Compartments", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments), "CompartmentShape", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentShapeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps), "ConnectorMaps", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.ConnectorMapsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps), "DiagramMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.DiagramMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps), "TextMaps", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.TextMapsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps), "ConnectorMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.ConnectorMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass), "Class", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ClassMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass), "ConnectorMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ConnectorMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector), "Connector", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector), "ConnectorMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps), "IconMaps", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.IconMapsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps), "ShapeMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.ShapeMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators), "Decorators", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.DecoratorsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators), "Connector", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.ConnectorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape), "Shape", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape), "ShapeTool", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeToolMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment), "TextCompartment", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.TextCompartmentMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment), "CompartmentTextTool", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.CompartmentTextToolMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector), "Connector", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector), "ConnectorTool", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorToolMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor), "OutlineColor", Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlineColorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor), "OutlinedShape", Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlinedShapeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator), "TextDecorator", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.TextDecoratorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator), "ConnectorTextMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.ConnectorTextMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps), "IconMaps", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.IconMapsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps), "ConnectorMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.ConnectorMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap), "SourceMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.SourceMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap), "ConnectorMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.ConnectorMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap), "TargetMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.TargetMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap), "ConnectorMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.ConnectorMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget), "Target", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.TargetMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget), "Connector", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.ConnectorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape), "PermittedShapes", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.PermittedShapesMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape), "ConnectorEnd", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.ConnectorEndMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd), "Source", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.SourceMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd), "Connector", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.ConnectorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty), "ValueProperty", Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ValuePropertyMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty), "ModelValuePropertyExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ModelValuePropertyExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole), "Role", Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.RoleMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole), "ModelRoleExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.ModelRoleExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression), "MelCollectionExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression), "CollectionNode", Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.CollectionNodeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression), "ModelNavigationExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression), "SourceMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.SourceMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression), "ModelNavigationExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression), "TargetMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.TargetMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression), "ValueExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ValueExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression), "ShapeTextMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ShapeTextMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties), "RoleProperties", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.RolePropertiesMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties), "PropertySet", Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.PropertySetMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay), "StringToDisplay", Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.StringToDisplayMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay), "RoleProperty", Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.RolePropertyMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass), "Class", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.ClassMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass), "DiagramMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.DiagramMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression), "MelCollectionExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MelCollectionExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression), "ShapeMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.ShapeMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass), "Class", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ClassMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass), "ShapeMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ShapeMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass), "Class", Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass), "ClassNodeRendering", Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassNodeRenderingMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel), "Model", Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ModelMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel), "ObjectModel", Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ObjectModelMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle), "DashStyle", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.DashStyleMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle), "Connector", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.ConnectorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor), "Color", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ColorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor), "Connector", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ConnectorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression), "ValueExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ValueExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression), "ConnectorTextMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ConnectorTextMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators), "Decorators", Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.DecoratorsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators), "Shape", Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.ShapeMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral), "Choices", Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.ChoicesMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral), "EnumerationLiteralChoice", Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.EnumerationLiteralChoiceMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon), "IconDecorator", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconDecoratorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon), "IconMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty), "ValueProperty", Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty), "ValuePropertyBooleanExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyBooleanExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression), "VisibilityExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.VisibilityExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression), "ShapeIconMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.ShapeIconMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps), "CompartmentMaps", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.CompartmentMapsMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps), "ShapeMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.ShapeMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment), "Compartment", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment), "CompartmentMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression), "MelCollectionExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression), "CompartmentMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.CompartmentMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression), "ValueExpression", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.ValueExpressionMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression), "CompartmentMap", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.CompartmentMapMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor), "CompartmentFillColor", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentFillColorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor), "Compartment", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor), "TitleFillColor", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.TitleFillColorMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor), "Compartment", Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.CompartmentMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation), "Validation", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuid), New Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation), "DesignerDefinition", Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.DesignerDefinitionMetaRoleGuid) }
			Return typeArray
		End Function
		#End Region
	End Class
End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
	''' <summary>
	''' 
	''' </summary>
	<Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.MetaClassGuidString, "DesignerDefinition")>
	Partial Public Class DesignerDefinition
		Inherits Microsoft.VisualStudio.Modeling.NamedElement
		#Region "DesignerDefinition's Generated MetaClass Code"
		''' <summary>
		''' MetaClass Guid String
		''' </summary>
		Public Shadows Const MetaClassGuidString As System.String = "2ff5dcec-a1e3-45ce-aae1-dc61407dc27d"
		''' <summary>
		''' MetaClass Guid
		''' </summary>
		Public Shared ReadOnly Shadows MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.MetaClassGuidString)
		#End Region

		#Region "Namespace's Generated  Field Code"
		#Region "Namespace's Generated  MetaAttribute Code"
		''' <summary>
		''' MetaAttribute Guid String
		''' </summary>
		Public Const NamespaceMetaAttributeGuidString As System.String = "04772add-693d-47ad-b8dd-994a145091b2"

		''' <summary>
		''' MetaAttribute Guid
		''' </summary>
		Public Shared ReadOnly NamespaceMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.NamespaceMetaAttributeGuidString)
		#End Region

		#Region "Namespace's Generated Property Code"

		Private namespacePropertyStorage As System.String = String.Empty

		''' <summary>
		''' 
		''' </summary>
		<Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(DesignerDefinitionNamespaceFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.NamespaceMetaAttributeGuidString, "DesignerDefinition.Namespace")>
		Public Property [Namespace]() As System.String
			Get
				Return namespacePropertyStorage
			End Get

			Set(ByVal value As System.String)
				designerDefinitionNamespaceFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
			End Set
		End Property
		#End Region

		#Region "DesignerDefinitionNamespaceFieldHandler Generated Code"
		''' <summary>
		''' FieldHandler for DesignerDefinition.Namespace field
		''' </summary>
'INSTANT VB NOTE: The variable designerDefinitionNamespaceFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
		Private Shared designerDefinitionNamespaceFieldHandler_Renamed As DesignerDefinitionNamespaceFieldHandler = DesignerDefinitionNamespaceFieldHandler.Instance

		''' <summary>
		''' Implement the field handler for DesignerDefinition.Namespace
		''' </summary>
		<System.CLSCompliant(False)>
		Public NotInheritable Partial Class DesignerDefinitionNamespaceFieldHandler
			Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition,System.String)
			''' <summary>
			''' Constructor
			''' </summary>
			Private Sub New()
			End Sub

			''' <summary>
			''' Returns the singleton instance of the DesignerDefinition.Namespace field handler
			''' </summary>
			''' <value>DesignerDefinitionNamespaceFieldHandler</value>
			Public Shared ReadOnly Property Instance() As DesignerDefinitionNamespaceFieldHandler
				Get
					If Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionNamespaceFieldHandler IsNot Nothing Then
						Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionNamespaceFieldHandler
					Else
						' The static constructor in DesignerDefinition will assign this value to
						' Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionNamespaceFieldHandler, so just instantiate one and return it
						Return New DesignerDefinitionNamespaceFieldHandler()
					End If
				End Get
			End Property

			''' <summary>
			''' Returns the meta attribute id for the DesignerDefinition.Namespace field handler
			''' </summary>
			''' <value>Guid</value>
			Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
				Get
					Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.NamespaceMetaAttributeGuid
				End Get
			End Property
			''' <summary>
			''' Gets the value of the attribute as it exists in the element
			''' </summary>
			''' <param name="element">the DesignerDefinition</param>
			Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition) As System.String
				Return element.namespacePropertyStorage
			End Function

			''' <summary>
			''' Sets the value into the element
			''' </summary>
			''' <param name="element">the element</param>
			''' <param name="value">new value</param>
			''' <param name="commandFactory">the command factory for this change</param>
			''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			''' <param name="oldValue">the old value before the change</param>
			''' <returns>true if the value actually changed</returns>
			Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
				oldValue = element.namespacePropertyStorage
				If allowDuplicates OrElse oldValue <> value Then
					OnValueChanging(element, oldValue, value)
					element.namespacePropertyStorage = value
					OnValueChanged(element, oldValue, value)
					Return True
				End If
				Return False
			End Function

		End Class
		#End Region
		#End Region

		#Region "DslName's Generated  Field Code"
		#Region "DslName's Generated  MetaAttribute Code"
		''' <summary>
		''' MetaAttribute Guid String
		''' </summary>
		Public Const DslNameMetaAttributeGuidString As System.String = "06fd2c60-d69d-41bd-b609-9febe42ede1e"

		''' <summary>
		''' MetaAttribute Guid
		''' </summary>
		Public Shared ReadOnly DslNameMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DslNameMetaAttributeGuidString)
		#End Region

		#Region "DslName's Generated Property Code"

		Private dslNamePropertyStorage As System.String = String.Empty

		''' <summary>
		''' 
		''' </summary>
		<Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(DesignerDefinitionDslNameFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DslNameMetaAttributeGuidString, "DesignerDefinition.DslName")>
		Public Property DslName() As System.String
			Get
				Return dslNamePropertyStorage
			End Get

			Set(ByVal value As System.String)
				designerDefinitionDslNameFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
			End Set
		End Property
		#End Region

		#Region "DesignerDefinitionDslNameFieldHandler Generated Code"
		''' <summary>
		''' FieldHandler for DesignerDefinition.DslName field
		''' </summary>
'INSTANT VB NOTE: The variable designerDefinitionDslNameFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
		Private Shared designerDefinitionDslNameFieldHandler_Renamed As DesignerDefinitionDslNameFieldHandler = DesignerDefinitionDslNameFieldHandler.Instance

		''' <summary>
		''' Implement the field handler for DesignerDefinition.DslName
		''' </summary>
		<System.CLSCompliant(False)>
		Public NotInheritable Partial Class DesignerDefinitionDslNameFieldHandler
			Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition,System.String)
			''' <summary>
			''' Constructor
			''' </summary>
			Private Sub New()
			End Sub

			''' <summary>
			''' Returns the singleton instance of the DesignerDefinition.DslName field handler
			''' </summary>
			''' <value>DesignerDefinitionDslNameFieldHandler</value>
			Public Shared ReadOnly Property Instance() As DesignerDefinitionDslNameFieldHandler
				Get
					If Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionDslNameFieldHandler IsNot Nothing Then
						Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionDslNameFieldHandler
					Else
						' The static constructor in DesignerDefinition will assign this value to
						' Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionDslNameFieldHandler, so just instantiate one and return it
						Return New DesignerDefinitionDslNameFieldHandler()
					End If
				End Get
			End Property

			''' <summary>
			''' Returns the meta attribute id for the DesignerDefinition.DslName field handler
			''' </summary>
			''' <value>Guid</value>
			Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
				Get
					Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.DslNameMetaAttributeGuid
				End Get
			End Property
			''' <summary>
			''' Gets the value of the attribute as it exists in the element
			''' </summary>
			''' <param name="element">the DesignerDefinition</param>
			Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition) As System.String
				Return element.dslNamePropertyStorage
			End Function

			''' <summary>
			''' Sets the value into the element
			''' </summary>
			''' <param name="element">the element</param>
			''' <param name="value">new value</param>
			''' <param name="commandFactory">the command factory for this change</param>
			''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			''' <param name="oldValue">the old value before the change</param>
			''' <returns>true if the value actually changed</returns>
			Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
				oldValue = element.dslNamePropertyStorage
				If allowDuplicates OrElse oldValue <> value Then
					OnValueChanging(element, oldValue, value)
					element.dslNamePropertyStorage = value
					OnValueChanged(element, oldValue, value)
					Return True
				End If
				Return False
			End Function

		End Class
		#End Region
		#End Region

		#Region "CompanyName's Generated  Field Code"
		#Region "CompanyName's Generated  MetaAttribute Code"
		''' <summary>
		''' MetaAttribute Guid String
		''' </summary>
		Public Const CompanyNameMetaAttributeGuidString As System.String = "c40a207c-7f79-4c43-9de6-b6375071a603"

		''' <summary>
		''' MetaAttribute Guid
		''' </summary>
		Public Shared ReadOnly CompanyNameMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.CompanyNameMetaAttributeGuidString)
		#End Region

		#Region "CompanyName's Generated Property Code"

		Private companyNamePropertyStorage As System.String = String.Empty

		''' <summary>
		''' 
		''' </summary>
		<Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(DesignerDefinitionCompanyNameFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.CompanyNameMetaAttributeGuidString, "DesignerDefinition.CompanyName")>
		Public Property CompanyName() As System.String
			Get
				Return companyNamePropertyStorage
			End Get

			Set(ByVal value As System.String)
				designerDefinitionCompanyNameFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
			End Set
		End Property
		#End Region

		#Region "DesignerDefinitionCompanyNameFieldHandler Generated Code"
		''' <summary>
		''' FieldHandler for DesignerDefinition.CompanyName field
		''' </summary>
'INSTANT VB NOTE: The variable designerDefinitionCompanyNameFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
		Private Shared designerDefinitionCompanyNameFieldHandler_Renamed As DesignerDefinitionCompanyNameFieldHandler = DesignerDefinitionCompanyNameFieldHandler.Instance

		''' <summary>
		''' Implement the field handler for DesignerDefinition.CompanyName
		''' </summary>
		<System.CLSCompliant(False)>
		Public NotInheritable Partial Class DesignerDefinitionCompanyNameFieldHandler
			Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition,System.String)
			''' <summary>
			''' Constructor
			''' </summary>
			Private Sub New()
			End Sub

			''' <summary>
			''' Returns the singleton instance of the DesignerDefinition.CompanyName field handler
			''' </summary>
			''' <value>DesignerDefinitionCompanyNameFieldHandler</value>
			Public Shared ReadOnly Property Instance() As DesignerDefinitionCompanyNameFieldHandler
				Get
					If Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionCompanyNameFieldHandler IsNot Nothing Then
						Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionCompanyNameFieldHandler
					Else
						' The static constructor in DesignerDefinition will assign this value to
						' Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionCompanyNameFieldHandler, so just instantiate one and return it
						Return New DesignerDefinitionCompanyNameFieldHandler()
					End If
				End Get
			End Property

			''' <summary>
			''' Returns the meta attribute id for the DesignerDefinition.CompanyName field handler
			''' </summary>
			''' <value>Guid</value>
			Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
				Get
					Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.CompanyNameMetaAttributeGuid
				End Get
			End Property
			''' <summary>
			''' Gets the value of the attribute as it exists in the element
			''' </summary>
			''' <param name="element">the DesignerDefinition</param>
			Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition) As System.String
				Return element.companyNamePropertyStorage
			End Function

			''' <summary>
			''' Sets the value into the element
			''' </summary>
			''' <param name="element">the element</param>
			''' <param name="value">new value</param>
			''' <param name="commandFactory">the command factory for this change</param>
			''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			''' <param name="oldValue">the old value before the change</param>
			''' <returns>true if the value actually changed</returns>
			Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
				oldValue = element.companyNamePropertyStorage
				If allowDuplicates OrElse oldValue <> value Then
					OnValueChanging(element, oldValue, value)
					element.companyNamePropertyStorage = value
					OnValueChanged(element, oldValue, value)
					Return True
				End If
				Return False
			End Function

		End Class
		#End Region
		#End Region

		#Region "ProductName's Generated  Field Code"
		#Region "ProductName's Generated  MetaAttribute Code"
		''' <summary>
		''' MetaAttribute Guid String
		''' </summary>
		Public Const ProductNameMetaAttributeGuidString As System.String = "5154d9e9-9fb4-453f-802f-3f62e38f5461"

		''' <summary>
		''' MetaAttribute Guid
		''' </summary>
		Public Shared ReadOnly ProductNameMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.ProductNameMetaAttributeGuidString)
		#End Region

		#Region "ProductName's Generated Property Code"

		Private productNamePropertyStorage As System.String = String.Empty

		''' <summary>
		''' 
		''' </summary>
		<Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(DesignerDefinitionProductNameFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.ProductNameMetaAttributeGuidString, "DesignerDefinition.ProductName")>
		Public Property ProductName() As System.String
			Get
				Return productNamePropertyStorage
			End Get

			Set(ByVal value As System.String)
				designerDefinitionProductNameFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
			End Set
		End Property
		#End Region

		#Region "DesignerDefinitionProductNameFieldHandler Generated Code"
		''' <summary>
		''' FieldHandler for DesignerDefinition.ProductName field
		''' </summary>
'INSTANT VB NOTE: The variable designerDefinitionProductNameFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
		Private Shared designerDefinitionProductNameFieldHandler_Renamed As DesignerDefinitionProductNameFieldHandler = DesignerDefinitionProductNameFieldHandler.Instance

		''' <summary>
		''' Implement the field handler for DesignerDefinition.ProductName
		''' </summary>
		<System.CLSCompliant(False)>
		Public NotInheritable Partial Class DesignerDefinitionProductNameFieldHandler
			Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition,System.String)
			''' <summary>
			''' Constructor
			''' </summary>
			Private Sub New()
			End Sub

			''' <summary>
			''' Returns the singleton instance of the DesignerDefinition.ProductName field handler
			''' </summary>
			''' <value>DesignerDefinitionProductNameFieldHandler</value>
			Public Shared ReadOnly Property Instance() As DesignerDefinitionProductNameFieldHandler
				Get
					If Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionProductNameFieldHandler IsNot Nothing Then
						Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionProductNameFieldHandler
					Else
						' The static constructor in DesignerDefinition will assign this value to
						' Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionProductNameFieldHandler, so just instantiate one and return it
						Return New DesignerDefinitionProductNameFieldHandler()
					End If
				End Get
			End Property

			''' <summary>
			''' Returns the meta attribute id for the DesignerDefinition.ProductName field handler
			''' </summary>
			''' <value>Guid</value>
			Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
				Get
					Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.ProductNameMetaAttributeGuid
				End Get
			End Property
			''' <summary>
			''' Gets the value of the attribute as it exists in the element
			''' </summary>
			''' <param name="element">the DesignerDefinition</param>
			Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition) As System.String
				Return element.productNamePropertyStorage
			End Function

			''' <summary>
			''' Sets the value into the element
			''' </summary>
			''' <param name="element">the element</param>
			''' <param name="value">new value</param>
			''' <param name="commandFactory">the command factory for this change</param>
			''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			''' <param name="oldValue">the old value before the change</param>
			''' <returns>true if the value actually changed</returns>
			Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
				oldValue = element.productNamePropertyStorage
				If allowDuplicates OrElse oldValue <> value Then
					OnValueChanging(element, oldValue, value)
					element.productNamePropertyStorage = value
					OnValueChanged(element, oldValue, value)
					Return True
				End If
				Return False
			End Function

		End Class
		#End Region
		#End Region

		#Region "PackageName's Generated  Field Code"
		#Region "PackageName's Generated  MetaAttribute Code"
		''' <summary>
		''' MetaAttribute Guid String
		''' </summary>
		Public Const PackageNameMetaAttributeGuidString As System.String = "5b72fb5b-07f6-4573-aa4e-df0b6c39cac2"

		''' <summary>
		''' MetaAttribute Guid
		''' </summary>
		Public Shared ReadOnly PackageNameMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.PackageNameMetaAttributeGuidString)
		#End Region

		#Region "PackageName's Generated Property Code"

		Private packageNamePropertyStorage As System.String = String.Empty

		''' <summary>
		''' 
		''' </summary>
		<Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(DesignerDefinitionPackageNameFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.PackageNameMetaAttributeGuidString, "DesignerDefinition.PackageName")>
		Public Property PackageName() As System.String
			Get
				Return packageNamePropertyStorage
			End Get

			Set(ByVal value As System.String)
				designerDefinitionPackageNameFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
			End Set
		End Property
		#End Region

		#Region "DesignerDefinitionPackageNameFieldHandler Generated Code"
		''' <summary>
		''' FieldHandler for DesignerDefinition.PackageName field
		''' </summary>
'INSTANT VB NOTE: The variable designerDefinitionPackageNameFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
		Private Shared designerDefinitionPackageNameFieldHandler_Renamed As DesignerDefinitionPackageNameFieldHandler = DesignerDefinitionPackageNameFieldHandler.Instance

		''' <summary>
		''' Implement the field handler for DesignerDefinition.PackageName
		''' </summary>
		<System.CLSCompliant(False)>
		Public NotInheritable Partial Class DesignerDefinitionPackageNameFieldHandler
			Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition,System.String)
			''' <summary>
			''' Constructor
			''' </summary>
			Private Sub New()
			End Sub

			''' <summary>
			''' Returns the singleton instance of the DesignerDefinition.PackageName field handler
			''' </summary>
			''' <value>DesignerDefinitionPackageNameFieldHandler</value>
			Public Shared ReadOnly Property Instance() As DesignerDefinitionPackageNameFieldHandler
				Get
					If Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionPackageNameFieldHandler IsNot Nothing Then
						Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionPackageNameFieldHandler
					Else
						' The static constructor in DesignerDefinition will assign this value to
						' Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionPackageNameFieldHandler, so just instantiate one and return it
						Return New DesignerDefinitionPackageNameFieldHandler()
					End If
				End Get
			End Property

			''' <summary>
			''' Returns the meta attribute id for the DesignerDefinition.PackageName field handler
			''' </summary>
			''' <value>Guid</value>
			Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
				Get
					Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.PackageNameMetaAttributeGuid
				End Get
			End Property
			''' <summary>
			''' Gets the value of the attribute as it exists in the element
			''' </summary>
			''' <param name="element">the DesignerDefinition</param>
			Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition) As System.String
				Return element.packageNamePropertyStorage
			End Function

			''' <summary>
			''' Sets the value into the element
			''' </summary>
			''' <param name="element">the element</param>
			''' <param name="value">new value</param>
			''' <param name="commandFactory">the command factory for this change</param>
			''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			''' <param name="oldValue">the old value before the change</param>
			''' <returns>true if the value actually changed</returns>
			Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
				oldValue = element.packageNamePropertyStorage
				If allowDuplicates OrElse oldValue <> value Then
					OnValueChanging(element, oldValue, value)
					element.packageNamePropertyStorage = value
					OnValueChanged(element, oldValue, value)
					Return True
				End If
				Return False
			End Function

		End Class
		#End Region
		#End Region

		#Region "FileExtension's Generated  Field Code"
		#Region "FileExtension's Generated  MetaAttribute Code"
		''' <summary>
		''' MetaAttribute Guid String
		''' </summary>
		Public Const FileExtensionMetaAttributeGuidString As System.String = "18a27c6f-7b87-46ba-916c-8818fcd72aca"

		''' <summary>
		''' MetaAttribute Guid
		''' </summary>
		Public Shared ReadOnly FileExtensionMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.FileExtensionMetaAttributeGuidString)
		#End Region

		#Region "FileExtension's Generated Property Code"

		Private fileExtensionPropertyStorage As System.String = String.Empty

		''' <summary>
		''' 
		''' </summary>
		<Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(DesignerDefinitionFileExtensionFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.FileExtensionMetaAttributeGuidString, "DesignerDefinition.FileExtension")>
		Public Property FileExtension() As System.String
			Get
				Return fileExtensionPropertyStorage
			End Get

			Set(ByVal value As System.String)
				designerDefinitionFileExtensionFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
			End Set
		End Property
		#End Region

		#Region "DesignerDefinitionFileExtensionFieldHandler Generated Code"
		''' <summary>
		''' FieldHandler for DesignerDefinition.FileExtension field
		''' </summary>
'INSTANT VB NOTE: The variable designerDefinitionFileExtensionFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
		Private Shared designerDefinitionFileExtensionFieldHandler_Renamed As DesignerDefinitionFileExtensionFieldHandler = DesignerDefinitionFileExtensionFieldHandler.Instance

		''' <summary>
		''' Implement the field handler for DesignerDefinition.FileExtension
		''' </summary>
		<System.CLSCompliant(False)>
		Public NotInheritable Partial Class DesignerDefinitionFileExtensionFieldHandler
			Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition,System.String)
			''' <summary>
			''' Constructor
			''' </summary>
			Private Sub New()
			End Sub

			''' <summary>
			''' Returns the singleton instance of the DesignerDefinition.FileExtension field handler
			''' </summary>
			''' <value>DesignerDefinitionFileExtensionFieldHandler</value>
			Public Shared ReadOnly Property Instance() As DesignerDefinitionFileExtensionFieldHandler
				Get
					If Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionFileExtensionFieldHandler IsNot Nothing Then
						Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionFileExtensionFieldHandler
					Else
						' The static constructor in DesignerDefinition will assign this value to
						' Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionFileExtensionFieldHandler, so just instantiate one and return it
						Return New DesignerDefinitionFileExtensionFieldHandler()
					End If
				End Get
			End Property

			''' <summary>
			''' Returns the meta attribute id for the DesignerDefinition.FileExtension field handler
			''' </summary>
			''' <value>Guid</value>
			Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
				Get
					Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.FileExtensionMetaAttributeGuid
				End Get
			End Property
			''' <summary>
			''' Gets the value of the attribute as it exists in the element
			''' </summary>
			''' <param name="element">the DesignerDefinition</param>
			Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition) As System.String
				Return element.fileExtensionPropertyStorage
			End Function

			''' <summary>
			''' Sets the value into the element
			''' </summary>
			''' <param name="element">the element</param>
			''' <param name="value">new value</param>
			''' <param name="commandFactory">the command factory for this change</param>
			''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			''' <param name="oldValue">the old value before the change</param>
			''' <returns>true if the value actually changed</returns>
			Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
				oldValue = element.fileExtensionPropertyStorage
				If allowDuplicates OrElse oldValue <> value Then
					OnValueChanging(element, oldValue, value)
					element.fileExtensionPropertyStorage = value
					OnValueChanged(element, oldValue, value)
					Return True
				End If
				Return False
			End Function

		End Class
		#End Region
		#End Region

		#Region "ProductVersion's Generated  Field Code"
		#Region "ProductVersion's Generated  MetaAttribute Code"
		''' <summary>
		''' MetaAttribute Guid String
		''' </summary>
		Public Const ProductVersionMetaAttributeGuidString As System.String = "45388f23-d1f3-4c9f-a60a-84ee9dea0cae"

		''' <summary>
		''' MetaAttribute Guid
		''' </summary>
		Public Shared ReadOnly ProductVersionMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.ProductVersionMetaAttributeGuidString)
		#End Region

		#Region "ProductVersion's Generated Property Code"

		Private productVersionPropertyStorage As System.String = String.Empty

		''' <summary>
		''' 
		''' </summary>
		<Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(DesignerDefinitionProductVersionFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.ProductVersionMetaAttributeGuidString, "DesignerDefinition.ProductVersion")>
		Public Property ProductVersion() As System.String
			Get
				Return productVersionPropertyStorage
			End Get

			Set(ByVal value As System.String)
				designerDefinitionProductVersionFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
			End Set
		End Property
		#End Region

		#Region "DesignerDefinitionProductVersionFieldHandler Generated Code"
		''' <summary>
		''' FieldHandler for DesignerDefinition.ProductVersion field
		''' </summary>
'INSTANT VB NOTE: The variable designerDefinitionProductVersionFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
		Private Shared designerDefinitionProductVersionFieldHandler_Renamed As DesignerDefinitionProductVersionFieldHandler = DesignerDefinitionProductVersionFieldHandler.Instance

		''' <summary>
		''' Implement the field handler for DesignerDefinition.ProductVersion
		''' </summary>
		<System.CLSCompliant(False)>
		Public NotInheritable Partial Class DesignerDefinitionProductVersionFieldHandler
			Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition,System.String)
			''' <summary>
			''' Constructor
			''' </summary>
			Private Sub New()
			End Sub

			''' <summary>
			''' Returns the singleton instance of the DesignerDefinition.ProductVersion field handler
			''' </summary>
			''' <value>DesignerDefinitionProductVersionFieldHandler</value>
			Public Shared ReadOnly Property Instance() As DesignerDefinitionProductVersionFieldHandler
				Get
					If Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionProductVersionFieldHandler IsNot Nothing Then
						Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionProductVersionFieldHandler
					Else
						' The static constructor in DesignerDefinition will assign this value to
						' Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.designerDefinitionProductVersionFieldHandler, so just instantiate one and return it
						Return New DesignerDefinitionProductVersionFieldHandler()
					End If
				End Get
			End Property

			''' <summary>
			''' Returns the meta attribute id for the DesignerDefinition.ProductVersion field handler
			''' </summary>
			''' <value>Guid</value>
			Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
				Get
					Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition.ProductVersionMetaAttributeGuid
				End Get
			End Property
			''' <summary>
			''' Gets the value of the attribute as it exists in the element
			''' </summary>
			''' <param name="element">the DesignerDefinition</param>
			Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition) As System.String
				Return element.productVersionPropertyStorage
			End Function

			''' <summary>
			''' Sets the value into the element
			''' </summary>
			''' <param name="element">the element</param>
			''' <param name="value">new value</param>
			''' <param name="commandFactory">the command factory for this change</param>
			''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			''' <param name="oldValue">the old value before the change</param>
			''' <returns>true if the value actually changed</returns>
			Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
				oldValue = element.productVersionPropertyStorage
				If allowDuplicates OrElse oldValue <> value Then
					OnValueChanging(element, oldValue, value)
					element.productVersionPropertyStorage = value
					OnValueChanged(element, oldValue, value)
					Return True
				End If
				Return False
			End Function

		End Class
		#End Region
		#End Region

		#Region "Notation's Generated Accessor Code"
		''' <summary>
		''' 
		''' </summary>
		Public Property Notation() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation
			Get
				Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.DesignerDefinitionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.NotationMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation)
			End Get
			Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation)
				Dim sameRolePlayer As Boolean = False
				Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.DesignerDefinitionMetaRoleGuid)
				If links.Count > 0 Then
					System.Diagnostics.Debug.Assert(1 = links.Count)
					Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.NotationMetaRoleGuid)
					For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
						If Not link.IsRemoved Then
							Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation)
							If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
								sameRolePlayer = True
							Else
								link.Remove()
							End If
							Exit For
						End If
					Next link
				End If
				If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
					Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
					newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.NotationMetaRoleGuid, value)
					newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.DesignerDefinitionMetaRoleGuid, Me)
					Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation), newRoles)
				End If
			End Set
		End Property
		#End Region
		#Region "Explorer's Generated Accessor Code"
		''' <summary>
		''' 
		''' </summary>
		Public Property Explorer() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer
			Get
				Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.DesignerDefinitionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.ExplorerMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer)
			End Get
			Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer)
				Dim sameRolePlayer As Boolean = False
				Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.DesignerDefinitionMetaRoleGuid)
				If links.Count > 0 Then
					System.Diagnostics.Debug.Assert(1 = links.Count)
					Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.ExplorerMetaRoleGuid)
					For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
						If Not link.IsRemoved Then
							Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer)
							If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
								sameRolePlayer = True
							Else
								link.Remove()
							End If
							Exit For
						End If
					Next link
				End If
				If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
					Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
					newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.ExplorerMetaRoleGuid, value)
					newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.DesignerDefinitionMetaRoleGuid, Me)
					Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer), newRoles)
				End If
			End Set
		End Property
		#End Region
		#Region "PropertiesWindow's Generated Accessor Code"
		''' <summary>
		''' 
		''' </summary>
		Public Property PropertiesWindow() As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow
			Get
				Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.DesignerDefinitionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.PropertiesWindowMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow)
			End Get
			Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow)
				Dim sameRolePlayer As Boolean = False
				Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.DesignerDefinitionMetaRoleGuid)
				If links.Count > 0 Then
					System.Diagnostics.Debug.Assert(1 = links.Count)
					Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.PropertiesWindowMetaRoleGuid)
					For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
						If Not link.IsRemoved Then
							Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow)
							If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
								sameRolePlayer = True
							Else
								link.Remove()
							End If
							Exit For
						End If
					Next link
				End If
				If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
					Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
					newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.PropertiesWindowMetaRoleGuid, value)
					newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.DesignerDefinitionMetaRoleGuid, Me)
					Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow), newRoles)
				End If
			End Set
		End Property
		#End Region
		#Region "ValidationBehavior's Generated Accessor Code"
		''' <summary>
		''' 
		''' </summary>
		Public Property ValidationBehavior() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior
			Get
				Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.DesignerDefinitionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.ValidationBehaviorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
			End Get
			Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
				Dim sameRolePlayer As Boolean = False
				Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.DesignerDefinitionMetaRoleGuid)
				If links.Count > 0 Then
					System.Diagnostics.Debug.Assert(1 = links.Count)
					Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.ValidationBehaviorMetaRoleGuid)
					For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
						If Not link.IsRemoved Then
							Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
							If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
								sameRolePlayer = True
							Else
								link.Remove()
							End If
							Exit For
						End If
					Next link
				End If
				If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
					Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
					newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.ValidationBehaviorMetaRoleGuid, value)
					newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.DesignerDefinitionMetaRoleGuid, Me)
					Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior), newRoles)
				End If
			End Set
		End Property
		#End Region
		#Region "ObjectModels's Generated Accessor Code"
		''' <summary>
		''' 
		''' </summary>
		Public ReadOnly Property ObjectModels() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelMoveableCollection
			Get
				Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.DesignerDefinitionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.ObjectModelsMetaRoleGuid)
			End Get
		End Property
		#End Region
		#Region "Validation's Generated Accessor Code"
		''' <summary>
		''' 
		''' </summary>
		Public Property Validation() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation
			Get
				Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.DesignerDefinitionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation)
			End Get
			Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation)
				Dim sameRolePlayer As Boolean = False
				Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.DesignerDefinitionMetaRoleGuid)
				If links.Count > 0 Then
					System.Diagnostics.Debug.Assert(1 = links.Count)
					Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuid)
					For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
						If Not link.IsRemoved Then
							Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation)
							If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
								sameRolePlayer = True
							Else
								link.Remove()
							End If
							Exit For
						End If
					Next link
				End If
				If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
					Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
					newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuid, value)
					newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.DesignerDefinitionMetaRoleGuid, Me)
					Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation), newRoles)
				End If
			End Set
		End Property
		#End Region
	End Class
	#Region "DesignerDefinition's Generated Constructor Code"
	Partial Public Class DesignerDefinition
		''' <summary>
		''' Constructor
		''' </summary>
		Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
			MyBase.New(store.DefaultPartition, bag)
		End Sub
		''' <summary>
		''' Class Factory
		''' </summary>
		Public Shared Function CreateDesignerDefinition(ByVal store As Microsoft.VisualStudio.Modeling.Store) As DesignerDefinition
			Return CreateDesignerDefinition(store.DefaultPartition)
		End Function
		''' <summary>
		''' Class Factory
		''' </summary>
		Public Shared Function CreateAndInitializeDesignerDefinition(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinition
			Return CreateAndInitializeDesignerDefinition(store.DefaultPartition, assignments)
		End Function
		''' <summary>
		''' Constructor
		''' </summary>
		Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
			MyBase.New(partition, bag)
		End Sub
		''' <summary>
		''' Class Factory
		''' </summary>
		Public Shared Function CreateDesignerDefinition(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As DesignerDefinition
			Return CType(partition.ElementFactory.CreateElement(GetType(DesignerDefinition)), DesignerDefinition)
		End Function
		''' <summary>
		''' Class Factory
		''' </summary>
		Public Shared Function CreateAndInitializeDesignerDefinition(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinition
			Return CType(partition.ElementFactory.CreateElement(GetType(DesignerDefinition), assignments), DesignerDefinition)
		End Function
	End Class
	#End Region
	#Region "Class Factory Creator for DesignerDefinition"
	''' <summary>
	''' DesignerDefinition Class Factory Creator
	''' </summary>
	<Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition))>
	Public NotInheritable Class DesignerDefinitionElementFactoryCreator
		Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
		''' <summary>
		''' Constructor
		''' </summary>
		Public Sub New()
		End Sub
		''' <summary>
		''' Class Factory Create Method
		''' </summary>
		Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
			Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition(partition, bag)
		End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DesignerDefinitionElementFactoryCreator
            Get
                Return New DesignerDefinitionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation.MetaClassGuidString, "Notation")>
    Partial Public Class Notation
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "Notation's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "eacaf516-4d26-4db4-8d0c-4ca057965032"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation.MetaClassGuidString)
#End Region

#Region "Diagrams's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property Diagrams() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.NotationMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.DiagramsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "DiagramMaps's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property DiagramMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.NotationMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.DiagramMapsMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "Notation's Generated Constructor Code"
    Partial Public Class Notation
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNotation(ByVal store As Microsoft.VisualStudio.Modeling.Store) As Notation
            Return CreateNotation(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNotation(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Notation
            Return CreateAndInitializeNotation(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNotation(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As Notation
            Return CType(partition.ElementFactory.CreateElement(GetType(Notation)), Notation)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNotation(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Notation
            Return CType(partition.ElementFactory.CreateElement(GetType(Notation), assignments), Notation)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for Notation"
    ''' <summary>
    ''' Notation Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation))>
    Public NotInheritable Class NotationElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As NotationElementFactoryCreator
            Get
                Return New NotationElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer.MetaClassGuidString, "Explorer")>
    Partial Public Class Explorer
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "Explorer's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "ecb5fb7e-a561-417a-8109-c3db1c951f3b"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer.MetaClassGuidString)
#End Region

#Region "Roots's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property Roots() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNodeMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNodeMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.ExplorerMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.RootsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "DefaultRenderings's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property DefaultRenderings() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.ExplorerMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.DefaultRenderingsMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "Explorer's Generated Constructor Code"
    Partial Public Class Explorer
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExplorer(ByVal store As Microsoft.VisualStudio.Modeling.Store) As Explorer
            Return CreateExplorer(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExplorer(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Explorer
            Return CreateAndInitializeExplorer(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExplorer(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As Explorer
            Return CType(partition.ElementFactory.CreateElement(GetType(Explorer)), Explorer)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExplorer(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Explorer
            Return CType(partition.ElementFactory.CreateElement(GetType(Explorer), assignments), Explorer)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for Explorer"
    ''' <summary>
    ''' Explorer Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer))>
    Public NotInheritable Class ExplorerElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ExplorerElementFactoryCreator
            Get
                Return New ExplorerElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow.MetaClassGuidString, "PropertiesWindow")>
    Partial Public Class PropertiesWindow
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "PropertiesWindow's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "519599a6-b3fa-4f36-8ab0-66bd3f404c02"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow.MetaClassGuidString)
#End Region

#Region "PropertySets's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property PropertySets() As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertiesWindowMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertySetsMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "PropertiesWindow's Generated Constructor Code"
    Partial Public Class PropertiesWindow
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesWindow(ByVal store As Microsoft.VisualStudio.Modeling.Store) As PropertiesWindow
            Return CreatePropertiesWindow(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesWindow(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesWindow
            Return CreateAndInitializePropertiesWindow(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesWindow(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As PropertiesWindow
            Return CType(partition.ElementFactory.CreateElement(GetType(PropertiesWindow)), PropertiesWindow)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesWindow(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesWindow
            Return CType(partition.ElementFactory.CreateElement(GetType(PropertiesWindow), assignments), PropertiesWindow)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for PropertiesWindow"
    ''' <summary>
    ''' PropertiesWindow Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow))>
    Public NotInheritable Class PropertiesWindowElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As PropertiesWindowElementFactoryCreator
            Get
                Return New PropertiesWindowElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior.MetaClassGuidString, "ValidationBehavior")>
    Partial Public Class ValidationBehavior
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ValidationBehavior's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "f3b20760-d336-4d03-9654-9c14bdfc3b70"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior.MetaClassGuidString)
#End Region

#Region "ContextMenuGroups's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property ContextMenuGroups() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroupMoveableCollection
            Get
                Return New Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroupMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.ValidationBehaviorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.ContextMenuGroupsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "LoadGroups's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property LoadGroups() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroupMoveableCollection
            Get
                Return New Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroupMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.ValidationBehaviorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.LoadGroupsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "SaveGroups's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property SaveGroups() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroupMoveableCollection
            Get
                Return New Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroupMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.ValidationBehaviorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.SaveGroupsMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "Collection Classes for ValidationBehavior"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ValidationBehaviorMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ValidationBehavior's Generated Constructor Code"
    Partial Public Class ValidationBehavior
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidationBehavior(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ValidationBehavior
            Return CreateValidationBehavior(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidationBehavior(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValidationBehavior
            Return CreateAndInitializeValidationBehavior(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidationBehavior(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ValidationBehavior
            Return CType(partition.ElementFactory.CreateElement(GetType(ValidationBehavior)), ValidationBehavior)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidationBehavior(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValidationBehavior
            Return CType(partition.ElementFactory.CreateElement(GetType(ValidationBehavior), assignments), ValidationBehavior)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ValidationBehavior"
    ''' <summary>
    ''' ValidationBehavior Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior))>
    Public NotInheritable Class ValidationBehaviorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ValidationBehaviorElementFactoryCreator
            Get
                Return New ValidationBehaviorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.MetaClassGuidString, "Diagram")>
    Partial Public Class Diagram
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "Diagram's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "a90d74fc-204f-449c-acb2-d12bf9ad74c6"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.MetaClassGuidString)
#End Region

#Region "MayUseAsRoot's Generated  Field Code"
#Region "MayUseAsRoot's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const MayUseAsRootMetaAttributeGuidString As System.String = "755d1580-bbaf-4eb5-956a-4fe535062d1e"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly MayUseAsRootMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.MayUseAsRootMetaAttributeGuidString)
#End Region

#Region "MayUseAsRoot's Generated Property Code"

        Private mayUseAsRootPropertyStorage As System.Boolean = False

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=False), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(DiagramMayUseAsRootFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.MayUseAsRootMetaAttributeGuidString, "Diagram.MayUseAsRoot")>
        Public Property MayUseAsRoot() As System.Boolean
            Get
                Return mayUseAsRootPropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                diagramMayUseAsRootFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "DiagramMayUseAsRootFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for Diagram.MayUseAsRoot field
        ''' </summary>
        'INSTANT VB NOTE: The variable diagramMayUseAsRootFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared diagramMayUseAsRootFieldHandler_Renamed As DiagramMayUseAsRootFieldHandler = DiagramMayUseAsRootFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for Diagram.MayUseAsRoot
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class DiagramMayUseAsRootFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the Diagram.MayUseAsRoot field handler
            ''' </summary>
            ''' <value>DiagramMayUseAsRootFieldHandler</value>
            Public Shared ReadOnly Property Instance() As DiagramMayUseAsRootFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.DiagramMayUseAsRootFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.DiagramMayUseAsRootFieldHandler
                    Else
                        ' The static constructor in Diagram will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.diagramMayUseAsRootFieldHandler, so just instantiate one and return it
                        Return New DiagramMayUseAsRootFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the Diagram.MayUseAsRoot field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram.MayUseAsRootMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the Diagram</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) As System.Boolean
                Return element.mayUseAsRootPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.mayUseAsRootPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.mayUseAsRootPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Shapes's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property Shapes() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.DiagramMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.ShapesMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "Connectors's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property Connectors() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.DiagramMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.ConnectorsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "Toolbox's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Toolbox() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.DiagramMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.ToolboxMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.DiagramMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.ToolboxMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.ToolboxMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.DiagramMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for Diagram"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class DiagramMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "Diagram's Generated Constructor Code"
    Partial Public Class Diagram
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagram(ByVal store As Microsoft.VisualStudio.Modeling.Store) As Diagram
            Return CreateDiagram(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagram(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Diagram
            Return CreateAndInitializeDiagram(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagram(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As Diagram
            Return CType(partition.ElementFactory.CreateElement(GetType(Diagram)), Diagram)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagram(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Diagram
            Return CType(partition.ElementFactory.CreateElement(GetType(Diagram), assignments), Diagram)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for Diagram"
    ''' <summary>
    ''' Diagram Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram))>
    Public NotInheritable Class DiagramElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramElementFactoryCreator
            Get
                Return New DiagramElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector.MetaClassGuidString, "Connector")>
    Partial Public Class Connector
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "Connector's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "73315d51-3fc7-4436-aee2-16f6c51fc500"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector.MetaClassGuidString)
#End Region

#Region "Decorators's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property Decorators() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.ConnectorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.DecoratorsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "Target's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Target() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.ConnectorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.TargetMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.ConnectorMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.TargetMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.TargetMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.ConnectorMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "Source's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Source() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.ConnectorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.SourceMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.ConnectorMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.SourceMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.SourceMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.ConnectorMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "DashStyle's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property DashStyle() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.ConnectorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.DashStyleMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.ConnectorMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.DashStyleMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.DashStyleMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.ConnectorMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "Color's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Color() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ConnectorMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ColorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ConnectorMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ColorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ColorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ConnectorMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for Connector"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ConnectorMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "Connector's Generated Constructor Code"
    Partial Public Class Connector
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnector(ByVal store As Microsoft.VisualStudio.Modeling.Store) As Connector
            Return CreateConnector(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnector(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Connector
            Return CreateAndInitializeConnector(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnector(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As Connector
            Return CType(partition.ElementFactory.CreateElement(GetType(Connector)), Connector)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnector(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Connector
            Return CType(partition.ElementFactory.CreateElement(GetType(Connector), assignments), Connector)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for Connector"
    ''' <summary>
    ''' Connector Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector))>
    Public NotInheritable Class ConnectorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorElementFactoryCreator
            Get
                Return New ConnectorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox.MetaClassGuidString, "Toolbox")>
    Partial Public Class Toolbox
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "Toolbox's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "0f088991-551a-4545-969d-aa1f934caad5"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox.MetaClassGuidString)
#End Region

#Region "Items's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property Items() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItemMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItemMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ToolboxMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ItemsMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "Toolbox's Generated Constructor Code"
    Partial Public Class Toolbox
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateToolbox(ByVal store As Microsoft.VisualStudio.Modeling.Store) As Toolbox
            Return CreateToolbox(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeToolbox(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Toolbox
            Return CreateAndInitializeToolbox(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateToolbox(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As Toolbox
            Return CType(partition.ElementFactory.CreateElement(GetType(Toolbox)), Toolbox)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeToolbox(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Toolbox
            Return CType(partition.ElementFactory.CreateElement(GetType(Toolbox), assignments), Toolbox)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for Toolbox"
    ''' <summary>
    ''' Toolbox Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox))>
    Public NotInheritable Class ToolboxElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ToolboxElementFactoryCreator
            Get
                Return New ToolboxElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.MetaClassGuidString, "ToolboxItem")>
    Partial Public Class ToolboxItem
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ToolboxItem's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "2bff4b99-9dd8-48f1-b4a2-48e117613499"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.MetaClassGuidString)
#End Region

#Region "CaptionId's Generated  Field Code"
#Region "CaptionId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const CaptionIdMetaAttributeGuidString As System.String = "c98b44b7-d1b9-44f6-95db-cee348110ee0"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly CaptionIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.CaptionIdMetaAttributeGuidString)
#End Region

#Region "CaptionId's Generated Property Code"

        Private captionIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ToolboxItemCaptionIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.CaptionIdMetaAttributeGuidString, "ToolboxItem.CaptionId")>
        Public Property CaptionId() As System.String
            Get
                Return captionIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                toolboxItemCaptionIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ToolboxItemCaptionIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ToolboxItem.CaptionId field
        ''' </summary>
        'INSTANT VB NOTE: The variable toolboxItemCaptionIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared toolboxItemCaptionIdFieldHandler_Renamed As ToolboxItemCaptionIdFieldHandler = ToolboxItemCaptionIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ToolboxItem.CaptionId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ToolboxItemCaptionIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ToolboxItem.CaptionId field handler
            ''' </summary>
            ''' <value>ToolboxItemCaptionIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ToolboxItemCaptionIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemCaptionIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemCaptionIdFieldHandler
                    Else
                        ' The static constructor in ToolboxItem will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.toolboxItemCaptionIdFieldHandler, so just instantiate one and return it
                        Return New ToolboxItemCaptionIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ToolboxItem.CaptionId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.CaptionIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ToolboxItem</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) As System.String
                Return element.captionIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.captionIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.captionIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "IconId's Generated  Field Code"
#Region "IconId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const IconIdMetaAttributeGuidString As System.String = "45b2cedf-deee-403b-8887-a3ee828b86df"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly IconIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.IconIdMetaAttributeGuidString)
#End Region

#Region "IconId's Generated Property Code"

        Private iconIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ToolboxItemIconIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.IconIdMetaAttributeGuidString, "ToolboxItem.IconId")>
        Public Property IconId() As System.String
            Get
                Return iconIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                toolboxItemIconIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ToolboxItemIconIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ToolboxItem.IconId field
        ''' </summary>
        'INSTANT VB NOTE: The variable toolboxItemIconIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared toolboxItemIconIdFieldHandler_Renamed As ToolboxItemIconIdFieldHandler = ToolboxItemIconIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ToolboxItem.IconId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ToolboxItemIconIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ToolboxItem.IconId field handler
            ''' </summary>
            ''' <value>ToolboxItemIconIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ToolboxItemIconIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemIconIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemIconIdFieldHandler
                    Else
                        ' The static constructor in ToolboxItem will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.toolboxItemIconIdFieldHandler, so just instantiate one and return it
                        Return New ToolboxItemIconIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ToolboxItem.IconId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.IconIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ToolboxItem</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) As System.String
                Return element.iconIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.iconIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.iconIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Order's Generated  Field Code"
#Region "Order's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const OrderMetaAttributeGuidString As System.String = "cc7f9f59-a4aa-4801-ae85-43b4347fe995"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly OrderMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.OrderMetaAttributeGuidString)
#End Region

#Region "Order's Generated Property Code"

        Private orderPropertyStorage As System.Int32 = 0

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.IntegerDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ToolboxItemOrderFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.OrderMetaAttributeGuidString, "ToolboxItem.Order")>
        Public Property Order() As System.Int32
            Get
                Return orderPropertyStorage
            End Get

            Set(ByVal value As System.Int32)
                toolboxItemOrderFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ToolboxItemOrderFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ToolboxItem.Order field
        ''' </summary>
        'INSTANT VB NOTE: The variable toolboxItemOrderFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared toolboxItemOrderFieldHandler_Renamed As ToolboxItemOrderFieldHandler = ToolboxItemOrderFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ToolboxItem.Order
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ToolboxItemOrderFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, System.Int32)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ToolboxItem.Order field handler
            ''' </summary>
            ''' <value>ToolboxItemOrderFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ToolboxItemOrderFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemOrderFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemOrderFieldHandler
                    Else
                        ' The static constructor in ToolboxItem will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.toolboxItemOrderFieldHandler, so just instantiate one and return it
                        Return New ToolboxItemOrderFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ToolboxItem.Order field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.OrderMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ToolboxItem</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) As System.Int32
                Return element.orderPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, ByVal value As System.Int32, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Int32) As Boolean
                oldValue = element.orderPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.orderPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "ContextSensitiveHelpId's Generated  Field Code"
#Region "ContextSensitiveHelpId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const ContextSensitiveHelpIdMetaAttributeGuidString As System.String = "b761485c-ba69-406b-99b1-52a38b368b11"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly ContextSensitiveHelpIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ContextSensitiveHelpIdMetaAttributeGuidString)
#End Region

#Region "ContextSensitiveHelpId's Generated Property Code"

        Private contextSensitiveHelpIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ToolboxItemContextSensitiveHelpIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ContextSensitiveHelpIdMetaAttributeGuidString, "ToolboxItem.ContextSensitiveHelpId")>
        Public Property ContextSensitiveHelpId() As System.String
            Get
                Return contextSensitiveHelpIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                toolboxItemContextSensitiveHelpIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ToolboxItemContextSensitiveHelpIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ToolboxItem.ContextSensitiveHelpId field
        ''' </summary>
        'INSTANT VB NOTE: The variable toolboxItemContextSensitiveHelpIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared toolboxItemContextSensitiveHelpIdFieldHandler_Renamed As ToolboxItemContextSensitiveHelpIdFieldHandler = ToolboxItemContextSensitiveHelpIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ToolboxItem.ContextSensitiveHelpId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ToolboxItemContextSensitiveHelpIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ToolboxItem.ContextSensitiveHelpId field handler
            ''' </summary>
            ''' <value>ToolboxItemContextSensitiveHelpIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ToolboxItemContextSensitiveHelpIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemContextSensitiveHelpIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ToolboxItemContextSensitiveHelpIdFieldHandler
                    Else
                        ' The static constructor in ToolboxItem will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.toolboxItemContextSensitiveHelpIdFieldHandler, so just instantiate one and return it
                        Return New ToolboxItemContextSensitiveHelpIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ToolboxItem.ContextSensitiveHelpId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem.ContextSensitiveHelpIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ToolboxItem</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) As System.String
                Return element.contextSensitiveHelpIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.contextSensitiveHelpIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.contextSensitiveHelpIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "Collection Classes for ToolboxItem"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ToolboxItemMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ToolboxItem's Generated Constructor Code"
    Partial Public Class ToolboxItem
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateToolboxItem(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ToolboxItem
            Return CreateToolboxItem(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeToolboxItem(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ToolboxItem
            Return CreateAndInitializeToolboxItem(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateToolboxItem(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ToolboxItem
            Return CType(partition.ElementFactory.CreateElement(GetType(ToolboxItem)), ToolboxItem)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeToolboxItem(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ToolboxItem
            Return CType(partition.ElementFactory.CreateElement(GetType(ToolboxItem), assignments), ToolboxItem)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ToolboxItem"
    ''' <summary>
    ''' ToolboxItem Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem))>
    Public NotInheritable Class ToolboxItemElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ToolboxItemElementFactoryCreator
            Get
                Return New ToolboxItemElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool.MetaClassGuidString, "ShapeTool")>
    Partial Public Class ShapeTool
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem
#Region "ShapeTool's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "4dab8cfc-47de-441f-b81a-a3dec52650ed"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool.MetaClassGuidString)
#End Region

#Region "Shape's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Shape() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeToolMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeToolMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeToolMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ShapeTool"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ShapeToolMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ShapeTool's Generated Constructor Code"
    Partial Public Class ShapeTool
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeTool(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ShapeTool
            Return CreateShapeTool(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeTool(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeTool
            Return CreateAndInitializeShapeTool(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeTool(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ShapeTool
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeTool)), ShapeTool)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeTool(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeTool
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeTool), assignments), ShapeTool)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeTool"
    ''' <summary>
    ''' ShapeTool Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool))>
    Public NotInheritable Class ShapeToolElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeToolElementFactoryCreator
            Get
                Return New ShapeToolElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool.MetaClassGuidString, "ConnectorTool")>
    Partial Public Class ConnectorTool
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem
#Region "ConnectorTool's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "1025fcea-8bad-47d2-b672-f16003031567"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool.MetaClassGuidString)
#End Region

#Region "Connector's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Connector() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorToolMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorToolMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorToolMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ConnectorTool"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ConnectorToolMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ConnectorTool's Generated Constructor Code"
    Partial Public Class ConnectorTool
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorTool(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ConnectorTool
            Return CreateConnectorTool(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorTool(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorTool
            Return CreateAndInitializeConnectorTool(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorTool(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ConnectorTool
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorTool)), ConnectorTool)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorTool(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorTool
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorTool), assignments), ConnectorTool)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorTool"
    ''' <summary>
    ''' ConnectorTool Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool))>
    Public NotInheritable Class ConnectorToolElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorToolElementFactoryCreator
            Get
                Return New ConnectorToolElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool.MetaClassGuidString, "CompartmentTextTool")>
    Partial Public Class CompartmentTextTool
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem
#Region "CompartmentTextTool's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "bc57e168-0c77-47f1-ad42-92930bde0313"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool.MetaClassGuidString)
#End Region

#Region "TextCompartment's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property TextCompartment() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.CompartmentTextToolMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.TextCompartmentMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.CompartmentTextToolMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.TextCompartmentMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.TextCompartmentMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.CompartmentTextToolMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for CompartmentTextTool"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class CompartmentTextToolMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "CompartmentTextTool's Generated Constructor Code"
    Partial Public Class CompartmentTextTool
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentTextTool(ByVal store As Microsoft.VisualStudio.Modeling.Store) As CompartmentTextTool
            Return CreateCompartmentTextTool(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentTextTool(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentTextTool
            Return CreateAndInitializeCompartmentTextTool(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentTextTool(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As CompartmentTextTool
            Return CType(partition.ElementFactory.CreateElement(GetType(CompartmentTextTool)), CompartmentTextTool)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentTextTool(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentTextTool
            Return CType(partition.ElementFactory.CreateElement(GetType(CompartmentTextTool), assignments), CompartmentTextTool)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentTextTool"
    ''' <summary>
    ''' CompartmentTextTool Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool))>
    Public NotInheritable Class CompartmentTextToolElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentTextToolElementFactoryCreator
            Get
                Return New CompartmentTextToolElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap.MetaClassGuidString, "DiagramMap")>
    Partial Public Class DiagramMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "DiagramMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "2090ffe3-f004-4400-8d28-1e6969a8fb8a"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap.MetaClassGuidString)
#End Region

#Region "Diagram's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Diagram() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "ShapeMaps's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property ShapeMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.DiagramMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.ShapeMapsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "ConnectorMaps's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property ConnectorMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.DiagramMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.ConnectorMapsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "Class's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.DiagramMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.ClassMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.DiagramMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.ClassMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.ClassMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.DiagramMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for DiagramMap"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class DiagramMapMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "DiagramMap's Generated Constructor Code"
    Partial Public Class DiagramMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As DiagramMap
            Return CreateDiagramMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMap
            Return CreateAndInitializeDiagramMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As DiagramMap
            Return CType(partition.ElementFactory.CreateElement(GetType(DiagramMap)), DiagramMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMap
            Return CType(partition.ElementFactory.CreateElement(GetType(DiagramMap), assignments), DiagramMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DiagramMap"
    ''' <summary>
    ''' DiagramMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap))>
    Public NotInheritable Class DiagramMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramMapElementFactoryCreator
            Get
                Return New DiagramMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap.MetaClassGuidString, "ShapeMap")>
    Partial Public Class ShapeMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ShapeMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "4eaeb35e-8e1f-4cc8-8ad9-d59eeec97596"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap.MetaClassGuidString)
#End Region

#Region "TextMaps's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property TextMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.ShapeMapClassMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.TextMapsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "Shape's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Shape() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "IconMaps's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property IconMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.ShapeMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.IconMapsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "MelCollectionExpression's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property MelCollectionExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.ShapeMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MelCollectionExpressionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.ShapeMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MelCollectionExpressionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MelCollectionExpressionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.ShapeMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "Class's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ShapeMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ClassMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ShapeMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ClassMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ClassMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ShapeMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "CompartmentMaps's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property CompartmentMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.ShapeMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.CompartmentMapsMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "Collection Classes for ShapeMap"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ShapeMapMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ShapeMap's Generated Constructor Code"
    Partial Public Class ShapeMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ShapeMap
            Return CreateShapeMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMap
            Return CreateAndInitializeShapeMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ShapeMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeMap)), ShapeMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeMap), assignments), ShapeMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeMap"
    ''' <summary>
    ''' ShapeMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap))>
    Public NotInheritable Class ShapeMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeMapElementFactoryCreator
            Get
                Return New ShapeMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap.MetaClassGuidString, "ShapeTextMap")>
    Partial Public Class ShapeTextMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ShapeTextMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "1b25b523-20b5-45ba-9aeb-b0d939ff61e1"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap.MetaClassGuidString)
#End Region

#Region "TextDecorator's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property TextDecorator() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextDecoratorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextDecoratorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextDecoratorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "ValueExpression's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property ValueExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ShapeTextMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ValueExpressionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ShapeTextMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ValueExpressionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ValueExpressionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ShapeTextMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ShapeTextMap"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ShapeTextMapMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ShapeTextMap's Generated Constructor Code"
    Partial Public Class ShapeTextMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeTextMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ShapeTextMap
            Return CreateShapeTextMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeTextMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeTextMap
            Return CreateAndInitializeShapeTextMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeTextMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ShapeTextMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeTextMap)), ShapeTextMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeTextMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeTextMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeTextMap), assignments), ShapeTextMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeTextMap"
    ''' <summary>
    ''' ShapeTextMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap))>
    Public NotInheritable Class ShapeTextMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeTextMapElementFactoryCreator
            Get
                Return New ShapeTextMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.MetaClassGuidString, "ExplorerNode")>
    Partial Public Class ExplorerNode
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ExplorerNode's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "0952a8e9-577d-4032-aec5-2519b3566ed7"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.MetaClassGuidString)
#End Region

#Region "StructureAsXmlFromHere's Generated  Field Code"
#Region "StructureAsXmlFromHere's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const StructureAsXmlFromHereMetaAttributeGuidString As System.String = "09a1d4bf-4702-4d14-8f94-e4b5613f51d9"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly StructureAsXmlFromHereMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.StructureAsXmlFromHereMetaAttributeGuidString)
#End Region

#Region "StructureAsXmlFromHere's Generated Property Code"

        Private structureAsXmlFromHerePropertyStorage As System.Boolean = False

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=False), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ExplorerNodeStructureAsXmlFromHereFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.StructureAsXmlFromHereMetaAttributeGuidString, "ExplorerNode.StructureAsXmlFromHere")>
        Public Property StructureAsXmlFromHere() As System.Boolean
            Get
                Return structureAsXmlFromHerePropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                explorerNodeStructureAsXmlFromHereFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ExplorerNodeStructureAsXmlFromHereFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ExplorerNode.StructureAsXmlFromHere field
        ''' </summary>
        'INSTANT VB NOTE: The variable explorerNodeStructureAsXmlFromHereFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared explorerNodeStructureAsXmlFromHereFieldHandler_Renamed As ExplorerNodeStructureAsXmlFromHereFieldHandler = ExplorerNodeStructureAsXmlFromHereFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ExplorerNode.StructureAsXmlFromHere
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ExplorerNodeStructureAsXmlFromHereFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ExplorerNode.StructureAsXmlFromHere field handler
            ''' </summary>
            ''' <value>ExplorerNodeStructureAsXmlFromHereFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ExplorerNodeStructureAsXmlFromHereFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.ExplorerNodeStructureAsXmlFromHereFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.ExplorerNodeStructureAsXmlFromHereFieldHandler
                    Else
                        ' The static constructor in ExplorerNode will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.explorerNodeStructureAsXmlFromHereFieldHandler, so just instantiate one and return it
                        Return New ExplorerNodeStructureAsXmlFromHereFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ExplorerNode.StructureAsXmlFromHere field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode.StructureAsXmlFromHereMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ExplorerNode</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode) As System.Boolean
                Return element.structureAsXmlFromHerePropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.structureAsXmlFromHerePropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.structureAsXmlFromHerePropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "ExplorerNode's Generated Constructor Code"
    Partial Public Class ExplorerNode
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExplorerNode(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ExplorerNode
            Return CreateExplorerNode(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExplorerNode(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ExplorerNode
            Return CreateAndInitializeExplorerNode(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExplorerNode(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ExplorerNode
            Return CType(partition.ElementFactory.CreateElement(GetType(ExplorerNode)), ExplorerNode)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExplorerNode(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ExplorerNode
            Return CType(partition.ElementFactory.CreateElement(GetType(ExplorerNode), assignments), ExplorerNode)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ExplorerNode"
    ''' <summary>
    ''' ExplorerNode Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode))>
    Public NotInheritable Class ExplorerNodeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ExplorerNodeElementFactoryCreator
            Get
                Return New ExplorerNodeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.MetaClassGuidString, "ElementNode")>
    Partial Public Class ElementNode
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode
#Region "ElementNode's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "ae9bab28-935c-4608-a5d6-abbf04cbb685"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.MetaClassGuidString)
#End Region

#Region "UseDefaultRendering's Generated  Field Code"
#Region "UseDefaultRendering's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const UseDefaultRenderingMetaAttributeGuidString As System.String = "3e3cac93-b417-4b82-8a57-dae268177a21"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly UseDefaultRenderingMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.UseDefaultRenderingMetaAttributeGuidString)
#End Region

#Region "UseDefaultRendering's Generated Property Code"

        Private useDefaultRenderingPropertyStorage As System.Boolean = False

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=False), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ElementNodeUseDefaultRenderingFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.UseDefaultRenderingMetaAttributeGuidString, "ElementNode.UseDefaultRendering")>
        Public Property UseDefaultRendering() As System.Boolean
            Get
                Return useDefaultRenderingPropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                elementNodeUseDefaultRenderingFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ElementNodeUseDefaultRenderingFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ElementNode.UseDefaultRendering field
        ''' </summary>
        'INSTANT VB NOTE: The variable elementNodeUseDefaultRenderingFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared elementNodeUseDefaultRenderingFieldHandler_Renamed As ElementNodeUseDefaultRenderingFieldHandler = ElementNodeUseDefaultRenderingFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ElementNode.UseDefaultRendering
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ElementNodeUseDefaultRenderingFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ElementNode.UseDefaultRendering field handler
            ''' </summary>
            ''' <value>ElementNodeUseDefaultRenderingFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ElementNodeUseDefaultRenderingFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.ElementNodeUseDefaultRenderingFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.ElementNodeUseDefaultRenderingFieldHandler
                    Else
                        ' The static constructor in ElementNode will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.elementNodeUseDefaultRenderingFieldHandler, so just instantiate one and return it
                        Return New ElementNodeUseDefaultRenderingFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ElementNode.UseDefaultRendering field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode.UseDefaultRenderingMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ElementNode</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) As System.Boolean
                Return element.useDefaultRenderingPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.useDefaultRenderingPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.useDefaultRenderingPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Class's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassNodeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassNodeMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassNodeMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "ChildCollections's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property ChildCollections() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.NodeTypeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.ChildCollectionsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "Rendering's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Rendering() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.ClassNodeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.RenderingMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.ClassNodeMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.RenderingMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.RenderingMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.ClassNodeMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ElementNode"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ElementNodeMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ElementNode's Generated Constructor Code"
    Partial Public Class ElementNode
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateElementNode(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ElementNode
            Return CreateElementNode(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeElementNode(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ElementNode
            Return CreateAndInitializeElementNode(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateElementNode(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ElementNode
            Return CType(partition.ElementFactory.CreateElement(GetType(ElementNode)), ElementNode)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeElementNode(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ElementNode
            Return CType(partition.ElementFactory.CreateElement(GetType(ElementNode), assignments), ElementNode)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ElementNode"
    ''' <summary>
    ''' ElementNode Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode))>
    Public NotInheritable Class ElementNodeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ElementNodeElementFactoryCreator
            Get
                Return New ElementNodeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.MetaClassGuidString, "CollectionNode")>
    Partial Public Class CollectionNode
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerNode
#Region "CollectionNode's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "4e880f9d-751d-4cf9-a7c8-a3b781bc6be8"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.MetaClassGuidString)
#End Region

#Region "SortOrder's Generated  Field Code"
#Region "SortOrder's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const SortOrderMetaAttributeGuidString As System.String = "c52fa124-9672-4279-b734-85eb6a06b3a5"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly SortOrderMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.SortOrderMetaAttributeGuidString)
#End Region

#Region "SortOrder's Generated Property Code"

        Private sortOrderPropertyStorage As Microsoft.VisualStudio.Modeling.DesignerDefinition.SortOrder = Microsoft.VisualStudio.Modeling.DesignerDefinition.SortOrder.Ascending

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType:=GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SortOrder), DefaultEnumerationValueName:="Ascending"), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(CollectionNodeSortOrderFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.SortOrderMetaAttributeGuidString, "CollectionNode.SortOrder")>
        Public Property SortOrder() As Microsoft.VisualStudio.Modeling.DesignerDefinition.SortOrder
            Get
                Return sortOrderPropertyStorage
            End Get

            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.SortOrder)
                collectionNodeSortOrderFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "CollectionNodeSortOrderFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for CollectionNode.SortOrder field
        ''' </summary>
        'INSTANT VB NOTE: The variable collectionNodeSortOrderFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared collectionNodeSortOrderFieldHandler_Renamed As CollectionNodeSortOrderFieldHandler = CollectionNodeSortOrderFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for CollectionNode.SortOrder
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class CollectionNodeSortOrderFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode, Microsoft.VisualStudio.Modeling.DesignerDefinition.SortOrder)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the CollectionNode.SortOrder field handler
            ''' </summary>
            ''' <value>CollectionNodeSortOrderFieldHandler</value>
            Public Shared ReadOnly Property Instance() As CollectionNodeSortOrderFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.CollectionNodeSortOrderFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.CollectionNodeSortOrderFieldHandler
                    Else
                        ' The static constructor in CollectionNode will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.collectionNodeSortOrderFieldHandler, so just instantiate one and return it
                        Return New CollectionNodeSortOrderFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the CollectionNode.SortOrder field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.SortOrderMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the CollectionNode</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) As Microsoft.VisualStudio.Modeling.DesignerDefinition.SortOrder
                Return element.sortOrderPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.SortOrder, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As Microsoft.VisualStudio.Modeling.DesignerDefinition.SortOrder) As Boolean
                oldValue = element.sortOrderPropertyStorage
                If allowDuplicates OrElse oldValue IsNot value Then
                    OnValueChanging(element, oldValue, value)
                    element.sortOrderPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "RenderCollectionNode's Generated  Field Code"
#Region "RenderCollectionNode's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const RenderCollectionNodeMetaAttributeGuidString As System.String = "cf1e93c2-1aed-4e71-9027-a35e3a6e2930"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly RenderCollectionNodeMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.RenderCollectionNodeMetaAttributeGuidString)
#End Region

#Region "RenderCollectionNode's Generated Property Code"

        Private renderCollectionNodePropertyStorage As System.Boolean = False

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=False), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(CollectionNodeRenderCollectionNodeFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.RenderCollectionNodeMetaAttributeGuidString, "CollectionNode.RenderCollectionNode")>
        Public Property RenderCollectionNode() As System.Boolean
            Get
                Return renderCollectionNodePropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                collectionNodeRenderCollectionNodeFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "CollectionNodeRenderCollectionNodeFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for CollectionNode.RenderCollectionNode field
        ''' </summary>
        'INSTANT VB NOTE: The variable collectionNodeRenderCollectionNodeFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared collectionNodeRenderCollectionNodeFieldHandler_Renamed As CollectionNodeRenderCollectionNodeFieldHandler = CollectionNodeRenderCollectionNodeFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for CollectionNode.RenderCollectionNode
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class CollectionNodeRenderCollectionNodeFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the CollectionNode.RenderCollectionNode field handler
            ''' </summary>
            ''' <value>CollectionNodeRenderCollectionNodeFieldHandler</value>
            Public Shared ReadOnly Property Instance() As CollectionNodeRenderCollectionNodeFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.CollectionNodeRenderCollectionNodeFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.CollectionNodeRenderCollectionNodeFieldHandler
                    Else
                        ' The static constructor in CollectionNode will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.collectionNodeRenderCollectionNodeFieldHandler, so just instantiate one and return it
                        Return New CollectionNodeRenderCollectionNodeFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the CollectionNode.RenderCollectionNode field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode.RenderCollectionNodeMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the CollectionNode</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) As System.Boolean
                Return element.renderCollectionNodePropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.renderCollectionNodePropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.renderCollectionNodePropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "SortProperty's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property SortProperty() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.CollectionNodeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.SortPropertyMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.CollectionNodeMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.SortPropertyMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.SortPropertyMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.CollectionNodeMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "Rendering's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Rendering() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.CollectionNodeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.RenderingMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.CollectionNodeMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.RenderingMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.RenderingMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.CollectionNodeMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "ChildNodes's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property ChildNodes() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNodeMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNodeMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.CollectionNodeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.ChildNodesMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "MelCollectionExpression's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property MelCollectionExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.CollectionNodeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.CollectionNodeMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.CollectionNodeMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for CollectionNode"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class CollectionNodeMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "CollectionNode's Generated Constructor Code"
    Partial Public Class CollectionNode
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNode(ByVal store As Microsoft.VisualStudio.Modeling.Store) As CollectionNode
            Return CreateCollectionNode(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNode(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNode
            Return CreateAndInitializeCollectionNode(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNode(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As CollectionNode
            Return CType(partition.ElementFactory.CreateElement(GetType(CollectionNode)), CollectionNode)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNode(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNode
            Return CType(partition.ElementFactory.CreateElement(GetType(CollectionNode), assignments), CollectionNode)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CollectionNode"
    ''' <summary>
    ''' CollectionNode Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode))>
    Public NotInheritable Class CollectionNodeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CollectionNodeElementFactoryCreator
            Get
                Return New CollectionNodeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet.MetaClassGuidString, "PropertySet")>
    Partial Public Class PropertySet
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "PropertySet's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "6b79526d-08d3-4dc6-9da3-304f391d993d"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet.MetaClassGuidString)
#End Region

#Region "Class's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.PropertiesSetMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.ClassMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.PropertiesSetMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.ClassMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.ClassMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.PropertiesSetMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "ValuePropertiesToExclude's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property ValuePropertiesToExclude() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValuePropertyMoveableCollection
            Get
                Return New Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValuePropertyMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.PropertiesSetMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.ValuePropertiesToExcludeMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "RoleProperties's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property RoleProperties() As Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.PropertySetMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.RolePropertiesMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "Collection Classes for PropertySet"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class PropertySetMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "PropertySet's Generated Constructor Code"
    Partial Public Class PropertySet
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertySet(ByVal store As Microsoft.VisualStudio.Modeling.Store) As PropertySet
            Return CreatePropertySet(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertySet(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertySet
            Return CreateAndInitializePropertySet(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertySet(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As PropertySet
            Return CType(partition.ElementFactory.CreateElement(GetType(PropertySet)), PropertySet)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertySet(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertySet
            Return CType(partition.ElementFactory.CreateElement(GetType(PropertySet), assignments), PropertySet)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for PropertySet"
    ''' <summary>
    ''' PropertySet Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet))>
    Public NotInheritable Class PropertySetElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As PropertySetElementFactoryCreator
            Get
                Return New PropertySetElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.MetaClassGuidString, "DiagramElementDetails")>
    Partial Public Class DiagramElementDetails
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "DiagramElementDetails's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c00d63fe-07c7-4048-8905-d700bc1947c0"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.MetaClassGuidString)
#End Region

#Region "Variability's Generated  Field Code"
#Region "Variability's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const VariabilityMetaAttributeGuidString As System.String = "4972614f-e669-4090-b7aa-cac2e3b73527"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly VariabilityMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.VariabilityMetaAttributeGuidString)
#End Region

#Region "Variability's Generated Property Code"

        Private variabilityPropertyStorage As Microsoft.VisualStudio.Modeling.DesignerDefinition.Variability = Microsoft.VisualStudio.Modeling.DesignerDefinition.Variability.Fixed

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType:=GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Variability), DefaultEnumerationValueName:="Fixed"), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(DiagramElementDetailsVariabilityFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.VariabilityMetaAttributeGuidString, "DiagramElementDetails.Variability")>
        Public Property Variability() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Variability
            Get
                Return variabilityPropertyStorage
            End Get

            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Variability)
                diagramElementDetailsVariabilityFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "DiagramElementDetailsVariabilityFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for DiagramElementDetails.Variability field
        ''' </summary>
        'INSTANT VB NOTE: The variable diagramElementDetailsVariabilityFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared diagramElementDetailsVariabilityFieldHandler_Renamed As DiagramElementDetailsVariabilityFieldHandler = DiagramElementDetailsVariabilityFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for DiagramElementDetails.Variability
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class DiagramElementDetailsVariabilityFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails, Microsoft.VisualStudio.Modeling.DesignerDefinition.Variability)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the DiagramElementDetails.Variability field handler
            ''' </summary>
            ''' <value>DiagramElementDetailsVariabilityFieldHandler</value>
            Public Shared ReadOnly Property Instance() As DiagramElementDetailsVariabilityFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.DiagramElementDetailsVariabilityFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.DiagramElementDetailsVariabilityFieldHandler
                    Else
                        ' The static constructor in DiagramElementDetails will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.diagramElementDetailsVariabilityFieldHandler, so just instantiate one and return it
                        Return New DiagramElementDetailsVariabilityFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the DiagramElementDetails.Variability field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails.VariabilityMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the DiagramElementDetails</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails) As Microsoft.VisualStudio.Modeling.DesignerDefinition.Variability
                Return element.variabilityPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Variability, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As Microsoft.VisualStudio.Modeling.DesignerDefinition.Variability) As Boolean
                oldValue = element.variabilityPropertyStorage
                If allowDuplicates OrElse oldValue IsNot value Then
                    OnValueChanging(element, oldValue, value)
                    element.variabilityPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "DiagramElementDetails's Generated Constructor Code"
    Partial Public Class DiagramElementDetails
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramElementDetails(ByVal store As Microsoft.VisualStudio.Modeling.Store) As DiagramElementDetails
            Return CreateDiagramElementDetails(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramElementDetails(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramElementDetails
            Return CreateAndInitializeDiagramElementDetails(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramElementDetails(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As DiagramElementDetails
            Return CType(partition.ElementFactory.CreateElement(GetType(DiagramElementDetails)), DiagramElementDetails)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramElementDetails(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramElementDetails
            Return CType(partition.ElementFactory.CreateElement(GetType(DiagramElementDetails), assignments), DiagramElementDetails)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DiagramElementDetails"
    ''' <summary>
    ''' DiagramElementDetails Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails))>
    Public NotInheritable Class DiagramElementDetailsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramElementDetailsElementFactoryCreator
            Get
                Return New DiagramElementDetailsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.MetaClassGuidString, "ColorDetails")>
    Partial Public Class ColorDetails
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails
#Region "ColorDetails's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "adf78b62-0fc3-4fa7-93a0-9e713193beb1"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.MetaClassGuidString)
#End Region

#Region "Color's Generated  Field Code"
#Region "Color's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const ColorMetaAttributeGuidString As System.String = "e698fac4-70c2-4a24-b4ce-109689163f16"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly ColorMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.ColorMetaAttributeGuidString)
#End Region

#Region "Color's Generated Property Code"

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage:=True, FieldHandlerType:=GetType(ColorDetailsColorFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.ColorMetaAttributeGuidString, "ColorDetails.Color")>
        Public Property Color() As System.Drawing.Color
            Get
                Return colorDetailsColorFieldHandler_Renamed.GetFieldValue(Me)
            End Get

            Set(ByVal value As System.Drawing.Color)
                colorDetailsColorFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ColorDetailsColorFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ColorDetails.Color field
        ''' </summary>
        'INSTANT VB NOTE: The variable colorDetailsColorFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared colorDetailsColorFieldHandler_Renamed As ColorDetailsColorFieldHandler = ColorDetailsColorFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ColorDetails.Color
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ColorDetailsColorFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails, System.Drawing.Color)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ColorDetails.Color field handler
            ''' </summary>
            ''' <value>ColorDetailsColorFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ColorDetailsColorFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.ColorDetailsColorFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.ColorDetailsColorFieldHandler
                    Else
                        ' The static constructor in ColorDetails will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.colorDetailsColorFieldHandler, so just instantiate one and return it
                        Return New ColorDetailsColorFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ColorDetails.Color field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails.ColorMetaAttributeGuid
                End Get
            End Property
        End Class
#End Region
#End Region

    End Class
#Region "ColorDetails's Generated Constructor Code"
    Partial Public Class ColorDetails
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateColorDetails(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ColorDetails
            Return CreateColorDetails(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeColorDetails(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ColorDetails
            Return CreateAndInitializeColorDetails(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateColorDetails(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ColorDetails
            Return CType(partition.ElementFactory.CreateElement(GetType(ColorDetails)), ColorDetails)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeColorDetails(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ColorDetails
            Return CType(partition.ElementFactory.CreateElement(GetType(ColorDetails), assignments), ColorDetails)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ColorDetails"
    ''' <summary>
    ''' ColorDetails Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails))>
    Public NotInheritable Class ColorDetailsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ColorDetailsElementFactoryCreator
            Get
                Return New ColorDetailsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.MetaClassGuidString, "ShapeDecorator")>
    Partial Public Class ShapeDecorator
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails
#Region "ShapeDecorator's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "7f690600-d53e-48c1-a0e6-b7683cd1082d"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.MetaClassGuidString)
#End Region

#Region "Position's Generated  Field Code"
#Region "Position's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const PositionMetaAttributeGuidString As System.String = "537b7e3d-274f-4861-8657-14e3357d49dd"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly PositionMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.PositionMetaAttributeGuidString)
#End Region

#Region "Position's Generated Property Code"

        Private positionPropertyStorage As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorPosition = Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorPosition.Center

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType:=GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorPosition), DefaultEnumerationValueName:="Center"), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ShapeDecoratorPositionFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.PositionMetaAttributeGuidString, "ShapeDecorator.Position")>
        Public Property Position() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorPosition
            Get
                Return positionPropertyStorage
            End Get

            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorPosition)
                shapeDecoratorPositionFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ShapeDecoratorPositionFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ShapeDecorator.Position field
        ''' </summary>
        'INSTANT VB NOTE: The variable shapeDecoratorPositionFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared shapeDecoratorPositionFieldHandler_Renamed As ShapeDecoratorPositionFieldHandler = ShapeDecoratorPositionFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ShapeDecorator.Position
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ShapeDecoratorPositionFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorPosition)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ShapeDecorator.Position field handler
            ''' </summary>
            ''' <value>ShapeDecoratorPositionFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ShapeDecoratorPositionFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.ShapeDecoratorPositionFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.ShapeDecoratorPositionFieldHandler
                    Else
                        ' The static constructor in ShapeDecorator will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.shapeDecoratorPositionFieldHandler, so just instantiate one and return it
                        Return New ShapeDecoratorPositionFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ShapeDecorator.Position field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator.PositionMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ShapeDecorator</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorPosition
                Return element.positionPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorPosition, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorPosition) As Boolean
                oldValue = element.positionPropertyStorage
                If allowDuplicates OrElse oldValue IsNot value Then
                    OnValueChanging(element, oldValue, value)
                    element.positionPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "Collection Classes for ShapeDecorator"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ShapeDecoratorMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ShapeDecorator's Generated Constructor Code"
    Partial Public Class ShapeDecorator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeDecorator(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ShapeDecorator
            Return CreateShapeDecorator(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeDecorator(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeDecorator
            Return CreateAndInitializeShapeDecorator(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeDecorator(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ShapeDecorator
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeDecorator)), ShapeDecorator)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeDecorator(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeDecorator
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeDecorator), assignments), ShapeDecorator)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeDecorator"
    ''' <summary>
    ''' ShapeDecorator Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator))>
    Public NotInheritable Class ShapeDecoratorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeDecoratorElementFactoryCreator
            Get
                Return New ShapeDecoratorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.MetaClassGuidString, "ShapeText")>
    Partial Public Class ShapeText
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator
#Region "ShapeText's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "99272c48-c486-47ff-b057-93a91703ba93"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.MetaClassGuidString)
#End Region

#Region "DefaultTextId's Generated  Field Code"
#Region "DefaultTextId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const DefaultTextIdMetaAttributeGuidString As System.String = "9f9e55ea-4cdb-49f6-ba74-908d2e614895"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly DefaultTextIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.DefaultTextIdMetaAttributeGuidString)
#End Region

#Region "DefaultTextId's Generated Property Code"

        Private defaultTextIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ShapeTextDefaultTextIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.DefaultTextIdMetaAttributeGuidString, "ShapeText.DefaultTextId")>
        Public Property DefaultTextId() As System.String
            Get
                Return defaultTextIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                shapeTextDefaultTextIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ShapeTextDefaultTextIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ShapeText.DefaultTextId field
        ''' </summary>
        'INSTANT VB NOTE: The variable shapeTextDefaultTextIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared shapeTextDefaultTextIdFieldHandler_Renamed As ShapeTextDefaultTextIdFieldHandler = ShapeTextDefaultTextIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ShapeText.DefaultTextId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ShapeTextDefaultTextIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ShapeText.DefaultTextId field handler
            ''' </summary>
            ''' <value>ShapeTextDefaultTextIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ShapeTextDefaultTextIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.ShapeTextDefaultTextIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.ShapeTextDefaultTextIdFieldHandler
                    Else
                        ' The static constructor in ShapeText will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.shapeTextDefaultTextIdFieldHandler, so just instantiate one and return it
                        Return New ShapeTextDefaultTextIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ShapeText.DefaultTextId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText.DefaultTextIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ShapeText</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText) As System.String
                Return element.defaultTextIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.defaultTextIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.defaultTextIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "ShapeText's Generated Constructor Code"
    Partial Public Class ShapeText
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeText(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ShapeText
            Return CreateShapeText(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeText(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeText
            Return CreateAndInitializeShapeText(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeText(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ShapeText
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeText)), ShapeText)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeText(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeText
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeText), assignments), ShapeText)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeText"
    ''' <summary>
    ''' ShapeText Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText))>
    Public NotInheritable Class ShapeTextElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeTextElementFactoryCreator
            Get
                Return New ShapeTextElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.MetaClassGuidString, "ShapeIcon")>
    Partial Public Class ShapeIcon
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator
#Region "ShapeIcon's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c67fc6bc-c353-40e3-af24-f6bb35b5441c"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.MetaClassGuidString)
#End Region

#Region "IconId's Generated  Field Code"
#Region "IconId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const IconIdMetaAttributeGuidString As System.String = "cbf105bc-36a0-4f21-bbbd-f09cdbbdc932"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly IconIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.IconIdMetaAttributeGuidString)
#End Region

#Region "IconId's Generated Property Code"

        Private iconIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ShapeIconIconIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.IconIdMetaAttributeGuidString, "ShapeIcon.IconId")>
        Public Property IconId() As System.String
            Get
                Return iconIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                shapeIconIconIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ShapeIconIconIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ShapeIcon.IconId field
        ''' </summary>
        'INSTANT VB NOTE: The variable shapeIconIconIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared shapeIconIconIdFieldHandler_Renamed As ShapeIconIconIdFieldHandler = ShapeIconIconIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ShapeIcon.IconId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ShapeIconIconIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ShapeIcon.IconId field handler
            ''' </summary>
            ''' <value>ShapeIconIconIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ShapeIconIconIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.ShapeIconIconIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.ShapeIconIconIdFieldHandler
                    Else
                        ' The static constructor in ShapeIcon will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.shapeIconIconIdFieldHandler, so just instantiate one and return it
                        Return New ShapeIconIconIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ShapeIcon.IconId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon.IconIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ShapeIcon</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon) As System.String
                Return element.iconIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.iconIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.iconIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "ShapeIcon's Generated Constructor Code"
    Partial Public Class ShapeIcon
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeIcon(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ShapeIcon
            Return CreateShapeIcon(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeIcon(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeIcon
            Return CreateAndInitializeShapeIcon(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeIcon(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ShapeIcon
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeIcon)), ShapeIcon)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeIcon(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeIcon
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeIcon), assignments), ShapeIcon)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeIcon"
    ''' <summary>
    ''' ShapeIcon Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon))>
    Public NotInheritable Class ShapeIconElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeIconElementFactoryCreator
            Get
                Return New ShapeIconElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExpandCollapse.MetaClassGuidString, "ExpandCollapse")>
    Partial Public Class ExpandCollapse
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator
#Region "ExpandCollapse's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "7bd3c359-babd-4843-9a80-239fe5b50f92"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExpandCollapse.MetaClassGuidString)
#End Region

    End Class
#Region "ExpandCollapse's Generated Constructor Code"
    Partial Public Class ExpandCollapse
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExpandCollapse(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ExpandCollapse
            Return CreateExpandCollapse(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExpandCollapse(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ExpandCollapse
            Return CreateAndInitializeExpandCollapse(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExpandCollapse(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ExpandCollapse
            Return CType(partition.ElementFactory.CreateElement(GetType(ExpandCollapse)), ExpandCollapse)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExpandCollapse(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ExpandCollapse
            Return CType(partition.ElementFactory.CreateElement(GetType(ExpandCollapse), assignments), ExpandCollapse)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ExpandCollapse"
    ''' <summary>
    ''' ExpandCollapse Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExpandCollapse))>
    Public NotInheritable Class ExpandCollapseElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ExpandCollapse(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ExpandCollapseElementFactoryCreator
            Get
                Return New ExpandCollapseElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.MetaClassGuidString, "ConnectorDecorator")>
    Partial Public Class ConnectorDecorator
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails
#Region "ConnectorDecorator's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "2a56ecc0-172f-47aa-99ed-e9bdb09ba1ea"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.MetaClassGuidString)
#End Region

#Region "Position's Generated  Field Code"
#Region "Position's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const PositionMetaAttributeGuidString As System.String = "6ce604ef-1e7c-47f3-82db-821381ce129a"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly PositionMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.PositionMetaAttributeGuidString)
#End Region

#Region "Position's Generated Property Code"

        Private positionPropertyStorage As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorPosition = Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorPosition.CenterTop

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType:=GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorPosition), DefaultEnumerationValueName:="CenterTop"), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ConnectorDecoratorPositionFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.PositionMetaAttributeGuidString, "ConnectorDecorator.Position")>
        Public Property Position() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorPosition
            Get
                Return positionPropertyStorage
            End Get

            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorPosition)
                connectorDecoratorPositionFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ConnectorDecoratorPositionFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ConnectorDecorator.Position field
        ''' </summary>
        'INSTANT VB NOTE: The variable connectorDecoratorPositionFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared connectorDecoratorPositionFieldHandler_Renamed As ConnectorDecoratorPositionFieldHandler = ConnectorDecoratorPositionFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ConnectorDecorator.Position
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ConnectorDecoratorPositionFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorPosition)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ConnectorDecorator.Position field handler
            ''' </summary>
            ''' <value>ConnectorDecoratorPositionFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ConnectorDecoratorPositionFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.ConnectorDecoratorPositionFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.ConnectorDecoratorPositionFieldHandler
                    Else
                        ' The static constructor in ConnectorDecorator will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.connectorDecoratorPositionFieldHandler, so just instantiate one and return it
                        Return New ConnectorDecoratorPositionFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ConnectorDecorator.Position field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator.PositionMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ConnectorDecorator</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorPosition
                Return element.positionPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorPosition, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecoratorPosition) As Boolean
                oldValue = element.positionPropertyStorage
                If allowDuplicates OrElse oldValue IsNot value Then
                    OnValueChanging(element, oldValue, value)
                    element.positionPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "Collection Classes for ConnectorDecorator"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ConnectorDecoratorMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ConnectorDecorator's Generated Constructor Code"
    Partial Public Class ConnectorDecorator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorDecorator(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ConnectorDecorator
            Return CreateConnectorDecorator(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorDecorator(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorDecorator
            Return CreateAndInitializeConnectorDecorator(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorDecorator(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ConnectorDecorator
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorDecorator)), ConnectorDecorator)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorDecorator(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorDecorator
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorDecorator), assignments), ConnectorDecorator)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorDecorator"
    ''' <summary>
    ''' ConnectorDecorator Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator))>
    Public NotInheritable Class ConnectorDecoratorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorDecoratorElementFactoryCreator
            Get
                Return New ConnectorDecoratorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.MetaClassGuidString, "ConnectorText")>
    Partial Public Class ConnectorText
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator
#Region "ConnectorText's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "dd5cabab-3edf-45df-ab78-b3c108d301c6"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.MetaClassGuidString)
#End Region

#Region "DefaultTextId's Generated  Field Code"
#Region "DefaultTextId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const DefaultTextIdMetaAttributeGuidString As System.String = "d4c00aad-f864-4e4c-ba54-8b9bab0ed8d9"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly DefaultTextIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.DefaultTextIdMetaAttributeGuidString)
#End Region

#Region "DefaultTextId's Generated Property Code"

        Private defaultTextIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ConnectorTextDefaultTextIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.DefaultTextIdMetaAttributeGuidString, "ConnectorText.DefaultTextId")>
        Public Property DefaultTextId() As System.String
            Get
                Return defaultTextIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                connectorTextDefaultTextIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ConnectorTextDefaultTextIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ConnectorText.DefaultTextId field
        ''' </summary>
        'INSTANT VB NOTE: The variable connectorTextDefaultTextIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared connectorTextDefaultTextIdFieldHandler_Renamed As ConnectorTextDefaultTextIdFieldHandler = ConnectorTextDefaultTextIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ConnectorText.DefaultTextId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ConnectorTextDefaultTextIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ConnectorText.DefaultTextId field handler
            ''' </summary>
            ''' <value>ConnectorTextDefaultTextIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ConnectorTextDefaultTextIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.ConnectorTextDefaultTextIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.ConnectorTextDefaultTextIdFieldHandler
                    Else
                        ' The static constructor in ConnectorText will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.connectorTextDefaultTextIdFieldHandler, so just instantiate one and return it
                        Return New ConnectorTextDefaultTextIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ConnectorText.DefaultTextId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText.DefaultTextIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ConnectorText</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText) As System.String
                Return element.defaultTextIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.defaultTextIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.defaultTextIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "ConnectorText's Generated Constructor Code"
    Partial Public Class ConnectorText
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorText(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ConnectorText
            Return CreateConnectorText(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorText(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorText
            Return CreateAndInitializeConnectorText(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorText(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ConnectorText
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorText)), ConnectorText)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorText(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorText
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorText), assignments), ConnectorText)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorText"
    ''' <summary>
    ''' ConnectorText Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText))>
    Public NotInheritable Class ConnectorTextElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorTextElementFactoryCreator
            Get
                Return New ConnectorTextElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.MetaClassGuidString, "ConnectorIcon")>
    Partial Public Class ConnectorIcon
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator
#Region "ConnectorIcon's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c932c24c-58e7-413f-92f8-84a8a37d61b6"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.MetaClassGuidString)
#End Region

#Region "IconId's Generated  Field Code"
#Region "IconId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const IconIdMetaAttributeGuidString As System.String = "160f03a2-3594-4a00-aadb-f4f7542015ee"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly IconIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.IconIdMetaAttributeGuidString)
#End Region

#Region "IconId's Generated Property Code"

        Private iconIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ConnectorIconIconIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.IconIdMetaAttributeGuidString, "ConnectorIcon.IconId")>
        Public Property IconId() As System.String
            Get
                Return iconIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                connectorIconIconIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ConnectorIconIconIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ConnectorIcon.IconId field
        ''' </summary>
        'INSTANT VB NOTE: The variable connectorIconIconIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared connectorIconIconIdFieldHandler_Renamed As ConnectorIconIconIdFieldHandler = ConnectorIconIconIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ConnectorIcon.IconId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ConnectorIconIconIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ConnectorIcon.IconId field handler
            ''' </summary>
            ''' <value>ConnectorIconIconIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ConnectorIconIconIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.ConnectorIconIconIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.ConnectorIconIconIdFieldHandler
                    Else
                        ' The static constructor in ConnectorIcon will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.connectorIconIconIdFieldHandler, so just instantiate one and return it
                        Return New ConnectorIconIconIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ConnectorIcon.IconId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon.IconIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ConnectorIcon</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon) As System.String
                Return element.iconIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.iconIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.iconIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "ConnectorIcon's Generated Constructor Code"
    Partial Public Class ConnectorIcon
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorIcon(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ConnectorIcon
            Return CreateConnectorIcon(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorIcon(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorIcon
            Return CreateAndInitializeConnectorIcon(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorIcon(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ConnectorIcon
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorIcon)), ConnectorIcon)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorIcon(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorIcon
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorIcon), assignments), ConnectorIcon)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorIcon"
    ''' <summary>
    ''' ConnectorIcon Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon))>
    Public NotInheritable Class ConnectorIconElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIcon(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorIconElementFactoryCreator
            Get
                Return New ConnectorIconElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.MetaClassGuidString, "DashStyleDetails")>
    Partial Public Class DashStyleDetails
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramElementDetails
#Region "DashStyleDetails's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c1329e93-f6f4-4d1b-95ce-4654e4c79427"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.MetaClassGuidString)
#End Region

#Region "DashStyle's Generated  Field Code"
#Region "DashStyle's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const DashStyleMetaAttributeGuidString As System.String = "e98d5806-842b-4c87-85f8-2a7cd965389b"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly DashStyleMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.DashStyleMetaAttributeGuidString)
#End Region

#Region "DashStyle's Generated Property Code"

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(CustomStorage:=True, FieldHandlerType:=GetType(DashStyleDetailsDashStyleFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.DashStyleMetaAttributeGuidString, "DashStyleDetails.DashStyle")>
        Public Property DashStyle() As System.Drawing.Drawing2D.DashStyle
            Get
                Return dashStyleDetailsDashStyleFieldHandler_Renamed.GetFieldValue(Me)
            End Get

            Set(ByVal value As System.Drawing.Drawing2D.DashStyle)
                dashStyleDetailsDashStyleFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "DashStyleDetailsDashStyleFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for DashStyleDetails.DashStyle field
        ''' </summary>
        'INSTANT VB NOTE: The variable dashStyleDetailsDashStyleFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared dashStyleDetailsDashStyleFieldHandler_Renamed As DashStyleDetailsDashStyleFieldHandler = DashStyleDetailsDashStyleFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for DashStyleDetails.DashStyle
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class DashStyleDetailsDashStyleFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementCustomStoredFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails, System.Drawing.Drawing2D.DashStyle)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the DashStyleDetails.DashStyle field handler
            ''' </summary>
            ''' <value>DashStyleDetailsDashStyleFieldHandler</value>
            Public Shared ReadOnly Property Instance() As DashStyleDetailsDashStyleFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.DashStyleDetailsDashStyleFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.DashStyleDetailsDashStyleFieldHandler
                    Else
                        ' The static constructor in DashStyleDetails will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.dashStyleDetailsDashStyleFieldHandler, so just instantiate one and return it
                        Return New DashStyleDetailsDashStyleFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the DashStyleDetails.DashStyle field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails.DashStyleMetaAttributeGuid
                End Get
            End Property
        End Class
#End Region
#End Region

    End Class
#Region "DashStyleDetails's Generated Constructor Code"
    Partial Public Class DashStyleDetails
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDashStyleDetails(ByVal store As Microsoft.VisualStudio.Modeling.Store) As DashStyleDetails
            Return CreateDashStyleDetails(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDashStyleDetails(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DashStyleDetails
            Return CreateAndInitializeDashStyleDetails(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDashStyleDetails(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As DashStyleDetails
            Return CType(partition.ElementFactory.CreateElement(GetType(DashStyleDetails)), DashStyleDetails)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDashStyleDetails(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DashStyleDetails
            Return CType(partition.ElementFactory.CreateElement(GetType(DashStyleDetails), assignments), DashStyleDetails)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DashStyleDetails"
    ''' <summary>
    ''' DashStyleDetails Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails))>
    Public NotInheritable Class DashStyleDetailsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DashStyleDetailsElementFactoryCreator
            Get
                Return New DashStyleDetailsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.MetaClassGuidString, "NodeRendering")>
    Partial Public Class NodeRendering
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "NodeRendering's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "bc1d4e0c-65a8-4fad-a5a6-afa8d934cdba"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.MetaClassGuidString)
#End Region

#Region "IconId's Generated  Field Code"
#Region "IconId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const IconIdMetaAttributeGuidString As System.String = "e989b98b-76cd-46a4-9888-670fd75a520d"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly IconIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.IconIdMetaAttributeGuidString)
#End Region

#Region "IconId's Generated Property Code"

        Private iconIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(NodeRenderingIconIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.IconIdMetaAttributeGuidString, "NodeRendering.IconId")>
        Public Property IconId() As System.String
            Get
                Return iconIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                nodeRenderingIconIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "NodeRenderingIconIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for NodeRendering.IconId field
        ''' </summary>
        'INSTANT VB NOTE: The variable nodeRenderingIconIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared nodeRenderingIconIdFieldHandler_Renamed As NodeRenderingIconIdFieldHandler = NodeRenderingIconIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for NodeRendering.IconId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class NodeRenderingIconIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the NodeRendering.IconId field handler
            ''' </summary>
            ''' <value>NodeRenderingIconIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As NodeRenderingIconIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.NodeRenderingIconIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.NodeRenderingIconIdFieldHandler
                    Else
                        ' The static constructor in NodeRendering will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.nodeRenderingIconIdFieldHandler, so just instantiate one and return it
                        Return New NodeRenderingIconIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the NodeRendering.IconId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering.IconIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the NodeRendering</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering) As System.String
                Return element.iconIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.iconIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.iconIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "NodeRendering's Generated Constructor Code"
    Partial Public Class NodeRendering
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNodeRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store) As NodeRendering
            Return CreateNodeRendering(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNodeRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As NodeRendering
            Return CreateAndInitializeNodeRendering(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNodeRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As NodeRendering
            Return CType(partition.ElementFactory.CreateElement(GetType(NodeRendering)), NodeRendering)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNodeRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As NodeRendering
            Return CType(partition.ElementFactory.CreateElement(GetType(NodeRendering), assignments), NodeRendering)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for NodeRendering"
    ''' <summary>
    ''' NodeRendering Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering))>
    Public NotInheritable Class NodeRenderingElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As NodeRenderingElementFactoryCreator
            Get
                Return New NodeRenderingElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.MetaClassGuidString, "ClassNodeRendering")>
    Partial Public Class ClassNodeRendering
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering
#Region "ClassNodeRendering's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "effbaccc-31a5-428a-ac2f-4cd6fbcac0be"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.MetaClassGuidString)
#End Region

#Region "AppendClassNameToCaption's Generated  Field Code"
#Region "AppendClassNameToCaption's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const AppendClassNameToCaptionMetaAttributeGuidString As System.String = "2627af4e-9795-4f28-9a12-3df4295cca4b"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly AppendClassNameToCaptionMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.AppendClassNameToCaptionMetaAttributeGuidString)
#End Region

#Region "AppendClassNameToCaption's Generated Property Code"

        Private appendClassNameToCaptionPropertyStorage As System.Boolean = False

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=False), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ClassNodeRenderingAppendClassNameToCaptionFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.AppendClassNameToCaptionMetaAttributeGuidString, "ClassNodeRendering.AppendClassNameToCaption")>
        Public Property AppendClassNameToCaption() As System.Boolean
            Get
                Return appendClassNameToCaptionPropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                classNodeRenderingAppendClassNameToCaptionFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ClassNodeRenderingAppendClassNameToCaptionFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ClassNodeRendering.AppendClassNameToCaption field
        ''' </summary>
        'INSTANT VB NOTE: The variable classNodeRenderingAppendClassNameToCaptionFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared classNodeRenderingAppendClassNameToCaptionFieldHandler_Renamed As ClassNodeRenderingAppendClassNameToCaptionFieldHandler = ClassNodeRenderingAppendClassNameToCaptionFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ClassNodeRendering.AppendClassNameToCaption
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ClassNodeRenderingAppendClassNameToCaptionFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ClassNodeRendering.AppendClassNameToCaption field handler
            ''' </summary>
            ''' <value>ClassNodeRenderingAppendClassNameToCaptionFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ClassNodeRenderingAppendClassNameToCaptionFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.ClassNodeRenderingAppendClassNameToCaptionFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.ClassNodeRenderingAppendClassNameToCaptionFieldHandler
                    Else
                        ' The static constructor in ClassNodeRendering will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.classNodeRenderingAppendClassNameToCaptionFieldHandler, so just instantiate one and return it
                        Return New ClassNodeRenderingAppendClassNameToCaptionFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ClassNodeRendering.AppendClassNameToCaption field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering.AppendClassNameToCaptionMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ClassNodeRendering</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) As System.Boolean
                Return element.appendClassNameToCaptionPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.appendClassNameToCaptionPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.appendClassNameToCaptionPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Class's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassNodeRenderingMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassNodeRenderingMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassNodeRenderingMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ClassNodeRendering"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ClassNodeRenderingMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ClassNodeRendering's Generated Constructor Code"
    Partial Public Class ClassNodeRendering
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateClassNodeRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ClassNodeRendering
            Return CreateClassNodeRendering(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeClassNodeRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ClassNodeRendering
            Return CreateAndInitializeClassNodeRendering(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateClassNodeRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ClassNodeRendering
            Return CType(partition.ElementFactory.CreateElement(GetType(ClassNodeRendering)), ClassNodeRendering)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeClassNodeRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ClassNodeRendering
            Return CType(partition.ElementFactory.CreateElement(GetType(ClassNodeRendering), assignments), ClassNodeRendering)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ClassNodeRendering"
    ''' <summary>
    ''' ClassNodeRendering Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering))>
    Public NotInheritable Class ClassNodeRenderingElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ClassNodeRenderingElementFactoryCreator
            Get
                Return New ClassNodeRenderingElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Description("CollectionNodeRenderingDescription", GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel), Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionObjectModel.ResourceBaseName), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.MetaClassGuidString, "CollectionNodeRendering")>
    Partial Public Class CollectionNodeRendering
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeRendering
#Region "CollectionNodeRendering's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "ae94a1bd-e622-493b-b1dd-1a3a9f87c8af"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.MetaClassGuidString)
#End Region

#Region "CaptionId's Generated  Field Code"
#Region "CaptionId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const CaptionIdMetaAttributeGuidString As System.String = "a9ec4fe4-81a7-4dfb-af13-d6aa335021bc"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly CaptionIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.CaptionIdMetaAttributeGuidString)
#End Region

#Region "CaptionId's Generated Property Code"

        Private captionIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(CollectionNodeRenderingCaptionIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.CaptionIdMetaAttributeGuidString, "CollectionNodeRendering.CaptionId")>
        Public Property CaptionId() As System.String
            Get
                Return captionIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                collectionNodeRenderingCaptionIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "CollectionNodeRenderingCaptionIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for CollectionNodeRendering.CaptionId field
        ''' </summary>
        'INSTANT VB NOTE: The variable collectionNodeRenderingCaptionIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared collectionNodeRenderingCaptionIdFieldHandler_Renamed As CollectionNodeRenderingCaptionIdFieldHandler = CollectionNodeRenderingCaptionIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for CollectionNodeRendering.CaptionId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class CollectionNodeRenderingCaptionIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the CollectionNodeRendering.CaptionId field handler
            ''' </summary>
            ''' <value>CollectionNodeRenderingCaptionIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As CollectionNodeRenderingCaptionIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.CollectionNodeRenderingCaptionIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.CollectionNodeRenderingCaptionIdFieldHandler
                    Else
                        ' The static constructor in CollectionNodeRendering will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.collectionNodeRenderingCaptionIdFieldHandler, so just instantiate one and return it
                        Return New CollectionNodeRenderingCaptionIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the CollectionNodeRendering.CaptionId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering.CaptionIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the CollectionNodeRendering</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering) As System.String
                Return element.captionIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.captionIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.captionIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "CollectionNodeRendering's Generated Constructor Code"
    Partial Public Class CollectionNodeRendering
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store) As CollectionNodeRendering
            Return CreateCollectionNodeRendering(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeRendering
            Return CreateAndInitializeCollectionNodeRendering(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As CollectionNodeRendering
            Return CType(partition.ElementFactory.CreateElement(GetType(CollectionNodeRendering)), CollectionNodeRendering)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeRendering
            Return CType(partition.ElementFactory.CreateElement(GetType(CollectionNodeRendering), assignments), CollectionNodeRendering)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CollectionNodeRendering"
    ''' <summary>
    ''' CollectionNodeRendering Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering))>
    Public NotInheritable Class CollectionNodeRenderingElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CollectionNodeRenderingElementFactoryCreator
            Get
                Return New CollectionNodeRenderingElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape.MetaClassGuidString, "Shape")>
    Partial Public Class Shape
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "Shape's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "e34e57c8-719f-496c-9816-4e6b8141e9e2"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape.MetaClassGuidString)
#End Region

#Region "Decorators's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property Decorators() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecoratorMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.ShapeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.DecoratorsMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "Collection Classes for Shape"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ShapeMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "Shape's Generated Constructor Code"
    Partial Public Class Shape
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShape(ByVal store As Microsoft.VisualStudio.Modeling.Store) As Shape
            Return CreateShape(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Shape
            Return CreateAndInitializeShape(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As Shape
            Return CType(partition.ElementFactory.CreateElement(GetType(Shape)), Shape)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Shape
            Return CType(partition.ElementFactory.CreateElement(GetType(Shape), assignments), Shape)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for Shape"
    ''' <summary>
    ''' Shape Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape))>
    Public NotInheritable Class ShapeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeElementFactoryCreator
            Get
                Return New ShapeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.MetaClassGuidString, "OutlinedShape")>
    Partial Public Class OutlinedShape
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
#Region "OutlinedShape's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "7ee2c579-be66-4d3b-a73d-e955d01da083"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.MetaClassGuidString)
#End Region

#Region "InitialWidth's Generated  Field Code"
#Region "InitialWidth's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const InitialWidthMetaAttributeGuidString As System.String = "7b894222-bdd9-4c0a-b325-3c2ca060c25b"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly InitialWidthMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.InitialWidthMetaAttributeGuidString)
#End Region

#Region "InitialWidth's Generated Property Code"

        Private initialWidthPropertyStorage As System.Double = 0

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.DoubleDomainAttribute(MinValue:=-1.79769313486232E+307, MaxValue:=1.79769313486232E+307), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(OutlinedShapeInitialWidthFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.InitialWidthMetaAttributeGuidString, "OutlinedShape.InitialWidth")>
        Public Property InitialWidth() As System.Double
            Get
                Return initialWidthPropertyStorage
            End Get

            Set(ByVal value As System.Double)
                outlinedShapeInitialWidthFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "OutlinedShapeInitialWidthFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for OutlinedShape.InitialWidth field
        ''' </summary>
        'INSTANT VB NOTE: The variable outlinedShapeInitialWidthFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared outlinedShapeInitialWidthFieldHandler_Renamed As OutlinedShapeInitialWidthFieldHandler = OutlinedShapeInitialWidthFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for OutlinedShape.InitialWidth
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class OutlinedShapeInitialWidthFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape, System.Double)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the OutlinedShape.InitialWidth field handler
            ''' </summary>
            ''' <value>OutlinedShapeInitialWidthFieldHandler</value>
            Public Shared ReadOnly Property Instance() As OutlinedShapeInitialWidthFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.OutlinedShapeInitialWidthFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.OutlinedShapeInitialWidthFieldHandler
                    Else
                        ' The static constructor in OutlinedShape will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.outlinedShapeInitialWidthFieldHandler, so just instantiate one and return it
                        Return New OutlinedShapeInitialWidthFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the OutlinedShape.InitialWidth field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.InitialWidthMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the OutlinedShape</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape) As System.Double
                Return element.initialWidthPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape, ByVal value As System.Double, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Double) As Boolean
                oldValue = element.initialWidthPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.initialWidthPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "InitialHeight's Generated  Field Code"
#Region "InitialHeight's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const InitialHeightMetaAttributeGuidString As System.String = "58a1f843-ab41-43b7-826c-9af13e5a22b9"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly InitialHeightMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.InitialHeightMetaAttributeGuidString)
#End Region

#Region "InitialHeight's Generated Property Code"

        Private initialHeightPropertyStorage As System.Double = 0

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.DoubleDomainAttribute(MinValue:=-1.79769313486232E+307, MaxValue:=1.79769313486232E+307), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(OutlinedShapeInitialHeightFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.InitialHeightMetaAttributeGuidString, "OutlinedShape.InitialHeight")>
        Public Property InitialHeight() As System.Double
            Get
                Return initialHeightPropertyStorage
            End Get

            Set(ByVal value As System.Double)
                outlinedShapeInitialHeightFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "OutlinedShapeInitialHeightFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for OutlinedShape.InitialHeight field
        ''' </summary>
        'INSTANT VB NOTE: The variable outlinedShapeInitialHeightFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared outlinedShapeInitialHeightFieldHandler_Renamed As OutlinedShapeInitialHeightFieldHandler = OutlinedShapeInitialHeightFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for OutlinedShape.InitialHeight
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class OutlinedShapeInitialHeightFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape, System.Double)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the OutlinedShape.InitialHeight field handler
            ''' </summary>
            ''' <value>OutlinedShapeInitialHeightFieldHandler</value>
            Public Shared ReadOnly Property Instance() As OutlinedShapeInitialHeightFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.OutlinedShapeInitialHeightFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.OutlinedShapeInitialHeightFieldHandler
                    Else
                        ' The static constructor in OutlinedShape will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.outlinedShapeInitialHeightFieldHandler, so just instantiate one and return it
                        Return New OutlinedShapeInitialHeightFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the OutlinedShape.InitialHeight field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape.InitialHeightMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the OutlinedShape</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape) As System.Double
                Return element.initialHeightPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape, ByVal value As System.Double, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Double) As Boolean
                oldValue = element.initialHeightPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.initialHeightPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "FillColor's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property FillColor() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.ShapeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.FillColorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.ShapeMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.FillColorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.FillColorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.ShapeMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "OutlineColor's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property OutlineColor() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlinedShapeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlineColorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlinedShapeMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlineColorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlineColorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlinedShapeMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "OutlinedShape's Generated Constructor Code"
    Partial Public Class OutlinedShape
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateOutlinedShape(ByVal store As Microsoft.VisualStudio.Modeling.Store) As OutlinedShape
            Return CreateOutlinedShape(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeOutlinedShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As OutlinedShape
            Return CreateAndInitializeOutlinedShape(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateOutlinedShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As OutlinedShape
            Return CType(partition.ElementFactory.CreateElement(GetType(OutlinedShape)), OutlinedShape)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeOutlinedShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As OutlinedShape
            Return CType(partition.ElementFactory.CreateElement(GetType(OutlinedShape), assignments), OutlinedShape)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for OutlinedShape"
    ''' <summary>
    ''' OutlinedShape Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape))>
    Public NotInheritable Class OutlinedShapeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As OutlinedShapeElementFactoryCreator
            Get
                Return New OutlinedShapeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.MetaClassGuidString, "CompartmentShape")>
    Partial Public Class CompartmentShape
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape
#Region "CompartmentShape's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c2e8313e-721e-4b5e-a6ff-edd28913d277"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.MetaClassGuidString)
#End Region

#Region "Geometry's Generated  Field Code"
#Region "Geometry's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const GeometryMetaAttributeGuidString As System.String = "e36d34b4-e96e-465c-b6f1-18530b47e975"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly GeometryMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.GeometryMetaAttributeGuidString)
#End Region

#Region "Geometry's Generated Property Code"

        Private geometryPropertyStorage As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeGeometry = Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeGeometry.Rectangle

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType:=GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeGeometry), DefaultEnumerationValueName:="Rectangle"), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(CompartmentShapeGeometryFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.GeometryMetaAttributeGuidString, "CompartmentShape.Geometry")>
        Public Property Geometry() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeGeometry
            Get
                Return geometryPropertyStorage
            End Get

            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeGeometry)
                compartmentShapeGeometryFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "CompartmentShapeGeometryFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for CompartmentShape.Geometry field
        ''' </summary>
        'INSTANT VB NOTE: The variable compartmentShapeGeometryFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared compartmentShapeGeometryFieldHandler_Renamed As CompartmentShapeGeometryFieldHandler = CompartmentShapeGeometryFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for CompartmentShape.Geometry
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class CompartmentShapeGeometryFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeGeometry)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the CompartmentShape.Geometry field handler
            ''' </summary>
            ''' <value>CompartmentShapeGeometryFieldHandler</value>
            Public Shared ReadOnly Property Instance() As CompartmentShapeGeometryFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.CompartmentShapeGeometryFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.CompartmentShapeGeometryFieldHandler
                    Else
                        ' The static constructor in CompartmentShape will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.compartmentShapeGeometryFieldHandler, so just instantiate one and return it
                        Return New CompartmentShapeGeometryFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the CompartmentShape.Geometry field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.GeometryMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the CompartmentShape</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape) As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeGeometry
                Return element.geometryPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeGeometry, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeGeometry) As Boolean
                oldValue = element.geometryPropertyStorage
                If allowDuplicates OrElse oldValue IsNot value Then
                    OnValueChanging(element, oldValue, value)
                    element.geometryPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "IsSingleCompartmentHeaderVisible's Generated  Field Code"
#Region "IsSingleCompartmentHeaderVisible's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const IsSingleCompartmentHeaderVisibleMetaAttributeGuidString As System.String = "70776980-d542-46a9-8f48-9b9627fa4457"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly IsSingleCompartmentHeaderVisibleMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.IsSingleCompartmentHeaderVisibleMetaAttributeGuidString)
#End Region

#Region "IsSingleCompartmentHeaderVisible's Generated Property Code"

        Private isSingleCompartmentHeaderVisiblePropertyStorage As System.Boolean = True

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=True), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.IsSingleCompartmentHeaderVisibleMetaAttributeGuidString, "CompartmentShape.IsSingleCompartmentHeaderVisible")>
        Public Property IsSingleCompartmentHeaderVisible() As System.Boolean
            Get
                Return isSingleCompartmentHeaderVisiblePropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                compartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for CompartmentShape.IsSingleCompartmentHeaderVisible field
        ''' </summary>
        'INSTANT VB NOTE: The variable compartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared compartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler_Renamed As CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler = CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for CompartmentShape.IsSingleCompartmentHeaderVisible
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the CompartmentShape.IsSingleCompartmentHeaderVisible field handler
            ''' </summary>
            ''' <value>CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler</value>
            Public Shared ReadOnly Property Instance() As CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler
                    Else
                        ' The static constructor in CompartmentShape will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.compartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler, so just instantiate one and return it
                        Return New CompartmentShapeIsSingleCompartmentHeaderVisibleFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the CompartmentShape.IsSingleCompartmentHeaderVisible field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape.IsSingleCompartmentHeaderVisibleMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the CompartmentShape</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape) As System.Boolean
                Return element.isSingleCompartmentHeaderVisiblePropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.isSingleCompartmentHeaderVisiblePropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.isSingleCompartmentHeaderVisiblePropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Compartments's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property Compartments() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentShapeMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentsMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "CompartmentShape's Generated Constructor Code"
    Partial Public Class CompartmentShape
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentShape(ByVal store As Microsoft.VisualStudio.Modeling.Store) As CompartmentShape
            Return CreateCompartmentShape(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentShape
            Return CreateAndInitializeCompartmentShape(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As CompartmentShape
            Return CType(partition.ElementFactory.CreateElement(GetType(CompartmentShape)), CompartmentShape)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentShape
            Return CType(partition.ElementFactory.CreateElement(GetType(CompartmentShape), assignments), CompartmentShape)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentShape"
    ''' <summary>
    ''' CompartmentShape Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape))>
    Public NotInheritable Class CompartmentShapeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentShapeElementFactoryCreator
            Get
                Return New CompartmentShapeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.MetaClassGuidString, "GeometryShape")>
    Partial Public Class GeometryShape
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape
#Region "GeometryShape's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "d55a03a6-9ff7-43f4-a43a-a92b01ca9a59"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.MetaClassGuidString)
#End Region

#Region "Geometry's Generated  Field Code"
#Region "Geometry's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const GeometryMetaAttributeGuidString As System.String = "c5313341-3475-4076-bf06-9debff59f5c7"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly GeometryMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.GeometryMetaAttributeGuidString)
#End Region

#Region "Geometry's Generated Property Code"

        Private geometryPropertyStorage As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeGeometry = Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeGeometry.Rectangle

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType:=GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeGeometry), DefaultEnumerationValueName:="Rectangle"), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(GeometryShapeGeometryFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.GeometryMetaAttributeGuidString, "GeometryShape.Geometry")>
        Public Property Geometry() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeGeometry
            Get
                Return geometryPropertyStorage
            End Get

            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeGeometry)
                geometryShapeGeometryFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "GeometryShapeGeometryFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for GeometryShape.Geometry field
        ''' </summary>
        'INSTANT VB NOTE: The variable geometryShapeGeometryFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared geometryShapeGeometryFieldHandler_Renamed As GeometryShapeGeometryFieldHandler = GeometryShapeGeometryFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for GeometryShape.Geometry
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class GeometryShapeGeometryFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeGeometry)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the GeometryShape.Geometry field handler
            ''' </summary>
            ''' <value>GeometryShapeGeometryFieldHandler</value>
            Public Shared ReadOnly Property Instance() As GeometryShapeGeometryFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.GeometryShapeGeometryFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.GeometryShapeGeometryFieldHandler
                    Else
                        ' The static constructor in GeometryShape will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.geometryShapeGeometryFieldHandler, so just instantiate one and return it
                        Return New GeometryShapeGeometryFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the GeometryShape.Geometry field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape.GeometryMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the GeometryShape</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeGeometry
                Return element.geometryPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeGeometry, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeGeometry) As Boolean
                oldValue = element.geometryPropertyStorage
                If allowDuplicates OrElse oldValue IsNot value Then
                    OnValueChanging(element, oldValue, value)
                    element.geometryPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "GeometryShape's Generated Constructor Code"
    Partial Public Class GeometryShape
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateGeometryShape(ByVal store As Microsoft.VisualStudio.Modeling.Store) As GeometryShape
            Return CreateGeometryShape(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeGeometryShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As GeometryShape
            Return CreateAndInitializeGeometryShape(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateGeometryShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As GeometryShape
            Return CType(partition.ElementFactory.CreateElement(GetType(GeometryShape)), GeometryShape)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeGeometryShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As GeometryShape
            Return CType(partition.ElementFactory.CreateElement(GetType(GeometryShape), assignments), GeometryShape)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for GeometryShape"
    ''' <summary>
    ''' GeometryShape Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape))>
    Public NotInheritable Class GeometryShapeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.GeometryShape(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As GeometryShapeElementFactoryCreator
            Get
                Return New GeometryShapeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.MetaClassGuidString, "PathShape")>
    Partial Public Class PathShape
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape
#Region "PathShape's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "88fa85a2-8823-4f9a-960e-9bdeb3ec32b9"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.MetaClassGuidString)
#End Region

#Region "Path's Generated  Field Code"
#Region "Path's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const PathMetaAttributeGuidString As System.String = "540ac62e-2348-4335-b52c-3dd2d4dd6f5d"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly PathMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.PathMetaAttributeGuidString)
#End Region

#Region "Path's Generated Property Code"

        Private pathPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(PathShapePathFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.PathMetaAttributeGuidString, "PathShape.Path")>
        Public Property Path() As System.String
            Get
                Return pathPropertyStorage
            End Get

            Set(ByVal value As System.String)
                pathShapePathFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "PathShapePathFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for PathShape.Path field
        ''' </summary>
        'INSTANT VB NOTE: The variable pathShapePathFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared pathShapePathFieldHandler_Renamed As PathShapePathFieldHandler = PathShapePathFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for PathShape.Path
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class PathShapePathFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the PathShape.Path field handler
            ''' </summary>
            ''' <value>PathShapePathFieldHandler</value>
            Public Shared ReadOnly Property Instance() As PathShapePathFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.PathShapePathFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.PathShapePathFieldHandler
                    Else
                        ' The static constructor in PathShape will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.pathShapePathFieldHandler, so just instantiate one and return it
                        Return New PathShapePathFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the PathShape.Path field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape.PathMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the PathShape</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape) As System.String
                Return element.pathPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.pathPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.pathPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "PathShape's Generated Constructor Code"
    Partial Public Class PathShape
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePathShape(ByVal store As Microsoft.VisualStudio.Modeling.Store) As PathShape
            Return CreatePathShape(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePathShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PathShape
            Return CreateAndInitializePathShape(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePathShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As PathShape
            Return CType(partition.ElementFactory.CreateElement(GetType(PathShape)), PathShape)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePathShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PathShape
            Return CType(partition.ElementFactory.CreateElement(GetType(PathShape), assignments), PathShape)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for PathShape"
    ''' <summary>
    ''' PathShape Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape))>
    Public NotInheritable Class PathShapeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.PathShape(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As PathShapeElementFactoryCreator
            Get
                Return New PathShapeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.MetaClassGuidString, "ImageShape")>
    Partial Public Class ImageShape
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
#Region "ImageShape's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "2fd998d7-a283-488c-b419-36fb9499ea6d"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.MetaClassGuidString)
#End Region

#Region "ImageId's Generated  Field Code"
#Region "ImageId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const ImageIdMetaAttributeGuidString As System.String = "80af3308-7aee-49a4-8988-62c0fde35266"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly ImageIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.ImageIdMetaAttributeGuidString)
#End Region

#Region "ImageId's Generated Property Code"

        Private imageIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ImageShapeImageIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.ImageIdMetaAttributeGuidString, "ImageShape.ImageId")>
        Public Property ImageId() As System.String
            Get
                Return imageIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                imageShapeImageIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ImageShapeImageIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ImageShape.ImageId field
        ''' </summary>
        'INSTANT VB NOTE: The variable imageShapeImageIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared imageShapeImageIdFieldHandler_Renamed As ImageShapeImageIdFieldHandler = ImageShapeImageIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ImageShape.ImageId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ImageShapeImageIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ImageShape.ImageId field handler
            ''' </summary>
            ''' <value>ImageShapeImageIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ImageShapeImageIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.ImageShapeImageIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.ImageShapeImageIdFieldHandler
                    Else
                        ' The static constructor in ImageShape will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.imageShapeImageIdFieldHandler, so just instantiate one and return it
                        Return New ImageShapeImageIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ImageShape.ImageId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape.ImageIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ImageShape</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape) As System.String
                Return element.imageIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.imageIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.imageIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "ImageShape's Generated Constructor Code"
    Partial Public Class ImageShape
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateImageShape(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ImageShape
            Return CreateImageShape(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeImageShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ImageShape
            Return CreateAndInitializeImageShape(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateImageShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ImageShape
            Return CType(partition.ElementFactory.CreateElement(GetType(ImageShape)), ImageShape)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeImageShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ImageShape
            Return CType(partition.ElementFactory.CreateElement(GetType(ImageShape), assignments), ImageShape)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ImageShape"
    ''' <summary>
    ''' ImageShape Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape))>
    Public NotInheritable Class ImageShapeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ImageShape(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ImageShapeElementFactoryCreator
            Get
                Return New ImageShapeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.MetaClassGuidString, "Compartment")>
    Partial Public Class Compartment
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "Compartment's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "847c56b8-80a4-48e5-ba45-191742b3951f"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.MetaClassGuidString)
#End Region

#Region "CaptionId's Generated  Field Code"
#Region "CaptionId's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const CaptionIdMetaAttributeGuidString As System.String = "d3b8d6da-f6e8-4a43-8c86-9c9c1f20d076"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly CaptionIdMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.CaptionIdMetaAttributeGuidString)
#End Region

#Region "CaptionId's Generated Property Code"

        Private captionIdPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(CompartmentCaptionIdFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.CaptionIdMetaAttributeGuidString, "Compartment.CaptionId")>
        Public Property CaptionId() As System.String
            Get
                Return captionIdPropertyStorage
            End Get

            Set(ByVal value As System.String)
                compartmentCaptionIdFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "CompartmentCaptionIdFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for Compartment.CaptionId field
        ''' </summary>
        'INSTANT VB NOTE: The variable compartmentCaptionIdFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared compartmentCaptionIdFieldHandler_Renamed As CompartmentCaptionIdFieldHandler = CompartmentCaptionIdFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for Compartment.CaptionId
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class CompartmentCaptionIdFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the Compartment.CaptionId field handler
            ''' </summary>
            ''' <value>CompartmentCaptionIdFieldHandler</value>
            Public Shared ReadOnly Property Instance() As CompartmentCaptionIdFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.CompartmentCaptionIdFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.CompartmentCaptionIdFieldHandler
                    Else
                        ' The static constructor in Compartment will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.compartmentCaptionIdFieldHandler, so just instantiate one and return it
                        Return New CompartmentCaptionIdFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the Compartment.CaptionId field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment.CaptionIdMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the Compartment</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) As System.String
                Return element.captionIdPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.captionIdPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.captionIdPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "CompartmentFillColor's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property CompartmentFillColor() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentFillColorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentFillColorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentFillColorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "TitleFillColor's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property TitleFillColor() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.CompartmentMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.TitleFillColorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.CompartmentMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.TitleFillColorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.TitleFillColorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.CompartmentMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for Compartment"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class CompartmentMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "Compartment's Generated Constructor Code"
    Partial Public Class Compartment
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartment(ByVal store As Microsoft.VisualStudio.Modeling.Store) As Compartment
            Return CreateCompartment(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartment(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Compartment
            Return CreateAndInitializeCompartment(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartment(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As Compartment
            Return CType(partition.ElementFactory.CreateElement(GetType(Compartment)), Compartment)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartment(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Compartment
            Return CType(partition.ElementFactory.CreateElement(GetType(Compartment), assignments), Compartment)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for Compartment"
    ''' <summary>
    ''' Compartment Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment))>
    Public NotInheritable Class CompartmentElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentElementFactoryCreator
            Get
                Return New CompartmentElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment.MetaClassGuidString, "ListCompartment")>
    Partial Public Class ListCompartment
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment
#Region "ListCompartment's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "fb230165-ac1f-43f9-a772-4988121a105e"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment.MetaClassGuidString)
#End Region

    End Class
#Region "ListCompartment's Generated Constructor Code"
    Partial Public Class ListCompartment
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateListCompartment(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ListCompartment
            Return CreateListCompartment(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeListCompartment(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ListCompartment
            Return CreateAndInitializeListCompartment(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateListCompartment(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ListCompartment
            Return CType(partition.ElementFactory.CreateElement(GetType(ListCompartment)), ListCompartment)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeListCompartment(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ListCompartment
            Return CType(partition.ElementFactory.CreateElement(GetType(ListCompartment), assignments), ListCompartment)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ListCompartment"
    ''' <summary>
    ''' ListCompartment Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment))>
    Public NotInheritable Class ListCompartmentElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ListCompartmentElementFactoryCreator
            Get
                Return New ListCompartmentElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap.MetaClassGuidString, "ConnectorMap")>
    Partial Public Class ConnectorMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ConnectorMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "bbb28f3c-7285-4019-9fd7-7846debc14fd"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap.MetaClassGuidString)
#End Region

#Region "TextMaps's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property TextMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.ConnectorMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.TextMapsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "Class's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlReferenceType
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ConnectorMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ClassMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlReferenceType)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlReferenceType)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ConnectorMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ClassMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlReferenceType = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlReferenceType)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ClassMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ConnectorMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "Connector's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Connector() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "IconMaps's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property IconMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMapMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMapMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.ConnectorMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.IconMapsMetaRoleGuid)
            End Get
        End Property
#End Region
#Region "SourceMap's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property SourceMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.ConnectorMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.SourceMapMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.ConnectorMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.SourceMapMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.SourceMapMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.ConnectorMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "TargetMap's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property TargetMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.ConnectorMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.TargetMapMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.ConnectorMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.TargetMapMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.TargetMapMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.ConnectorMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ConnectorMap"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ConnectorMapMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ConnectorMap's Generated Constructor Code"
    Partial Public Class ConnectorMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ConnectorMap
            Return CreateConnectorMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMap
            Return CreateAndInitializeConnectorMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ConnectorMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorMap)), ConnectorMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorMap), assignments), ConnectorMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorMap"
    ''' <summary>
    ''' ConnectorMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap))>
    Public NotInheritable Class ConnectorMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorMapElementFactoryCreator
            Get
                Return New ConnectorMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap.MetaClassGuidString, "ShapeIconMap")>
    Partial Public Class ShapeIconMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ShapeIconMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "e5e016c5-3ecc-472f-b2a7-9f157cf301b6"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap.MetaClassGuidString)
#End Region

#Region "IconDecorator's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property IconDecorator() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconDecoratorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconDecoratorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconDecoratorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "VisibilityExpression's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property VisibilityExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.ShapeIconMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.VisibilityExpressionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.ShapeIconMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.VisibilityExpressionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.VisibilityExpressionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.ShapeIconMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ShapeIconMap"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ShapeIconMapMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ShapeIconMap's Generated Constructor Code"
    Partial Public Class ShapeIconMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeIconMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ShapeIconMap
            Return CreateShapeIconMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeIconMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeIconMap
            Return CreateAndInitializeShapeIconMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeIconMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ShapeIconMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeIconMap)), ShapeIconMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeIconMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeIconMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ShapeIconMap), assignments), ShapeIconMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeIconMap"
    ''' <summary>
    ''' ShapeIconMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap))>
    Public NotInheritable Class ShapeIconMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeIconMapElementFactoryCreator
            Get
                Return New ShapeIconMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap.MetaClassGuidString, "ConnectorTextMap")>
    Partial Public Class ConnectorTextMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ConnectorTextMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "a5316d6a-41e7-4805-ace6-d7d4ad1cf84d"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap.MetaClassGuidString)
#End Region

#Region "TextDecorator's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property TextDecorator() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.ConnectorTextMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.TextDecoratorMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.ConnectorTextMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.TextDecoratorMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.TextDecoratorMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.ConnectorTextMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "ValueExpression's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property ValueExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ConnectorTextMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ValueExpressionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ConnectorTextMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ValueExpressionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ValueExpressionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ConnectorTextMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ConnectorTextMap"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ConnectorTextMapMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ConnectorTextMap's Generated Constructor Code"
    Partial Public Class ConnectorTextMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorTextMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ConnectorTextMap
            Return CreateConnectorTextMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorTextMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorTextMap
            Return CreateAndInitializeConnectorTextMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorTextMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ConnectorTextMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorTextMap)), ConnectorTextMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorTextMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorTextMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorTextMap), assignments), ConnectorTextMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorTextMap"
    ''' <summary>
    ''' ConnectorTextMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap))>
    Public NotInheritable Class ConnectorTextMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorTextMapElementFactoryCreator
            Get
                Return New ConnectorTextMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap.MetaClassGuidString, "ConnectorIconMap")>
    Partial Public Class ConnectorIconMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ConnectorIconMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "9092849f-6f1b-4d4d-aa4d-7b4ae5fe4ea7"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap.MetaClassGuidString)
#End Region

    End Class
#Region "Collection Classes for ConnectorIconMap"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ConnectorIconMapMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ConnectorIconMap's Generated Constructor Code"
    Partial Public Class ConnectorIconMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorIconMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ConnectorIconMap
            Return CreateConnectorIconMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorIconMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorIconMap
            Return CreateAndInitializeConnectorIconMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorIconMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ConnectorIconMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorIconMap)), ConnectorIconMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorIconMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorIconMap
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorIconMap), assignments), ConnectorIconMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorIconMap"
    ''' <summary>
    ''' ConnectorIconMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap))>
    Public NotInheritable Class ConnectorIconMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorIconMapElementFactoryCreator
            Get
                Return New ConnectorIconMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap.MetaClassGuidString, "SourceMap")>
    Partial Public Class SourceMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "SourceMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "bf110281-98d4-4efb-a119-340b6c10bc90"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap.MetaClassGuidString)
#End Region

#Region "ModelNavigationExpression's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property ModelNavigationExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.SourceMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.SourceMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.SourceMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "SourceMap's Generated Constructor Code"
    Partial Public Class SourceMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateSourceMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As SourceMap
            Return CreateSourceMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeSourceMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As SourceMap
            Return CreateAndInitializeSourceMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateSourceMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As SourceMap
            Return CType(partition.ElementFactory.CreateElement(GetType(SourceMap)), SourceMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeSourceMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As SourceMap
            Return CType(partition.ElementFactory.CreateElement(GetType(SourceMap), assignments), SourceMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for SourceMap"
    ''' <summary>
    ''' SourceMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap))>
    Public NotInheritable Class SourceMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As SourceMapElementFactoryCreator
            Get
                Return New SourceMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap.MetaClassGuidString, "TargetMap")>
    Partial Public Class TargetMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "TargetMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "9daa3725-e189-4c20-934e-756cd6dfe6ae"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap.MetaClassGuidString)
#End Region

#Region "ModelNavigationExpression's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property ModelNavigationExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.TargetMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.TargetMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.TargetMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "TargetMap's Generated Constructor Code"
    Partial Public Class TargetMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateTargetMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As TargetMap
            Return CreateTargetMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeTargetMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As TargetMap
            Return CreateAndInitializeTargetMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateTargetMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As TargetMap
            Return CType(partition.ElementFactory.CreateElement(GetType(TargetMap)), TargetMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeTargetMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As TargetMap
            Return CType(partition.ElementFactory.CreateElement(GetType(TargetMap), assignments), TargetMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for TargetMap"
    ''' <summary>
    ''' TargetMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap))>
    Public NotInheritable Class TargetMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As TargetMapElementFactoryCreator
            Get
                Return New TargetMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.MetaClassGuidString, "ConnectorEnd")>
    Partial Public Class ConnectorEnd
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ConnectorEnd's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "38b7173c-d645-4580-8568-582c94a2cf78"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.MetaClassGuidString)
#End Region

#Region "ArrowStyle's Generated  Field Code"
#Region "ArrowStyle's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const ArrowStyleMetaAttributeGuidString As System.String = "ea0fea73-fe43-4bd4-b6e7-a0287600fec7"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly ArrowStyleMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.ArrowStyleMetaAttributeGuidString)
#End Region

#Region "ArrowStyle's Generated Property Code"

        Private arrowStylePropertyStorage As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorArrowStyle = Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorArrowStyle.None

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType:=GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorArrowStyle), DefaultEnumerationValueName:="None"), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ConnectorEndArrowStyleFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.ArrowStyleMetaAttributeGuidString, "ConnectorEnd.ArrowStyle")>
        Public Property ArrowStyle() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorArrowStyle
            Get
                Return arrowStylePropertyStorage
            End Get

            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorArrowStyle)
                connectorEndArrowStyleFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ConnectorEndArrowStyleFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ConnectorEnd.ArrowStyle field
        ''' </summary>
        'INSTANT VB NOTE: The variable connectorEndArrowStyleFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared connectorEndArrowStyleFieldHandler_Renamed As ConnectorEndArrowStyleFieldHandler = ConnectorEndArrowStyleFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ConnectorEnd.ArrowStyle
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ConnectorEndArrowStyleFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorArrowStyle)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ConnectorEnd.ArrowStyle field handler
            ''' </summary>
            ''' <value>ConnectorEndArrowStyleFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ConnectorEndArrowStyleFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.ConnectorEndArrowStyleFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.ConnectorEndArrowStyleFieldHandler
                    Else
                        ' The static constructor in ConnectorEnd will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.connectorEndArrowStyleFieldHandler, so just instantiate one and return it
                        Return New ConnectorEndArrowStyleFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ConnectorEnd.ArrowStyle field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd.ArrowStyleMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ConnectorEnd</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorArrowStyle
                Return element.arrowStylePropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorArrowStyle, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorArrowStyle) As Boolean
                oldValue = element.arrowStylePropertyStorage
                If allowDuplicates OrElse oldValue IsNot value Then
                    OnValueChanging(element, oldValue, value)
                    element.arrowStylePropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "PermittedShapes's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property PermittedShapes() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMoveableCollection
            Get
                Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.ConnectorEndMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.PermittedShapesMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "Collection Classes for ConnectorEnd"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ConnectorEndMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ConnectorEnd's Generated Constructor Code"
    Partial Public Class ConnectorEnd
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorEnd(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ConnectorEnd
            Return CreateConnectorEnd(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorEnd(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorEnd
            Return CreateAndInitializeConnectorEnd(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorEnd(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ConnectorEnd
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorEnd)), ConnectorEnd)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorEnd(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorEnd
            Return CType(partition.ElementFactory.CreateElement(GetType(ConnectorEnd), assignments), ConnectorEnd)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorEnd"
    ''' <summary>
    ''' ConnectorEnd Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd))>
    Public NotInheritable Class ConnectorEndElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorEndElementFactoryCreator
            Get
                Return New ConnectorEndElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.MetaClassGuidString, "ObjectModel")>
    Partial Public Class ObjectModel
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ObjectModel's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "8a4f6d08-8e3e-4776-be9b-98d188083082"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.MetaClassGuidString)
#End Region

#Region "FileName's Generated  Field Code"
#Region "FileName's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const FileNameMetaAttributeGuidString As System.String = "2a94ea2f-317b-4a70-b976-8177dbfa6670"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly FileNameMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.FileNameMetaAttributeGuidString)
#End Region

#Region "FileName's Generated Property Code"

        Private fileNamePropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ObjectModelFileNameFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.FileNameMetaAttributeGuidString, "ObjectModel.FileName")>
        Public Property FileName() As System.String
            Get
                Return fileNamePropertyStorage
            End Get

            Set(ByVal value As System.String)
                objectModelFileNameFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ObjectModelFileNameFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for ObjectModel.FileName field
        ''' </summary>
        'INSTANT VB NOTE: The variable objectModelFileNameFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared objectModelFileNameFieldHandler_Renamed As ObjectModelFileNameFieldHandler = ObjectModelFileNameFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for ObjectModel.FileName
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ObjectModelFileNameFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the ObjectModel.FileName field handler
            ''' </summary>
            ''' <value>ObjectModelFileNameFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ObjectModelFileNameFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.ObjectModelFileNameFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.ObjectModelFileNameFieldHandler
                    Else
                        ' The static constructor in ObjectModel will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.objectModelFileNameFieldHandler, so just instantiate one and return it
                        Return New ObjectModelFileNameFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the ObjectModel.FileName field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel.FileNameMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the ObjectModel</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) As System.String
                Return element.fileNamePropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.fileNamePropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.fileNamePropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Model's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Model() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlModel
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ObjectModelMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ModelMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlModel)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlModel)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ObjectModelMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ModelMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlModel = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlModel)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ModelMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ObjectModelMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ObjectModel"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ObjectModelMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ObjectModel's Generated Constructor Code"
    Partial Public Class ObjectModel
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateObjectModel(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ObjectModel
            Return CreateObjectModel(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeObjectModel(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ObjectModel
            Return CreateAndInitializeObjectModel(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateObjectModel(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ObjectModel
            Return CType(partition.ElementFactory.CreateElement(GetType(ObjectModel)), ObjectModel)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeObjectModel(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ObjectModel
            Return CType(partition.ElementFactory.CreateElement(GetType(ObjectModel), assignments), ObjectModel)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ObjectModel"
    ''' <summary>
    ''' ObjectModel Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel))>
    Public NotInheritable Class ObjectModelElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ObjectModelElementFactoryCreator
            Get
                Return New ObjectModelElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression.MetaClassGuidString, "ModelNavigationExpression")>
    Partial Public Class ModelNavigationExpression
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "ModelNavigationExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "b0c0ba16-f969-47c0-8ea2-00717a541f73"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression.MetaClassGuidString)
#End Region

    End Class
#Region "ModelNavigationExpression's Generated Constructor Code"
    Partial Public Class ModelNavigationExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateModelNavigationExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ModelNavigationExpression
            Return CreateModelNavigationExpression(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeModelNavigationExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ModelNavigationExpression
            Return CreateAndInitializeModelNavigationExpression(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateModelNavigationExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ModelNavigationExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(ModelNavigationExpression)), ModelNavigationExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeModelNavigationExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ModelNavigationExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(ModelNavigationExpression), assignments), ModelNavigationExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ModelNavigationExpression"
    ''' <summary>
    ''' ModelNavigationExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression))>
    Public NotInheritable Class ModelNavigationExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ModelNavigationExpressionElementFactoryCreator
            Get
                Return New ModelNavigationExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression.MetaClassGuidString, "ValueExpression")>
    Partial Public Class ValueExpression
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression
#Region "ValueExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "33569595-25a1-4341-aaf9-56f879fb660e"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression.MetaClassGuidString)
#End Region

    End Class
#Region "ValueExpression's Generated Constructor Code"
    Partial Public Class ValueExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ValueExpression
            Return CreateValueExpression(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValueExpression
            Return CreateAndInitializeValueExpression(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ValueExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(ValueExpression)), ValueExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValueExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(ValueExpression), assignments), ValueExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ValueExpression"
    ''' <summary>
    ''' ValueExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression))>
    Public NotInheritable Class ValueExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ValueExpressionElementFactoryCreator
            Get
                Return New ValueExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression.MetaClassGuidString, "ValuePropertyExpression")>
    Partial Public Class ValuePropertyExpression
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression
#Region "ValuePropertyExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "3f801150-b45c-471b-ba92-ac0330c8cbd2"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression.MetaClassGuidString)
#End Region

#Region "ValueProperty's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property ValueProperty() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ModelValuePropertyExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ValuePropertyMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ModelValuePropertyExpressionMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ValuePropertyMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ValuePropertyMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ModelValuePropertyExpressionMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ValuePropertyExpression"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ValuePropertyExpressionMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ValuePropertyExpression's Generated Constructor Code"
    Partial Public Class ValuePropertyExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValuePropertyExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ValuePropertyExpression
            Return CreateValuePropertyExpression(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValuePropertyExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValuePropertyExpression
            Return CreateAndInitializeValuePropertyExpression(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValuePropertyExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ValuePropertyExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(ValuePropertyExpression)), ValuePropertyExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValuePropertyExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValuePropertyExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(ValuePropertyExpression), assignments), ValuePropertyExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ValuePropertyExpression"
    ''' <summary>
    ''' ValuePropertyExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression))>
    Public NotInheritable Class ValuePropertyExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ValuePropertyExpressionElementFactoryCreator
            Get
                Return New ValuePropertyExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.MetaClassGuidString, "XPathValueExpression")>
    Partial Public Class XPathValueExpression
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression
#Region "XPathValueExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "0a1654e8-c531-405b-bcdc-7f659aa32e55"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.MetaClassGuidString)
#End Region

#Region "ModelXPath's Generated  Field Code"
#Region "ModelXPath's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const ModelXPathMetaAttributeGuidString As System.String = "7047efb0-0150-4e6b-ab51-a803675879b5"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly ModelXPathMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.ModelXPathMetaAttributeGuidString)
#End Region

#Region "ModelXPath's Generated Property Code"

        Private modelXPathPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(XPathValueExpressionModelXPathFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.ModelXPathMetaAttributeGuidString, "XPathValueExpression.ModelXPath")>
        Public Property ModelXPath() As System.String
            Get
                Return modelXPathPropertyStorage
            End Get

            Set(ByVal value As System.String)
                xPathValueExpressionModelXPathFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "XPathValueExpressionModelXPathFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for XPathValueExpression.ModelXPath field
        ''' </summary>
        'INSTANT VB NOTE: The variable xPathValueExpressionModelXPathFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared xPathValueExpressionModelXPathFieldHandler_Renamed As XPathValueExpressionModelXPathFieldHandler = XPathValueExpressionModelXPathFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for XPathValueExpression.ModelXPath
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class XPathValueExpressionModelXPathFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the XPathValueExpression.ModelXPath field handler
            ''' </summary>
            ''' <value>XPathValueExpressionModelXPathFieldHandler</value>
            Public Shared ReadOnly Property Instance() As XPathValueExpressionModelXPathFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.XPathValueExpressionModelXPathFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.XPathValueExpressionModelXPathFieldHandler
                    Else
                        ' The static constructor in XPathValueExpression will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.xPathValueExpressionModelXPathFieldHandler, so just instantiate one and return it
                        Return New XPathValueExpressionModelXPathFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the XPathValueExpression.ModelXPath field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression.ModelXPathMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the XPathValueExpression</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression) As System.String
                Return element.modelXPathPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.modelXPathPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.modelXPathPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "XPathValueExpression's Generated Constructor Code"
    Partial Public Class XPathValueExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateXPathValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store) As XPathValueExpression
            Return CreateXPathValueExpression(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeXPathValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As XPathValueExpression
            Return CreateAndInitializeXPathValueExpression(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateXPathValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As XPathValueExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(XPathValueExpression)), XPathValueExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeXPathValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As XPathValueExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(XPathValueExpression), assignments), XPathValueExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for XPathValueExpression"
    ''' <summary>
    ''' XPathValueExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression))>
    Public NotInheritable Class XPathValueExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathValueExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As XPathValueExpressionElementFactoryCreator
            Get
                Return New XPathValueExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression.MetaClassGuidString, "MelCollectionExpression")>
    Partial Public Class MelCollectionExpression
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression
#Region "MelCollectionExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "ae50df88-8c7a-46cb-b6be-eb5df051cc65"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression.MetaClassGuidString)
#End Region

    End Class
#Region "MelCollectionExpression's Generated Constructor Code"
    Partial Public Class MelCollectionExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateMelCollectionExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store) As MelCollectionExpression
            Return CreateMelCollectionExpression(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeMelCollectionExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As MelCollectionExpression
            Return CreateAndInitializeMelCollectionExpression(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateMelCollectionExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As MelCollectionExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(MelCollectionExpression)), MelCollectionExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeMelCollectionExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As MelCollectionExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(MelCollectionExpression), assignments), MelCollectionExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for MelCollectionExpression"
    ''' <summary>
    ''' MelCollectionExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression))>
    Public NotInheritable Class MelCollectionExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As MelCollectionExpressionElementFactoryCreator
            Get
                Return New MelCollectionExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.MetaClassGuidString, "XPathMelCollectionExpression")>
    Partial Public Class XPathMelCollectionExpression
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression
#Region "XPathMelCollectionExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "61d5899a-22d1-456a-a5c0-f933ff5759f9"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.MetaClassGuidString)
#End Region

#Region "ModelXPath's Generated  Field Code"
#Region "ModelXPath's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const ModelXPathMetaAttributeGuidString As System.String = "92e1b094-32dc-4556-8f47-5f131379434e"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly ModelXPathMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.ModelXPathMetaAttributeGuidString)
#End Region

#Region "ModelXPath's Generated Property Code"

        Private modelXPathPropertyStorage As System.String = String.Empty

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.StringDomainAttribute, Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(XPathMelCollectionExpressionModelXPathFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.ModelXPathMetaAttributeGuidString, "XPathMelCollectionExpression.ModelXPath")>
        Public Property ModelXPath() As System.String
            Get
                Return modelXPathPropertyStorage
            End Get

            Set(ByVal value As System.String)
                xPathMelCollectionExpressionModelXPathFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "XPathMelCollectionExpressionModelXPathFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for XPathMelCollectionExpression.ModelXPath field
        ''' </summary>
        'INSTANT VB NOTE: The variable xPathMelCollectionExpressionModelXPathFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared xPathMelCollectionExpressionModelXPathFieldHandler_Renamed As XPathMelCollectionExpressionModelXPathFieldHandler = XPathMelCollectionExpressionModelXPathFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for XPathMelCollectionExpression.ModelXPath
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class XPathMelCollectionExpressionModelXPathFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression, System.String)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the XPathMelCollectionExpression.ModelXPath field handler
            ''' </summary>
            ''' <value>XPathMelCollectionExpressionModelXPathFieldHandler</value>
            Public Shared ReadOnly Property Instance() As XPathMelCollectionExpressionModelXPathFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.XPathMelCollectionExpressionModelXPathFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.XPathMelCollectionExpressionModelXPathFieldHandler
                    Else
                        ' The static constructor in XPathMelCollectionExpression will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.xPathMelCollectionExpressionModelXPathFieldHandler, so just instantiate one and return it
                        Return New XPathMelCollectionExpressionModelXPathFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the XPathMelCollectionExpression.ModelXPath field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression.ModelXPathMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the XPathMelCollectionExpression</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression) As System.String
                Return element.modelXPathPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression, ByVal value As System.String, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.String) As Boolean
                oldValue = element.modelXPathPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.modelXPathPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

    End Class
#Region "XPathMelCollectionExpression's Generated Constructor Code"
    Partial Public Class XPathMelCollectionExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateXPathMelCollectionExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store) As XPathMelCollectionExpression
            Return CreateXPathMelCollectionExpression(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeXPathMelCollectionExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As XPathMelCollectionExpression
            Return CreateAndInitializeXPathMelCollectionExpression(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateXPathMelCollectionExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As XPathMelCollectionExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(XPathMelCollectionExpression)), XPathMelCollectionExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeXPathMelCollectionExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As XPathMelCollectionExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(XPathMelCollectionExpression), assignments), XPathMelCollectionExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for XPathMelCollectionExpression"
    ''' <summary>
    ''' XPathMelCollectionExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression))>
    Public NotInheritable Class XPathMelCollectionExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.XPathMelCollectionExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As XPathMelCollectionExpressionElementFactoryCreator
            Get
                Return New XPathMelCollectionExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression.MetaClassGuidString, "RoleExpression")>
    Partial Public Class RoleExpression
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression
#Region "RoleExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "836994ef-e81e-4b05-9c48-06e4b13e2a17"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression.MetaClassGuidString)
#End Region

#Region "Role's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Role() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.ModelRoleExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.RoleMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.ModelRoleExpressionMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.RoleMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.RoleMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.ModelRoleExpressionMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for RoleExpression"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class RoleExpressionMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "RoleExpression's Generated Constructor Code"
    Partial Public Class RoleExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateRoleExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store) As RoleExpression
            Return CreateRoleExpression(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeRoleExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As RoleExpression
            Return CreateAndInitializeRoleExpression(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateRoleExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As RoleExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(RoleExpression)), RoleExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeRoleExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As RoleExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(RoleExpression), assignments), RoleExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for RoleExpression"
    ''' <summary>
    ''' RoleExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression))>
    Public NotInheritable Class RoleExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As RoleExpressionElementFactoryCreator
            Get
                Return New RoleExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.MetaClassGuidString, "RoleProperty")>
    Partial Public Class RoleProperty
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "RoleProperty's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "34126f1e-87d2-4af1-b595-a07d770bb793"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.MetaClassGuidString)
#End Region

#Region "ReadWriteState's Generated  Field Code"
#Region "ReadWriteState's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const ReadWriteStateMetaAttributeGuidString As System.String = "90caf81d-1059-4794-bc31-88e2141cfdeb"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly ReadWriteStateMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.ReadWriteStateMetaAttributeGuidString)
#End Region

#Region "ReadWriteState's Generated Property Code"

        Private readWriteStatePropertyStorage As Microsoft.VisualStudio.Modeling.DesignerDefinition.UIReadWriteState = Microsoft.VisualStudio.Modeling.DesignerDefinition.UIReadWriteState.UIReadWrite

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType:=GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.UIReadWriteState), DefaultEnumerationValueName:="UIReadWrite"), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(RolePropertyReadWriteStateFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.ReadWriteStateMetaAttributeGuidString, "RoleProperty.ReadWriteState")>
        Public Property ReadWriteState() As Microsoft.VisualStudio.Modeling.DesignerDefinition.UIReadWriteState
            Get
                Return readWriteStatePropertyStorage
            End Get

            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.UIReadWriteState)
                rolePropertyReadWriteStateFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "RolePropertyReadWriteStateFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for RoleProperty.ReadWriteState field
        ''' </summary>
        'INSTANT VB NOTE: The variable rolePropertyReadWriteStateFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared rolePropertyReadWriteStateFieldHandler_Renamed As RolePropertyReadWriteStateFieldHandler = RolePropertyReadWriteStateFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for RoleProperty.ReadWriteState
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class RolePropertyReadWriteStateFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty, Microsoft.VisualStudio.Modeling.DesignerDefinition.UIReadWriteState)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the RoleProperty.ReadWriteState field handler
            ''' </summary>
            ''' <value>RolePropertyReadWriteStateFieldHandler</value>
            Public Shared ReadOnly Property Instance() As RolePropertyReadWriteStateFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.RolePropertyReadWriteStateFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.RolePropertyReadWriteStateFieldHandler
                    Else
                        ' The static constructor in RoleProperty will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.rolePropertyReadWriteStateFieldHandler, so just instantiate one and return it
                        Return New RolePropertyReadWriteStateFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the RoleProperty.ReadWriteState field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty.ReadWriteStateMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the RoleProperty</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) As Microsoft.VisualStudio.Modeling.DesignerDefinition.UIReadWriteState
                Return element.readWriteStatePropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.UIReadWriteState, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As Microsoft.VisualStudio.Modeling.DesignerDefinition.UIReadWriteState) As Boolean
                oldValue = element.readWriteStatePropertyStorage
                If allowDuplicates OrElse oldValue IsNot value Then
                    OnValueChanging(element, oldValue, value)
                    element.readWriteStatePropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Role's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Role() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RolePropertiesMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RoleMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RolePropertiesMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RoleMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RoleMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RolePropertiesMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "StringToDisplay's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property StringToDisplay() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.RolePropertyMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.StringToDisplayMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.RolePropertyMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.StringToDisplayMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.StringToDisplayMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.RolePropertyMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for RoleProperty"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class RolePropertyMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "RoleProperty's Generated Constructor Code"
    Partial Public Class RoleProperty
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateRoleProperty(ByVal store As Microsoft.VisualStudio.Modeling.Store) As RoleProperty
            Return CreateRoleProperty(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeRoleProperty(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As RoleProperty
            Return CreateAndInitializeRoleProperty(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateRoleProperty(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As RoleProperty
            Return CType(partition.ElementFactory.CreateElement(GetType(RoleProperty)), RoleProperty)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeRoleProperty(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As RoleProperty
            Return CType(partition.ElementFactory.CreateElement(GetType(RoleProperty), assignments), RoleProperty)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for RoleProperty"
    ''' <summary>
    ''' RoleProperty Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty))>
    Public NotInheritable Class RolePropertyElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As RolePropertyElementFactoryCreator
            Get
                Return New RolePropertyElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression.MetaClassGuidString, "BooleanExpression")>
    Partial Public MustInherit Class BooleanExpression
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "BooleanExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "9c2feaff-9798-444e-85f7-5b1ad8adfc21"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression.MetaClassGuidString)
#End Region

    End Class
#Region "BooleanExpression's Generated Constructor Code"
    Partial Public MustInherit Class BooleanExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Protected Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
    End Class
#End Region
End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression.MetaClassGuidString, "ValuePropertyBooleanExpression")>
    Partial Public Class ValuePropertyBooleanExpression
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression
#Region "ValuePropertyBooleanExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "771219f4-3c12-45e5-b0fd-4e355b73cc38"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression.MetaClassGuidString)
#End Region

#Region "ValueProperty's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property ValueProperty() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyBooleanExpressionMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyMetaRoleGuid, False), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyBooleanExpressionMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyBooleanExpressionMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for ValuePropertyBooleanExpression"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class ValuePropertyBooleanExpressionMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "ValuePropertyBooleanExpression's Generated Constructor Code"
    Partial Public Class ValuePropertyBooleanExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValuePropertyBooleanExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store) As ValuePropertyBooleanExpression
            Return CreateValuePropertyBooleanExpression(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValuePropertyBooleanExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValuePropertyBooleanExpression
            Return CreateAndInitializeValuePropertyBooleanExpression(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValuePropertyBooleanExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As ValuePropertyBooleanExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(ValuePropertyBooleanExpression)), ValuePropertyBooleanExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValuePropertyBooleanExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValuePropertyBooleanExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(ValuePropertyBooleanExpression), assignments), ValuePropertyBooleanExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ValuePropertyBooleanExpression"
    ''' <summary>
    ''' ValuePropertyBooleanExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression))>
    Public NotInheritable Class ValuePropertyBooleanExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ValuePropertyBooleanExpressionElementFactoryCreator
            Get
                Return New ValuePropertyBooleanExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression.MetaClassGuidString, "EnumerationBooleanExpression")>
    Partial Public Class EnumerationBooleanExpression
        Inherits Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression
#Region "EnumerationBooleanExpression's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c6094fef-f436-41a4-ac0a-eb72327e647d"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression.MetaClassGuidString)
#End Region

#Region "Choices's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public ReadOnly Property Choices() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlEnumerationLiteralMoveableCollection
            Get
                Return New Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlEnumerationLiteralMoveableCollection(Me, Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.EnumerationLiteralChoiceMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.ChoicesMetaRoleGuid)
            End Get
        End Property
#End Region
    End Class
#Region "Collection Classes for EnumerationBooleanExpression"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class EnumerationBooleanExpressionMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "EnumerationBooleanExpression's Generated Constructor Code"
    Partial Public Class EnumerationBooleanExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateEnumerationBooleanExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store) As EnumerationBooleanExpression
            Return CreateEnumerationBooleanExpression(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeEnumerationBooleanExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As EnumerationBooleanExpression
            Return CreateAndInitializeEnumerationBooleanExpression(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateEnumerationBooleanExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As EnumerationBooleanExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(EnumerationBooleanExpression)), EnumerationBooleanExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeEnumerationBooleanExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As EnumerationBooleanExpression
            Return CType(partition.ElementFactory.CreateElement(GetType(EnumerationBooleanExpression), assignments), EnumerationBooleanExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for EnumerationBooleanExpression"
    ''' <summary>
    ''' EnumerationBooleanExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression))>
    Public NotInheritable Class EnumerationBooleanExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As EnumerationBooleanExpressionElementFactoryCreator
            Get
                Return New EnumerationBooleanExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.Validation.ValidationState(Microsoft.VisualStudio.Modeling.Validation.ValidationState.Enabled), System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap.MetaClassGuidString, "CompartmentMap")>
    Partial Public Class CompartmentMap
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "CompartmentMap's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "d0302261-c2f3-4112-bc09-9f63627873f0"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap.MetaClassGuidString)
#End Region

#Region "Compartment's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property Compartment() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "MelCollectionExpression's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property MelCollectionExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.CompartmentMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.CompartmentMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.CompartmentMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression), newRoles)
                End If
            End Set
        End Property
#End Region
#Region "ValueExpression's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property ValueExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.CompartmentMapMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.ValueExpressionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.CompartmentMapMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.ValueExpressionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.ValueExpressionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.CompartmentMapMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Collection Classes for CompartmentMap"
    ''' <summary>
    ''' Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap Collection class, strongly-typed collection
    ''' </summary>
    <System.CLSCompliant(True)>
    Partial Public NotInheritable Class CompartmentMapMoveableCollection
        Implements Microsoft.VisualStudio.Modeling.IMoveableCollection
        Private counterpartMember As Microsoft.VisualStudio.Modeling.ModelElement
        Private sourceRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        Private targetRoleMember As Microsoft.VisualStudio.Modeling.MetaRoleInfo
        ''' <summary>
        ''' Counterpart
        ''' </summary>
        Public ReadOnly Property Counterpart() As Microsoft.VisualStudio.Modeling.ModelElement
            Get
                Return Me.counterpartMember
            End Get
        End Property
        ''' <summary>
        ''' Source Role
        ''' </summary>
        Public ReadOnly Property SourceRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.sourceRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Target Role
        ''' </summary>
        Public ReadOnly Property TargetRole() As Microsoft.VisualStudio.Modeling.MetaRoleInfo
            Get
                Return Me.targetRoleMember
            End Get
        End Property
        ''' <summary>
        ''' Constructor
        ''' </summary>
        ''' <param name="counterpart">Counterpart to create relationship with</param>
        ''' <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
        ''' <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
        Public Sub New(ByVal counterpart As Microsoft.VisualStudio.Modeling.ModelElement, ByVal sourceMetaRoleGuid As System.Guid, ByVal targetMetaRoleGuid As System.Guid)
            Me.counterpartMember = counterpart
            Me.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid)
            Me.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid)
        End Sub
        ''' <summary>
        ''' Returns an enumerator that can iterate through a collection
        ''' </summary>
        ''' <returns>Enumerator</returns>
        Private Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).GetEnumerator()
        End Function
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Private Sub ICollection_CopyTo(ByVal array As System.Array, ByVal index As System.Int32) Implements System.Collections.ICollection.CopyTo
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property ICollection_Count() As System.Int32 Implements System.Collections.ICollection.Count
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Count
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
        ''' </summary>
        Private ReadOnly Property IsSynchronized() As System.Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsSynchronized
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
        ''' </summary>
        Private ReadOnly Property SyncRoot() As System.Object Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).SyncRoot
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
        ''' </summary>
        Private ReadOnly Property IsFixedSize() As System.Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsFixedSize
            End Get
        End Property
        ''' <summary>
        ''' When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
        ''' </summary>
        Private ReadOnly Property IList_IsReadOnly() As System.Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>object at that index</returns>
        Public Property IList_Item(ByVal index As System.Int32) As System.Object Implements System.Collections.IList.Item
            Get
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                Return list(index)
            End Get
            Set(ByVal value As System.Object)
                If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)))) Then
                    Throw New System.InvalidCastException()
                End If
                Dim list As Microsoft.VisualStudio.Modeling.IMoveableCollection = Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole)
                list(index) = value
            End Set
        End Property
        ''' <summary>
        ''' When implemented by a class, adds an item to the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to add to the System.Collections.IList</param>
        ''' <returns>index where object was added</returns>
        Private Function IList_Add(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.Add
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Add(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, removes all items from the System.Collections.IList
        ''' </summary>
        Private Sub IList_Clear() Implements System.Collections.IList.Clear
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Clear()
        End Sub
        ''' <summary>
        ''' When implemented by a class, determines whether the System.Collections.IList has a specific value
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Private Function IList_Contains(ByVal value As System.Object) As System.Boolean Implements System.Collections.IList.Contains
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Contains(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, determines the index of a specific item in the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to locate in the System.Collections.IList</param>
        ''' <returns>index of object</returns>
        Private Function IList_IndexOf(ByVal value As System.Object) As System.Int32 Implements System.Collections.IList.IndexOf
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Return Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).IndexOf(value)
        End Function
        ''' <summary>
        ''' When implemented by a class, inserts an item to the System.Collections.IList at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The System.Object to insert into the System.Collections.IList</param>
        Private Sub IList_Insert(ByVal index As System.Int32, ByVal value As System.Object) Implements System.Collections.IList.Insert
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Insert(index, value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
        ''' </summary>
        ''' <param name="value">The System.Object to remove from the System.Collections.IList</param>
        Private Sub IList_Remove(ByVal value As System.Object) Implements System.Collections.IList.Remove
            If value Is Nothing OrElse (value.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) AndAlso (Not value.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Remove(value)
        End Sub
        ''' <summary>
        ''' When implemented by a class, removes the System.Collections.IList item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Private Sub IList_RemoveAt(ByVal index As System.Int32) Implements System.Collections.IList.RemoveAt
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Private Sub IMoveableCollection_Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(rolePlayer, newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Private Sub IMoveableCollection_Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.Move
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Private Sub IMoveableCollection_ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.ModelElement) Implements Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt
            If rolePlayer Is Nothing OrElse (rolePlayer.GetType() IsNot GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) AndAlso (Not rolePlayer.GetType().IsSubclassOf(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)))) Then
                Throw New System.InvalidCastException()
            End If
            Me.Counterpart.GetMoveableRolePlayers(Me.SourceRole, Me.TargetRole).ReplaceAt(position, rolePlayer)
        End Sub
        ''' <summary>
        ''' When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
        ''' </summary>
        ''' <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
        ''' <param name="index">The zero-based index in array at which copying begins</param>
        Public Sub CopyTo(ByVal array() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap, ByVal index As System.Int32)
            CType(Me, System.Collections.ICollection).CopyTo(array, index)
        End Sub
        ''' <summary>
        ''' Gets the number of elements contained in the collection
        ''' </summary>
        Public ReadOnly Property Count() As System.Int32
            Get
                Return (CType(Me, System.Collections.ICollection)).Count
            End Get
        End Property
        ''' <summary>
        ''' Gets a value indicating whether the list is read-only
        ''' </summary>
        Public ReadOnly Property IsReadOnly() As System.Boolean
            Get
                Return (CType(Me, System.Collections.IList)).IsReadOnly
            End Get
        End Property
        ''' <summary>
        ''' Indexed accessor
        ''' </summary>
        ''' <param name="index">Index to access</param>
        ''' <returns>Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap at that index</returns>
        Default Public Property Item(ByVal index As System.Int32) As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap
            Get
                Return CType((CType(Me, System.Collections.IList))(index), Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
                CType(Me, System.Collections.IList)(index) = TryCast(value, System.Object)
            End Set
        End Property
        ''' <summary>
        ''' Adds an item to the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap to add to the list</param>
        ''' <returns>index where object was added</returns>
        Public Function Add(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).Add(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Removes all items from the list
        ''' </summary>
        Public Sub Clear()
            CType(Me, System.Collections.IList).Clear()
        End Sub
        ''' <summary>
        ''' Determines whether the list has a specific value
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap to locate in the list</param>
        ''' <returns>true if object is contained, false otherwise</returns>
        Public Function Contains(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) As System.Boolean
            Return (CType(Me, System.Collections.IList)).Contains(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Determines the index of a specific item in the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap to locate in the list</param>
        ''' <returns>index of object</returns>
        Public Function IndexOf(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap) As System.Int32
            Return (CType(Me, System.Collections.IList)).IndexOf(TryCast(value, System.Object))
        End Function
        ''' <summary>
        ''' Inserts an item to the list at the specified position
        ''' </summary>
        ''' <param name="index">The zero-based index at which the value should be inserted</param>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap to insert into the list</param>
        Public Sub Insert(ByVal index As System.Int32, ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
            CType(Me, System.Collections.IList).Insert(index, TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the first occurrence of a specific object from the list
        ''' </summary>
        ''' <param name="value">The Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap to remove from the list</param>
        Public Sub Remove(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
            CType(Me, System.Collections.IList).Remove(TryCast(value, System.Object))
        End Sub
        ''' <summary>
        ''' Removes the list item at the specified index
        ''' </summary>
        ''' <param name="index">The zero-based index of the item to remove</param>
        Public Sub RemoveAt(ByVal index As System.Int32)
            CType(Me, System.Collections.IList).RemoveAt(index)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="rolePlayer">The role player to move</param>
        ''' <param name="newPosition">The position to move to</param>
        Public Sub Move(ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement), newPosition)
        End Sub
        ''' <summary>
        ''' Move the roleplayer to the new position in the collection
        ''' </summary>
        ''' <param name="oldPosition">The position of the role player to move from</param>
        ''' <param name="newPosition">The position of the role player to move to</param>
        Public Sub Move(ByVal oldPosition As System.Int32, ByVal newPosition As System.Int32)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).Move(oldPosition, newPosition)
        End Sub
        ''' <summary>
        ''' Insert a roleplayer in the specified location
        ''' </summary>
        ''' <param name="position">The index of the roleplayer that needs to be replaced</param>
        ''' <param name="rolePlayer">The role player that will be inserted</param>
        Public Sub ReplaceAt(ByVal position As System.Int32, ByVal rolePlayer As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
            CType(Me, Microsoft.VisualStudio.Modeling.IMoveableCollection).ReplaceAt(position, TryCast(rolePlayer, Microsoft.VisualStudio.Modeling.ModelElement))
        End Sub

    End Class
#End Region

#Region "CompartmentMap's Generated Constructor Code"
    Partial Public Class CompartmentMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentMap(ByVal store As Microsoft.VisualStudio.Modeling.Store) As CompartmentMap
            Return CreateCompartmentMap(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentMap
            Return CreateAndInitializeCompartmentMap(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As CompartmentMap
            Return CType(partition.ElementFactory.CreateElement(GetType(CompartmentMap)), CompartmentMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentMap
            Return CType(partition.ElementFactory.CreateElement(GetType(CompartmentMap), assignments), CompartmentMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentMap"
    ''' <summary>
    ''' CompartmentMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap))>
    Public NotInheritable Class CompartmentMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentMapElementFactoryCreator
            Get
                Return New CompartmentMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaClass("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.MetaClassGuidString, "Validation")>
    Partial Public Class Validation
        Inherits Microsoft.VisualStudio.Modeling.NamedElement
#Region "Validation's Generated MetaClass Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "e4d52400-5e34-413f-8869-26b6690a985f"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.MetaClassGuidString)
#End Region

#Region "Open's Generated  Field Code"
#Region "Open's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const OpenMetaAttributeGuidString As System.String = "84ff9b47-5dc7-4b96-9164-f41a8c641b26"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly OpenMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.OpenMetaAttributeGuidString)
#End Region

#Region "Open's Generated Property Code"

        Private openPropertyStorage As System.Boolean = False

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=False), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ValidationOpenFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.OpenMetaAttributeGuidString, "Validation.Open")>
        Public Property Open() As System.Boolean
            Get
                Return openPropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                validationOpenFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ValidationOpenFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for Validation.Open field
        ''' </summary>
        'INSTANT VB NOTE: The variable validationOpenFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared validationOpenFieldHandler_Renamed As ValidationOpenFieldHandler = ValidationOpenFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for Validation.Open
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ValidationOpenFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the Validation.Open field handler
            ''' </summary>
            ''' <value>ValidationOpenFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ValidationOpenFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationOpenFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationOpenFieldHandler
                    Else
                        ' The static constructor in Validation will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.validationOpenFieldHandler, so just instantiate one and return it
                        Return New ValidationOpenFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the Validation.Open field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.OpenMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the Validation</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation) As System.Boolean
                Return element.openPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.openPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.openPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Save's Generated  Field Code"
#Region "Save's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const SaveMetaAttributeGuidString As System.String = "943ec0b3-1392-4663-97eb-58c17f6bbffa"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly SaveMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.SaveMetaAttributeGuidString)
#End Region

#Region "Save's Generated Property Code"

        Private savePropertyStorage As System.Boolean = False

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=False), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ValidationSaveFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.SaveMetaAttributeGuidString, "Validation.Save")>
        Public Property Save() As System.Boolean
            Get
                Return savePropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                validationSaveFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ValidationSaveFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for Validation.Save field
        ''' </summary>
        'INSTANT VB NOTE: The variable validationSaveFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared validationSaveFieldHandler_Renamed As ValidationSaveFieldHandler = ValidationSaveFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for Validation.Save
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ValidationSaveFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the Validation.Save field handler
            ''' </summary>
            ''' <value>ValidationSaveFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ValidationSaveFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationSaveFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationSaveFieldHandler
                    Else
                        ' The static constructor in Validation will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.validationSaveFieldHandler, so just instantiate one and return it
                        Return New ValidationSaveFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the Validation.Save field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.SaveMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the Validation</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation) As System.Boolean
                Return element.savePropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.savePropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.savePropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Menu's Generated  Field Code"
#Region "Menu's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const MenuMetaAttributeGuidString As System.String = "5c4a8e76-d89f-450b-95cf-9ec01bb9d94e"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly MenuMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.MenuMetaAttributeGuidString)
#End Region

#Region "Menu's Generated Property Code"

        Private menuPropertyStorage As System.Boolean = False

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=False), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ValidationMenuFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.MenuMetaAttributeGuidString, "Validation.Menu")>
        Public Property Menu() As System.Boolean
            Get
                Return menuPropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                validationMenuFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ValidationMenuFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for Validation.Menu field
        ''' </summary>
        'INSTANT VB NOTE: The variable validationMenuFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared validationMenuFieldHandler_Renamed As ValidationMenuFieldHandler = ValidationMenuFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for Validation.Menu
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ValidationMenuFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the Validation.Menu field handler
            ''' </summary>
            ''' <value>ValidationMenuFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ValidationMenuFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationMenuFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationMenuFieldHandler
                    Else
                        ' The static constructor in Validation will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.validationMenuFieldHandler, so just instantiate one and return it
                        Return New ValidationMenuFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the Validation.Menu field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.MenuMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the Validation</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation) As System.Boolean
                Return element.menuPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.menuPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.menuPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "Custom's Generated  Field Code"
#Region "Custom's Generated  MetaAttribute Code"
        ''' <summary>
        ''' MetaAttribute Guid String
        ''' </summary>
        Public Const CustomMetaAttributeGuidString As System.String = "ff8a9674-d417-401a-a406-222a3a950edb"

        ''' <summary>
        ''' MetaAttribute Guid
        ''' </summary>
        Public Shared ReadOnly CustomMetaAttributeGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.CustomMetaAttributeGuidString)
#End Region

#Region "Custom's Generated Property Code"

        Private customPropertyStorage As System.Boolean = False

        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.BooleanDomainAttribute(DefaultBoolean:=False), Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType:=GetType(ValidationCustomFieldHandler)), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.CustomMetaAttributeGuidString, "Validation.Custom")>
        Public Property Custom() As System.Boolean
            Get
                Return customPropertyStorage
            End Get

            Set(ByVal value As System.Boolean)
                validationCustomFieldHandler_Renamed.SetFieldValue(Me, value, False, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory)
            End Set
        End Property
#End Region

#Region "ValidationCustomFieldHandler Generated Code"
        ''' <summary>
        ''' FieldHandler for Validation.Custom field
        ''' </summary>
        'INSTANT VB NOTE: The variable validationCustomFieldHandler was renamed since Visual Basic does not handle variables named the same as their type well:
        Private Shared validationCustomFieldHandler_Renamed As ValidationCustomFieldHandler = ValidationCustomFieldHandler.Instance

        ''' <summary>
        ''' Implement the field handler for Validation.Custom
        ''' </summary>
        <System.CLSCompliant(False)>
        Partial Public NotInheritable Class ValidationCustomFieldHandler
            Inherits Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler(Of Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation, System.Boolean)
            ''' <summary>
            ''' Constructor
            ''' </summary>
            Private Sub New()
            End Sub

            ''' <summary>
            ''' Returns the singleton instance of the Validation.Custom field handler
            ''' </summary>
            ''' <value>ValidationCustomFieldHandler</value>
            Public Shared ReadOnly Property Instance() As ValidationCustomFieldHandler
                Get
                    If Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationCustomFieldHandler IsNot Nothing Then
                        Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.ValidationCustomFieldHandler
                    Else
                        ' The static constructor in Validation will assign this value to
                        ' Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.validationCustomFieldHandler, so just instantiate one and return it
                        Return New ValidationCustomFieldHandler()
                    End If
                End Get
            End Property

            ''' <summary>
            ''' Returns the meta attribute id for the Validation.Custom field handler
            ''' </summary>
            ''' <value>Guid</value>
            Public NotOverridable Overrides ReadOnly Property Id() As System.Guid
                Get
                    Return Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation.CustomMetaAttributeGuid
                End Get
            End Property
            ''' <summary>
            ''' Gets the value of the attribute as it exists in the element
            ''' </summary>
            ''' <param name="element">the Validation</param>
            Protected NotOverridable Overrides Function GetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation) As System.Boolean
                Return element.customPropertyStorage
            End Function

            ''' <summary>
            ''' Sets the value into the element
            ''' </summary>
            ''' <param name="element">the element</param>
            ''' <param name="value">new value</param>
            ''' <param name="commandFactory">the command factory for this change</param>
            ''' <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
            ''' <param name="oldValue">the old value before the change</param>
            ''' <returns>true if the value actually changed</returns>
            Protected NotOverridable Overrides Function SetValue(ByVal element As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation, ByVal value As System.Boolean, ByVal commandFactory As Microsoft.VisualStudio.Modeling.CommandFactory, ByVal allowDuplicates As Boolean, ByRef oldValue As System.Boolean) As Boolean
                oldValue = element.customPropertyStorage
                If allowDuplicates OrElse oldValue <> value Then
                    OnValueChanging(element, oldValue, value)
                    element.customPropertyStorage = value
                    OnValueChanged(element, oldValue, value)
                    Return True
                End If
                Return False
            End Function

        End Class
#End Region
#End Region

#Region "DesignerDefinition's Generated Accessor Code"
        ''' <summary>
        ''' 
        ''' </summary>
        Public Property DesignerDefinition() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition
            Get
                Return TryCast(Me.GetCounterpartRolePlayer(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuid, Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.DesignerDefinitionMetaRoleGuid, False), Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
                Dim sameRolePlayer As Boolean = False
                Dim links As System.Collections.IList = Me.GetElementLinks(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuid)
                If links.Count > 0 Then
                    System.Diagnostics.Debug.Assert(1 = links.Count)
                    Dim roleInfo As Microsoft.VisualStudio.Modeling.MetaRoleInfo = Me.Partition.MetaDataDirectory.FindMetaRole(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.DesignerDefinitionMetaRoleGuid)
                    For Each link As Microsoft.VisualStudio.Modeling.ElementLink In links
                        If Not link.IsRemoved Then
                            Dim counterpart As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition = TryCast(link.GetRolePlayer(roleInfo), Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
                            If counterpart IsNot Nothing AndAlso Object.ReferenceEquals(counterpart, value) Then
                                sameRolePlayer = True
                            Else
                                link.Remove()
                            End If
                            Exit For
                        End If
                    Next link
                End If
                If ((Not sameRolePlayer)) AndAlso (value IsNot Nothing) Then
                    Dim newRoles(1) As Microsoft.VisualStudio.Modeling.RoleAssignment
                    newRoles(0) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.DesignerDefinitionMetaRoleGuid, value)
                    newRoles(1) = New Microsoft.VisualStudio.Modeling.RoleAssignment(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuid, Me)
                    Me.Partition.ElementFactory.CreateElementLink(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation), newRoles)
                End If
            End Set
        End Property
#End Region
    End Class
#Region "Validation's Generated Constructor Code"
    Partial Public Class Validation
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidation(ByVal store As Microsoft.VisualStudio.Modeling.Store) As Validation
            Return CreateValidation(store.DefaultPartition)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidation(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Validation
            Return CreateAndInitializeValidation(store.DefaultPartition, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidation(ByVal partition As Microsoft.VisualStudio.Modeling.Partition) As Validation
            Return CType(partition.ElementFactory.CreateElement(GetType(Validation)), Validation)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidation(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As Validation
            Return CType(partition.ElementFactory.CreateElement(GetType(Validation), assignments), Validation)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for Validation"
    ''' <summary>
    ''' Validation Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation))>
    Public NotInheritable Class ValidationElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ValidationElementFactoryCreator
            Get
                Return New ValidationElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.MetaRelationshipGuidString, "DesignerDefinitionHasNotation")>
    Partial Public Class DesignerDefinitionHasNotation
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DesignerDefinitionHasNotation's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "a943cdeb-5ad4-4883-8830-2bb6051716bb"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DesignerDefinitionHasNotation.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DesignerDefinitionHasNotation.MetaClassGuid
#End Region

#Region "Notation's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const NotationMetaRoleGuidString As System.String = "d92909d2-7b51-4927-9286-84b6d4260034"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly NotationMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.NotationMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.NotationMetaRoleGuidString, "DesignerDefinitionHasNotation.Notation")>
        Public Property Notation() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation
            Get
                Return CType(Me.GetRolePlayer(NotationMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation)
                Me.SetRolePlayer(NotationMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DesignerDefinition's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DesignerDefinitionMetaRoleGuidString As System.String = "9f23f602-eba7-4569-9d4b-6ccec051cf47"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DesignerDefinitionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.DesignerDefinitionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation.DesignerDefinitionMetaRoleGuidString, "DesignerDefinitionHasNotation.DesignerDefinition")>
        Public Property DesignerDefinition() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition
            Get
                Return CType(Me.GetRolePlayer(DesignerDefinitionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
                Me.SetRolePlayer(DesignerDefinitionMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DesignerDefinitionHasNotation's Generated Constructor Code"
    Partial Public Class DesignerDefinitionHasNotation
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasNotation(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasNotation
            Return CreateDesignerDefinitionHasNotation(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasNotation(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasNotation
            Return CreateAndInitializeDesignerDefinitionHasNotation(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasNotation(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasNotation
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasNotation), rolePlayers), DesignerDefinitionHasNotation)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasNotation(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasNotation
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasNotation), rolePlayers, assignments), DesignerDefinitionHasNotation)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DesignerDefinitionHasNotation"
    ''' <summary>
    ''' DesignerDefinitionHasNotation Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation))>
    Public NotInheritable Class DesignerDefinitionHasNotationElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasNotation(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DesignerDefinitionHasNotationElementFactoryCreator
            Get
                Return New DesignerDefinitionHasNotationElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.MetaRelationshipGuidString, "DesignerDefinitionHasExplorer")>
    Partial Public Class DesignerDefinitionHasExplorer
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DesignerDefinitionHasExplorer's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "b83b5f7b-9da6-4109-a9f3-4fdc30291c6a"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DesignerDefinitionHasExplorer.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DesignerDefinitionHasExplorer.MetaClassGuid
#End Region

#Region "Explorer's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ExplorerMetaRoleGuidString As System.String = "9606133b-f7ce-4593-b995-16a806d7b57e"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ExplorerMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.ExplorerMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.ExplorerMetaRoleGuidString, "DesignerDefinitionHasExplorer.Explorer")>
        Public Property Explorer() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer
            Get
                Return CType(Me.GetRolePlayer(ExplorerMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer)
                Me.SetRolePlayer(ExplorerMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DesignerDefinition's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DesignerDefinitionMetaRoleGuidString As System.String = "61154bf2-ae0c-45e4-8335-c160e97047e1"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DesignerDefinitionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.DesignerDefinitionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer.DesignerDefinitionMetaRoleGuidString, "DesignerDefinitionHasExplorer.DesignerDefinition")>
        Public Property DesignerDefinition() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition
            Get
                Return CType(Me.GetRolePlayer(DesignerDefinitionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
                Me.SetRolePlayer(DesignerDefinitionMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DesignerDefinitionHasExplorer's Generated Constructor Code"
    Partial Public Class DesignerDefinitionHasExplorer
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasExplorer(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasExplorer
            Return CreateDesignerDefinitionHasExplorer(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasExplorer(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasExplorer
            Return CreateAndInitializeDesignerDefinitionHasExplorer(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasExplorer(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasExplorer
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasExplorer), rolePlayers), DesignerDefinitionHasExplorer)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasExplorer(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasExplorer
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasExplorer), rolePlayers, assignments), DesignerDefinitionHasExplorer)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DesignerDefinitionHasExplorer"
    ''' <summary>
    ''' DesignerDefinitionHasExplorer Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer))>
    Public NotInheritable Class DesignerDefinitionHasExplorerElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasExplorer(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DesignerDefinitionHasExplorerElementFactoryCreator
            Get
                Return New DesignerDefinitionHasExplorerElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.MetaRelationshipGuidString, "DesignerDefinitionHasPropertiesWindow")>
    Partial Public Class DesignerDefinitionHasPropertiesWindow
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DesignerDefinitionHasPropertiesWindow's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "b051841d-c5b1-4d28-971b-dd4c2df4bd38"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DesignerDefinitionHasPropertiesWindow.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DesignerDefinitionHasPropertiesWindow.MetaClassGuid
#End Region

#Region "PropertiesWindow's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const PropertiesWindowMetaRoleGuidString As System.String = "82d7fbdf-abd7-4487-9aeb-694ee5bfd1a5"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly PropertiesWindowMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.PropertiesWindowMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.PropertiesWindowMetaRoleGuidString, "DesignerDefinitionHasPropertiesWindow.PropertiesWindow")>
        Public Property PropertiesWindow() As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow
            Get
                Return CType(Me.GetRolePlayer(PropertiesWindowMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow)
                Me.SetRolePlayer(PropertiesWindowMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DesignerDefinition's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DesignerDefinitionMetaRoleGuidString As System.String = "947b37f3-d87e-44da-a6c2-6bf101188f23"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DesignerDefinitionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.DesignerDefinitionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow.DesignerDefinitionMetaRoleGuidString, "DesignerDefinitionHasPropertiesWindow.DesignerDefinition")>
        Public Property DesignerDefinition() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition
            Get
                Return CType(Me.GetRolePlayer(DesignerDefinitionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
                Me.SetRolePlayer(DesignerDefinitionMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DesignerDefinitionHasPropertiesWindow's Generated Constructor Code"
    Partial Public Class DesignerDefinitionHasPropertiesWindow
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasPropertiesWindow(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasPropertiesWindow
            Return CreateDesignerDefinitionHasPropertiesWindow(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasPropertiesWindow(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasPropertiesWindow
            Return CreateAndInitializeDesignerDefinitionHasPropertiesWindow(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasPropertiesWindow(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasPropertiesWindow
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasPropertiesWindow), rolePlayers), DesignerDefinitionHasPropertiesWindow)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasPropertiesWindow(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasPropertiesWindow
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasPropertiesWindow), rolePlayers, assignments), DesignerDefinitionHasPropertiesWindow)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DesignerDefinitionHasPropertiesWindow"
    ''' <summary>
    ''' DesignerDefinitionHasPropertiesWindow Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow))>
    Public NotInheritable Class DesignerDefinitionHasPropertiesWindowElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasPropertiesWindow(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DesignerDefinitionHasPropertiesWindowElementFactoryCreator
            Get
                Return New DesignerDefinitionHasPropertiesWindowElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.MetaRelationshipGuidString, "DesignerDefinitionHasValidationBehavior")>
    Partial Public Class DesignerDefinitionHasValidationBehavior
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DesignerDefinitionHasValidationBehavior's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "9ce7e702-3559-4f13-acd4-9b7bc5899df0"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DesignerDefinitionHasValidationBehavior.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DesignerDefinitionHasValidationBehavior.MetaClassGuid
#End Region

#Region "ValidationBehavior's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValidationBehaviorMetaRoleGuidString As System.String = "d9fe5187-9260-454a-b884-dbbc4a7ebd9d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValidationBehaviorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.ValidationBehaviorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.ValidationBehaviorMetaRoleGuidString, "DesignerDefinitionHasValidationBehavior.ValidationBehavior")>
        Public Property ValidationBehavior() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior
            Get
                Return CType(Me.GetRolePlayer(ValidationBehaviorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
                Me.SetRolePlayer(ValidationBehaviorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DesignerDefinition's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DesignerDefinitionMetaRoleGuidString As System.String = "ee5bda34-6429-498a-b70c-e938150fd8db"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DesignerDefinitionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.DesignerDefinitionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior.DesignerDefinitionMetaRoleGuidString, "DesignerDefinitionHasValidationBehavior.DesignerDefinition")>
        Public Property DesignerDefinition() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition
            Get
                Return CType(Me.GetRolePlayer(DesignerDefinitionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
                Me.SetRolePlayer(DesignerDefinitionMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DesignerDefinitionHasValidationBehavior's Generated Constructor Code"
    Partial Public Class DesignerDefinitionHasValidationBehavior
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasValidationBehavior(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasValidationBehavior
            Return CreateDesignerDefinitionHasValidationBehavior(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasValidationBehavior(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasValidationBehavior
            Return CreateAndInitializeDesignerDefinitionHasValidationBehavior(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasValidationBehavior(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasValidationBehavior
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasValidationBehavior), rolePlayers), DesignerDefinitionHasValidationBehavior)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasValidationBehavior(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasValidationBehavior
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasValidationBehavior), rolePlayers, assignments), DesignerDefinitionHasValidationBehavior)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DesignerDefinitionHasValidationBehavior"
    ''' <summary>
    ''' DesignerDefinitionHasValidationBehavior Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior))>
    Public NotInheritable Class DesignerDefinitionHasValidationBehaviorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidationBehavior(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DesignerDefinitionHasValidationBehaviorElementFactoryCreator
            Get
                Return New DesignerDefinitionHasValidationBehaviorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.MetaRelationshipGuidString, "NotationHasDiagrams")>
    Partial Public Class NotationHasDiagrams
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "NotationHasDiagrams's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "4a20085a-1153-4999-b169-49f07d58f664"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = NotationHasDiagrams.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = NotationHasDiagrams.MetaClassGuid
#End Region

#Region "Diagrams's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramsMetaRoleGuidString As System.String = "b8c08d7c-b546-4dd6-aabe-ff17c401c1af"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.DiagramsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.DiagramsMetaRoleGuidString, "NotationHasDiagrams.Diagrams")>
        Public Property Diagrams() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram
            Get
                Return CType(Me.GetRolePlayer(DiagramsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
                Me.SetRolePlayer(DiagramsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Notation's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const NotationMetaRoleGuidString As System.String = "499869f6-7f2f-4171-af8f-29425d0605d3"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly NotationMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.NotationMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams.NotationMetaRoleGuidString, "NotationHasDiagrams.Notation")>
        Public Property Notation() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation
            Get
                Return CType(Me.GetRolePlayer(NotationMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation)
                Me.SetRolePlayer(NotationMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "NotationHasDiagrams's Generated Constructor Code"
    Partial Public Class NotationHasDiagrams
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNotationHasDiagrams(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As NotationHasDiagrams
            Return CreateNotationHasDiagrams(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNotationHasDiagrams(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As NotationHasDiagrams
            Return CreateAndInitializeNotationHasDiagrams(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNotationHasDiagrams(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As NotationHasDiagrams
            Return CType(partition.ElementFactory.CreateElementLink(GetType(NotationHasDiagrams), rolePlayers), NotationHasDiagrams)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNotationHasDiagrams(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As NotationHasDiagrams
            Return CType(partition.ElementFactory.CreateElementLink(GetType(NotationHasDiagrams), rolePlayers, assignments), NotationHasDiagrams)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for NotationHasDiagrams"
    ''' <summary>
    ''' NotationHasDiagrams Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams))>
    Public NotInheritable Class NotationHasDiagramsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagrams(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As NotationHasDiagramsElementFactoryCreator
            Get
                Return New NotationHasDiagramsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.MetaRelationshipGuidString, "DiagramHasShapes")>
    Partial Public Class DiagramHasShapes
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DiagramHasShapes's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c6bf8797-b412-45e5-95a6-189c885e460e"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DiagramHasShapes.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DiagramHasShapes.MetaClassGuid
#End Region

#Region "Shapes's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapesMetaRoleGuidString As System.String = "86919bd5-c278-47ba-ae49-01bc3c24c45d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapesMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.ShapesMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.ShapesMetaRoleGuidString, "DiagramHasShapes.Shapes")>
        Public Property Shapes() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
            Get
                Return CType(Me.GetRolePlayer(ShapesMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                Me.SetRolePlayer(ShapesMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Diagram's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramMetaRoleGuidString As System.String = "d96f4358-db1a-4820-ac68-60c0397a868a"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.DiagramMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes.DiagramMetaRoleGuidString, "DiagramHasShapes.Diagram")>
        Public Property Diagram() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram
            Get
                Return CType(Me.GetRolePlayer(DiagramMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
                Me.SetRolePlayer(DiagramMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DiagramHasShapes's Generated Constructor Code"
    Partial Public Class DiagramHasShapes
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramHasShapes(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramHasShapes
            Return CreateDiagramHasShapes(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramHasShapes(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramHasShapes
            Return CreateAndInitializeDiagramHasShapes(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramHasShapes(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramHasShapes
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramHasShapes), rolePlayers), DiagramHasShapes)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramHasShapes(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramHasShapes
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramHasShapes), rolePlayers, assignments), DiagramHasShapes)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DiagramHasShapes"
    ''' <summary>
    ''' DiagramHasShapes Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes))>
    Public NotInheritable Class DiagramHasShapesElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasShapes(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramHasShapesElementFactoryCreator
            Get
                Return New DiagramHasShapesElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.MetaRelationshipGuidString, "DiagramHasConnectors")>
    Partial Public Class DiagramHasConnectors
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DiagramHasConnectors's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "b64294fa-8a53-4090-bc7c-90c8cbd32ec9"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DiagramHasConnectors.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DiagramHasConnectors.MetaClassGuid
#End Region

#Region "Connectors's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorsMetaRoleGuidString As System.String = "932f330b-53b6-4236-b293-b8f99a449258"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.ConnectorsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.ConnectorsMetaRoleGuidString, "DiagramHasConnectors.Connectors")>
        Public Property Connectors() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return CType(Me.GetRolePlayer(ConnectorsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Me.SetRolePlayer(ConnectorsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Diagram's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramMetaRoleGuidString As System.String = "5c171d2d-b66c-496a-b0ad-a208537166e5"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.DiagramMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors.DiagramMetaRoleGuidString, "DiagramHasConnectors.Diagram")>
        Public Property Diagram() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram
            Get
                Return CType(Me.GetRolePlayer(DiagramMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
                Me.SetRolePlayer(DiagramMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DiagramHasConnectors's Generated Constructor Code"
    Partial Public Class DiagramHasConnectors
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramHasConnectors(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramHasConnectors
            Return CreateDiagramHasConnectors(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramHasConnectors(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramHasConnectors
            Return CreateAndInitializeDiagramHasConnectors(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramHasConnectors(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramHasConnectors
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramHasConnectors), rolePlayers), DiagramHasConnectors)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramHasConnectors(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramHasConnectors
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramHasConnectors), rolePlayers, assignments), DiagramHasConnectors)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DiagramHasConnectors"
    ''' <summary>
    ''' DiagramHasConnectors Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors))>
    Public NotInheritable Class DiagramHasConnectorsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasConnectors(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramHasConnectorsElementFactoryCreator
            Get
                Return New DiagramHasConnectorsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.MetaRelationshipGuidString, "DiagramHasToolbox")>
    Partial Public Class DiagramHasToolbox
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DiagramHasToolbox's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "70a5a46c-8455-42cb-81f2-1ecf62ce8df8"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DiagramHasToolbox.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DiagramHasToolbox.MetaClassGuid
#End Region

#Region "Toolbox's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ToolboxMetaRoleGuidString As System.String = "149248c3-cd3a-48a7-8a33-513993f501b8"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ToolboxMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.ToolboxMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.ToolboxMetaRoleGuidString, "DiagramHasToolbox.Toolbox")>
        Public Property Toolbox() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox
            Get
                Return CType(Me.GetRolePlayer(ToolboxMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox)
                Me.SetRolePlayer(ToolboxMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Diagram's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramMetaRoleGuidString As System.String = "dc27ac24-472e-41a1-a5f4-59a962fe27b4"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.DiagramMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox.DiagramMetaRoleGuidString, "DiagramHasToolbox.Diagram")>
        Public Property Diagram() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram
            Get
                Return CType(Me.GetRolePlayer(DiagramMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
                Me.SetRolePlayer(DiagramMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DiagramHasToolbox's Generated Constructor Code"
    Partial Public Class DiagramHasToolbox
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramHasToolbox(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramHasToolbox
            Return CreateDiagramHasToolbox(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramHasToolbox(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramHasToolbox
            Return CreateAndInitializeDiagramHasToolbox(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramHasToolbox(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramHasToolbox
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramHasToolbox), rolePlayers), DiagramHasToolbox)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramHasToolbox(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramHasToolbox
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramHasToolbox), rolePlayers, assignments), DiagramHasToolbox)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DiagramHasToolbox"
    ''' <summary>
    ''' DiagramHasToolbox Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox))>
    Public NotInheritable Class DiagramHasToolboxElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramHasToolbox(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramHasToolboxElementFactoryCreator
            Get
                Return New DiagramHasToolboxElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.MetaRelationshipGuidString, "ToolboxHasItems")>
    Partial Public Class ToolboxHasItems
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ToolboxHasItems's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "70c12fd9-8a5c-4fdf-bf48-95764b8d0196"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ToolboxHasItems.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ToolboxHasItems.MetaClassGuid
#End Region

#Region "Items's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ItemsMetaRoleGuidString As System.String = "955be8cd-6cff-4315-b21c-8fac45ebf4c1"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ItemsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ItemsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ItemsMetaRoleGuidString, "ToolboxHasItems.Items")>
        Public Property Items() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem
            Get
                Return CType(Me.GetRolePlayer(ItemsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxItem)
                Me.SetRolePlayer(ItemsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Toolbox's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ToolboxMetaRoleGuidString As System.String = "3bb9b25e-735f-4d53-b924-3bd58751f639"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ToolboxMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ToolboxMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems.ToolboxMetaRoleGuidString, "ToolboxHasItems.Toolbox")>
        Public Property Toolbox() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox
            Get
                Return CType(Me.GetRolePlayer(ToolboxMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Toolbox)
                Me.SetRolePlayer(ToolboxMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ToolboxHasItems's Generated Constructor Code"
    Partial Public Class ToolboxHasItems
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateToolboxHasItems(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ToolboxHasItems
            Return CreateToolboxHasItems(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeToolboxHasItems(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ToolboxHasItems
            Return CreateAndInitializeToolboxHasItems(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateToolboxHasItems(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ToolboxHasItems
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ToolboxHasItems), rolePlayers), ToolboxHasItems)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeToolboxHasItems(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ToolboxHasItems
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ToolboxHasItems), rolePlayers, assignments), ToolboxHasItems)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ToolboxHasItems"
    ''' <summary>
    ''' ToolboxHasItems Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems))>
    Public NotInheritable Class ToolboxHasItemsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ToolboxHasItems(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ToolboxHasItemsElementFactoryCreator
            Get
                Return New ToolboxHasItemsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.MetaRelationshipGuidString, "NotationHasDiagramMaps")>
    Partial Public Class NotationHasDiagramMaps
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "NotationHasDiagramMaps's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "fe1cbe77-c3df-4c36-a890-465b8564eb7c"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = NotationHasDiagramMaps.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = NotationHasDiagramMaps.MetaClassGuid
#End Region

#Region "DiagramMaps's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramMapsMetaRoleGuidString As System.String = "9a0bb469-9883-4f89-87ea-fa3589d046e1"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramMapsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.DiagramMapsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.DiagramMapsMetaRoleGuidString, "NotationHasDiagramMaps.DiagramMaps")>
        Public Property DiagramMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap
            Get
                Return CType(Me.GetRolePlayer(DiagramMapsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
                Me.SetRolePlayer(DiagramMapsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Notation's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const NotationMetaRoleGuidString As System.String = "ce86b4d3-b1d9-4a42-9522-8797f0391eb7"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly NotationMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.NotationMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps.NotationMetaRoleGuidString, "NotationHasDiagramMaps.Notation")>
        Public Property Notation() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation
            Get
                Return CType(Me.GetRolePlayer(NotationMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Notation)
                Me.SetRolePlayer(NotationMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "NotationHasDiagramMaps's Generated Constructor Code"
    Partial Public Class NotationHasDiagramMaps
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNotationHasDiagramMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As NotationHasDiagramMaps
            Return CreateNotationHasDiagramMaps(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNotationHasDiagramMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As NotationHasDiagramMaps
            Return CreateAndInitializeNotationHasDiagramMaps(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNotationHasDiagramMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As NotationHasDiagramMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(NotationHasDiagramMaps), rolePlayers), NotationHasDiagramMaps)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNotationHasDiagramMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As NotationHasDiagramMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(NotationHasDiagramMaps), rolePlayers, assignments), NotationHasDiagramMaps)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for NotationHasDiagramMaps"
    ''' <summary>
    ''' NotationHasDiagramMaps Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps))>
    Public NotInheritable Class NotationHasDiagramMapsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.NotationHasDiagramMaps(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As NotationHasDiagramMapsElementFactoryCreator
            Get
                Return New NotationHasDiagramMapsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.MetaRelationshipGuidString, "DiagramMapReferencesDiagram")>
    Partial Public Class DiagramMapReferencesDiagram
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DiagramMapReferencesDiagram's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "b8ecf969-58c6-452c-9bac-f0536647dfc7"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DiagramMapReferencesDiagram.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DiagramMapReferencesDiagram.MetaClassGuid
#End Region

#Region "Diagram's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramMetaRoleGuidString As System.String = "c6ee30da-b0bb-4886-b0cd-e3853c5bb85d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMetaRoleGuidString, "DiagramMapReferencesDiagram.Diagram")>
        Public Property Diagram() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram
            Get
                Return CType(Me.GetRolePlayer(DiagramMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Diagram)
                Me.SetRolePlayer(DiagramMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DiagramMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramMapMetaRoleGuidString As System.String = "b7b89396-4f2d-4965-af88-66e76e0c7274"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram.DiagramMapMetaRoleGuidString, "DiagramMapReferencesDiagram.DiagramMap")>
        Public Property DiagramMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap
            Get
                Return CType(Me.GetRolePlayer(DiagramMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
                Me.SetRolePlayer(DiagramMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DiagramMapReferencesDiagram's Generated Constructor Code"
    Partial Public Class DiagramMapReferencesDiagram
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMapReferencesDiagram(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramMapReferencesDiagram
            Return CreateDiagramMapReferencesDiagram(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMapReferencesDiagram(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMapReferencesDiagram
            Return CreateAndInitializeDiagramMapReferencesDiagram(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMapReferencesDiagram(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramMapReferencesDiagram
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramMapReferencesDiagram), rolePlayers), DiagramMapReferencesDiagram)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMapReferencesDiagram(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMapReferencesDiagram
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramMapReferencesDiagram), rolePlayers, assignments), DiagramMapReferencesDiagram)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DiagramMapReferencesDiagram"
    ''' <summary>
    ''' DiagramMapReferencesDiagram Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram))>
    Public NotInheritable Class DiagramMapReferencesDiagramElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesDiagram(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramMapReferencesDiagramElementFactoryCreator
            Get
                Return New DiagramMapReferencesDiagramElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.MetaRelationshipGuidString, "DesignerDefinitionReferencesObjectModel")>
    Partial Public Class DesignerDefinitionReferencesObjectModel
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DesignerDefinitionReferencesObjectModel's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "24eed4bc-0780-4739-9f47-08651bd7c7d2"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DesignerDefinitionReferencesObjectModel.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DesignerDefinitionReferencesObjectModel.MetaClassGuid
#End Region

#Region "ObjectModels's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ObjectModelsMetaRoleGuidString As System.String = "f087a576-3502-43c5-af67-15ed13ba6cd1"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ObjectModelsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.ObjectModelsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.ObjectModelsMetaRoleGuidString, "DesignerDefinitionReferencesObjectModel.ObjectModels")>
        Public Property ObjectModels() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel
            Get
                Return CType(Me.GetRolePlayer(ObjectModelsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)
                Me.SetRolePlayer(ObjectModelsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DesignerDefinition's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DesignerDefinitionMetaRoleGuidString As System.String = "b928faad-59e7-4cc0-aece-eeeb4e36fd3f"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DesignerDefinitionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.DesignerDefinitionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel.DesignerDefinitionMetaRoleGuidString, "DesignerDefinitionReferencesObjectModel.DesignerDefinition")>
        Public Property DesignerDefinition() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition
            Get
                Return CType(Me.GetRolePlayer(DesignerDefinitionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
                Me.SetRolePlayer(DesignerDefinitionMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DesignerDefinitionReferencesObjectModel's Generated Constructor Code"
    Partial Public Class DesignerDefinitionReferencesObjectModel
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionReferencesObjectModel(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionReferencesObjectModel
            Return CreateDesignerDefinitionReferencesObjectModel(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionReferencesObjectModel(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionReferencesObjectModel
            Return CreateAndInitializeDesignerDefinitionReferencesObjectModel(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionReferencesObjectModel(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionReferencesObjectModel
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionReferencesObjectModel), rolePlayers), DesignerDefinitionReferencesObjectModel)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionReferencesObjectModel(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionReferencesObjectModel
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionReferencesObjectModel), rolePlayers, assignments), DesignerDefinitionReferencesObjectModel)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DesignerDefinitionReferencesObjectModel"
    ''' <summary>
    ''' DesignerDefinitionReferencesObjectModel Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel))>
    Public NotInheritable Class DesignerDefinitionReferencesObjectModelElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionReferencesObjectModel(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DesignerDefinitionReferencesObjectModelElementFactoryCreator
            Get
                Return New DesignerDefinitionReferencesObjectModelElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.MetaRelationshipGuidString, "DiagramMapHasShapeMaps")>
    Partial Public Class DiagramMapHasShapeMaps
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DiagramMapHasShapeMaps's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "b5005b07-ac4c-4bcd-a5bf-72867e08c7a8"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DiagramMapHasShapeMaps.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DiagramMapHasShapeMaps.MetaClassGuid
#End Region

#Region "ShapeMaps's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMapsMetaRoleGuidString As System.String = "543eb3a6-465f-4ea2-ab5f-5e83b928c1c3"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMapsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.ShapeMapsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.ShapeMapsMetaRoleGuidString, "DiagramMapHasShapeMaps.ShapeMaps")>
        Public Property ShapeMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap
            Get
                Return CType(Me.GetRolePlayer(ShapeMapsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
                Me.SetRolePlayer(ShapeMapsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DiagramMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramMapMetaRoleGuidString As System.String = "4d44412a-3b41-4741-8be2-7c06230764ad"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.DiagramMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps.DiagramMapMetaRoleGuidString, "DiagramMapHasShapeMaps.DiagramMap")>
        Public Property DiagramMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap
            Get
                Return CType(Me.GetRolePlayer(DiagramMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
                Me.SetRolePlayer(DiagramMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DiagramMapHasShapeMaps's Generated Constructor Code"
    Partial Public Class DiagramMapHasShapeMaps
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMapHasShapeMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramMapHasShapeMaps
            Return CreateDiagramMapHasShapeMaps(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMapHasShapeMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMapHasShapeMaps
            Return CreateAndInitializeDiagramMapHasShapeMaps(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMapHasShapeMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramMapHasShapeMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramMapHasShapeMaps), rolePlayers), DiagramMapHasShapeMaps)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMapHasShapeMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMapHasShapeMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramMapHasShapeMaps), rolePlayers, assignments), DiagramMapHasShapeMaps)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DiagramMapHasShapeMaps"
    ''' <summary>
    ''' DiagramMapHasShapeMaps Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps))>
    Public NotInheritable Class DiagramMapHasShapeMapsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasShapeMaps(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramMapHasShapeMapsElementFactoryCreator
            Get
                Return New DiagramMapHasShapeMapsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.MetaRelationshipGuidString, "ShapeMapHasTextMaps")>
    Partial Public Class ShapeMapHasTextMaps
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeMapHasTextMaps's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c188594a-10b7-4e48-b6b0-f0edbec4b126"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeMapHasTextMaps.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeMapHasTextMaps.MetaClassGuid
#End Region

#Region "TextMaps's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TextMapsMetaRoleGuidString As System.String = "a9313a27-202f-4db7-8ecc-8a4761beb629"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TextMapsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.TextMapsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.TextMapsMetaRoleGuidString, "ShapeMapHasTextMaps.TextMaps")>
        Public Property TextMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap
            Get
                Return CType(Me.GetRolePlayer(TextMapsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
                Me.SetRolePlayer(TextMapsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ShapeMapClass's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMapClassMetaRoleGuidString As System.String = "9290ff8c-a92c-47cd-b217-4060a1086829"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMapClassMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.ShapeMapClassMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps.ShapeMapClassMetaRoleGuidString, "ShapeMapHasTextMaps.ShapeMapClass")>
        Public Property ShapeMapClass() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap
            Get
                Return CType(Me.GetRolePlayer(ShapeMapClassMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
                Me.SetRolePlayer(ShapeMapClassMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeMapHasTextMaps's Generated Constructor Code"
    Partial Public Class ShapeMapHasTextMaps
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapHasTextMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapHasTextMaps
            Return CreateShapeMapHasTextMaps(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapHasTextMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapHasTextMaps
            Return CreateAndInitializeShapeMapHasTextMaps(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapHasTextMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapHasTextMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapHasTextMaps), rolePlayers), ShapeMapHasTextMaps)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapHasTextMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapHasTextMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapHasTextMaps), rolePlayers, assignments), ShapeMapHasTextMaps)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeMapHasTextMaps"
    ''' <summary>
    ''' ShapeMapHasTextMaps Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps))>
    Public NotInheritable Class ShapeMapHasTextMapsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasTextMaps(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeMapHasTextMapsElementFactoryCreator
            Get
                Return New ShapeMapHasTextMapsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.MetaRelationshipGuidString, "TextMapHasTextDecorator")>
    Partial Public Class TextMapHasTextDecorator
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "TextMapHasTextDecorator's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "f36b7dbc-3b9f-4380-a43a-7e90af0ebde9"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = TextMapHasTextDecorator.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = TextMapHasTextDecorator.MetaClassGuid
#End Region

#Region "TextDecorator's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TextDecoratorMetaRoleGuidString As System.String = "85a857c4-664d-4702-b764-dd36fb286e0d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TextDecoratorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextDecoratorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextDecoratorMetaRoleGuidString, "TextMapHasTextDecorator.TextDecorator")>
        Public Property TextDecorator() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText
            Get
                Return CType(Me.GetRolePlayer(TextDecoratorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeText)
                Me.SetRolePlayer(TextDecoratorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "TextMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TextMapMetaRoleGuidString As System.String = "46ad198c-9d9c-4ad5-b75d-0afd12616f29"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TextMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator.TextMapMetaRoleGuidString, "TextMapHasTextDecorator.TextMap")>
        Public Property TextMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap
            Get
                Return CType(Me.GetRolePlayer(TextMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
                Me.SetRolePlayer(TextMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "TextMapHasTextDecorator's Generated Constructor Code"
    Partial Public Class TextMapHasTextDecorator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateTextMapHasTextDecorator(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As TextMapHasTextDecorator
            Return CreateTextMapHasTextDecorator(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeTextMapHasTextDecorator(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As TextMapHasTextDecorator
            Return CreateAndInitializeTextMapHasTextDecorator(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateTextMapHasTextDecorator(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As TextMapHasTextDecorator
            Return CType(partition.ElementFactory.CreateElementLink(GetType(TextMapHasTextDecorator), rolePlayers), TextMapHasTextDecorator)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeTextMapHasTextDecorator(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As TextMapHasTextDecorator
            Return CType(partition.ElementFactory.CreateElementLink(GetType(TextMapHasTextDecorator), rolePlayers, assignments), TextMapHasTextDecorator)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for TextMapHasTextDecorator"
    ''' <summary>
    ''' TextMapHasTextDecorator Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator))>
    Public NotInheritable Class TextMapHasTextDecoratorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.TextMapHasTextDecorator(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As TextMapHasTextDecoratorElementFactoryCreator
            Get
                Return New TextMapHasTextDecoratorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.MetaRelationshipGuidString, "ShapeHasFillColor")>
    Partial Public Class ShapeHasFillColor
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeHasFillColor's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "40ff8d06-c082-468f-a111-7308a8edd8bf"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeHasFillColor.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeHasFillColor.MetaClassGuid
#End Region

#Region "FillColor's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const FillColorMetaRoleGuidString As System.String = "145231df-5e33-4637-bda6-b3bc72afcac8"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly FillColorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.FillColorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.FillColorMetaRoleGuidString, "ShapeHasFillColor.FillColor")>
        Public Property FillColor() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return CType(Me.GetRolePlayer(FillColorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Me.SetRolePlayer(FillColorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Shape's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMetaRoleGuidString As System.String = "aa685f7d-1461-4dbc-80f5-c4cb88c90c44"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.ShapeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor.ShapeMetaRoleGuidString, "ShapeHasFillColor.Shape")>
        Public Property Shape() As Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape
            Get
                Return CType(Me.GetRolePlayer(ShapeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape)
                Me.SetRolePlayer(ShapeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeHasFillColor's Generated Constructor Code"
    Partial Public Class ShapeHasFillColor
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeHasFillColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeHasFillColor
            Return CreateShapeHasFillColor(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeHasFillColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeHasFillColor
            Return CreateAndInitializeShapeHasFillColor(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeHasFillColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeHasFillColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeHasFillColor), rolePlayers), ShapeHasFillColor)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeHasFillColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeHasFillColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeHasFillColor), rolePlayers, assignments), ShapeHasFillColor)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeHasFillColor"
    ''' <summary>
    ''' ShapeHasFillColor Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor))>
    Public NotInheritable Class ShapeHasFillColorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeHasFillColor(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeHasFillColorElementFactoryCreator
            Get
                Return New ShapeHasFillColorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.MetaRelationshipGuidString, "ShapeMapReferencesShape")>
    Partial Public Class ShapeMapReferencesShape
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeMapReferencesShape's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "11e4283a-617b-476f-9d9b-6ccc3a89d238"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeMapReferencesShape.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeMapReferencesShape.MetaClassGuid
#End Region

#Region "Shape's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMetaRoleGuidString As System.String = "f240dbdc-b852-4467-8621-19e10a609e5e"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMetaRoleGuidString, "ShapeMapReferencesShape.Shape")>
        Public Property Shape() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
            Get
                Return CType(Me.GetRolePlayer(ShapeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                Me.SetRolePlayer(ShapeMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ShapeMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMapMetaRoleGuidString As System.String = "86cd0b74-e2a0-40e9-9ea1-ce9d8bec6372"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape.ShapeMapMetaRoleGuidString, "ShapeMapReferencesShape.ShapeMap")>
        Public Property ShapeMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap
            Get
                Return CType(Me.GetRolePlayer(ShapeMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
                Me.SetRolePlayer(ShapeMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeMapReferencesShape's Generated Constructor Code"
    Partial Public Class ShapeMapReferencesShape
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapReferencesShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapReferencesShape
            Return CreateShapeMapReferencesShape(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapReferencesShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapReferencesShape
            Return CreateAndInitializeShapeMapReferencesShape(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapReferencesShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapReferencesShape
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapReferencesShape), rolePlayers), ShapeMapReferencesShape)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapReferencesShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapReferencesShape
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapReferencesShape), rolePlayers, assignments), ShapeMapReferencesShape)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeMapReferencesShape"
    ''' <summary>
    ''' ShapeMapReferencesShape Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape))>
    Public NotInheritable Class ShapeMapReferencesShapeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesShape(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeMapReferencesShapeElementFactoryCreator
            Get
                Return New ShapeMapReferencesShapeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.MetaRelationshipGuidString, "ExplorerHasRoots")>
    Partial Public Class ExplorerHasRoots
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ExplorerHasRoots's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c3374444-fa12-4daf-8d32-691a1bae4abe"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ExplorerHasRoots.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ExplorerHasRoots.MetaClassGuid
#End Region

#Region "Roots's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const RootsMetaRoleGuidString As System.String = "588be2e7-6dfd-49cc-bd84-db4ceba13573"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly RootsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.RootsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.RootsMetaRoleGuidString, "ExplorerHasRoots.Roots")>
        Public Property Roots() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode
            Get
                Return CType(Me.GetRolePlayer(RootsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
                Me.SetRolePlayer(RootsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Explorer's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ExplorerMetaRoleGuidString As System.String = "432e6bd1-ab98-48af-a7c2-04ffe8a37a9b"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ExplorerMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.ExplorerMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots.ExplorerMetaRoleGuidString, "ExplorerHasRoots.Explorer")>
        Public Property Explorer() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer
            Get
                Return CType(Me.GetRolePlayer(ExplorerMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer)
                Me.SetRolePlayer(ExplorerMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ExplorerHasRoots's Generated Constructor Code"
    Partial Public Class ExplorerHasRoots
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExplorerHasRoots(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ExplorerHasRoots
            Return CreateExplorerHasRoots(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExplorerHasRoots(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ExplorerHasRoots
            Return CreateAndInitializeExplorerHasRoots(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExplorerHasRoots(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ExplorerHasRoots
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ExplorerHasRoots), rolePlayers), ExplorerHasRoots)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExplorerHasRoots(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ExplorerHasRoots
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ExplorerHasRoots), rolePlayers, assignments), ExplorerHasRoots)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ExplorerHasRoots"
    ''' <summary>
    ''' ExplorerHasRoots Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots))>
    Public NotInheritable Class ExplorerHasRootsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasRoots(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ExplorerHasRootsElementFactoryCreator
            Get
                Return New ExplorerHasRootsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.MetaRelationshipGuidString, "ClassNodeReferencesClass")>
    Partial Public Class ClassNodeReferencesClass
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ClassNodeReferencesClass's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "a9810044-f128-4dee-b7ae-14acedb893f0"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ClassNodeReferencesClass.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ClassNodeReferencesClass.MetaClassGuid
#End Region

#Region "Class's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ClassMetaRoleGuidString As System.String = "1a402377-ff3e-44fd-a45f-ce89f96b952a"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ClassMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassMetaRoleGuidString, "ClassNodeReferencesClass.Class")>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return CType(Me.GetRolePlayer(ClassMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Me.SetRolePlayer(ClassMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ClassNode's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ClassNodeMetaRoleGuidString As System.String = "51498c59-2ce3-4025-947b-ed0777f0b3fa"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ClassNodeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassNodeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass.ClassNodeMetaRoleGuidString, "ClassNodeReferencesClass.ClassNode")>
        Public Property ClassNode() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode
            Get
                Return CType(Me.GetRolePlayer(ClassNodeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
                Me.SetRolePlayer(ClassNodeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ClassNodeReferencesClass's Generated Constructor Code"
    Partial Public Class ClassNodeReferencesClass
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateClassNodeReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ClassNodeReferencesClass
            Return CreateClassNodeReferencesClass(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeClassNodeReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ClassNodeReferencesClass
            Return CreateAndInitializeClassNodeReferencesClass(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateClassNodeReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ClassNodeReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ClassNodeReferencesClass), rolePlayers), ClassNodeReferencesClass)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeClassNodeReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ClassNodeReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ClassNodeReferencesClass), rolePlayers, assignments), ClassNodeReferencesClass)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ClassNodeReferencesClass"
    ''' <summary>
    ''' ClassNodeReferencesClass Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass))>
    Public NotInheritable Class ClassNodeReferencesClassElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeReferencesClass(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ClassNodeReferencesClassElementFactoryCreator
            Get
                Return New ClassNodeReferencesClassElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.MetaRelationshipGuidString, "NodeTypeHasChildCollections")>
    Partial Public Class NodeTypeHasChildCollections
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "NodeTypeHasChildCollections's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "a640eb80-c1ec-4774-a116-c4b20c068d72"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = NodeTypeHasChildCollections.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = NodeTypeHasChildCollections.MetaClassGuid
#End Region

#Region "ChildCollections's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ChildCollectionsMetaRoleGuidString As System.String = "f3b3be08-09d0-47ed-9c4c-67aac314ab92"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ChildCollectionsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.ChildCollectionsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.ChildCollectionsMetaRoleGuidString, "NodeTypeHasChildCollections.ChildCollections")>
        Public Property ChildCollections() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode
            Get
                Return CType(Me.GetRolePlayer(ChildCollectionsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
                Me.SetRolePlayer(ChildCollectionsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "NodeType's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const NodeTypeMetaRoleGuidString As System.String = "eeca1f0a-ebcd-4e47-ad76-585a766a9309"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly NodeTypeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.NodeTypeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections.NodeTypeMetaRoleGuidString, "NodeTypeHasChildCollections.NodeType")>
        Public Property NodeType() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode
            Get
                Return CType(Me.GetRolePlayer(NodeTypeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
                Me.SetRolePlayer(NodeTypeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "NodeTypeHasChildCollections's Generated Constructor Code"
    Partial Public Class NodeTypeHasChildCollections
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNodeTypeHasChildCollections(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As NodeTypeHasChildCollections
            Return CreateNodeTypeHasChildCollections(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNodeTypeHasChildCollections(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As NodeTypeHasChildCollections
            Return CreateAndInitializeNodeTypeHasChildCollections(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateNodeTypeHasChildCollections(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As NodeTypeHasChildCollections
            Return CType(partition.ElementFactory.CreateElementLink(GetType(NodeTypeHasChildCollections), rolePlayers), NodeTypeHasChildCollections)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeNodeTypeHasChildCollections(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As NodeTypeHasChildCollections
            Return CType(partition.ElementFactory.CreateElementLink(GetType(NodeTypeHasChildCollections), rolePlayers, assignments), NodeTypeHasChildCollections)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for NodeTypeHasChildCollections"
    ''' <summary>
    ''' NodeTypeHasChildCollections Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections))>
    Public NotInheritable Class NodeTypeHasChildCollectionsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.NodeTypeHasChildCollections(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As NodeTypeHasChildCollectionsElementFactoryCreator
            Get
                Return New NodeTypeHasChildCollectionsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.MetaRelationshipGuidString, "CollectionNodeReferencesSortProperty")>
    Partial Public Class CollectionNodeReferencesSortProperty
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CollectionNodeReferencesSortProperty's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "fb954e39-e050-4584-91cc-033ef735ad86"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CollectionNodeReferencesSortProperty.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CollectionNodeReferencesSortProperty.MetaClassGuid
#End Region

#Region "SortProperty's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const SortPropertyMetaRoleGuidString As System.String = "c3ce94d0-1584-495e-992a-f3d9ab7d6c52"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly SortPropertyMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.SortPropertyMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.SortPropertyMetaRoleGuidString, "CollectionNodeReferencesSortProperty.SortProperty")>
        Public Property SortProperty() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty
            Get
                Return CType(Me.GetRolePlayer(SortPropertyMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                Me.SetRolePlayer(SortPropertyMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "CollectionNode's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CollectionNodeMetaRoleGuidString As System.String = "0b13cbca-777d-4931-a565-065a475bffde"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CollectionNodeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.CollectionNodeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty.CollectionNodeMetaRoleGuidString, "CollectionNodeReferencesSortProperty.CollectionNode")>
        Public Property CollectionNode() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode
            Get
                Return CType(Me.GetRolePlayer(CollectionNodeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
                Me.SetRolePlayer(CollectionNodeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CollectionNodeReferencesSortProperty's Generated Constructor Code"
    Partial Public Class CollectionNodeReferencesSortProperty
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeReferencesSortProperty(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CollectionNodeReferencesSortProperty
            Return CreateCollectionNodeReferencesSortProperty(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeReferencesSortProperty(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeReferencesSortProperty
            Return CreateAndInitializeCollectionNodeReferencesSortProperty(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeReferencesSortProperty(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CollectionNodeReferencesSortProperty
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CollectionNodeReferencesSortProperty), rolePlayers), CollectionNodeReferencesSortProperty)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeReferencesSortProperty(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeReferencesSortProperty
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CollectionNodeReferencesSortProperty), rolePlayers, assignments), CollectionNodeReferencesSortProperty)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CollectionNodeReferencesSortProperty"
    ''' <summary>
    ''' CollectionNodeReferencesSortProperty Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty))>
    Public NotInheritable Class CollectionNodeReferencesSortPropertyElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeReferencesSortProperty(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CollectionNodeReferencesSortPropertyElementFactoryCreator
            Get
                Return New CollectionNodeReferencesSortPropertyElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.MetaRelationshipGuidString, "PropertiesWindowHasPropertiesSet")>
    Partial Public Class PropertiesWindowHasPropertiesSet
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "PropertiesWindowHasPropertiesSet's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "ea20b668-0a5d-4d26-9061-0d0654693304"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = PropertiesWindowHasPropertiesSet.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = PropertiesWindowHasPropertiesSet.MetaClassGuid
#End Region

#Region "PropertySets's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const PropertySetsMetaRoleGuidString As System.String = "39a38f88-5360-42ff-bfed-38a2eff81ff1"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly PropertySetsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertySetsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertySetsMetaRoleGuidString, "PropertiesWindowHasPropertiesSet.PropertySets")>
        Public Property PropertySets() As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet
            Get
                Return CType(Me.GetRolePlayer(PropertySetsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
                Me.SetRolePlayer(PropertySetsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "PropertiesWindow's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const PropertiesWindowMetaRoleGuidString As System.String = "e69e2b78-92a7-4315-8f5f-f4c7fa41b16b"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly PropertiesWindowMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertiesWindowMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet.PropertiesWindowMetaRoleGuidString, "PropertiesWindowHasPropertiesSet.PropertiesWindow")>
        Public Property PropertiesWindow() As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow
            Get
                Return CType(Me.GetRolePlayer(PropertiesWindowMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindow)
                Me.SetRolePlayer(PropertiesWindowMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "PropertiesWindowHasPropertiesSet's Generated Constructor Code"
    Partial Public Class PropertiesWindowHasPropertiesSet
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesWindowHasPropertiesSet(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertiesWindowHasPropertiesSet
            Return CreatePropertiesWindowHasPropertiesSet(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesWindowHasPropertiesSet(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesWindowHasPropertiesSet
            Return CreateAndInitializePropertiesWindowHasPropertiesSet(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesWindowHasPropertiesSet(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertiesWindowHasPropertiesSet
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertiesWindowHasPropertiesSet), rolePlayers), PropertiesWindowHasPropertiesSet)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesWindowHasPropertiesSet(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesWindowHasPropertiesSet
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertiesWindowHasPropertiesSet), rolePlayers, assignments), PropertiesWindowHasPropertiesSet)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for PropertiesWindowHasPropertiesSet"
    ''' <summary>
    ''' PropertiesWindowHasPropertiesSet Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet))>
    Public NotInheritable Class PropertiesWindowHasPropertiesSetElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesWindowHasPropertiesSet(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As PropertiesWindowHasPropertiesSetElementFactoryCreator
            Get
                Return New PropertiesWindowHasPropertiesSetElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.MetaRelationshipGuidString, "PropertiesSetReferencesClass")>
    Partial Public Class PropertiesSetReferencesClass
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "PropertiesSetReferencesClass's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "6e9909c7-e970-4827-b570-e29e1d853d67"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = PropertiesSetReferencesClass.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = PropertiesSetReferencesClass.MetaClassGuid
#End Region

#Region "Class's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ClassMetaRoleGuidString As System.String = "6020917a-264d-4b54-9465-62e79aa66e16"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ClassMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.ClassMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.ClassMetaRoleGuidString, "PropertiesSetReferencesClass.Class")>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return CType(Me.GetRolePlayer(ClassMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Me.SetRolePlayer(ClassMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "PropertiesSet's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const PropertiesSetMetaRoleGuidString As System.String = "f8ad4e0e-9be6-41db-9cf8-dc60749ec9bf"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly PropertiesSetMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.PropertiesSetMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass.PropertiesSetMetaRoleGuidString, "PropertiesSetReferencesClass.PropertiesSet")>
        Public Property PropertiesSet() As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet
            Get
                Return CType(Me.GetRolePlayer(PropertiesSetMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
                Me.SetRolePlayer(PropertiesSetMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "PropertiesSetReferencesClass's Generated Constructor Code"
    Partial Public Class PropertiesSetReferencesClass
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesSetReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertiesSetReferencesClass
            Return CreatePropertiesSetReferencesClass(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesSetReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesSetReferencesClass
            Return CreateAndInitializePropertiesSetReferencesClass(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesSetReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertiesSetReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertiesSetReferencesClass), rolePlayers), PropertiesSetReferencesClass)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesSetReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesSetReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertiesSetReferencesClass), rolePlayers, assignments), PropertiesSetReferencesClass)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for PropertiesSetReferencesClass"
    ''' <summary>
    ''' PropertiesSetReferencesClass Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass))>
    Public NotInheritable Class PropertiesSetReferencesClassElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesClass(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As PropertiesSetReferencesClassElementFactoryCreator
            Get
                Return New PropertiesSetReferencesClassElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.MetaRelationshipGuidString, "PropertiesSetReferencesValuePropertyExceptions")>
    Partial Public Class PropertiesSetReferencesValuePropertyExceptions
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "PropertiesSetReferencesValuePropertyExceptions's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "d6ba24eb-4b48-4be9-99e2-eac83a9c3c58"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = PropertiesSetReferencesValuePropertyExceptions.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = PropertiesSetReferencesValuePropertyExceptions.MetaClassGuid
#End Region

#Region "ValuePropertiesToExclude's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValuePropertiesToExcludeMetaRoleGuidString As System.String = "e025cca8-7cb8-4194-bf46-7a41b2e60134"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValuePropertiesToExcludeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.ValuePropertiesToExcludeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.ValuePropertiesToExcludeMetaRoleGuidString, "PropertiesSetReferencesValuePropertyExceptions.ValuePropertiesToExclude")>
        Public Property ValuePropertiesToExclude() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty
            Get
                Return CType(Me.GetRolePlayer(ValuePropertiesToExcludeMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                Me.SetRolePlayer(ValuePropertiesToExcludeMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "PropertiesSet's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const PropertiesSetMetaRoleGuidString As System.String = "4cad8cfe-459b-4265-aa0d-e343918643d0"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly PropertiesSetMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.PropertiesSetMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions.PropertiesSetMetaRoleGuidString, "PropertiesSetReferencesValuePropertyExceptions.PropertiesSet")>
        Public Property PropertiesSet() As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet
            Get
                Return CType(Me.GetRolePlayer(PropertiesSetMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
                Me.SetRolePlayer(PropertiesSetMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "PropertiesSetReferencesValuePropertyExceptions's Generated Constructor Code"
    Partial Public Class PropertiesSetReferencesValuePropertyExceptions
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesSetReferencesValuePropertyExceptions(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertiesSetReferencesValuePropertyExceptions
            Return CreatePropertiesSetReferencesValuePropertyExceptions(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesSetReferencesValuePropertyExceptions(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesSetReferencesValuePropertyExceptions
            Return CreateAndInitializePropertiesSetReferencesValuePropertyExceptions(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesSetReferencesValuePropertyExceptions(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertiesSetReferencesValuePropertyExceptions
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertiesSetReferencesValuePropertyExceptions), rolePlayers), PropertiesSetReferencesValuePropertyExceptions)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesSetReferencesValuePropertyExceptions(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesSetReferencesValuePropertyExceptions
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertiesSetReferencesValuePropertyExceptions), rolePlayers, assignments), PropertiesSetReferencesValuePropertyExceptions)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for PropertiesSetReferencesValuePropertyExceptions"
    ''' <summary>
    ''' PropertiesSetReferencesValuePropertyExceptions Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions))>
    Public NotInheritable Class PropertiesSetReferencesValuePropertyExceptionsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesValuePropertyExceptions(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As PropertiesSetReferencesValuePropertyExceptionsElementFactoryCreator
            Get
                Return New PropertiesSetReferencesValuePropertyExceptionsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.MetaRelationshipGuidString, "PropertiesSetReferencesRolesToDisplay")>
    Partial Public Class PropertiesSetReferencesRolesToDisplay
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "PropertiesSetReferencesRolesToDisplay's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "ff86de99-14b4-4136-b7bb-f209954ffa7c"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = PropertiesSetReferencesRolesToDisplay.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = PropertiesSetReferencesRolesToDisplay.MetaClassGuid
#End Region

#Region "Role's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const RoleMetaRoleGuidString As System.String = "05d3735b-9cdf-4bb1-869a-a8fefdd2750b"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly RoleMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RoleMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RoleMetaRoleGuidString, "PropertiesSetReferencesRolesToDisplay.Role")>
        Public Property Role() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole
            Get
                Return CType(Me.GetRolePlayer(RoleMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
                Me.SetRolePlayer(RoleMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "RoleProperties's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const RolePropertiesMetaRoleGuidString As System.String = "886bcceb-59fa-4136-8c23-59c2a521b554"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly RolePropertiesMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RolePropertiesMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay.RolePropertiesMetaRoleGuidString, "PropertiesSetReferencesRolesToDisplay.RoleProperties")>
        Public Property RoleProperties() As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty
            Get
                Return CType(Me.GetRolePlayer(RolePropertiesMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
                Me.SetRolePlayer(RolePropertiesMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "PropertiesSetReferencesRolesToDisplay's Generated Constructor Code"
    Partial Public Class PropertiesSetReferencesRolesToDisplay
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesSetReferencesRolesToDisplay(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertiesSetReferencesRolesToDisplay
            Return CreatePropertiesSetReferencesRolesToDisplay(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesSetReferencesRolesToDisplay(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesSetReferencesRolesToDisplay
            Return CreateAndInitializePropertiesSetReferencesRolesToDisplay(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertiesSetReferencesRolesToDisplay(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertiesSetReferencesRolesToDisplay
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertiesSetReferencesRolesToDisplay), rolePlayers), PropertiesSetReferencesRolesToDisplay)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertiesSetReferencesRolesToDisplay(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertiesSetReferencesRolesToDisplay
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertiesSetReferencesRolesToDisplay), rolePlayers, assignments), PropertiesSetReferencesRolesToDisplay)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for PropertiesSetReferencesRolesToDisplay"
    ''' <summary>
    ''' PropertiesSetReferencesRolesToDisplay Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay))>
    Public NotInheritable Class PropertiesSetReferencesRolesToDisplayElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertiesSetReferencesRolesToDisplay(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As PropertiesSetReferencesRolesToDisplayElementFactoryCreator
            Get
                Return New PropertiesSetReferencesRolesToDisplayElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.MetaRelationshipGuidString, "ValidationBehaviorReferencesContextMenuGroups")>
    Partial Public Class ValidationBehaviorReferencesContextMenuGroups
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ValidationBehaviorReferencesContextMenuGroups's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "fbdd9112-4669-4b81-8e9d-6b096ff64587"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ValidationBehaviorReferencesContextMenuGroups.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ValidationBehaviorReferencesContextMenuGroups.MetaClassGuid
#End Region

#Region "ContextMenuGroups's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ContextMenuGroupsMetaRoleGuidString As System.String = "3b2471ae-71e6-46ad-9b9f-d68082f48d8d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ContextMenuGroupsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.ContextMenuGroupsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.ContextMenuGroupsMetaRoleGuidString, "ValidationBehaviorReferencesContextMenuGroups.ContextMenuGroups")>
        Public Property ContextMenuGroups() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroup
            Get
                Return CType(Me.GetRolePlayer(ContextMenuGroupsMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroup)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroup)
                Me.SetRolePlayer(ContextMenuGroupsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ValidationBehavior's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValidationBehaviorMetaRoleGuidString As System.String = "e107cd2f-e157-47eb-a13a-ac83c87c394b"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValidationBehaviorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.ValidationBehaviorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups.ValidationBehaviorMetaRoleGuidString, "ValidationBehaviorReferencesContextMenuGroups.ValidationBehavior")>
        Public Property ValidationBehavior() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior
            Get
                Return CType(Me.GetRolePlayer(ValidationBehaviorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
                Me.SetRolePlayer(ValidationBehaviorMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ValidationBehaviorReferencesContextMenuGroups's Generated Constructor Code"
    Partial Public Class ValidationBehaviorReferencesContextMenuGroups
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidationBehaviorReferencesContextMenuGroups(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ValidationBehaviorReferencesContextMenuGroups
            Return CreateValidationBehaviorReferencesContextMenuGroups(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidationBehaviorReferencesContextMenuGroups(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValidationBehaviorReferencesContextMenuGroups
            Return CreateAndInitializeValidationBehaviorReferencesContextMenuGroups(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidationBehaviorReferencesContextMenuGroups(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ValidationBehaviorReferencesContextMenuGroups
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ValidationBehaviorReferencesContextMenuGroups), rolePlayers), ValidationBehaviorReferencesContextMenuGroups)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidationBehaviorReferencesContextMenuGroups(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValidationBehaviorReferencesContextMenuGroups
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ValidationBehaviorReferencesContextMenuGroups), rolePlayers, assignments), ValidationBehaviorReferencesContextMenuGroups)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ValidationBehaviorReferencesContextMenuGroups"
    ''' <summary>
    ''' ValidationBehaviorReferencesContextMenuGroups Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups))>
    Public NotInheritable Class ValidationBehaviorReferencesContextMenuGroupsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesContextMenuGroups(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ValidationBehaviorReferencesContextMenuGroupsElementFactoryCreator
            Get
                Return New ValidationBehaviorReferencesContextMenuGroupsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.MetaRelationshipGuidString, "ValidationBehaviorReferencesLoadGroups")>
    Partial Public Class ValidationBehaviorReferencesLoadGroups
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ValidationBehaviorReferencesLoadGroups's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "1058d00d-bea1-4df5-997d-a821e2462d6a"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ValidationBehaviorReferencesLoadGroups.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ValidationBehaviorReferencesLoadGroups.MetaClassGuid
#End Region

#Region "LoadGroups's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const LoadGroupsMetaRoleGuidString As System.String = "caf1b36a-a6ec-40bf-bf48-71a029b302ca"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly LoadGroupsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.LoadGroupsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.LoadGroupsMetaRoleGuidString, "ValidationBehaviorReferencesLoadGroups.LoadGroups")>
        Public Property LoadGroups() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroup
            Get
                Return CType(Me.GetRolePlayer(LoadGroupsMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroup)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroup)
                Me.SetRolePlayer(LoadGroupsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ValidationBehavior's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValidationBehaviorMetaRoleGuidString As System.String = "a71ea570-951f-41dc-be99-720698beb0c4"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValidationBehaviorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.ValidationBehaviorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups.ValidationBehaviorMetaRoleGuidString, "ValidationBehaviorReferencesLoadGroups.ValidationBehavior")>
        Public Property ValidationBehavior() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior
            Get
                Return CType(Me.GetRolePlayer(ValidationBehaviorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
                Me.SetRolePlayer(ValidationBehaviorMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ValidationBehaviorReferencesLoadGroups's Generated Constructor Code"
    Partial Public Class ValidationBehaviorReferencesLoadGroups
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidationBehaviorReferencesLoadGroups(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ValidationBehaviorReferencesLoadGroups
            Return CreateValidationBehaviorReferencesLoadGroups(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidationBehaviorReferencesLoadGroups(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValidationBehaviorReferencesLoadGroups
            Return CreateAndInitializeValidationBehaviorReferencesLoadGroups(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidationBehaviorReferencesLoadGroups(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ValidationBehaviorReferencesLoadGroups
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ValidationBehaviorReferencesLoadGroups), rolePlayers), ValidationBehaviorReferencesLoadGroups)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidationBehaviorReferencesLoadGroups(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValidationBehaviorReferencesLoadGroups
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ValidationBehaviorReferencesLoadGroups), rolePlayers, assignments), ValidationBehaviorReferencesLoadGroups)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ValidationBehaviorReferencesLoadGroups"
    ''' <summary>
    ''' ValidationBehaviorReferencesLoadGroups Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups))>
    Public NotInheritable Class ValidationBehaviorReferencesLoadGroupsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesLoadGroups(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ValidationBehaviorReferencesLoadGroupsElementFactoryCreator
            Get
                Return New ValidationBehaviorReferencesLoadGroupsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.MetaRelationshipGuidString, "ValidationBehaviorReferencesSaveGroups")>
    Partial Public Class ValidationBehaviorReferencesSaveGroups
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ValidationBehaviorReferencesSaveGroups's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "d033e194-78dc-4771-b161-76fa6536d625"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ValidationBehaviorReferencesSaveGroups.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ValidationBehaviorReferencesSaveGroups.MetaClassGuid
#End Region

#Region "SaveGroups's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const SaveGroupsMetaRoleGuidString As System.String = "7e2000a0-e9bd-4a9a-83e2-ca646a1a3480"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly SaveGroupsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.SaveGroupsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.SaveGroupsMetaRoleGuidString, "ValidationBehaviorReferencesSaveGroups.SaveGroups")>
        Public Property SaveGroups() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroup
            Get
                Return CType(Me.GetRolePlayer(SaveGroupsMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroup)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.ModelConstraintGroup)
                Me.SetRolePlayer(SaveGroupsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ValidationBehavior's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValidationBehaviorMetaRoleGuidString As System.String = "34f20385-024a-4850-973d-facfe3fc0865"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValidationBehaviorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.ValidationBehaviorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups.ValidationBehaviorMetaRoleGuidString, "ValidationBehaviorReferencesSaveGroups.ValidationBehavior")>
        Public Property ValidationBehavior() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior
            Get
                Return CType(Me.GetRolePlayer(ValidationBehaviorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehavior)
                Me.SetRolePlayer(ValidationBehaviorMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ValidationBehaviorReferencesSaveGroups's Generated Constructor Code"
    Partial Public Class ValidationBehaviorReferencesSaveGroups
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidationBehaviorReferencesSaveGroups(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ValidationBehaviorReferencesSaveGroups
            Return CreateValidationBehaviorReferencesSaveGroups(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidationBehaviorReferencesSaveGroups(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValidationBehaviorReferencesSaveGroups
            Return CreateAndInitializeValidationBehaviorReferencesSaveGroups(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValidationBehaviorReferencesSaveGroups(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ValidationBehaviorReferencesSaveGroups
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ValidationBehaviorReferencesSaveGroups), rolePlayers), ValidationBehaviorReferencesSaveGroups)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValidationBehaviorReferencesSaveGroups(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValidationBehaviorReferencesSaveGroups
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ValidationBehaviorReferencesSaveGroups), rolePlayers, assignments), ValidationBehaviorReferencesSaveGroups)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ValidationBehaviorReferencesSaveGroups"
    ''' <summary>
    ''' ValidationBehaviorReferencesSaveGroups Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups))>
    Public NotInheritable Class ValidationBehaviorReferencesSaveGroupsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ValidationBehaviorReferencesSaveGroups(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ValidationBehaviorReferencesSaveGroupsElementFactoryCreator
            Get
                Return New ValidationBehaviorReferencesSaveGroupsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.MetaRelationshipGuidString, "ClassNodeHasRendering")>
    Partial Public Class ClassNodeHasRendering
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ClassNodeHasRendering's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "12f73e3e-b341-4b03-9428-0da80c718797"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ClassNodeHasRendering.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ClassNodeHasRendering.MetaClassGuid
#End Region

#Region "Rendering's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const RenderingMetaRoleGuidString As System.String = "80924957-7a51-46e1-b24b-5073b64f4220"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly RenderingMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.RenderingMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.RenderingMetaRoleGuidString, "ClassNodeHasRendering.Rendering")>
        Public Property Rendering() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering
            Get
                Return CType(Me.GetRolePlayer(RenderingMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
                Me.SetRolePlayer(RenderingMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ClassNode's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ClassNodeMetaRoleGuidString As System.String = "b275ce79-0143-4373-a303-4409d243d170"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ClassNodeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.ClassNodeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering.ClassNodeMetaRoleGuidString, "ClassNodeHasRendering.ClassNode")>
        Public Property ClassNode() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode
            Get
                Return CType(Me.GetRolePlayer(ClassNodeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
                Me.SetRolePlayer(ClassNodeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ClassNodeHasRendering's Generated Constructor Code"
    Partial Public Class ClassNodeHasRendering
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateClassNodeHasRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ClassNodeHasRendering
            Return CreateClassNodeHasRendering(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeClassNodeHasRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ClassNodeHasRendering
            Return CreateAndInitializeClassNodeHasRendering(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateClassNodeHasRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ClassNodeHasRendering
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ClassNodeHasRendering), rolePlayers), ClassNodeHasRendering)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeClassNodeHasRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ClassNodeHasRendering
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ClassNodeHasRendering), rolePlayers, assignments), ClassNodeHasRendering)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ClassNodeHasRendering"
    ''' <summary>
    ''' ClassNodeHasRendering Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering))>
    Public NotInheritable Class ClassNodeHasRenderingElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeHasRendering(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ClassNodeHasRenderingElementFactoryCreator
            Get
                Return New ClassNodeHasRenderingElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.MetaRelationshipGuidString, "CollectionNodeHasRendering")>
    Partial Public Class CollectionNodeHasRendering
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CollectionNodeHasRendering's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "d6e3d5d3-88fa-44ca-8f81-a07f76f5f71c"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CollectionNodeHasRendering.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CollectionNodeHasRendering.MetaClassGuid
#End Region

#Region "Rendering's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const RenderingMetaRoleGuidString As System.String = "159db219-d256-4db4-8b0e-538c6c68daba"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly RenderingMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.RenderingMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.RenderingMetaRoleGuidString, "CollectionNodeHasRendering.Rendering")>
        Public Property Rendering() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering
            Get
                Return CType(Me.GetRolePlayer(RenderingMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeRendering)
                Me.SetRolePlayer(RenderingMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "CollectionNode's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CollectionNodeMetaRoleGuidString As System.String = "76a1cba4-8a7a-4db5-ab93-844c71baef06"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CollectionNodeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.CollectionNodeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering.CollectionNodeMetaRoleGuidString, "CollectionNodeHasRendering.CollectionNode")>
        Public Property CollectionNode() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode
            Get
                Return CType(Me.GetRolePlayer(CollectionNodeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
                Me.SetRolePlayer(CollectionNodeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CollectionNodeHasRendering's Generated Constructor Code"
    Partial Public Class CollectionNodeHasRendering
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeHasRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CollectionNodeHasRendering
            Return CreateCollectionNodeHasRendering(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeHasRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeHasRendering
            Return CreateAndInitializeCollectionNodeHasRendering(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeHasRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CollectionNodeHasRendering
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CollectionNodeHasRendering), rolePlayers), CollectionNodeHasRendering)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeHasRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeHasRendering
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CollectionNodeHasRendering), rolePlayers, assignments), CollectionNodeHasRendering)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CollectionNodeHasRendering"
    ''' <summary>
    ''' CollectionNodeHasRendering Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering))>
    Public NotInheritable Class CollectionNodeHasRenderingElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasRendering(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CollectionNodeHasRenderingElementFactoryCreator
            Get
                Return New CollectionNodeHasRenderingElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.MetaRelationshipGuidString, "CollectionNodeHasChildNodes")>
    Partial Public Class CollectionNodeHasChildNodes
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CollectionNodeHasChildNodes's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "d52bd0aa-3afa-44d4-b701-b421f67f0a9b"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CollectionNodeHasChildNodes.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CollectionNodeHasChildNodes.MetaClassGuid
#End Region

#Region "ChildNodes's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ChildNodesMetaRoleGuidString As System.String = "b71eaf3c-7ce7-4a04-a3e0-e7f9e2e329ff"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ChildNodesMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.ChildNodesMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.ChildNodesMetaRoleGuidString, "CollectionNodeHasChildNodes.ChildNodes")>
        Public Property ChildNodes() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode
            Get
                Return CType(Me.GetRolePlayer(ChildNodesMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ElementNode)
                Me.SetRolePlayer(ChildNodesMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "CollectionNode's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CollectionNodeMetaRoleGuidString As System.String = "5337ce54-67cc-4f79-bd3a-489876498ea9"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CollectionNodeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.CollectionNodeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes.CollectionNodeMetaRoleGuidString, "CollectionNodeHasChildNodes.CollectionNode")>
        Public Property CollectionNode() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode
            Get
                Return CType(Me.GetRolePlayer(CollectionNodeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
                Me.SetRolePlayer(CollectionNodeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CollectionNodeHasChildNodes's Generated Constructor Code"
    Partial Public Class CollectionNodeHasChildNodes
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeHasChildNodes(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CollectionNodeHasChildNodes
            Return CreateCollectionNodeHasChildNodes(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeHasChildNodes(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeHasChildNodes
            Return CreateAndInitializeCollectionNodeHasChildNodes(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeHasChildNodes(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CollectionNodeHasChildNodes
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CollectionNodeHasChildNodes), rolePlayers), CollectionNodeHasChildNodes)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeHasChildNodes(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeHasChildNodes
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CollectionNodeHasChildNodes), rolePlayers, assignments), CollectionNodeHasChildNodes)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CollectionNodeHasChildNodes"
    ''' <summary>
    ''' CollectionNodeHasChildNodes Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes))>
    Public NotInheritable Class CollectionNodeHasChildNodesElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasChildNodes(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CollectionNodeHasChildNodesElementFactoryCreator
            Get
                Return New CollectionNodeHasChildNodesElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.MetaRelationshipGuidString, "ExplorerHasDefaultRendering")>
    Partial Public Class ExplorerHasDefaultRendering
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ExplorerHasDefaultRendering's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "fb614fde-13ec-4ea4-bd15-014596c52a1e"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ExplorerHasDefaultRendering.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ExplorerHasDefaultRendering.MetaClassGuid
#End Region

#Region "DefaultRenderings's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DefaultRenderingsMetaRoleGuidString As System.String = "b8935a85-0bb3-4af5-a6df-6ae92be167e9"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DefaultRenderingsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.DefaultRenderingsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.DefaultRenderingsMetaRoleGuidString, "ExplorerHasDefaultRendering.DefaultRenderings")>
        Public Property DefaultRenderings() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering
            Get
                Return CType(Me.GetRolePlayer(DefaultRenderingsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
                Me.SetRolePlayer(DefaultRenderingsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Explorer's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ExplorerMetaRoleGuidString As System.String = "d0040ad1-a9a4-4eef-9fc2-b07bb76e76c7"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ExplorerMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.ExplorerMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering.ExplorerMetaRoleGuidString, "ExplorerHasDefaultRendering.Explorer")>
        Public Property Explorer() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer
            Get
                Return CType(Me.GetRolePlayer(ExplorerMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Explorer)
                Me.SetRolePlayer(ExplorerMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ExplorerHasDefaultRendering's Generated Constructor Code"
    Partial Public Class ExplorerHasDefaultRendering
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExplorerHasDefaultRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ExplorerHasDefaultRendering
            Return CreateExplorerHasDefaultRendering(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExplorerHasDefaultRendering(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ExplorerHasDefaultRendering
            Return CreateAndInitializeExplorerHasDefaultRendering(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateExplorerHasDefaultRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ExplorerHasDefaultRendering
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ExplorerHasDefaultRendering), rolePlayers), ExplorerHasDefaultRendering)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeExplorerHasDefaultRendering(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ExplorerHasDefaultRendering
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ExplorerHasDefaultRendering), rolePlayers, assignments), ExplorerHasDefaultRendering)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ExplorerHasDefaultRendering"
    ''' <summary>
    ''' ExplorerHasDefaultRendering Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering))>
    Public NotInheritable Class ExplorerHasDefaultRenderingElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ExplorerHasDefaultRendering(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ExplorerHasDefaultRenderingElementFactoryCreator
            Get
                Return New ExplorerHasDefaultRenderingElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.MetaRelationshipGuidString, "CompartmentShapeHasCompartments")>
    Partial Public Class CompartmentShapeHasCompartments
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CompartmentShapeHasCompartments's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "f2b2e2e1-ffdf-48bc-b047-3e2d70c67769"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CompartmentShapeHasCompartments.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CompartmentShapeHasCompartments.MetaClassGuid
#End Region

#Region "Compartments's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentsMetaRoleGuidString As System.String = "e487fbb3-3f17-4dd9-81c3-aa7a79a1b13d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentsMetaRoleGuidString, "CompartmentShapeHasCompartments.Compartments")>
        Public Property Compartments() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment
            Get
                Return CType(Me.GetRolePlayer(CompartmentsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
                Me.SetRolePlayer(CompartmentsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "CompartmentShape's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentShapeMetaRoleGuidString As System.String = "ec1948ca-acba-41a1-a28d-d3905ebb3935"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentShapeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentShapeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments.CompartmentShapeMetaRoleGuidString, "CompartmentShapeHasCompartments.CompartmentShape")>
        Public Property CompartmentShape() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape
            Get
                Return CType(Me.GetRolePlayer(CompartmentShapeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShape)
                Me.SetRolePlayer(CompartmentShapeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CompartmentShapeHasCompartments's Generated Constructor Code"
    Partial Public Class CompartmentShapeHasCompartments
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentShapeHasCompartments(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentShapeHasCompartments
            Return CreateCompartmentShapeHasCompartments(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentShapeHasCompartments(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentShapeHasCompartments
            Return CreateAndInitializeCompartmentShapeHasCompartments(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentShapeHasCompartments(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentShapeHasCompartments
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentShapeHasCompartments), rolePlayers), CompartmentShapeHasCompartments)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentShapeHasCompartments(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentShapeHasCompartments
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentShapeHasCompartments), rolePlayers, assignments), CompartmentShapeHasCompartments)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentShapeHasCompartments"
    ''' <summary>
    ''' CompartmentShapeHasCompartments Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments))>
    Public NotInheritable Class CompartmentShapeHasCompartmentsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentShapeHasCompartments(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentShapeHasCompartmentsElementFactoryCreator
            Get
                Return New CompartmentShapeHasCompartmentsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.MetaRelationshipGuidString, "DiagramMapHasConnectorMaps")>
    Partial Public Class DiagramMapHasConnectorMaps
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DiagramMapHasConnectorMaps's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "162996a8-0b0e-4602-ad01-736ea79d0ff6"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DiagramMapHasConnectorMaps.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DiagramMapHasConnectorMaps.MetaClassGuid
#End Region

#Region "ConnectorMaps's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMapsMetaRoleGuidString As System.String = "015988a9-fa47-4710-a533-3da6a2a71cd6"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMapsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.ConnectorMapsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.ConnectorMapsMetaRoleGuidString, "DiagramMapHasConnectorMaps.ConnectorMaps")>
        Public Property ConnectorMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap
            Get
                Return CType(Me.GetRolePlayer(ConnectorMapsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
                Me.SetRolePlayer(ConnectorMapsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DiagramMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramMapMetaRoleGuidString As System.String = "0a235c11-eb96-4e38-8829-4e5c2ed14c23"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.DiagramMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps.DiagramMapMetaRoleGuidString, "DiagramMapHasConnectorMaps.DiagramMap")>
        Public Property DiagramMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap
            Get
                Return CType(Me.GetRolePlayer(DiagramMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
                Me.SetRolePlayer(DiagramMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DiagramMapHasConnectorMaps's Generated Constructor Code"
    Partial Public Class DiagramMapHasConnectorMaps
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMapHasConnectorMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramMapHasConnectorMaps
            Return CreateDiagramMapHasConnectorMaps(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMapHasConnectorMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMapHasConnectorMaps
            Return CreateAndInitializeDiagramMapHasConnectorMaps(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMapHasConnectorMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramMapHasConnectorMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramMapHasConnectorMaps), rolePlayers), DiagramMapHasConnectorMaps)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMapHasConnectorMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMapHasConnectorMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramMapHasConnectorMaps), rolePlayers, assignments), DiagramMapHasConnectorMaps)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DiagramMapHasConnectorMaps"
    ''' <summary>
    ''' DiagramMapHasConnectorMaps Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps))>
    Public NotInheritable Class DiagramMapHasConnectorMapsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapHasConnectorMaps(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramMapHasConnectorMapsElementFactoryCreator
            Get
                Return New DiagramMapHasConnectorMapsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.MetaRelationshipGuidString, "ConnectorMapHasTextMaps")>
    Partial Public Class ConnectorMapHasTextMaps
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorMapHasTextMaps's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "44cdfab1-4204-46d2-b452-6e389f56a93f"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorMapHasTextMaps.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorMapHasTextMaps.MetaClassGuid
#End Region

#Region "TextMaps's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TextMapsMetaRoleGuidString As System.String = "3e17329a-c39c-47f9-a45a-3c531729ba1c"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TextMapsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.TextMapsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.TextMapsMetaRoleGuidString, "ConnectorMapHasTextMaps.TextMaps")>
        Public Property TextMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap
            Get
                Return CType(Me.GetRolePlayer(TextMapsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
                Me.SetRolePlayer(TextMapsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMapMetaRoleGuidString As System.String = "a381da37-fe14-48a1-98ed-49e9221adaab"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.ConnectorMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps.ConnectorMapMetaRoleGuidString, "ConnectorMapHasTextMaps.ConnectorMap")>
        Public Property ConnectorMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap
            Get
                Return CType(Me.GetRolePlayer(ConnectorMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
                Me.SetRolePlayer(ConnectorMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorMapHasTextMaps's Generated Constructor Code"
    Partial Public Class ConnectorMapHasTextMaps
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasTextMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasTextMaps
            Return CreateConnectorMapHasTextMaps(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasTextMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasTextMaps
            Return CreateAndInitializeConnectorMapHasTextMaps(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasTextMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasTextMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasTextMaps), rolePlayers), ConnectorMapHasTextMaps)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasTextMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasTextMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasTextMaps), rolePlayers, assignments), ConnectorMapHasTextMaps)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorMapHasTextMaps"
    ''' <summary>
    ''' ConnectorMapHasTextMaps Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps))>
    Public NotInheritable Class ConnectorMapHasTextMapsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTextMaps(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorMapHasTextMapsElementFactoryCreator
            Get
                Return New ConnectorMapHasTextMapsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.MetaRelationshipGuidString, "ConnectorMapReferencesClass")>
    Partial Public Class ConnectorMapReferencesClass
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorMapReferencesClass's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "37beef41-c144-4afd-9675-5a0bfe468ad8"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorMapReferencesClass.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorMapReferencesClass.MetaClassGuid
#End Region

#Region "Class's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ClassMetaRoleGuidString As System.String = "2c6cf4f3-0d3e-490b-88d2-74f183d03f59"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ClassMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ClassMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ClassMetaRoleGuidString, "ConnectorMapReferencesClass.Class")>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlReferenceType
            Get
                Return CType(Me.GetRolePlayer(ClassMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlReferenceType)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlReferenceType)
                Me.SetRolePlayer(ClassMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMapMetaRoleGuidString As System.String = "4014f817-1ed8-4d2b-9aa5-a65e54cba54a"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ConnectorMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass.ConnectorMapMetaRoleGuidString, "ConnectorMapReferencesClass.ConnectorMap")>
        Public Property ConnectorMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap
            Get
                Return CType(Me.GetRolePlayer(ConnectorMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
                Me.SetRolePlayer(ConnectorMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorMapReferencesClass's Generated Constructor Code"
    Partial Public Class ConnectorMapReferencesClass
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapReferencesClass
            Return CreateConnectorMapReferencesClass(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapReferencesClass
            Return CreateAndInitializeConnectorMapReferencesClass(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapReferencesClass), rolePlayers), ConnectorMapReferencesClass)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapReferencesClass), rolePlayers, assignments), ConnectorMapReferencesClass)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorMapReferencesClass"
    ''' <summary>
    ''' ConnectorMapReferencesClass Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass))>
    Public NotInheritable Class ConnectorMapReferencesClassElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapReferencesClass(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorMapReferencesClassElementFactoryCreator
            Get
                Return New ConnectorMapReferencesClassElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.MetaRelationshipGuidString, "ConnectorMapHasConnector")>
    Partial Public Class ConnectorMapHasConnector
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorMapHasConnector's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "0580ec4b-2777-48f8-aec9-7bcb4525f58f"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorMapHasConnector.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorMapHasConnector.MetaClassGuid
#End Region

#Region "Connector's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMetaRoleGuidString As System.String = "8b59e381-d297-413b-a4e6-337f8dd1b829"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMetaRoleGuidString, "ConnectorMapHasConnector.Connector")>
        Public Property Connector() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return CType(Me.GetRolePlayer(ConnectorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Me.SetRolePlayer(ConnectorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMapMetaRoleGuidString As System.String = "53d9db5a-d433-4e32-a87b-db0cd090ec9c"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector.ConnectorMapMetaRoleGuidString, "ConnectorMapHasConnector.ConnectorMap")>
        Public Property ConnectorMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap
            Get
                Return CType(Me.GetRolePlayer(ConnectorMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
                Me.SetRolePlayer(ConnectorMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorMapHasConnector's Generated Constructor Code"
    Partial Public Class ConnectorMapHasConnector
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasConnector(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasConnector
            Return CreateConnectorMapHasConnector(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasConnector(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasConnector
            Return CreateAndInitializeConnectorMapHasConnector(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasConnector(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasConnector
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasConnector), rolePlayers), ConnectorMapHasConnector)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasConnector(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasConnector
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasConnector), rolePlayers, assignments), ConnectorMapHasConnector)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorMapHasConnector"
    ''' <summary>
    ''' ConnectorMapHasConnector Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector))>
    Public NotInheritable Class ConnectorMapHasConnectorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasConnector(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorMapHasConnectorElementFactoryCreator
            Get
                Return New ConnectorMapHasConnectorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.MetaRelationshipGuidString, "ShapeMapHasIconMaps")>
    Partial Public Class ShapeMapHasIconMaps
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeMapHasIconMaps's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "68e072fa-5a63-47b9-87cd-f6e8ada7ab48"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeMapHasIconMaps.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeMapHasIconMaps.MetaClassGuid
#End Region

#Region "IconMaps's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const IconMapsMetaRoleGuidString As System.String = "d75122b2-aacd-4fe4-9842-da375ab45256"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly IconMapsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.IconMapsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.IconMapsMetaRoleGuidString, "ShapeMapHasIconMaps.IconMaps")>
        Public Property IconMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap
            Get
                Return CType(Me.GetRolePlayer(IconMapsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
                Me.SetRolePlayer(IconMapsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ShapeMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMapMetaRoleGuidString As System.String = "0b91ba95-cc40-424a-8b51-06ac1e53c843"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.ShapeMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps.ShapeMapMetaRoleGuidString, "ShapeMapHasIconMaps.ShapeMap")>
        Public Property ShapeMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap
            Get
                Return CType(Me.GetRolePlayer(ShapeMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
                Me.SetRolePlayer(ShapeMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeMapHasIconMaps's Generated Constructor Code"
    Partial Public Class ShapeMapHasIconMaps
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapHasIconMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapHasIconMaps
            Return CreateShapeMapHasIconMaps(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapHasIconMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapHasIconMaps
            Return CreateAndInitializeShapeMapHasIconMaps(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapHasIconMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapHasIconMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapHasIconMaps), rolePlayers), ShapeMapHasIconMaps)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapHasIconMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapHasIconMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapHasIconMaps), rolePlayers, assignments), ShapeMapHasIconMaps)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeMapHasIconMaps"
    ''' <summary>
    ''' ShapeMapHasIconMaps Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps))>
    Public NotInheritable Class ShapeMapHasIconMapsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasIconMaps(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeMapHasIconMapsElementFactoryCreator
            Get
                Return New ShapeMapHasIconMapsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.MetaRelationshipGuidString, "ConnectorHasDecorators")>
    Partial Public Class ConnectorHasDecorators
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorHasDecorators's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "1ab89e91-d7ad-4d95-a99c-608897244a51"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorHasDecorators.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorHasDecorators.MetaClassGuid
#End Region

#Region "Decorators's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DecoratorsMetaRoleGuidString As System.String = "471319d6-95bc-4581-89bc-7ec224634cc9"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DecoratorsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.DecoratorsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.DecoratorsMetaRoleGuidString, "ConnectorHasDecorators.Decorators")>
        Public Property Decorators() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator
            Get
                Return CType(Me.GetRolePlayer(DecoratorsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorDecorator)
                Me.SetRolePlayer(DecoratorsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Connector's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMetaRoleGuidString As System.String = "30bf1475-7e0d-4a7e-b8ea-1c34921b2611"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.ConnectorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators.ConnectorMetaRoleGuidString, "ConnectorHasDecorators.Connector")>
        Public Property Connector() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return CType(Me.GetRolePlayer(ConnectorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Me.SetRolePlayer(ConnectorMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorHasDecorators's Generated Constructor Code"
    Partial Public Class ConnectorHasDecorators
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasDecorators(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasDecorators
            Return CreateConnectorHasDecorators(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasDecorators(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasDecorators
            Return CreateAndInitializeConnectorHasDecorators(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasDecorators(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasDecorators
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasDecorators), rolePlayers), ConnectorHasDecorators)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasDecorators(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasDecorators
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasDecorators), rolePlayers, assignments), ConnectorHasDecorators)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorHasDecorators"
    ''' <summary>
    ''' ConnectorHasDecorators Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators))>
    Public NotInheritable Class ConnectorHasDecoratorsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDecorators(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorHasDecoratorsElementFactoryCreator
            Get
                Return New ConnectorHasDecoratorsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.MetaRelationshipGuidString, "ShapeToolReferencesShape")>
    Partial Public Class ShapeToolReferencesShape
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeToolReferencesShape's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "bc34202d-c2d2-4e33-ba7d-383d9b9e13cb"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeToolReferencesShape.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeToolReferencesShape.MetaClassGuid
#End Region

#Region "Shape's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMetaRoleGuidString As System.String = "73b0bc82-6d8c-481a-a244-958acf37e36a"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeMetaRoleGuidString, "ShapeToolReferencesShape.Shape")>
        Public Property Shape() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
            Get
                Return CType(Me.GetRolePlayer(ShapeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                Me.SetRolePlayer(ShapeMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ShapeTool's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeToolMetaRoleGuidString As System.String = "3c3b62fd-8b9e-435d-918c-724eee82fd7e"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeToolMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeToolMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape.ShapeToolMetaRoleGuidString, "ShapeToolReferencesShape.ShapeTool")>
        Public Property ShapeTool() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool
            Get
                Return CType(Me.GetRolePlayer(ShapeToolMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTool)
                Me.SetRolePlayer(ShapeToolMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeToolReferencesShape's Generated Constructor Code"
    Partial Public Class ShapeToolReferencesShape
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeToolReferencesShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeToolReferencesShape
            Return CreateShapeToolReferencesShape(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeToolReferencesShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeToolReferencesShape
            Return CreateAndInitializeShapeToolReferencesShape(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeToolReferencesShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeToolReferencesShape
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeToolReferencesShape), rolePlayers), ShapeToolReferencesShape)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeToolReferencesShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeToolReferencesShape
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeToolReferencesShape), rolePlayers, assignments), ShapeToolReferencesShape)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeToolReferencesShape"
    ''' <summary>
    ''' ShapeToolReferencesShape Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape))>
    Public NotInheritable Class ShapeToolReferencesShapeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeToolReferencesShape(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeToolReferencesShapeElementFactoryCreator
            Get
                Return New ShapeToolReferencesShapeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.MetaRelationshipGuidString, "CompartmentTextToolReferencesTextCompartment")>
    Partial Public Class CompartmentTextToolReferencesTextCompartment
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CompartmentTextToolReferencesTextCompartment's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "722e692c-2bf4-4bbc-8e6e-60ace93476d0"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CompartmentTextToolReferencesTextCompartment.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CompartmentTextToolReferencesTextCompartment.MetaClassGuid
#End Region

#Region "TextCompartment's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TextCompartmentMetaRoleGuidString As System.String = "09c4004b-77a3-4915-ade6-77255fa7b979"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TextCompartmentMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.TextCompartmentMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.TextCompartmentMetaRoleGuidString, "CompartmentTextToolReferencesTextCompartment.TextCompartment")>
        Public Property TextCompartment() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment
            Get
                Return CType(Me.GetRolePlayer(TextCompartmentMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ListCompartment)
                Me.SetRolePlayer(TextCompartmentMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "CompartmentTextTool's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentTextToolMetaRoleGuidString As System.String = "6e295de6-c4f9-454c-8002-ed13a5934ae3"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentTextToolMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.CompartmentTextToolMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment.CompartmentTextToolMetaRoleGuidString, "CompartmentTextToolReferencesTextCompartment.CompartmentTextTool")>
        Public Property CompartmentTextTool() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool
            Get
                Return CType(Me.GetRolePlayer(CompartmentTextToolMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextTool)
                Me.SetRolePlayer(CompartmentTextToolMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CompartmentTextToolReferencesTextCompartment's Generated Constructor Code"
    Partial Public Class CompartmentTextToolReferencesTextCompartment
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentTextToolReferencesTextCompartment(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentTextToolReferencesTextCompartment
            Return CreateCompartmentTextToolReferencesTextCompartment(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentTextToolReferencesTextCompartment(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentTextToolReferencesTextCompartment
            Return CreateAndInitializeCompartmentTextToolReferencesTextCompartment(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentTextToolReferencesTextCompartment(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentTextToolReferencesTextCompartment
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentTextToolReferencesTextCompartment), rolePlayers), CompartmentTextToolReferencesTextCompartment)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentTextToolReferencesTextCompartment(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentTextToolReferencesTextCompartment
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentTextToolReferencesTextCompartment), rolePlayers, assignments), CompartmentTextToolReferencesTextCompartment)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentTextToolReferencesTextCompartment"
    ''' <summary>
    ''' CompartmentTextToolReferencesTextCompartment Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment))>
    Public NotInheritable Class CompartmentTextToolReferencesTextCompartmentElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentTextToolReferencesTextCompartment(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentTextToolReferencesTextCompartmentElementFactoryCreator
            Get
                Return New CompartmentTextToolReferencesTextCompartmentElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.MetaRelationshipGuidString, "ConnectorToolReferencesConnector")>
    Partial Public Class ConnectorToolReferencesConnector
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorToolReferencesConnector's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "476f8faa-496b-487a-9b16-93f39b50d7ab"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorToolReferencesConnector.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorToolReferencesConnector.MetaClassGuid
#End Region

#Region "Connector's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMetaRoleGuidString As System.String = "97662035-3cb2-4d2c-b18a-dd07768c9675"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorMetaRoleGuidString, "ConnectorToolReferencesConnector.Connector")>
        Public Property Connector() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return CType(Me.GetRolePlayer(ConnectorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Me.SetRolePlayer(ConnectorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorTool's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorToolMetaRoleGuidString As System.String = "8a4f6c89-ea5c-462b-a7c0-cdb53bf19402"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorToolMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorToolMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector.ConnectorToolMetaRoleGuidString, "ConnectorToolReferencesConnector.ConnectorTool")>
        Public Property ConnectorTool() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool
            Get
                Return CType(Me.GetRolePlayer(ConnectorToolMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTool)
                Me.SetRolePlayer(ConnectorToolMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorToolReferencesConnector's Generated Constructor Code"
    Partial Public Class ConnectorToolReferencesConnector
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorToolReferencesConnector(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorToolReferencesConnector
            Return CreateConnectorToolReferencesConnector(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorToolReferencesConnector(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorToolReferencesConnector
            Return CreateAndInitializeConnectorToolReferencesConnector(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorToolReferencesConnector(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorToolReferencesConnector
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorToolReferencesConnector), rolePlayers), ConnectorToolReferencesConnector)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorToolReferencesConnector(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorToolReferencesConnector
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorToolReferencesConnector), rolePlayers, assignments), ConnectorToolReferencesConnector)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorToolReferencesConnector"
    ''' <summary>
    ''' ConnectorToolReferencesConnector Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector))>
    Public NotInheritable Class ConnectorToolReferencesConnectorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorToolReferencesConnector(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorToolReferencesConnectorElementFactoryCreator
            Get
                Return New ConnectorToolReferencesConnectorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.MetaRelationshipGuidString, "OutlinedShapeHasOutlineColor")>
    Partial Public Class OutlinedShapeHasOutlineColor
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "OutlinedShapeHasOutlineColor's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "e8468713-2844-4806-b1b1-db7c0e833f6e"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = OutlinedShapeHasOutlineColor.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = OutlinedShapeHasOutlineColor.MetaClassGuid
#End Region

#Region "OutlineColor's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const OutlineColorMetaRoleGuidString As System.String = "dc7a328d-f5f1-4840-82a2-c7495d462da7"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly OutlineColorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlineColorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlineColorMetaRoleGuidString, "OutlinedShapeHasOutlineColor.OutlineColor")>
        Public Property OutlineColor() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return CType(Me.GetRolePlayer(OutlineColorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Me.SetRolePlayer(OutlineColorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "OutlinedShape's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const OutlinedShapeMetaRoleGuidString As System.String = "350e6c3c-feee-4645-8684-cd5b753cfebc"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly OutlinedShapeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlinedShapeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor.OutlinedShapeMetaRoleGuidString, "OutlinedShapeHasOutlineColor.OutlinedShape")>
        Public Property OutlinedShape() As Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape
            Get
                Return CType(Me.GetRolePlayer(OutlinedShapeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShape)
                Me.SetRolePlayer(OutlinedShapeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "OutlinedShapeHasOutlineColor's Generated Constructor Code"
    Partial Public Class OutlinedShapeHasOutlineColor
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateOutlinedShapeHasOutlineColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As OutlinedShapeHasOutlineColor
            Return CreateOutlinedShapeHasOutlineColor(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeOutlinedShapeHasOutlineColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As OutlinedShapeHasOutlineColor
            Return CreateAndInitializeOutlinedShapeHasOutlineColor(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateOutlinedShapeHasOutlineColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As OutlinedShapeHasOutlineColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(OutlinedShapeHasOutlineColor), rolePlayers), OutlinedShapeHasOutlineColor)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeOutlinedShapeHasOutlineColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As OutlinedShapeHasOutlineColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(OutlinedShapeHasOutlineColor), rolePlayers, assignments), OutlinedShapeHasOutlineColor)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for OutlinedShapeHasOutlineColor"
    ''' <summary>
    ''' OutlinedShapeHasOutlineColor Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor))>
    Public NotInheritable Class OutlinedShapeHasOutlineColorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.OutlinedShapeHasOutlineColor(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As OutlinedShapeHasOutlineColorElementFactoryCreator
            Get
                Return New OutlinedShapeHasOutlineColorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.MetaRelationshipGuidString, "ConnectorTextMapReferencesTextDecorator")>
    Partial Public Class ConnectorTextMapReferencesTextDecorator
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorTextMapReferencesTextDecorator's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "a961782b-51e7-42e0-ab29-c2c744436669"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorTextMapReferencesTextDecorator.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorTextMapReferencesTextDecorator.MetaClassGuid
#End Region

#Region "TextDecorator's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TextDecoratorMetaRoleGuidString As System.String = "1e651abb-5f21-403c-9170-0ee718163834"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TextDecoratorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.TextDecoratorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.TextDecoratorMetaRoleGuidString, "ConnectorTextMapReferencesTextDecorator.TextDecorator")>
        Public Property TextDecorator() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText
            Get
                Return CType(Me.GetRolePlayer(TextDecoratorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorText)
                Me.SetRolePlayer(TextDecoratorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorTextMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorTextMapMetaRoleGuidString As System.String = "5913bc35-af66-44c4-9fd5-d01153275016"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorTextMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.ConnectorTextMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator.ConnectorTextMapMetaRoleGuidString, "ConnectorTextMapReferencesTextDecorator.ConnectorTextMap")>
        Public Property ConnectorTextMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap
            Get
                Return CType(Me.GetRolePlayer(ConnectorTextMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
                Me.SetRolePlayer(ConnectorTextMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorTextMapReferencesTextDecorator's Generated Constructor Code"
    Partial Public Class ConnectorTextMapReferencesTextDecorator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorTextMapReferencesTextDecorator(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorTextMapReferencesTextDecorator
            Return CreateConnectorTextMapReferencesTextDecorator(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorTextMapReferencesTextDecorator(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorTextMapReferencesTextDecorator
            Return CreateAndInitializeConnectorTextMapReferencesTextDecorator(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorTextMapReferencesTextDecorator(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorTextMapReferencesTextDecorator
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorTextMapReferencesTextDecorator), rolePlayers), ConnectorTextMapReferencesTextDecorator)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorTextMapReferencesTextDecorator(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorTextMapReferencesTextDecorator
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorTextMapReferencesTextDecorator), rolePlayers, assignments), ConnectorTextMapReferencesTextDecorator)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorTextMapReferencesTextDecorator"
    ''' <summary>
    ''' ConnectorTextMapReferencesTextDecorator Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator))>
    Public NotInheritable Class ConnectorTextMapReferencesTextDecoratorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapReferencesTextDecorator(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorTextMapReferencesTextDecoratorElementFactoryCreator
            Get
                Return New ConnectorTextMapReferencesTextDecoratorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.MetaRelationshipGuidString, "ConnectorMapHasIconMaps")>
    Partial Public Class ConnectorMapHasIconMaps
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorMapHasIconMaps's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "c086c9d3-04de-49f6-bcab-c4ba8c74f05d"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorMapHasIconMaps.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorMapHasIconMaps.MetaClassGuid
#End Region

#Region "IconMaps's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const IconMapsMetaRoleGuidString As System.String = "5e57b27c-dc44-4626-8dbc-d0db203bb7c4"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly IconMapsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.IconMapsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.IconMapsMetaRoleGuidString, "ConnectorMapHasIconMaps.IconMaps")>
        Public Property IconMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap
            Get
                Return CType(Me.GetRolePlayer(IconMapsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorIconMap)
                Me.SetRolePlayer(IconMapsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMapMetaRoleGuidString As System.String = "dab15251-a590-40f1-adf6-1541695e3869"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.ConnectorMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps.ConnectorMapMetaRoleGuidString, "ConnectorMapHasIconMaps.ConnectorMap")>
        Public Property ConnectorMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap
            Get
                Return CType(Me.GetRolePlayer(ConnectorMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
                Me.SetRolePlayer(ConnectorMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorMapHasIconMaps's Generated Constructor Code"
    Partial Public Class ConnectorMapHasIconMaps
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasIconMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasIconMaps
            Return CreateConnectorMapHasIconMaps(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasIconMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasIconMaps
            Return CreateAndInitializeConnectorMapHasIconMaps(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasIconMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasIconMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasIconMaps), rolePlayers), ConnectorMapHasIconMaps)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasIconMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasIconMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasIconMaps), rolePlayers, assignments), ConnectorMapHasIconMaps)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorMapHasIconMaps"
    ''' <summary>
    ''' ConnectorMapHasIconMaps Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps))>
    Public NotInheritable Class ConnectorMapHasIconMapsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasIconMaps(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorMapHasIconMapsElementFactoryCreator
            Get
                Return New ConnectorMapHasIconMapsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.MetaRelationshipGuidString, "ConnectorMapHasSourceMap")>
    Partial Public Class ConnectorMapHasSourceMap
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorMapHasSourceMap's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "2df3c9b9-f324-4734-9d08-a85b374e98cb"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorMapHasSourceMap.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorMapHasSourceMap.MetaClassGuid
#End Region

#Region "SourceMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const SourceMapMetaRoleGuidString As System.String = "fe91c094-a3d8-4fdc-9a6d-4604eecdb36c"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly SourceMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.SourceMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.SourceMapMetaRoleGuidString, "ConnectorMapHasSourceMap.SourceMap")>
        Public Property SourceMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap
            Get
                Return CType(Me.GetRolePlayer(SourceMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap)
                Me.SetRolePlayer(SourceMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMapMetaRoleGuidString As System.String = "5ee57415-f2ec-4dbf-8350-52f96f4c74af"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.ConnectorMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap.ConnectorMapMetaRoleGuidString, "ConnectorMapHasSourceMap.ConnectorMap")>
        Public Property ConnectorMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap
            Get
                Return CType(Me.GetRolePlayer(ConnectorMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
                Me.SetRolePlayer(ConnectorMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorMapHasSourceMap's Generated Constructor Code"
    Partial Public Class ConnectorMapHasSourceMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasSourceMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasSourceMap
            Return CreateConnectorMapHasSourceMap(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasSourceMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasSourceMap
            Return CreateAndInitializeConnectorMapHasSourceMap(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasSourceMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasSourceMap
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasSourceMap), rolePlayers), ConnectorMapHasSourceMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasSourceMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasSourceMap
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasSourceMap), rolePlayers, assignments), ConnectorMapHasSourceMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorMapHasSourceMap"
    ''' <summary>
    ''' ConnectorMapHasSourceMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap))>
    Public NotInheritable Class ConnectorMapHasSourceMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasSourceMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorMapHasSourceMapElementFactoryCreator
            Get
                Return New ConnectorMapHasSourceMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.MetaRelationshipGuidString, "ConnectorMapHasTargetMap")>
    Partial Public Class ConnectorMapHasTargetMap
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorMapHasTargetMap's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "d82f9692-62c4-4c3d-bb19-419b5df6c3c9"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorMapHasTargetMap.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorMapHasTargetMap.MetaClassGuid
#End Region

#Region "TargetMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TargetMapMetaRoleGuidString As System.String = "6c94a7af-6675-486b-8175-949b319cad1d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TargetMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.TargetMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.TargetMapMetaRoleGuidString, "ConnectorMapHasTargetMap.TargetMap")>
        Public Property TargetMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap
            Get
                Return CType(Me.GetRolePlayer(TargetMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap)
                Me.SetRolePlayer(TargetMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMapMetaRoleGuidString As System.String = "ce5b997e-b625-49cc-a29b-386182f490d6"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.ConnectorMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap.ConnectorMapMetaRoleGuidString, "ConnectorMapHasTargetMap.ConnectorMap")>
        Public Property ConnectorMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap
            Get
                Return CType(Me.GetRolePlayer(ConnectorMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMap)
                Me.SetRolePlayer(ConnectorMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorMapHasTargetMap's Generated Constructor Code"
    Partial Public Class ConnectorMapHasTargetMap
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasTargetMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasTargetMap
            Return CreateConnectorMapHasTargetMap(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasTargetMap(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasTargetMap
            Return CreateAndInitializeConnectorMapHasTargetMap(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorMapHasTargetMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorMapHasTargetMap
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasTargetMap), rolePlayers), ConnectorMapHasTargetMap)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorMapHasTargetMap(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorMapHasTargetMap
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorMapHasTargetMap), rolePlayers, assignments), ConnectorMapHasTargetMap)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorMapHasTargetMap"
    ''' <summary>
    ''' ConnectorMapHasTargetMap Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap))>
    Public NotInheritable Class ConnectorMapHasTargetMapElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorMapHasTargetMap(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorMapHasTargetMapElementFactoryCreator
            Get
                Return New ConnectorMapHasTargetMapElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.MetaRelationshipGuidString, "ConnectorHasTarget")>
    Partial Public Class ConnectorHasTarget
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorHasTarget's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "1beb116e-0a49-491c-a8c1-2fb62bbf3e81"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorHasTarget.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorHasTarget.MetaClassGuid
#End Region

#Region "Target's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TargetMetaRoleGuidString As System.String = "43f83426-83bb-4219-b87a-d8859a298306"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TargetMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.TargetMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.TargetMetaRoleGuidString, "ConnectorHasTarget.Target")>
        Public Property Target() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd
            Get
                Return CType(Me.GetRolePlayer(TargetMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
                Me.SetRolePlayer(TargetMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Connector's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMetaRoleGuidString As System.String = "32e76f54-e6c5-4ca5-a77e-ca6735a47350"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.ConnectorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget.ConnectorMetaRoleGuidString, "ConnectorHasTarget.Connector")>
        Public Property Connector() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return CType(Me.GetRolePlayer(ConnectorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Me.SetRolePlayer(ConnectorMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorHasTarget's Generated Constructor Code"
    Partial Public Class ConnectorHasTarget
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasTarget(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasTarget
            Return CreateConnectorHasTarget(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasTarget(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasTarget
            Return CreateAndInitializeConnectorHasTarget(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasTarget(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasTarget
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasTarget), rolePlayers), ConnectorHasTarget)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasTarget(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasTarget
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasTarget), rolePlayers, assignments), ConnectorHasTarget)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorHasTarget"
    ''' <summary>
    ''' ConnectorHasTarget Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget))>
    Public NotInheritable Class ConnectorHasTargetElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasTarget(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorHasTargetElementFactoryCreator
            Get
                Return New ConnectorHasTargetElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.MetaRelationshipGuidString, "ConnectorEndHasShape")>
    Partial Public Class ConnectorEndHasShape
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorEndHasShape's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "9c53cebf-91ab-491a-96b3-0723fabbed16"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorEndHasShape.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorEndHasShape.MetaClassGuid
#End Region

#Region "PermittedShapes's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const PermittedShapesMetaRoleGuidString As System.String = "70fea4f9-9e84-49ef-8b95-5407b750e2b3"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly PermittedShapesMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.PermittedShapesMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.PermittedShapesMetaRoleGuidString, "ConnectorEndHasShape.PermittedShapes")>
        Public Property PermittedShapes() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
            Get
                Return CType(Me.GetRolePlayer(PermittedShapesMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                Me.SetRolePlayer(PermittedShapesMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorEnd's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorEndMetaRoleGuidString As System.String = "b325df73-b4ee-41e4-9941-7b8bb10321ed"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorEndMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.ConnectorEndMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape.ConnectorEndMetaRoleGuidString, "ConnectorEndHasShape.ConnectorEnd")>
        Public Property ConnectorEnd() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd
            Get
                Return CType(Me.GetRolePlayer(ConnectorEndMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
                Me.SetRolePlayer(ConnectorEndMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorEndHasShape's Generated Constructor Code"
    Partial Public Class ConnectorEndHasShape
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorEndHasShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorEndHasShape
            Return CreateConnectorEndHasShape(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorEndHasShape(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorEndHasShape
            Return CreateAndInitializeConnectorEndHasShape(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorEndHasShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorEndHasShape
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorEndHasShape), rolePlayers), ConnectorEndHasShape)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorEndHasShape(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorEndHasShape
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorEndHasShape), rolePlayers, assignments), ConnectorEndHasShape)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorEndHasShape"
    ''' <summary>
    ''' ConnectorEndHasShape Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape))>
    Public NotInheritable Class ConnectorEndHasShapeElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEndHasShape(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorEndHasShapeElementFactoryCreator
            Get
                Return New ConnectorEndHasShapeElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.MetaRelationshipGuidString, "ConnectorHasConnectorEnd")>
    Partial Public Class ConnectorHasConnectorEnd
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorHasConnectorEnd's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "70f06a04-e78e-42ab-a71f-aa9cef1f58b0"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorHasConnectorEnd.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorHasConnectorEnd.MetaClassGuid
#End Region

#Region "Source's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const SourceMetaRoleGuidString As System.String = "a9648856-efe8-48ee-819d-7ad988fc3a7d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly SourceMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.SourceMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.SourceMetaRoleGuidString, "ConnectorHasConnectorEnd.Source")>
        Public Property Source() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd
            Get
                Return CType(Me.GetRolePlayer(SourceMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorEnd)
                Me.SetRolePlayer(SourceMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Connector's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMetaRoleGuidString As System.String = "606a19aa-3c1e-4efc-a2de-954cbc167b37"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.ConnectorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd.ConnectorMetaRoleGuidString, "ConnectorHasConnectorEnd.Connector")>
        Public Property Connector() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return CType(Me.GetRolePlayer(ConnectorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Me.SetRolePlayer(ConnectorMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorHasConnectorEnd's Generated Constructor Code"
    Partial Public Class ConnectorHasConnectorEnd
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasConnectorEnd(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasConnectorEnd
            Return CreateConnectorHasConnectorEnd(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasConnectorEnd(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasConnectorEnd
            Return CreateAndInitializeConnectorHasConnectorEnd(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasConnectorEnd(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasConnectorEnd
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasConnectorEnd), rolePlayers), ConnectorHasConnectorEnd)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasConnectorEnd(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasConnectorEnd
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasConnectorEnd), rolePlayers, assignments), ConnectorHasConnectorEnd)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorHasConnectorEnd"
    ''' <summary>
    ''' ConnectorHasConnectorEnd Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd))>
    Public NotInheritable Class ConnectorHasConnectorEndElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasConnectorEnd(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorHasConnectorEndElementFactoryCreator
            Get
                Return New ConnectorHasConnectorEndElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.MetaRelationshipGuidString, "ModelValuePropertyExpressionHasModelValueProperty")>
    Partial Public Class ModelValuePropertyExpressionHasModelValueProperty
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ModelValuePropertyExpressionHasModelValueProperty's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "17297b65-ab06-4df6-bb8a-a38058f35060"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ModelValuePropertyExpressionHasModelValueProperty.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ModelValuePropertyExpressionHasModelValueProperty.MetaClassGuid
#End Region

#Region "ValueProperty's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValuePropertyMetaRoleGuidString As System.String = "54929b49-5542-4fef-9605-3337c92c397d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValuePropertyMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ValuePropertyMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ValuePropertyMetaRoleGuidString, "ModelValuePropertyExpressionHasModelValueProperty.ValueProperty")>
        Public Property ValueProperty() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty
            Get
                Return CType(Me.GetRolePlayer(ValuePropertyMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                Me.SetRolePlayer(ValuePropertyMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ModelValuePropertyExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ModelValuePropertyExpressionMetaRoleGuidString As System.String = "0098165f-1c6c-497e-8e73-a85a384ba926"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ModelValuePropertyExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ModelValuePropertyExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty.ModelValuePropertyExpressionMetaRoleGuidString, "ModelValuePropertyExpressionHasModelValueProperty.ModelValuePropertyExpression")>
        Public Property ModelValuePropertyExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression
            Get
                Return CType(Me.GetRolePlayer(ModelValuePropertyExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyExpression)
                Me.SetRolePlayer(ModelValuePropertyExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ModelValuePropertyExpressionHasModelValueProperty's Generated Constructor Code"
    Partial Public Class ModelValuePropertyExpressionHasModelValueProperty
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateModelValuePropertyExpressionHasModelValueProperty(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ModelValuePropertyExpressionHasModelValueProperty
            Return CreateModelValuePropertyExpressionHasModelValueProperty(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeModelValuePropertyExpressionHasModelValueProperty(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ModelValuePropertyExpressionHasModelValueProperty
            Return CreateAndInitializeModelValuePropertyExpressionHasModelValueProperty(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateModelValuePropertyExpressionHasModelValueProperty(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ModelValuePropertyExpressionHasModelValueProperty
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ModelValuePropertyExpressionHasModelValueProperty), rolePlayers), ModelValuePropertyExpressionHasModelValueProperty)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeModelValuePropertyExpressionHasModelValueProperty(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ModelValuePropertyExpressionHasModelValueProperty
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ModelValuePropertyExpressionHasModelValueProperty), rolePlayers, assignments), ModelValuePropertyExpressionHasModelValueProperty)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ModelValuePropertyExpressionHasModelValueProperty"
    ''' <summary>
    ''' ModelValuePropertyExpressionHasModelValueProperty Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty))>
    Public NotInheritable Class ModelValuePropertyExpressionHasModelValuePropertyElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelValuePropertyExpressionHasModelValueProperty(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ModelValuePropertyExpressionHasModelValuePropertyElementFactoryCreator
            Get
                Return New ModelValuePropertyExpressionHasModelValuePropertyElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.MetaRelationshipGuidString, "ModelRoleExpressionHasModelRole")>
    Partial Public Class ModelRoleExpressionHasModelRole
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ModelRoleExpressionHasModelRole's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "21aed9ed-60e3-4fbc-832b-be94cc4b3148"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ModelRoleExpressionHasModelRole.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ModelRoleExpressionHasModelRole.MetaClassGuid
#End Region

#Region "Role's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const RoleMetaRoleGuidString As System.String = "2bc0486b-9c14-4b0a-88c4-84dcb90306a2"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly RoleMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.RoleMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.RoleMetaRoleGuidString, "ModelRoleExpressionHasModelRole.Role")>
        Public Property Role() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole
            Get
                Return CType(Me.GetRolePlayer(RoleMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlRole)
                Me.SetRolePlayer(RoleMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ModelRoleExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ModelRoleExpressionMetaRoleGuidString As System.String = "e86684f0-f37a-4ded-ac40-a366eedbfbca"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ModelRoleExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.ModelRoleExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole.ModelRoleExpressionMetaRoleGuidString, "ModelRoleExpressionHasModelRole.ModelRoleExpression")>
        Public Property ModelRoleExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression
            Get
                Return CType(Me.GetRolePlayer(ModelRoleExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleExpression)
                Me.SetRolePlayer(ModelRoleExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ModelRoleExpressionHasModelRole's Generated Constructor Code"
    Partial Public Class ModelRoleExpressionHasModelRole
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateModelRoleExpressionHasModelRole(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ModelRoleExpressionHasModelRole
            Return CreateModelRoleExpressionHasModelRole(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeModelRoleExpressionHasModelRole(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ModelRoleExpressionHasModelRole
            Return CreateAndInitializeModelRoleExpressionHasModelRole(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateModelRoleExpressionHasModelRole(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ModelRoleExpressionHasModelRole
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ModelRoleExpressionHasModelRole), rolePlayers), ModelRoleExpressionHasModelRole)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeModelRoleExpressionHasModelRole(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ModelRoleExpressionHasModelRole
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ModelRoleExpressionHasModelRole), rolePlayers, assignments), ModelRoleExpressionHasModelRole)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ModelRoleExpressionHasModelRole"
    ''' <summary>
    ''' ModelRoleExpressionHasModelRole Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole))>
    Public NotInheritable Class ModelRoleExpressionHasModelRoleElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelRoleExpressionHasModelRole(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ModelRoleExpressionHasModelRoleElementFactoryCreator
            Get
                Return New ModelRoleExpressionHasModelRoleElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MetaRelationshipGuidString, "CollectionNodeHasMelCollectionExpression")>
    Partial Public Class CollectionNodeHasMelCollectionExpression
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CollectionNodeHasMelCollectionExpression's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "74dfe1ed-c84c-4539-b8df-d4098b315f47"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CollectionNodeHasMelCollectionExpression.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CollectionNodeHasMelCollectionExpression.MetaClassGuid
#End Region

#Region "MelCollectionExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const MelCollectionExpressionMetaRoleGuidString As System.String = "cb32d13f-a4ae-4a97-9a46-9c7cc0e12399"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly MelCollectionExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuidString, "CollectionNodeHasMelCollectionExpression.MelCollectionExpression")>
        Public Property MelCollectionExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression
            Get
                Return CType(Me.GetRolePlayer(MelCollectionExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
                Me.SetRolePlayer(MelCollectionExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "CollectionNode's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CollectionNodeMetaRoleGuidString As System.String = "e24f6e91-5db4-4ddf-b48f-aae99f124485"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CollectionNodeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.CollectionNodeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression.CollectionNodeMetaRoleGuidString, "CollectionNodeHasMelCollectionExpression.CollectionNode")>
        Public Property CollectionNode() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode
            Get
                Return CType(Me.GetRolePlayer(CollectionNodeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNode)
                Me.SetRolePlayer(CollectionNodeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CollectionNodeHasMelCollectionExpression's Generated Constructor Code"
    Partial Public Class CollectionNodeHasMelCollectionExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeHasMelCollectionExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CollectionNodeHasMelCollectionExpression
            Return CreateCollectionNodeHasMelCollectionExpression(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeHasMelCollectionExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeHasMelCollectionExpression
            Return CreateAndInitializeCollectionNodeHasMelCollectionExpression(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCollectionNodeHasMelCollectionExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CollectionNodeHasMelCollectionExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CollectionNodeHasMelCollectionExpression), rolePlayers), CollectionNodeHasMelCollectionExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCollectionNodeHasMelCollectionExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CollectionNodeHasMelCollectionExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CollectionNodeHasMelCollectionExpression), rolePlayers, assignments), CollectionNodeHasMelCollectionExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CollectionNodeHasMelCollectionExpression"
    ''' <summary>
    ''' CollectionNodeHasMelCollectionExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression))>
    Public NotInheritable Class CollectionNodeHasMelCollectionExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CollectionNodeHasMelCollectionExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CollectionNodeHasMelCollectionExpressionElementFactoryCreator
            Get
                Return New CollectionNodeHasMelCollectionExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.MetaRelationshipGuidString, "SourceMapHasModelNavigationExpression")>
    Partial Public Class SourceMapHasModelNavigationExpression
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "SourceMapHasModelNavigationExpression's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "69154ca3-b3fb-4da4-810b-588cf3ce461e"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = SourceMapHasModelNavigationExpression.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = SourceMapHasModelNavigationExpression.MetaClassGuid
#End Region

#Region "ModelNavigationExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ModelNavigationExpressionMetaRoleGuidString As System.String = "6c04cd04-aa6f-484d-8b58-e9a9dced7fb3"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ModelNavigationExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuidString, "SourceMapHasModelNavigationExpression.ModelNavigationExpression")>
        Public Property ModelNavigationExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression
            Get
                Return CType(Me.GetRolePlayer(ModelNavigationExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
                Me.SetRolePlayer(ModelNavigationExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "SourceMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const SourceMapMetaRoleGuidString As System.String = "ae694ed6-6c1b-435f-b88c-a930e4da27d6"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly SourceMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.SourceMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression.SourceMapMetaRoleGuidString, "SourceMapHasModelNavigationExpression.SourceMap")>
        Public Property SourceMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap
            Get
                Return CType(Me.GetRolePlayer(SourceMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMap)
                Me.SetRolePlayer(SourceMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "SourceMapHasModelNavigationExpression's Generated Constructor Code"
    Partial Public Class SourceMapHasModelNavigationExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateSourceMapHasModelNavigationExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As SourceMapHasModelNavigationExpression
            Return CreateSourceMapHasModelNavigationExpression(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeSourceMapHasModelNavigationExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As SourceMapHasModelNavigationExpression
            Return CreateAndInitializeSourceMapHasModelNavigationExpression(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateSourceMapHasModelNavigationExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As SourceMapHasModelNavigationExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(SourceMapHasModelNavigationExpression), rolePlayers), SourceMapHasModelNavigationExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeSourceMapHasModelNavigationExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As SourceMapHasModelNavigationExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(SourceMapHasModelNavigationExpression), rolePlayers, assignments), SourceMapHasModelNavigationExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for SourceMapHasModelNavigationExpression"
    ''' <summary>
    ''' SourceMapHasModelNavigationExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression))>
    Public NotInheritable Class SourceMapHasModelNavigationExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.SourceMapHasModelNavigationExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As SourceMapHasModelNavigationExpressionElementFactoryCreator
            Get
                Return New SourceMapHasModelNavigationExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.MetaRelationshipGuidString, "TargetMapHasModelNavigationExpression")>
    Partial Public Class TargetMapHasModelNavigationExpression
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "TargetMapHasModelNavigationExpression's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "99d044e9-078c-4e26-ac5d-33a0b2479dce"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = TargetMapHasModelNavigationExpression.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = TargetMapHasModelNavigationExpression.MetaClassGuid
#End Region

#Region "ModelNavigationExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ModelNavigationExpressionMetaRoleGuidString As System.String = "6d3c0a6f-ebf3-441a-974c-da9846e291fc"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ModelNavigationExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.ModelNavigationExpressionMetaRoleGuidString, "TargetMapHasModelNavigationExpression.ModelNavigationExpression")>
        Public Property ModelNavigationExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression
            Get
                Return CType(Me.GetRolePlayer(ModelNavigationExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
                Me.SetRolePlayer(ModelNavigationExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "TargetMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TargetMapMetaRoleGuidString As System.String = "56560303-0c07-4c45-8bc3-037fcba0e4d0"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TargetMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.TargetMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression.TargetMapMetaRoleGuidString, "TargetMapHasModelNavigationExpression.TargetMap")>
        Public Property TargetMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap
            Get
                Return CType(Me.GetRolePlayer(TargetMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMap)
                Me.SetRolePlayer(TargetMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "TargetMapHasModelNavigationExpression's Generated Constructor Code"
    Partial Public Class TargetMapHasModelNavigationExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateTargetMapHasModelNavigationExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As TargetMapHasModelNavigationExpression
            Return CreateTargetMapHasModelNavigationExpression(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeTargetMapHasModelNavigationExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As TargetMapHasModelNavigationExpression
            Return CreateAndInitializeTargetMapHasModelNavigationExpression(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateTargetMapHasModelNavigationExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As TargetMapHasModelNavigationExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(TargetMapHasModelNavigationExpression), rolePlayers), TargetMapHasModelNavigationExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeTargetMapHasModelNavigationExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As TargetMapHasModelNavigationExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(TargetMapHasModelNavigationExpression), rolePlayers, assignments), TargetMapHasModelNavigationExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for TargetMapHasModelNavigationExpression"
    ''' <summary>
    ''' TargetMapHasModelNavigationExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression))>
    Public NotInheritable Class TargetMapHasModelNavigationExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.TargetMapHasModelNavigationExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As TargetMapHasModelNavigationExpressionElementFactoryCreator
            Get
                Return New TargetMapHasModelNavigationExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.MetaRelationshipGuidString, "ShapeTextMapHasValueExpression")>
    Partial Public Class ShapeTextMapHasValueExpression
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeTextMapHasValueExpression's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "06980a0f-9ff0-48df-a146-521e8d071278"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeTextMapHasValueExpression.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeTextMapHasValueExpression.MetaClassGuid
#End Region

#Region "ValueExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValueExpressionMetaRoleGuidString As System.String = "5a3ba99f-58eb-4f0a-aea1-28bca97e2abf"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValueExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ValueExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ValueExpressionMetaRoleGuidString, "ShapeTextMapHasValueExpression.ValueExpression")>
        Public Property ValueExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression
            Get
                Return CType(Me.GetRolePlayer(ValueExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
                Me.SetRolePlayer(ValueExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ShapeTextMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeTextMapMetaRoleGuidString As System.String = "c9f5f754-b327-4f90-aaa7-10d02dd0c91f"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeTextMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ShapeTextMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression.ShapeTextMapMetaRoleGuidString, "ShapeTextMapHasValueExpression.ShapeTextMap")>
        Public Property ShapeTextMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap
            Get
                Return CType(Me.GetRolePlayer(ShapeTextMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMap)
                Me.SetRolePlayer(ShapeTextMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeTextMapHasValueExpression's Generated Constructor Code"
    Partial Public Class ShapeTextMapHasValueExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeTextMapHasValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeTextMapHasValueExpression
            Return CreateShapeTextMapHasValueExpression(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeTextMapHasValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeTextMapHasValueExpression
            Return CreateAndInitializeShapeTextMapHasValueExpression(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeTextMapHasValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeTextMapHasValueExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeTextMapHasValueExpression), rolePlayers), ShapeTextMapHasValueExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeTextMapHasValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeTextMapHasValueExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeTextMapHasValueExpression), rolePlayers, assignments), ShapeTextMapHasValueExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeTextMapHasValueExpression"
    ''' <summary>
    ''' ShapeTextMapHasValueExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression))>
    Public NotInheritable Class ShapeTextMapHasValueExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeTextMapHasValueExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeTextMapHasValueExpressionElementFactoryCreator
            Get
                Return New ShapeTextMapHasValueExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.MetaRelationshipGuidString, "PropertySetHasRoleProperties")>
    Partial Public Class PropertySetHasRoleProperties
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "PropertySetHasRoleProperties's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "d88c6ffa-0fe6-4a67-a944-7137030a4ab8"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = PropertySetHasRoleProperties.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = PropertySetHasRoleProperties.MetaClassGuid
#End Region

#Region "RoleProperties's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const RolePropertiesMetaRoleGuidString As System.String = "12515eea-c6c8-427a-893c-97a4d6bfe5ab"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly RolePropertiesMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.RolePropertiesMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.RolePropertiesMetaRoleGuidString, "PropertySetHasRoleProperties.RoleProperties")>
        Public Property RoleProperties() As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty
            Get
                Return CType(Me.GetRolePlayer(RolePropertiesMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
                Me.SetRolePlayer(RolePropertiesMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "PropertySet's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const PropertySetMetaRoleGuidString As System.String = "5a74804b-0c73-4ba6-a5e6-e346d9c9381d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly PropertySetMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.PropertySetMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties.PropertySetMetaRoleGuidString, "PropertySetHasRoleProperties.PropertySet")>
        Public Property PropertySet() As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet
            Get
                Return CType(Me.GetRolePlayer(PropertySetMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySet)
                Me.SetRolePlayer(PropertySetMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "PropertySetHasRoleProperties's Generated Constructor Code"
    Partial Public Class PropertySetHasRoleProperties
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertySetHasRoleProperties(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertySetHasRoleProperties
            Return CreatePropertySetHasRoleProperties(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertySetHasRoleProperties(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertySetHasRoleProperties
            Return CreateAndInitializePropertySetHasRoleProperties(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreatePropertySetHasRoleProperties(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As PropertySetHasRoleProperties
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertySetHasRoleProperties), rolePlayers), PropertySetHasRoleProperties)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializePropertySetHasRoleProperties(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As PropertySetHasRoleProperties
            Return CType(partition.ElementFactory.CreateElementLink(GetType(PropertySetHasRoleProperties), rolePlayers, assignments), PropertySetHasRoleProperties)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for PropertySetHasRoleProperties"
    ''' <summary>
    ''' PropertySetHasRoleProperties Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties))>
    Public NotInheritable Class PropertySetHasRolePropertiesElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.PropertySetHasRoleProperties(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As PropertySetHasRolePropertiesElementFactoryCreator
            Get
                Return New PropertySetHasRolePropertiesElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.MetaRelationshipGuidString, "RolePropertyHasStringToDisplay")>
    Partial Public Class RolePropertyHasStringToDisplay
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "RolePropertyHasStringToDisplay's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "181a7503-6216-44b2-9180-811dbb38b185"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = RolePropertyHasStringToDisplay.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = RolePropertyHasStringToDisplay.MetaClassGuid
#End Region

#Region "StringToDisplay's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const StringToDisplayMetaRoleGuidString As System.String = "a333d30a-cebe-4eeb-9b2c-22bb62e8c55f"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly StringToDisplayMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.StringToDisplayMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.StringToDisplayMetaRoleGuidString, "RolePropertyHasStringToDisplay.StringToDisplay")>
        Public Property StringToDisplay() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression
            Get
                Return CType(Me.GetRolePlayer(StringToDisplayMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
                Me.SetRolePlayer(StringToDisplayMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "RoleProperty's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const RolePropertyMetaRoleGuidString As System.String = "5efe9140-c44c-45d0-aed2-870d68e5103a"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly RolePropertyMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.RolePropertyMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay.RolePropertyMetaRoleGuidString, "RolePropertyHasStringToDisplay.RoleProperty")>
        Public Property RoleProperty() As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty
            Get
                Return CType(Me.GetRolePlayer(RolePropertyMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.RoleProperty)
                Me.SetRolePlayer(RolePropertyMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "RolePropertyHasStringToDisplay's Generated Constructor Code"
    Partial Public Class RolePropertyHasStringToDisplay
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateRolePropertyHasStringToDisplay(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As RolePropertyHasStringToDisplay
            Return CreateRolePropertyHasStringToDisplay(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeRolePropertyHasStringToDisplay(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As RolePropertyHasStringToDisplay
            Return CreateAndInitializeRolePropertyHasStringToDisplay(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateRolePropertyHasStringToDisplay(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As RolePropertyHasStringToDisplay
            Return CType(partition.ElementFactory.CreateElementLink(GetType(RolePropertyHasStringToDisplay), rolePlayers), RolePropertyHasStringToDisplay)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeRolePropertyHasStringToDisplay(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As RolePropertyHasStringToDisplay
            Return CType(partition.ElementFactory.CreateElementLink(GetType(RolePropertyHasStringToDisplay), rolePlayers, assignments), RolePropertyHasStringToDisplay)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for RolePropertyHasStringToDisplay"
    ''' <summary>
    ''' RolePropertyHasStringToDisplay Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay))>
    Public NotInheritable Class RolePropertyHasStringToDisplayElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.RolePropertyHasStringToDisplay(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As RolePropertyHasStringToDisplayElementFactoryCreator
            Get
                Return New RolePropertyHasStringToDisplayElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.MetaRelationshipGuidString, "DiagramMapReferencesClass")>
    Partial Public Class DiagramMapReferencesClass
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DiagramMapReferencesClass's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "306bd0df-bbe4-4223-b7d6-170c3adc3f0d"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DiagramMapReferencesClass.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DiagramMapReferencesClass.MetaClassGuid
#End Region

#Region "Class's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ClassMetaRoleGuidString As System.String = "35f9f281-7a0b-4d6d-a79a-83fd74618258"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ClassMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.ClassMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.ClassMetaRoleGuidString, "DiagramMapReferencesClass.Class")>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return CType(Me.GetRolePlayer(ClassMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Me.SetRolePlayer(ClassMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DiagramMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DiagramMapMetaRoleGuidString As System.String = "06681969-1f0b-459a-955a-ebaef9a7af3f"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DiagramMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.DiagramMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass.DiagramMapMetaRoleGuidString, "DiagramMapReferencesClass.DiagramMap")>
        Public Property DiagramMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap
            Get
                Return CType(Me.GetRolePlayer(DiagramMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMap)
                Me.SetRolePlayer(DiagramMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DiagramMapReferencesClass's Generated Constructor Code"
    Partial Public Class DiagramMapReferencesClass
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMapReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramMapReferencesClass
            Return CreateDiagramMapReferencesClass(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMapReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMapReferencesClass
            Return CreateAndInitializeDiagramMapReferencesClass(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDiagramMapReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DiagramMapReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramMapReferencesClass), rolePlayers), DiagramMapReferencesClass)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDiagramMapReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DiagramMapReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DiagramMapReferencesClass), rolePlayers, assignments), DiagramMapReferencesClass)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DiagramMapReferencesClass"
    ''' <summary>
    ''' DiagramMapReferencesClass Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass))>
    Public NotInheritable Class DiagramMapReferencesClassElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DiagramMapReferencesClass(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DiagramMapReferencesClassElementFactoryCreator
            Get
                Return New DiagramMapReferencesClassElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MetaRelationshipGuidString, "ShapeMapHasModelNavigationExpression")>
    Partial Public Class ShapeMapHasModelNavigationExpression
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeMapHasModelNavigationExpression's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "f13c50dc-1367-42c9-b004-7a0d6809b595"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeMapHasModelNavigationExpression.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeMapHasModelNavigationExpression.MetaClassGuid
#End Region

#Region "MelCollectionExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const MelCollectionExpressionMetaRoleGuidString As System.String = "aaa1019b-a7f8-49fe-9bd7-341fcdba1b80"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly MelCollectionExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MelCollectionExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.MelCollectionExpressionMetaRoleGuidString, "ShapeMapHasModelNavigationExpression.MelCollectionExpression")>
        Public Property MelCollectionExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression
            Get
                Return CType(Me.GetRolePlayer(MelCollectionExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
                Me.SetRolePlayer(MelCollectionExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ShapeMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMapMetaRoleGuidString As System.String = "63c8e33b-a61f-4fe3-b9fc-76613de5ee2e"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.ShapeMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression.ShapeMapMetaRoleGuidString, "ShapeMapHasModelNavigationExpression.ShapeMap")>
        Public Property ShapeMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap
            Get
                Return CType(Me.GetRolePlayer(ShapeMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
                Me.SetRolePlayer(ShapeMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeMapHasModelNavigationExpression's Generated Constructor Code"
    Partial Public Class ShapeMapHasModelNavigationExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapHasModelNavigationExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapHasModelNavigationExpression
            Return CreateShapeMapHasModelNavigationExpression(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapHasModelNavigationExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapHasModelNavigationExpression
            Return CreateAndInitializeShapeMapHasModelNavigationExpression(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapHasModelNavigationExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapHasModelNavigationExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapHasModelNavigationExpression), rolePlayers), ShapeMapHasModelNavigationExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapHasModelNavigationExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapHasModelNavigationExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapHasModelNavigationExpression), rolePlayers, assignments), ShapeMapHasModelNavigationExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeMapHasModelNavigationExpression"
    ''' <summary>
    ''' ShapeMapHasModelNavigationExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression))>
    Public NotInheritable Class ShapeMapHasModelNavigationExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasModelNavigationExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeMapHasModelNavigationExpressionElementFactoryCreator
            Get
                Return New ShapeMapHasModelNavigationExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.MetaRelationshipGuidString, "ShapeMapReferencesClass")>
    Partial Public Class ShapeMapReferencesClass
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeMapReferencesClass's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "eb037e4d-c07a-4d4a-8981-9b14c6a94710"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeMapReferencesClass.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeMapReferencesClass.MetaClassGuid
#End Region

#Region "Class's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ClassMetaRoleGuidString As System.String = "8266b4d7-0dd8-4c45-bba5-46bf4662a369"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ClassMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ClassMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ClassMetaRoleGuidString, "ShapeMapReferencesClass.Class")>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return CType(Me.GetRolePlayer(ClassMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Me.SetRolePlayer(ClassMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ShapeMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMapMetaRoleGuidString As System.String = "853fee01-6738-416e-911e-43c5be971d27"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ShapeMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass.ShapeMapMetaRoleGuidString, "ShapeMapReferencesClass.ShapeMap")>
        Public Property ShapeMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap
            Get
                Return CType(Me.GetRolePlayer(ShapeMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
                Me.SetRolePlayer(ShapeMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeMapReferencesClass's Generated Constructor Code"
    Partial Public Class ShapeMapReferencesClass
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapReferencesClass
            Return CreateShapeMapReferencesClass(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapReferencesClass
            Return CreateAndInitializeShapeMapReferencesClass(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapReferencesClass), rolePlayers), ShapeMapReferencesClass)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapReferencesClass), rolePlayers, assignments), ShapeMapReferencesClass)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeMapReferencesClass"
    ''' <summary>
    ''' ShapeMapReferencesClass Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass))>
    Public NotInheritable Class ShapeMapReferencesClassElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapReferencesClass(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeMapReferencesClassElementFactoryCreator
            Get
                Return New ShapeMapReferencesClassElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.MetaRelationshipGuidString, "ClassNodeRenderingReferencesClass")>
    Partial Public Class ClassNodeRenderingReferencesClass
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ClassNodeRenderingReferencesClass's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "6d32836e-244c-4525-bd67-fba669b4c516"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ClassNodeRenderingReferencesClass.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ClassNodeRenderingReferencesClass.MetaClassGuid
#End Region

#Region "Class's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ClassMetaRoleGuidString As System.String = "c9f228e5-ecd9-409d-bc28-95c58208842c"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ClassMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassMetaRoleGuidString, "ClassNodeRenderingReferencesClass.Class")>
        Public Property [Class]() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept
            Get
                Return CType(Me.GetRolePlayer(ClassMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlConcept)
                Me.SetRolePlayer(ClassMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ClassNodeRendering's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ClassNodeRenderingMetaRoleGuidString As System.String = "804159d7-4c0f-448a-ac88-d967071b2d77"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ClassNodeRenderingMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassNodeRenderingMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass.ClassNodeRenderingMetaRoleGuidString, "ClassNodeRenderingReferencesClass.ClassNodeRendering")>
        Public Property ClassNodeRendering() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering
            Get
                Return CType(Me.GetRolePlayer(ClassNodeRenderingMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRendering)
                Me.SetRolePlayer(ClassNodeRenderingMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ClassNodeRenderingReferencesClass's Generated Constructor Code"
    Partial Public Class ClassNodeRenderingReferencesClass
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateClassNodeRenderingReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ClassNodeRenderingReferencesClass
            Return CreateClassNodeRenderingReferencesClass(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeClassNodeRenderingReferencesClass(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ClassNodeRenderingReferencesClass
            Return CreateAndInitializeClassNodeRenderingReferencesClass(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateClassNodeRenderingReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ClassNodeRenderingReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ClassNodeRenderingReferencesClass), rolePlayers), ClassNodeRenderingReferencesClass)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeClassNodeRenderingReferencesClass(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ClassNodeRenderingReferencesClass
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ClassNodeRenderingReferencesClass), rolePlayers, assignments), ClassNodeRenderingReferencesClass)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ClassNodeRenderingReferencesClass"
    ''' <summary>
    ''' ClassNodeRenderingReferencesClass Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass))>
    Public NotInheritable Class ClassNodeRenderingReferencesClassElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ClassNodeRenderingReferencesClass(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ClassNodeRenderingReferencesClassElementFactoryCreator
            Get
                Return New ClassNodeRenderingReferencesClassElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.MetaRelationshipGuidString, "ObjectModelHasModel")>
    Partial Public Class ObjectModelHasModel
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ObjectModelHasModel's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "103a7d7d-ade2-44fc-a129-264852d6ee1d"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ObjectModelHasModel.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ObjectModelHasModel.MetaClassGuid
#End Region

#Region "Model's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ModelMetaRoleGuidString As System.String = "a6a3c5d5-fda5-4acc-bdcd-7334f53fd3f8"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ModelMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ModelMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ModelMetaRoleGuidString, "ObjectModelHasModel.Model")>
        Public Property Model() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlModel
            Get
                Return CType(Me.GetRolePlayer(ModelMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlModel)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlModel)
                Me.SetRolePlayer(ModelMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ObjectModel's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ObjectModelMetaRoleGuidString As System.String = "6c7dc03e-3034-4b7e-bf95-cce09236c8a9"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ObjectModelMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ObjectModelMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel.ObjectModelMetaRoleGuidString, "ObjectModelHasModel.ObjectModel")>
        Public Property ObjectModel() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel
            Get
                Return CType(Me.GetRolePlayer(ObjectModelMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModel)
                Me.SetRolePlayer(ObjectModelMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ObjectModelHasModel's Generated Constructor Code"
    Partial Public Class ObjectModelHasModel
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateObjectModelHasModel(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ObjectModelHasModel
            Return CreateObjectModelHasModel(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeObjectModelHasModel(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ObjectModelHasModel
            Return CreateAndInitializeObjectModelHasModel(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateObjectModelHasModel(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ObjectModelHasModel
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ObjectModelHasModel), rolePlayers), ObjectModelHasModel)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeObjectModelHasModel(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ObjectModelHasModel
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ObjectModelHasModel), rolePlayers, assignments), ObjectModelHasModel)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ObjectModelHasModel"
    ''' <summary>
    ''' ObjectModelHasModel Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel))>
    Public NotInheritable Class ObjectModelHasModelElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ObjectModelHasModel(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ObjectModelHasModelElementFactoryCreator
            Get
                Return New ObjectModelHasModelElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.MetaRelationshipGuidString, "ConnectorHasDashStyle")>
    Partial Public Class ConnectorHasDashStyle
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorHasDashStyle's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "ed62e953-25c1-4088-a3d0-48c550c02b58"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorHasDashStyle.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorHasDashStyle.MetaClassGuid
#End Region

#Region "DashStyle's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DashStyleMetaRoleGuidString As System.String = "a51a61e7-118a-4b11-8eca-014392d74a73"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DashStyleMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.DashStyleMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.DashStyleMetaRoleGuidString, "ConnectorHasDashStyle.DashStyle")>
        Public Property DashStyle() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails
            Get
                Return CType(Me.GetRolePlayer(DashStyleMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DashStyleDetails)
                Me.SetRolePlayer(DashStyleMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Connector's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMetaRoleGuidString As System.String = "49686d14-48c7-48ae-bad5-deb8783e6145"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.ConnectorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle.ConnectorMetaRoleGuidString, "ConnectorHasDashStyle.Connector")>
        Public Property Connector() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return CType(Me.GetRolePlayer(ConnectorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Me.SetRolePlayer(ConnectorMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorHasDashStyle's Generated Constructor Code"
    Partial Public Class ConnectorHasDashStyle
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasDashStyle(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasDashStyle
            Return CreateConnectorHasDashStyle(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasDashStyle(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasDashStyle
            Return CreateAndInitializeConnectorHasDashStyle(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasDashStyle(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasDashStyle
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasDashStyle), rolePlayers), ConnectorHasDashStyle)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasDashStyle(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasDashStyle
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasDashStyle), rolePlayers, assignments), ConnectorHasDashStyle)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorHasDashStyle"
    ''' <summary>
    ''' ConnectorHasDashStyle Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle))>
    Public NotInheritable Class ConnectorHasDashStyleElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasDashStyle(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorHasDashStyleElementFactoryCreator
            Get
                Return New ConnectorHasDashStyleElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.MetaRelationshipGuidString, "ConnectorHasColor")>
    Partial Public Class ConnectorHasColor
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorHasColor's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "1b1c5726-8f37-47dd-9f17-5ea6f5c54735"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorHasColor.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorHasColor.MetaClassGuid
#End Region

#Region "Color's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ColorMetaRoleGuidString As System.String = "1fa5ad19-3810-4f9d-91fb-f9ec2170605a"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ColorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ColorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ColorMetaRoleGuidString, "ConnectorHasColor.Color")>
        Public Property Color() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return CType(Me.GetRolePlayer(ColorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Me.SetRolePlayer(ColorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Connector's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorMetaRoleGuidString As System.String = "9559620e-d1bb-41bc-9a95-0c0f66850a8d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ConnectorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor.ConnectorMetaRoleGuidString, "ConnectorHasColor.Connector")>
        Public Property Connector() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector
            Get
                Return CType(Me.GetRolePlayer(ConnectorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Connector)
                Me.SetRolePlayer(ConnectorMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorHasColor's Generated Constructor Code"
    Partial Public Class ConnectorHasColor
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasColor
            Return CreateConnectorHasColor(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasColor
            Return CreateAndInitializeConnectorHasColor(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorHasColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorHasColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasColor), rolePlayers), ConnectorHasColor)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorHasColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorHasColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorHasColor), rolePlayers, assignments), ConnectorHasColor)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorHasColor"
    ''' <summary>
    ''' ConnectorHasColor Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor))>
    Public NotInheritable Class ConnectorHasColorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorHasColor(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorHasColorElementFactoryCreator
            Get
                Return New ConnectorHasColorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.MetaRelationshipGuidString, "ConnectorTextMapHasValueExpression")>
    Partial Public Class ConnectorTextMapHasValueExpression
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ConnectorTextMapHasValueExpression's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "d8f162a5-d8df-4fca-8d0f-826d50054a2f"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ConnectorTextMapHasValueExpression.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ConnectorTextMapHasValueExpression.MetaClassGuid
#End Region

#Region "ValueExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValueExpressionMetaRoleGuidString As System.String = "a0e4aa24-93d6-406a-bd12-f5304261dbf7"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValueExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ValueExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ValueExpressionMetaRoleGuidString, "ConnectorTextMapHasValueExpression.ValueExpression")>
        Public Property ValueExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression
            Get
                Return CType(Me.GetRolePlayer(ValueExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ModelNavigationExpression)
                Me.SetRolePlayer(ValueExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ConnectorTextMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ConnectorTextMapMetaRoleGuidString As System.String = "b9b03af0-fd2c-487f-a1eb-71aa3f97958a"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ConnectorTextMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ConnectorTextMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression.ConnectorTextMapMetaRoleGuidString, "ConnectorTextMapHasValueExpression.ConnectorTextMap")>
        Public Property ConnectorTextMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap
            Get
                Return CType(Me.GetRolePlayer(ConnectorTextMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMap)
                Me.SetRolePlayer(ConnectorTextMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ConnectorTextMapHasValueExpression's Generated Constructor Code"
    Partial Public Class ConnectorTextMapHasValueExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorTextMapHasValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorTextMapHasValueExpression
            Return CreateConnectorTextMapHasValueExpression(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorTextMapHasValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorTextMapHasValueExpression
            Return CreateAndInitializeConnectorTextMapHasValueExpression(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateConnectorTextMapHasValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ConnectorTextMapHasValueExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorTextMapHasValueExpression), rolePlayers), ConnectorTextMapHasValueExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeConnectorTextMapHasValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ConnectorTextMapHasValueExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ConnectorTextMapHasValueExpression), rolePlayers, assignments), ConnectorTextMapHasValueExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ConnectorTextMapHasValueExpression"
    ''' <summary>
    ''' ConnectorTextMapHasValueExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression))>
    Public NotInheritable Class ConnectorTextMapHasValueExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ConnectorTextMapHasValueExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ConnectorTextMapHasValueExpressionElementFactoryCreator
            Get
                Return New ConnectorTextMapHasValueExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.MetaRelationshipGuidString, "DecoratedShapeHasDecorators")>
    Partial Public Class DecoratedShapeHasDecorators
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DecoratedShapeHasDecorators's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "36cbf1da-1bdd-468e-b9bb-b575ab183597"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DecoratedShapeHasDecorators.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DecoratedShapeHasDecorators.MetaClassGuid
#End Region

#Region "Decorators's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DecoratorsMetaRoleGuidString As System.String = "2ecf16e7-87a0-47aa-8a0e-144ff925fbb8"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DecoratorsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.DecoratorsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.DecoratorsMetaRoleGuidString, "DecoratedShapeHasDecorators.Decorators")>
        Public Property Decorators() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator
            Get
                Return CType(Me.GetRolePlayer(DecoratorsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeDecorator)
                Me.SetRolePlayer(DecoratorsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Shape's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMetaRoleGuidString As System.String = "a2f45e8e-f3c4-445d-a728-2995db2ea87c"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.ShapeMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators.ShapeMetaRoleGuidString, "DecoratedShapeHasDecorators.Shape")>
        Public Property Shape() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape
            Get
                Return CType(Me.GetRolePlayer(ShapeMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Shape)
                Me.SetRolePlayer(ShapeMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DecoratedShapeHasDecorators's Generated Constructor Code"
    Partial Public Class DecoratedShapeHasDecorators
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDecoratedShapeHasDecorators(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DecoratedShapeHasDecorators
            Return CreateDecoratedShapeHasDecorators(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDecoratedShapeHasDecorators(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DecoratedShapeHasDecorators
            Return CreateAndInitializeDecoratedShapeHasDecorators(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDecoratedShapeHasDecorators(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DecoratedShapeHasDecorators
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DecoratedShapeHasDecorators), rolePlayers), DecoratedShapeHasDecorators)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDecoratedShapeHasDecorators(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DecoratedShapeHasDecorators
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DecoratedShapeHasDecorators), rolePlayers, assignments), DecoratedShapeHasDecorators)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DecoratedShapeHasDecorators"
    ''' <summary>
    ''' DecoratedShapeHasDecorators Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators))>
    Public NotInheritable Class DecoratedShapeHasDecoratorsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DecoratedShapeHasDecorators(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DecoratedShapeHasDecoratorsElementFactoryCreator
            Get
                Return New DecoratedShapeHasDecoratorsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.MetaRelationshipGuidString, "EnumerationLiteralChoiceHasCdlEnumerationLiteral")>
    Partial Public Class EnumerationLiteralChoiceHasCdlEnumerationLiteral
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "EnumerationLiteralChoiceHasCdlEnumerationLiteral's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "e989e49b-2227-4786-a7b8-bb8196003577"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = EnumerationLiteralChoiceHasCdlEnumerationLiteral.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = EnumerationLiteralChoiceHasCdlEnumerationLiteral.MetaClassGuid
#End Region

#Region "Choices's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ChoicesMetaRoleGuidString As System.String = "927a313f-39f9-4903-9798-3636ecd8e795"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ChoicesMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.ChoicesMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.ChoicesMetaRoleGuidString, "EnumerationLiteralChoiceHasCdlEnumerationLiteral.Choices")>
        Public Property Choices() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlEnumerationLiteral
            Get
                Return CType(Me.GetRolePlayer(ChoicesMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlEnumerationLiteral)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlEnumerationLiteral)
                Me.SetRolePlayer(ChoicesMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "EnumerationLiteralChoice's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const EnumerationLiteralChoiceMetaRoleGuidString As System.String = "04a46afd-b0e3-4ab3-9a65-c77b027c28f9"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly EnumerationLiteralChoiceMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.EnumerationLiteralChoiceMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral.EnumerationLiteralChoiceMetaRoleGuidString, "EnumerationLiteralChoiceHasCdlEnumerationLiteral.EnumerationLiteralChoice")>
        Public Property EnumerationLiteralChoice() As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression
            Get
                Return CType(Me.GetRolePlayer(EnumerationLiteralChoiceMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationBooleanExpression)
                Me.SetRolePlayer(EnumerationLiteralChoiceMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "EnumerationLiteralChoiceHasCdlEnumerationLiteral's Generated Constructor Code"
    Partial Public Class EnumerationLiteralChoiceHasCdlEnumerationLiteral
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateEnumerationLiteralChoiceHasCdlEnumerationLiteral(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As EnumerationLiteralChoiceHasCdlEnumerationLiteral
            Return CreateEnumerationLiteralChoiceHasCdlEnumerationLiteral(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeEnumerationLiteralChoiceHasCdlEnumerationLiteral(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As EnumerationLiteralChoiceHasCdlEnumerationLiteral
            Return CreateAndInitializeEnumerationLiteralChoiceHasCdlEnumerationLiteral(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateEnumerationLiteralChoiceHasCdlEnumerationLiteral(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As EnumerationLiteralChoiceHasCdlEnumerationLiteral
            Return CType(partition.ElementFactory.CreateElementLink(GetType(EnumerationLiteralChoiceHasCdlEnumerationLiteral), rolePlayers), EnumerationLiteralChoiceHasCdlEnumerationLiteral)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeEnumerationLiteralChoiceHasCdlEnumerationLiteral(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As EnumerationLiteralChoiceHasCdlEnumerationLiteral
            Return CType(partition.ElementFactory.CreateElementLink(GetType(EnumerationLiteralChoiceHasCdlEnumerationLiteral), rolePlayers, assignments), EnumerationLiteralChoiceHasCdlEnumerationLiteral)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for EnumerationLiteralChoiceHasCdlEnumerationLiteral"
    ''' <summary>
    ''' EnumerationLiteralChoiceHasCdlEnumerationLiteral Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral))>
    Public NotInheritable Class EnumerationLiteralChoiceHasCdlEnumerationLiteralElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.EnumerationLiteralChoiceHasCdlEnumerationLiteral(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As EnumerationLiteralChoiceHasCdlEnumerationLiteralElementFactoryCreator
            Get
                Return New EnumerationLiteralChoiceHasCdlEnumerationLiteralElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.MetaRelationshipGuidString, "ShapeIconMapHasShapeIcon")>
    Partial Public Class ShapeIconMapHasShapeIcon
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeIconMapHasShapeIcon's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "030cf1fa-6881-454e-90ed-fc5ae9dcf28d"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeIconMapHasShapeIcon.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeIconMapHasShapeIcon.MetaClassGuid
#End Region

#Region "IconDecorator's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const IconDecoratorMetaRoleGuidString As System.String = "106e017b-95da-4e76-808a-7acfc5174470"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly IconDecoratorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconDecoratorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconDecoratorMetaRoleGuidString, "ShapeIconMapHasShapeIcon.IconDecorator")>
        Public Property IconDecorator() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon
            Get
                Return CType(Me.GetRolePlayer(IconDecoratorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIcon)
                Me.SetRolePlayer(IconDecoratorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "IconMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const IconMapMetaRoleGuidString As System.String = "d1380259-428f-4f18-a4bd-6c0e27434c38"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly IconMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon.IconMapMetaRoleGuidString, "ShapeIconMapHasShapeIcon.IconMap")>
        Public Property IconMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap
            Get
                Return CType(Me.GetRolePlayer(IconMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
                Me.SetRolePlayer(IconMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeIconMapHasShapeIcon's Generated Constructor Code"
    Partial Public Class ShapeIconMapHasShapeIcon
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeIconMapHasShapeIcon(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeIconMapHasShapeIcon
            Return CreateShapeIconMapHasShapeIcon(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeIconMapHasShapeIcon(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeIconMapHasShapeIcon
            Return CreateAndInitializeShapeIconMapHasShapeIcon(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeIconMapHasShapeIcon(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeIconMapHasShapeIcon
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeIconMapHasShapeIcon), rolePlayers), ShapeIconMapHasShapeIcon)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeIconMapHasShapeIcon(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeIconMapHasShapeIcon
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeIconMapHasShapeIcon), rolePlayers, assignments), ShapeIconMapHasShapeIcon)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeIconMapHasShapeIcon"
    ''' <summary>
    ''' ShapeIconMapHasShapeIcon Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon))>
    Public NotInheritable Class ShapeIconMapHasShapeIconElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasShapeIcon(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeIconMapHasShapeIconElementFactoryCreator
            Get
                Return New ShapeIconMapHasShapeIconElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.MetaRelationshipGuidString, "ValuePropertyBooleanExpressionHasCdlValueProperty")>
    Partial Public Class ValuePropertyBooleanExpressionHasCdlValueProperty
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ValuePropertyBooleanExpressionHasCdlValueProperty's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "0c61e18c-dd44-4931-bdac-1789a37383aa"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ValuePropertyBooleanExpressionHasCdlValueProperty.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ValuePropertyBooleanExpressionHasCdlValueProperty.MetaClassGuid
#End Region

#Region "ValueProperty's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValuePropertyMetaRoleGuidString As System.String = "49325498-6251-4bc7-a462-02460dd2c8fe"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValuePropertyMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyMetaRoleGuidString, "ValuePropertyBooleanExpressionHasCdlValueProperty.ValueProperty")>
        Public Property ValueProperty() As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty
            Get
                Return CType(Me.GetRolePlayer(ValuePropertyMetaRoleGuid), Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.EnterpriseTools.Corona.Concepts.CdlValueProperty)
                Me.SetRolePlayer(ValuePropertyMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ValuePropertyBooleanExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValuePropertyBooleanExpressionMetaRoleGuidString As System.String = "254deb1c-5750-4b4e-b388-7a174f1db01f"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValuePropertyBooleanExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyBooleanExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyBooleanExpressionMetaRoleGuidString, "ValuePropertyBooleanExpressionHasCdlValueProperty.ValuePropertyBooleanExpression")>
        Public Property ValuePropertyBooleanExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression
            Get
                Return CType(Me.GetRolePlayer(ValuePropertyBooleanExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpression)
                Me.SetRolePlayer(ValuePropertyBooleanExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ValuePropertyBooleanExpressionHasCdlValueProperty's Generated Constructor Code"
    Partial Public Class ValuePropertyBooleanExpressionHasCdlValueProperty
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValuePropertyBooleanExpressionHasCdlValueProperty(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ValuePropertyBooleanExpressionHasCdlValueProperty
            Return CreateValuePropertyBooleanExpressionHasCdlValueProperty(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValuePropertyBooleanExpressionHasCdlValueProperty(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValuePropertyBooleanExpressionHasCdlValueProperty
            Return CreateAndInitializeValuePropertyBooleanExpressionHasCdlValueProperty(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateValuePropertyBooleanExpressionHasCdlValueProperty(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ValuePropertyBooleanExpressionHasCdlValueProperty
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ValuePropertyBooleanExpressionHasCdlValueProperty), rolePlayers), ValuePropertyBooleanExpressionHasCdlValueProperty)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeValuePropertyBooleanExpressionHasCdlValueProperty(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ValuePropertyBooleanExpressionHasCdlValueProperty
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ValuePropertyBooleanExpressionHasCdlValueProperty), rolePlayers, assignments), ValuePropertyBooleanExpressionHasCdlValueProperty)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ValuePropertyBooleanExpressionHasCdlValueProperty"
    ''' <summary>
    ''' ValuePropertyBooleanExpressionHasCdlValueProperty Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty))>
    Public NotInheritable Class ValuePropertyBooleanExpressionHasCdlValuePropertyElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ValuePropertyBooleanExpressionHasCdlValueProperty(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ValuePropertyBooleanExpressionHasCdlValuePropertyElementFactoryCreator
            Get
                Return New ValuePropertyBooleanExpressionHasCdlValuePropertyElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.MetaRelationshipGuidString, "ShapeIconMapHasVisibilityExpression")>
    Partial Public Class ShapeIconMapHasVisibilityExpression
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeIconMapHasVisibilityExpression's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "4797ffa9-946b-42e6-b432-d7825ba1e7b3"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeIconMapHasVisibilityExpression.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeIconMapHasVisibilityExpression.MetaClassGuid
#End Region

#Region "VisibilityExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const VisibilityExpressionMetaRoleGuidString As System.String = "99d70bc3-546b-42ab-a4fc-623b9aad5dc3"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly VisibilityExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.VisibilityExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.VisibilityExpressionMetaRoleGuidString, "ShapeIconMapHasVisibilityExpression.VisibilityExpression")>
        Public Property VisibilityExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression
            Get
                Return CType(Me.GetRolePlayer(VisibilityExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.BooleanExpression)
                Me.SetRolePlayer(VisibilityExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ShapeIconMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeIconMapMetaRoleGuidString As System.String = "82fc971e-6530-4376-932a-d0eb94b2c1d0"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeIconMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.ShapeIconMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression.ShapeIconMapMetaRoleGuidString, "ShapeIconMapHasVisibilityExpression.ShapeIconMap")>
        Public Property ShapeIconMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap
            Get
                Return CType(Me.GetRolePlayer(ShapeIconMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMap)
                Me.SetRolePlayer(ShapeIconMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeIconMapHasVisibilityExpression's Generated Constructor Code"
    Partial Public Class ShapeIconMapHasVisibilityExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeIconMapHasVisibilityExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeIconMapHasVisibilityExpression
            Return CreateShapeIconMapHasVisibilityExpression(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeIconMapHasVisibilityExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeIconMapHasVisibilityExpression
            Return CreateAndInitializeShapeIconMapHasVisibilityExpression(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeIconMapHasVisibilityExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeIconMapHasVisibilityExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeIconMapHasVisibilityExpression), rolePlayers), ShapeIconMapHasVisibilityExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeIconMapHasVisibilityExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeIconMapHasVisibilityExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeIconMapHasVisibilityExpression), rolePlayers, assignments), ShapeIconMapHasVisibilityExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeIconMapHasVisibilityExpression"
    ''' <summary>
    ''' ShapeIconMapHasVisibilityExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression))>
    Public NotInheritable Class ShapeIconMapHasVisibilityExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeIconMapHasVisibilityExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeIconMapHasVisibilityExpressionElementFactoryCreator
            Get
                Return New ShapeIconMapHasVisibilityExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.MetaRelationshipGuidString, "ShapeMapHasCompartmentMaps")>
    Partial Public Class ShapeMapHasCompartmentMaps
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "ShapeMapHasCompartmentMaps's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "dd0eb087-eb43-46cc-be1e-b01e69f0db09"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = ShapeMapHasCompartmentMaps.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = ShapeMapHasCompartmentMaps.MetaClassGuid
#End Region

#Region "CompartmentMaps's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentMapsMetaRoleGuidString As System.String = "686e8cc5-4d05-4630-b419-0a6b37d4cce4"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentMapsMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.CompartmentMapsMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.CompartmentMapsMetaRoleGuidString, "ShapeMapHasCompartmentMaps.CompartmentMaps")>
        Public Property CompartmentMaps() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap
            Get
                Return CType(Me.GetRolePlayer(CompartmentMapsMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
                Me.SetRolePlayer(CompartmentMapsMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "ShapeMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ShapeMapMetaRoleGuidString As System.String = "e5c29ff4-e043-4e37-8203-71c9bc2b370c"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ShapeMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.ShapeMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps.ShapeMapMetaRoleGuidString, "ShapeMapHasCompartmentMaps.ShapeMap")>
        Public Property ShapeMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap
            Get
                Return CType(Me.GetRolePlayer(ShapeMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMap)
                Me.SetRolePlayer(ShapeMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "ShapeMapHasCompartmentMaps's Generated Constructor Code"
    Partial Public Class ShapeMapHasCompartmentMaps
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapHasCompartmentMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapHasCompartmentMaps
            Return CreateShapeMapHasCompartmentMaps(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapHasCompartmentMaps(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapHasCompartmentMaps
            Return CreateAndInitializeShapeMapHasCompartmentMaps(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateShapeMapHasCompartmentMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As ShapeMapHasCompartmentMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapHasCompartmentMaps), rolePlayers), ShapeMapHasCompartmentMaps)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeShapeMapHasCompartmentMaps(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As ShapeMapHasCompartmentMaps
            Return CType(partition.ElementFactory.CreateElementLink(GetType(ShapeMapHasCompartmentMaps), rolePlayers, assignments), ShapeMapHasCompartmentMaps)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for ShapeMapHasCompartmentMaps"
    ''' <summary>
    ''' ShapeMapHasCompartmentMaps Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps))>
    Public NotInheritable Class ShapeMapHasCompartmentMapsElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.ShapeMapHasCompartmentMaps(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As ShapeMapHasCompartmentMapsElementFactoryCreator
            Get
                Return New ShapeMapHasCompartmentMapsElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.MetaRelationshipGuidString, "CompartmentMapReferencesCompartment")>
    Partial Public Class CompartmentMapReferencesCompartment
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CompartmentMapReferencesCompartment's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "5e6af486-f8e2-474c-9271-3addb1c9ad93"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CompartmentMapReferencesCompartment.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CompartmentMapReferencesCompartment.MetaClassGuid
#End Region

#Region "Compartment's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentMetaRoleGuidString As System.String = "4d0f1329-934b-4ac7-ac87-60579fd35394"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMetaRoleGuidString, "CompartmentMapReferencesCompartment.Compartment")>
        Public Property Compartment() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment
            Get
                Return CType(Me.GetRolePlayer(CompartmentMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
                Me.SetRolePlayer(CompartmentMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "CompartmentMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentMapMetaRoleGuidString As System.String = "81b9d087-c1db-42e9-bddd-d6cd65a8c4e7"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.Many), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment.CompartmentMapMetaRoleGuidString, "CompartmentMapReferencesCompartment.CompartmentMap")>
        Public Property CompartmentMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap
            Get
                Return CType(Me.GetRolePlayer(CompartmentMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
                Me.SetRolePlayer(CompartmentMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CompartmentMapReferencesCompartment's Generated Constructor Code"
    Partial Public Class CompartmentMapReferencesCompartment
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentMapReferencesCompartment(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentMapReferencesCompartment
            Return CreateCompartmentMapReferencesCompartment(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentMapReferencesCompartment(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentMapReferencesCompartment
            Return CreateAndInitializeCompartmentMapReferencesCompartment(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentMapReferencesCompartment(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentMapReferencesCompartment
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentMapReferencesCompartment), rolePlayers), CompartmentMapReferencesCompartment)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentMapReferencesCompartment(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentMapReferencesCompartment
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentMapReferencesCompartment), rolePlayers, assignments), CompartmentMapReferencesCompartment)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentMapReferencesCompartment"
    ''' <summary>
    ''' CompartmentMapReferencesCompartment Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment))>
    Public NotInheritable Class CompartmentMapReferencesCompartmentElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapReferencesCompartment(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentMapReferencesCompartmentElementFactoryCreator
            Get
                Return New CompartmentMapReferencesCompartmentElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MetaRelationshipGuidString, "CompartmentMapHasMelCollectionExpression")>
    Partial Public Class CompartmentMapHasMelCollectionExpression
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CompartmentMapHasMelCollectionExpression's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "bc11b97d-1d9b-4667-a44e-5f393375e9b2"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CompartmentMapHasMelCollectionExpression.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CompartmentMapHasMelCollectionExpression.MetaClassGuid
#End Region

#Region "MelCollectionExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const MelCollectionExpressionMetaRoleGuidString As System.String = "3df3d96f-b7a2-4b51-9eab-ff1e3c72513d"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly MelCollectionExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.MelCollectionExpressionMetaRoleGuidString, "CompartmentMapHasMelCollectionExpression.MelCollectionExpression")>
        Public Property MelCollectionExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression
            Get
                Return CType(Me.GetRolePlayer(MelCollectionExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.MelCollectionExpression)
                Me.SetRolePlayer(MelCollectionExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "CompartmentMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentMapMetaRoleGuidString As System.String = "7f169fa7-f034-4d73-b6d9-99bbe66e705a"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.CompartmentMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression.CompartmentMapMetaRoleGuidString, "CompartmentMapHasMelCollectionExpression.CompartmentMap")>
        Public Property CompartmentMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap
            Get
                Return CType(Me.GetRolePlayer(CompartmentMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
                Me.SetRolePlayer(CompartmentMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CompartmentMapHasMelCollectionExpression's Generated Constructor Code"
    Partial Public Class CompartmentMapHasMelCollectionExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentMapHasMelCollectionExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentMapHasMelCollectionExpression
            Return CreateCompartmentMapHasMelCollectionExpression(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentMapHasMelCollectionExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentMapHasMelCollectionExpression
            Return CreateAndInitializeCompartmentMapHasMelCollectionExpression(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentMapHasMelCollectionExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentMapHasMelCollectionExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentMapHasMelCollectionExpression), rolePlayers), CompartmentMapHasMelCollectionExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentMapHasMelCollectionExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentMapHasMelCollectionExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentMapHasMelCollectionExpression), rolePlayers, assignments), CompartmentMapHasMelCollectionExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentMapHasMelCollectionExpression"
    ''' <summary>
    ''' CompartmentMapHasMelCollectionExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression))>
    Public NotInheritable Class CompartmentMapHasMelCollectionExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasMelCollectionExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentMapHasMelCollectionExpressionElementFactoryCreator
            Get
                Return New CompartmentMapHasMelCollectionExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.MetaRelationshipGuidString, "CompartmentMapHasValueExpression")>
    Partial Public Class CompartmentMapHasValueExpression
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CompartmentMapHasValueExpression's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "e3e55c1a-7cdf-45db-8470-9e163b559db0"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CompartmentMapHasValueExpression.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CompartmentMapHasValueExpression.MetaClassGuid
#End Region

#Region "ValueExpression's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValueExpressionMetaRoleGuidString As System.String = "2eef3eeb-df2f-4220-8993-54e1bc1879af"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValueExpressionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.ValueExpressionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.ValueExpressionMetaRoleGuidString, "CompartmentMapHasValueExpression.ValueExpression")>
        Public Property ValueExpression() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression
            Get
                Return CType(Me.GetRolePlayer(ValueExpressionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ValueExpression)
                Me.SetRolePlayer(ValueExpressionMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "CompartmentMap's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentMapMetaRoleGuidString As System.String = "502edc80-7d5e-4ed4-a32c-54302431ab76"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentMapMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.CompartmentMapMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression.CompartmentMapMetaRoleGuidString, "CompartmentMapHasValueExpression.CompartmentMap")>
        Public Property CompartmentMap() As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap
            Get
                Return CType(Me.GetRolePlayer(CompartmentMapMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMap)
                Me.SetRolePlayer(CompartmentMapMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CompartmentMapHasValueExpression's Generated Constructor Code"
    Partial Public Class CompartmentMapHasValueExpression
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentMapHasValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentMapHasValueExpression
            Return CreateCompartmentMapHasValueExpression(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentMapHasValueExpression(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentMapHasValueExpression
            Return CreateAndInitializeCompartmentMapHasValueExpression(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentMapHasValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentMapHasValueExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentMapHasValueExpression), rolePlayers), CompartmentMapHasValueExpression)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentMapHasValueExpression(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentMapHasValueExpression
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentMapHasValueExpression), rolePlayers, assignments), CompartmentMapHasValueExpression)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentMapHasValueExpression"
    ''' <summary>
    ''' CompartmentMapHasValueExpression Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression))>
    Public NotInheritable Class CompartmentMapHasValueExpressionElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentMapHasValueExpression(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentMapHasValueExpressionElementFactoryCreator
            Get
                Return New CompartmentMapHasValueExpressionElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.MetaRelationshipGuidString, "CompartmentHasCompartmentFillColor")>
    Partial Public Class CompartmentHasCompartmentFillColor
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CompartmentHasCompartmentFillColor's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "391ac654-3029-473c-8a0f-7b42d3866f21"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CompartmentHasCompartmentFillColor.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CompartmentHasCompartmentFillColor.MetaClassGuid
#End Region

#Region "CompartmentFillColor's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentFillColorMetaRoleGuidString As System.String = "581b38d2-0780-4d3a-9ee4-6dbfe0c1bc51"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentFillColorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentFillColorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentFillColorMetaRoleGuidString, "CompartmentHasCompartmentFillColor.CompartmentFillColor")>
        Public Property CompartmentFillColor() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return CType(Me.GetRolePlayer(CompartmentFillColorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Me.SetRolePlayer(CompartmentFillColorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Compartment's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentMetaRoleGuidString As System.String = "aa58db2e-681a-4e49-a07a-c7f5a5d525a4"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor.CompartmentMetaRoleGuidString, "CompartmentHasCompartmentFillColor.Compartment")>
        Public Property Compartment() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment
            Get
                Return CType(Me.GetRolePlayer(CompartmentMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
                Me.SetRolePlayer(CompartmentMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CompartmentHasCompartmentFillColor's Generated Constructor Code"
    Partial Public Class CompartmentHasCompartmentFillColor
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentHasCompartmentFillColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentHasCompartmentFillColor
            Return CreateCompartmentHasCompartmentFillColor(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentHasCompartmentFillColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentHasCompartmentFillColor
            Return CreateAndInitializeCompartmentHasCompartmentFillColor(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentHasCompartmentFillColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentHasCompartmentFillColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentHasCompartmentFillColor), rolePlayers), CompartmentHasCompartmentFillColor)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentHasCompartmentFillColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentHasCompartmentFillColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentHasCompartmentFillColor), rolePlayers, assignments), CompartmentHasCompartmentFillColor)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentHasCompartmentFillColor"
    ''' <summary>
    ''' CompartmentHasCompartmentFillColor Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor))>
    Public NotInheritable Class CompartmentHasCompartmentFillColorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasCompartmentFillColor(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentHasCompartmentFillColorElementFactoryCreator
            Get
                Return New CompartmentHasCompartmentFillColorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.MetaRelationshipGuidString, "CompartmentHasTitleFillColor")>
    Partial Public Class CompartmentHasTitleFillColor
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "CompartmentHasTitleFillColor's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "a48145af-a5b3-4533-a3d5-49899973f329"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = CompartmentHasTitleFillColor.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = CompartmentHasTitleFillColor.MetaClassGuid
#End Region

#Region "TitleFillColor's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const TitleFillColorMetaRoleGuidString As System.String = "2b7aa7f1-44f0-46ec-8c55-a25382815c7c"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly TitleFillColorMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.TitleFillColorMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.TitleFillColorMetaRoleGuidString, "CompartmentHasTitleFillColor.TitleFillColor")>
        Public Property TitleFillColor() As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails
            Get
                Return CType(Me.GetRolePlayer(TitleFillColorMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.ColorDetails)
                Me.SetRolePlayer(TitleFillColorMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "Compartment's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const CompartmentMetaRoleGuidString As System.String = "dc673cf3-cb6f-4bdf-b73c-57a454475aac"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly CompartmentMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.CompartmentMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <System.ComponentModel.Browsable(False), Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=False, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor.CompartmentMetaRoleGuidString, "CompartmentHasTitleFillColor.Compartment")>
        Public Property Compartment() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment
            Get
                Return CType(Me.GetRolePlayer(CompartmentMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Compartment)
                Me.SetRolePlayer(CompartmentMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "CompartmentHasTitleFillColor's Generated Constructor Code"
    Partial Public Class CompartmentHasTitleFillColor
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentHasTitleFillColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentHasTitleFillColor
            Return CreateCompartmentHasTitleFillColor(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentHasTitleFillColor(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentHasTitleFillColor
            Return CreateAndInitializeCompartmentHasTitleFillColor(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateCompartmentHasTitleFillColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As CompartmentHasTitleFillColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentHasTitleFillColor), rolePlayers), CompartmentHasTitleFillColor)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeCompartmentHasTitleFillColor(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As CompartmentHasTitleFillColor
            Return CType(partition.ElementFactory.CreateElementLink(GetType(CompartmentHasTitleFillColor), rolePlayers, assignments), CompartmentHasTitleFillColor)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for CompartmentHasTitleFillColor"
    ''' <summary>
    ''' CompartmentHasTitleFillColor Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor))>
    Public NotInheritable Class CompartmentHasTitleFillColorElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.CompartmentHasTitleFillColor(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As CompartmentHasTitleFillColorElementFactoryCreator
            Get
                Return New CompartmentHasTitleFillColorElementFactoryCreator()
            End Get
        End Property
    End Class
#End Region

End Namespace
Namespace Microsoft.VisualStudio.Modeling.DesignerDefinition
    ''' <summary>
    ''' 
    ''' </summary>
    <System.CLSCompliant(True), System.Serializable, Microsoft.VisualStudio.Modeling.MetaRelationship("d6d72f16-7925-493b-b393-5b60c29c589d"), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.MetaRelationshipGuidString, "DesignerDefinitionHasValidation")>
    Partial Public Class DesignerDefinitionHasValidation
        Inherits Microsoft.VisualStudio.Modeling.ElementLink
#Region "DesignerDefinitionHasValidation's Generated MetaRelationship Code"
        ''' <summary>
        ''' MetaClass Guid String
        ''' </summary>
        Public Shadows Const MetaClassGuidString As System.String = "67e47251-9806-4365-b894-5113ede07111"
        ''' <summary>
        ''' MetaClass Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaClassGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.MetaClassGuidString)
        ''' <summary>
        ''' MetaRelationship Guid String
        ''' </summary>
        Public Shadows Const MetaRelationshipGuidString As System.String = DesignerDefinitionHasValidation.MetaClassGuidString
        ''' <summary>
        ''' MetaRelationship Guid
        ''' </summary>
        Public Shared Shadows ReadOnly MetaRelationshipGuid As System.Guid = DesignerDefinitionHasValidation.MetaClassGuid
#End Region

#Region "Validation's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const ValidationMetaRoleGuidString As System.String = "34ef062b-5d51-44df-9b70-bf339d732d5e"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly ValidationMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=True, IsOrdered:=True, IsAggregate:=False, IsNavigableFrom:=False, PropagateRemove:=True, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.ValidationMetaRoleGuidString, "DesignerDefinitionHasValidation.Validation")>
        Public Property Validation() As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation
            Get
                Return CType(Me.GetRolePlayer(ValidationMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.Validation)
                Me.SetRolePlayer(ValidationMetaRoleGuid, value)
            End Set
        End Property

#End Region
#Region "DesignerDefinition's Generated MetaRole Code"
        ''' <summary>
        ''' MetaRole Guid String
        ''' </summary>
        Public Const DesignerDefinitionMetaRoleGuidString As System.String = "5281fe10-8f3c-48e8-8f50-3516b060892b"
        ''' <summary>
        ''' MetaRole Guid
        ''' </summary>
        Public Shared ReadOnly DesignerDefinitionMetaRoleGuid As New System.Guid(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.DesignerDefinitionMetaRoleGuidString)
        ''' <summary>
        ''' 
        ''' </summary>
        <Microsoft.VisualStudio.Modeling.MetaRole(IsOptional:=False, IsOrdered:=True, IsAggregate:=True, IsNavigableFrom:=True, PropagateRemove:=False, PropagateCopy:=False, Cardinality:=Microsoft.VisualStudio.Modeling.Cardinality.One), Microsoft.VisualStudio.Modeling.MetaObject(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation.DesignerDefinitionMetaRoleGuidString, "DesignerDefinitionHasValidation.DesignerDefinition")>
        Public Property DesignerDefinition() As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition
            Get
                Return CType(Me.GetRolePlayer(DesignerDefinitionMetaRoleGuid), Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
            End Get
            Set(ByVal value As Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinition)
                Me.SetRolePlayer(DesignerDefinitionMetaRoleGuid, value)
            End Set
        End Property

#End Region
    End Class
#Region "DesignerDefinitionHasValidation's Generated Constructor Code"
    Partial Public Class DesignerDefinitionHasValidation
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(store.DefaultPartition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasValidation(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasValidation
            Return CreateDesignerDefinitionHasValidation(store.DefaultPartition, rolePlayers)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasValidation(ByVal store As Microsoft.VisualStudio.Modeling.Store, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasValidation
            Return CreateAndInitializeDesignerDefinitionHasValidation(store.DefaultPartition, rolePlayers, assignments)
        End Function
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag)
            MyBase.New(partition, bag)
        End Sub
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateDesignerDefinitionHasValidation(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment) As DesignerDefinitionHasValidation
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasValidation), rolePlayers), DesignerDefinitionHasValidation)
        End Function
        ''' <summary>
        ''' Class Factory
        ''' </summary>
        Public Shared Function CreateAndInitializeDesignerDefinitionHasValidation(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal rolePlayers() As Microsoft.VisualStudio.Modeling.RoleAssignment, ByVal assignments() As Microsoft.VisualStudio.Modeling.AttributeAssignment) As DesignerDefinitionHasValidation
            Return CType(partition.ElementFactory.CreateElementLink(GetType(DesignerDefinitionHasValidation), rolePlayers, assignments), DesignerDefinitionHasValidation)
        End Function
    End Class
#End Region
#Region "Class Factory Creator for DesignerDefinitionHasValidation"
    ''' <summary>
    ''' DesignerDefinitionHasValidation Class Factory Creator
    ''' </summary>
    <Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(GetType(Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation))>
    Public NotInheritable Class DesignerDefinitionHasValidationElementFactoryCreator
        Inherits Microsoft.VisualStudio.Modeling.ElementFactoryCreator
        ''' <summary>
        ''' Constructor
        ''' </summary>
        Public Sub New()
        End Sub
        ''' <summary>
        ''' Class Factory Create Method
        ''' </summary>
        Public Overrides Function Create(ByVal partition As Microsoft.VisualStudio.Modeling.Partition, ByVal bag As Microsoft.VisualStudio.Modeling.ModelDataBag) As Microsoft.VisualStudio.Modeling.ModelElement
            Return New Microsoft.VisualStudio.Modeling.DesignerDefinition.DesignerDefinitionHasValidation(partition, bag)
        End Function
        ''' <summary>
        ''' Create an instance of the creator object
        ''' </summary>
        Public Shared ReadOnly Property Instance() As DesignerDefinitionHasValidationElementFactoryCreator
			Get
				Return New DesignerDefinitionHasValidationElementFactoryCreator()
			End Get
		End Property
	End Class
	#End Region

End Namespace

