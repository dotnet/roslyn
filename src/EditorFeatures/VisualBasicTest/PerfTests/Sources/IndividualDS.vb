'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.209
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class IndividualDS
    Inherits DataSet
    
    Private tableindividual As individualDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("individual")) Is Nothing) Then
                Me.Tables.Add(New individualDataTable(ds.Tables("individual")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property individual As individualDataTable
        Get
            Return Me.tableindividual
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As IndividualDS = CType(MyBase.Clone,IndividualDS)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("individual")) Is Nothing) Then
            Me.Tables.Add(New individualDataTable(ds.Tables("individual")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableindividual = CType(Me.Tables("individual"),individualDataTable)
        If (Not (Me.tableindividual) Is Nothing) Then
            Me.tableindividual.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "IndividualDS"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/IndividualDS.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-AU")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableindividual = New individualDataTable
        Me.Tables.Add(Me.tableindividual)
    End Sub
    
    Private Function ShouldSerializeindividual() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub individualRowChangeEventHandler(ByVal sender As Object, ByVal e As individualRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class individualDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnindividual_id As DataColumn
        
        Private columndate_of_birth As DataColumn
        
        Private columndate_deceased As DataColumn
        
        Private columntitle As DataColumn
        
        Private columnfirst_name As DataColumn
        
        Private columnmiddle_name As DataColumn
        
        Private columnlast_name As DataColumn
        
        Private columnsex As DataColumn
        
        Private columnrow_timestamp As DataColumn
        
        Friend Sub New()
            MyBase.New("individual")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property individual_idColumn As DataColumn
            Get
                Return Me.columnindividual_id
            End Get
        End Property
        
        Friend ReadOnly Property date_of_birthColumn As DataColumn
            Get
                Return Me.columndate_of_birth
            End Get
        End Property
        
        Friend ReadOnly Property date_deceasedColumn As DataColumn
            Get
                Return Me.columndate_deceased
            End Get
        End Property
        
        Friend ReadOnly Property titleColumn As DataColumn
            Get
                Return Me.columntitle
            End Get
        End Property
        
        Friend ReadOnly Property first_nameColumn As DataColumn
            Get
                Return Me.columnfirst_name
            End Get
        End Property
        
        Friend ReadOnly Property middle_nameColumn As DataColumn
            Get
                Return Me.columnmiddle_name
            End Get
        End Property
        
        Friend ReadOnly Property last_nameColumn As DataColumn
            Get
                Return Me.columnlast_name
            End Get
        End Property
        
        Friend ReadOnly Property sexColumn As DataColumn
            Get
                Return Me.columnsex
            End Get
        End Property
        
        Friend ReadOnly Property row_timestampColumn As DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As individualRow
            Get
                Return CType(Me.Rows(index),individualRow)
            End Get
        End Property
        
        Public Event individualRowChanged As individualRowChangeEventHandler
        
        Public Event individualRowChanging As individualRowChangeEventHandler
        
        Public Event individualRowDeleted As individualRowChangeEventHandler
        
        Public Event individualRowDeleting As individualRowChangeEventHandler
        
        Public Overloads Sub AddindividualRow(ByVal row As individualRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddindividualRow(ByVal individual_id As System.Guid, ByVal date_of_birth As Date, ByVal date_deceased As Date, ByVal title As String, ByVal first_name As String, ByVal middle_name As String, ByVal last_name As String, ByVal sex As String, ByVal row_timestamp() As Byte) As individualRow
            Dim rowindividualRow As individualRow = CType(Me.NewRow,individualRow)
            rowindividualRow.ItemArray = New Object() {individual_id, date_of_birth, date_deceased, title, first_name, middle_name, last_name, sex, row_timestamp}
            Me.Rows.Add(rowindividualRow)
            Return rowindividualRow
        End Function
        
        Public Function FindByindividual_id(ByVal individual_id As System.Guid) As individualRow
            Return CType(Me.Rows.Find(New Object() {individual_id}),individualRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As individualDataTable = CType(MyBase.Clone,individualDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New individualDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnindividual_id = Me.Columns("individual_id")
            Me.columndate_of_birth = Me.Columns("date_of_birth")
            Me.columndate_deceased = Me.Columns("date_deceased")
            Me.columntitle = Me.Columns("title")
            Me.columnfirst_name = Me.Columns("first_name")
            Me.columnmiddle_name = Me.Columns("middle_name")
            Me.columnlast_name = Me.Columns("last_name")
            Me.columnsex = Me.Columns("sex")
            Me.columnrow_timestamp = Me.Columns("row_timestamp")
        End Sub
        
        Private Sub InitClass()
            Me.columnindividual_id = New DataColumn("individual_id", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnindividual_id)
            Me.columndate_of_birth = New DataColumn("date_of_birth", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_of_birth)
            Me.columndate_deceased = New DataColumn("date_deceased", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_deceased)
            Me.columntitle = New DataColumn("title", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntitle)
            Me.columnfirst_name = New DataColumn("first_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfirst_name)
            Me.columnmiddle_name = New DataColumn("middle_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmiddle_name)
            Me.columnlast_name = New DataColumn("last_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlast_name)
            Me.columnsex = New DataColumn("sex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsex)
            Me.columnrow_timestamp = New DataColumn("row_timestamp", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnindividual_id}, true))
            Me.columnindividual_id.AllowDBNull = false
            Me.columnindividual_id.Unique = true
            Me.columnfirst_name.AllowDBNull = false
            Me.columnlast_name.AllowDBNull = false
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        Public Function NewindividualRow() As individualRow
            Return CType(Me.NewRow,individualRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New individualRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(individualRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.individualRowChangedEvent) Is Nothing) Then
                RaiseEvent individualRowChanged(Me, New individualRowChangeEvent(CType(e.Row,individualRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.individualRowChangingEvent) Is Nothing) Then
                RaiseEvent individualRowChanging(Me, New individualRowChangeEvent(CType(e.Row,individualRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.individualRowDeletedEvent) Is Nothing) Then
                RaiseEvent individualRowDeleted(Me, New individualRowChangeEvent(CType(e.Row,individualRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.individualRowDeletingEvent) Is Nothing) Then
                RaiseEvent individualRowDeleting(Me, New individualRowChangeEvent(CType(e.Row,individualRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveindividualRow(ByVal row As individualRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class individualRow
        Inherits DataRow
        
        Private tableindividual As individualDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableindividual = CType(Me.Table,individualDataTable)
        End Sub
        
        Public Property individual_id As System.Guid
            Get
                Return CType(Me(Me.tableindividual.individual_idColumn),System.Guid)
            End Get
            Set
                Me(Me.tableindividual.individual_idColumn) = value
            End Set
        End Property
        
        Public Property date_of_birth As Date
            Get
                Try 
                    Return CType(Me(Me.tableindividual.date_of_birthColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableindividual.date_of_birthColumn) = value
            End Set
        End Property
        
        Public Property date_deceased As Date
            Get
                Try 
                    Return CType(Me(Me.tableindividual.date_deceasedColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableindividual.date_deceasedColumn) = value
            End Set
        End Property
        
        Public Property title As String
            Get
                Try 
                    Return CType(Me(Me.tableindividual.titleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableindividual.titleColumn) = value
            End Set
        End Property
        
        Public Property first_name As String
            Get
                Return CType(Me(Me.tableindividual.first_nameColumn),String)
            End Get
            Set
                Me(Me.tableindividual.first_nameColumn) = value
            End Set
        End Property
        
        Public Property middle_name As String
            Get
                Try 
                    Return CType(Me(Me.tableindividual.middle_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableindividual.middle_nameColumn) = value
            End Set
        End Property
        
        Public Property last_name As String
            Get
                Return CType(Me(Me.tableindividual.last_nameColumn),String)
            End Get
            Set
                Me(Me.tableindividual.last_nameColumn) = value
            End Set
        End Property
        
        Public Property sex As String
            Get
                Try 
                    Return CType(Me(Me.tableindividual.sexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableindividual.sexColumn) = value
            End Set
        End Property
        
        Public Property row_timestamp As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableindividual.row_timestampColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableindividual.row_timestampColumn) = value
            End Set
        End Property
        
        Public Function Isdate_of_birthNull() As Boolean
            Return Me.IsNull(Me.tableindividual.date_of_birthColumn)
        End Function
        
        Public Sub Setdate_of_birthNull()
            Me(Me.tableindividual.date_of_birthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_deceasedNull() As Boolean
            Return Me.IsNull(Me.tableindividual.date_deceasedColumn)
        End Function
        
        Public Sub Setdate_deceasedNull()
            Me(Me.tableindividual.date_deceasedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstitleNull() As Boolean
            Return Me.IsNull(Me.tableindividual.titleColumn)
        End Function
        
        Public Sub SettitleNull()
            Me(Me.tableindividual.titleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismiddle_nameNull() As Boolean
            Return Me.IsNull(Me.tableindividual.middle_nameColumn)
        End Function
        
        Public Sub Setmiddle_nameNull()
            Me(Me.tableindividual.middle_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssexNull() As Boolean
            Return Me.IsNull(Me.tableindividual.sexColumn)
        End Function
        
        Public Sub SetsexNull()
            Me(Me.tableindividual.sexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tableindividual.row_timestampColumn)
        End Function
        
        Public Sub Setrow_timestampNull()
            Me(Me.tableindividual.row_timestampColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class individualRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As individualRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As individualRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As individualRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
        Public Sub Goo()
            For i0 As Integer = 1 To 100
                Console.WriteLine(i0)
            Next
            For i1 As Integer = 1 To 100
                Console.WriteLine(i1)
            Next
            For i2 As Integer = 1 To 100
                Console.WriteLine(i2)
            Next
            For i3 As Integer = 1 To 100
                Console.WriteLine(i3)
            Next
            For i4 As Integer = 1 To 100
                Console.WriteLine(i4)
            Next
            For i5 As Integer = 1 To 100
                Console.WriteLine(i5)
            Next
            For i6 As Integer = 1 To 100
                Console.WriteLine(i6)
            Next
            For i7 As Integer = 1 To 100
                Console.WriteLine(i7)
            Next
            For i8 As Integer = 1 To 100
                Console.WriteLine(i8)
            Next
            For i9 As Integer = 1 To 100
                Console.WriteLine(i9)
            Next

        End Sub
    End Class
End Class
