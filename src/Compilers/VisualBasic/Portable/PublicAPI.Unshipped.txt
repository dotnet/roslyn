*REMOVED*Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(Of TNode)(node As TNode, useDefaultCasing As Boolean, indentation As String = "    ", elasticTrivia As Boolean = False) -> TNode
*REMOVED*Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(token As Microsoft.CodeAnalysis.SyntaxToken, indentation As String = "    ", elasticTrivia As Boolean = False) -> Microsoft.CodeAnalysis.SyntaxToken
*REMOVED*Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.New(isInteractive As Boolean = False) -> Void
*REMOVED*Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.New(outputKind As Microsoft.CodeAnalysis.OutputKind, moduleName As String = Nothing, mainTypeName As String = Nothing, scriptClassName As String = "Script", globalImports As System.Collections.Generic.IEnumerable(Of Microsoft.CodeAnalysis.VisualBasic.GlobalImport) = Nothing, rootNamespace As String = Nothing, optionStrict As Microsoft.CodeAnalysis.VisualBasic.OptionStrict = Microsoft.CodeAnalysis.VisualBasic.OptionStrict.Off, optionInfer As Boolean = True, optionExplicit As Boolean = True, optionCompareText As Boolean = False, parseOptions As Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions = Nothing, embedVbCoreRuntime As Boolean = False, optimizationLevel As Microsoft.CodeAnalysis.OptimizationLevel = Microsoft.CodeAnalysis.OptimizationLevel.Debug, checkOverflow As Boolean = True, cryptoKeyContainer As String = Nothing, cryptoKeyFile As String = Nothing, cryptoPublicKey As System.Collections.Immutable.ImmutableArray(Of Byte) = Nothing, delaySign As Boolean? = Nothing, platform As Microsoft.CodeAnalysis.Platform = Microsoft.CodeAnalysis.Platform.AnyCpu, generalDiagnosticOption As Microsoft.CodeAnalysis.ReportDiagnostic = Microsoft.CodeAnalysis.ReportDiagnostic.Default, specificDiagnosticOptions As System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Microsoft.CodeAnalysis.ReportDiagnostic)) = Nothing, concurrentBuild As Boolean = True, xmlReferenceResolver As Microsoft.CodeAnalysis.XmlReferenceResolver = Nothing, sourceReferenceResolver As Microsoft.CodeAnalysis.SourceReferenceResolver = Nothing, metadataReferenceResolver As Microsoft.CodeAnalysis.MetadataReferenceResolver = Nothing, assemblyIdentityComparer As Microsoft.CodeAnalysis.AssemblyIdentityComparer = Nothing, strongNameProvider As Microsoft.CodeAnalysis.StrongNameProvider = Nothing) -> Void
Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax
Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax.File() -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax.HashToken() -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax.LoadKeyword() -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax.Update(hashToken As Microsoft.CodeAnalysis.SyntaxToken, loadKeyword As Microsoft.CodeAnalysis.SyntaxToken, file As Microsoft.CodeAnalysis.SyntaxToken) -> Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax
Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax.WithFile(file As Microsoft.CodeAnalysis.SyntaxToken) -> Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax
Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax.WithHashToken(hashToken As Microsoft.CodeAnalysis.SyntaxToken) -> Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax
Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax.WithLoadKeyword(loadKeyword As Microsoft.CodeAnalysis.SyntaxToken) -> Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax
Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(Of TNode)(node As TNode, useDefaultCasing As Boolean, indentation As String = "    ", eol As String = vbCrLf, elasticTrivia As Boolean = False) -> TNode
Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(Of TNode)(node As TNode, useDefaultCasing As Boolean, indentation As String, elasticTrivia As Boolean) -> TNode
Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(token As Microsoft.CodeAnalysis.SyntaxToken, indentation As String = "    ", eol As String = vbCrLf, elasticTrivia As Boolean = False, useDefaultCasing As Boolean = False) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(token As Microsoft.CodeAnalysis.SyntaxToken, indentation As String, elasticTrivia As Boolean) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(trivia As Microsoft.CodeAnalysis.SyntaxTriviaList, indentation As String = "    ", eol As String = vbCrLf, elasticTrivia As Boolean = False, useDefaultCasing As Boolean = False) -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LoadDirectiveTrivia = 789 -> Microsoft.CodeAnalysis.VisualBasic.SyntaxKind
Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LoadDirectiveTriviaSyntax = 790 -> Microsoft.CodeAnalysis.VisualBasic.SyntaxKind
Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LoadKeyword = 788 -> Microsoft.CodeAnalysis.VisualBasic.SyntaxKind
Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.New(outputKind As Microsoft.CodeAnalysis.OutputKind, moduleName As String = Nothing, mainTypeName As String = Nothing, scriptClassName As String = "Script", globalImports As System.Collections.Generic.IEnumerable(Of Microsoft.CodeAnalysis.VisualBasic.GlobalImport) = Nothing, rootNamespace As String = Nothing, optionStrict As Microsoft.CodeAnalysis.VisualBasic.OptionStrict = Microsoft.CodeAnalysis.VisualBasic.OptionStrict.Off, optionInfer As Boolean = True, optionExplicit As Boolean = True, optionCompareText As Boolean = False, parseOptions As Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions = Nothing, embedVbCoreRuntime As Boolean = False, optimizationLevel As Microsoft.CodeAnalysis.OptimizationLevel = Microsoft.CodeAnalysis.OptimizationLevel.Debug, checkOverflow As Boolean = True, cryptoKeyContainer As String = Nothing, cryptoKeyFile As String = Nothing, cryptoPublicKey As System.Collections.Immutable.ImmutableArray(Of Byte) = Nothing, delaySign As Boolean? = Nothing, platform As Microsoft.CodeAnalysis.Platform = Microsoft.CodeAnalysis.Platform.AnyCpu, generalDiagnosticOption As Microsoft.CodeAnalysis.ReportDiagnostic = Microsoft.CodeAnalysis.ReportDiagnostic.Default, specificDiagnosticOptions As System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Microsoft.CodeAnalysis.ReportDiagnostic)) = Nothing, concurrentBuild As Boolean = True, deterministic As Boolean = False, xmlReferenceResolver As Microsoft.CodeAnalysis.XmlReferenceResolver = Nothing, sourceReferenceResolver As Microsoft.CodeAnalysis.SourceReferenceResolver = Nothing, metadataReferenceResolver As Microsoft.CodeAnalysis.MetadataReferenceResolver = Nothing, assemblyIdentityComparer As Microsoft.CodeAnalysis.AssemblyIdentityComparer = Nothing, strongNameProvider As Microsoft.CodeAnalysis.StrongNameProvider = Nothing, publicSign As Boolean = False, reportSuppressedDiagnostics As Boolean = False) -> Void
Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.New(outputKind As Microsoft.CodeAnalysis.OutputKind, moduleName As String, mainTypeName As String, scriptClassName As String, globalImports As System.Collections.Generic.IEnumerable(Of Microsoft.CodeAnalysis.VisualBasic.GlobalImport), rootNamespace As String, optionStrict As Microsoft.CodeAnalysis.VisualBasic.OptionStrict, optionInfer As Boolean, optionExplicit As Boolean, optionCompareText As Boolean, parseOptions As Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions, embedVbCoreRuntime As Boolean, optimizationLevel As Microsoft.CodeAnalysis.OptimizationLevel, checkOverflow As Boolean, cryptoKeyContainer As String, cryptoKeyFile As String, cryptoPublicKey As System.Collections.Immutable.ImmutableArray(Of Byte), delaySign As Boolean?, platform As Microsoft.CodeAnalysis.Platform, generalDiagnosticOption As Microsoft.CodeAnalysis.ReportDiagnostic, specificDiagnosticOptions As System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Microsoft.CodeAnalysis.ReportDiagnostic)), concurrentBuild As Boolean, deterministic As Boolean, xmlReferenceResolver As Microsoft.CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver As Microsoft.CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver As Microsoft.CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer As Microsoft.CodeAnalysis.AssemblyIdentityComparer, strongNameProvider As Microsoft.CodeAnalysis.StrongNameProvider) -> Void
Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.New(outputKind As Microsoft.CodeAnalysis.OutputKind, moduleName As String, mainTypeName As String, scriptClassName As String, globalImports As System.Collections.Generic.IEnumerable(Of Microsoft.CodeAnalysis.VisualBasic.GlobalImport), rootNamespace As String, optionStrict As Microsoft.CodeAnalysis.VisualBasic.OptionStrict, optionInfer As Boolean, optionExplicit As Boolean, optionCompareText As Boolean, parseOptions As Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions, embedVbCoreRuntime As Boolean, optimizationLevel As Microsoft.CodeAnalysis.OptimizationLevel, checkOverflow As Boolean, cryptoKeyContainer As String, cryptoKeyFile As String, cryptoPublicKey As System.Collections.Immutable.ImmutableArray(Of Byte), delaySign As Boolean?, platform As Microsoft.CodeAnalysis.Platform, generalDiagnosticOption As Microsoft.CodeAnalysis.ReportDiagnostic, specificDiagnosticOptions As System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Microsoft.CodeAnalysis.ReportDiagnostic)), concurrentBuild As Boolean, xmlReferenceResolver As Microsoft.CodeAnalysis.XmlReferenceResolver, sourceReferenceResolver As Microsoft.CodeAnalysis.SourceReferenceResolver, metadataReferenceResolver As Microsoft.CodeAnalysis.MetadataReferenceResolver, assemblyIdentityComparer As Microsoft.CodeAnalysis.AssemblyIdentityComparer, strongNameProvider As Microsoft.CodeAnalysis.StrongNameProvider) -> Void
Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.New(outputKind As Microsoft.CodeAnalysis.OutputKind, reportSuppressedDiagnostics As Boolean, moduleName As String = Nothing, mainTypeName As String = Nothing, scriptClassName As String = "Script", globalImports As System.Collections.Generic.IEnumerable(Of Microsoft.CodeAnalysis.VisualBasic.GlobalImport) = Nothing, rootNamespace As String = Nothing, optionStrict As Microsoft.CodeAnalysis.VisualBasic.OptionStrict = Microsoft.CodeAnalysis.VisualBasic.OptionStrict.Off, optionInfer As Boolean = True, optionExplicit As Boolean = True, optionCompareText As Boolean = False, parseOptions As Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions = Nothing, embedVbCoreRuntime As Boolean = False, optimizationLevel As Microsoft.CodeAnalysis.OptimizationLevel = Microsoft.CodeAnalysis.OptimizationLevel.Debug, checkOverflow As Boolean = True, cryptoKeyContainer As String = Nothing, cryptoKeyFile As String = Nothing, cryptoPublicKey As System.Collections.Immutable.ImmutableArray(Of Byte) = Nothing, delaySign As Boolean? = Nothing, platform As Microsoft.CodeAnalysis.Platform = Microsoft.CodeAnalysis.Platform.AnyCpu, generalDiagnosticOption As Microsoft.CodeAnalysis.ReportDiagnostic = Microsoft.CodeAnalysis.ReportDiagnostic.Default, specificDiagnosticOptions As System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Microsoft.CodeAnalysis.ReportDiagnostic)) = Nothing, concurrentBuild As Boolean = True, deterministic As Boolean = False, xmlReferenceResolver As Microsoft.CodeAnalysis.XmlReferenceResolver = Nothing, sourceReferenceResolver As Microsoft.CodeAnalysis.SourceReferenceResolver = Nothing, metadataReferenceResolver As Microsoft.CodeAnalysis.MetadataReferenceResolver = Nothing, assemblyIdentityComparer As Microsoft.CodeAnalysis.AssemblyIdentityComparer = Nothing, strongNameProvider As Microsoft.CodeAnalysis.StrongNameProvider = Nothing) -> Void
Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithDeterministic(deterministic As Boolean) -> Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions
Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithPublicSign(value As Boolean) -> Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions
Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithReportSuppressedDiagnostics(value As Boolean) -> Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions
Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions.WithKind(kind As Microsoft.CodeAnalysis.SourceCodeKind) -> Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions
Overridable Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor(Of TResult).VisitLoadDirectiveTrivia(node As Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax) -> TResult
Overridable Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitLoadDirectiveTrivia(node As Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax) -> Void
Overrides Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax.Accept(Of TResult)(visitor As Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor(Of TResult)) -> TResult
Overrides Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax.Accept(visitor As Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor) -> Void
Overrides Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions.CommonWithKind(kind As Microsoft.CodeAnalysis.SourceCodeKind) -> Microsoft.CodeAnalysis.ParseOptions
Overrides Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitLoadDirectiveTrivia(node As Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax) -> Microsoft.CodeAnalysis.SyntaxNode
Shared Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IsCompleteSubmission(tree As Microsoft.CodeAnalysis.SyntaxTree) -> Boolean
Shared Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoadDirectiveTrivia() -> Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax
Shared Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoadDirectiveTrivia(hashToken As Microsoft.CodeAnalysis.SyntaxToken, loadKeyword As Microsoft.CodeAnalysis.SyntaxToken, file As Microsoft.CodeAnalysis.SyntaxToken) -> Microsoft.CodeAnalysis.VisualBasic.Syntax.LoadDirectiveTriviaSyntax
Shared Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CreateScriptCompilation(assemblyName As String, syntaxTree As Microsoft.CodeAnalysis.SyntaxTree = Nothing, references As System.Collections.Generic.IEnumerable(Of Microsoft.CodeAnalysis.MetadataReference) = Nothing, options As Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions = Nothing, previousScriptCompilation As Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation = Nothing, returnType As System.Type = Nothing, globalsType As System.Type = Nothing) -> Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation