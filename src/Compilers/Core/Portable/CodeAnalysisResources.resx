<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OutputKindNotSupported" xml:space="preserve">
    <value>Output kind not supported.</value>
  </data>
  <data name="PathReturnedByResolveMetadataFileMustBeAbsolute" xml:space="preserve">
    <value>Path returned by {0}.ResolveMetadataFile must be absolute: '{1}'</value>
  </data>
  <data name="AssemblyMustHaveAtLeastOneModule" xml:space="preserve">
    <value>Assembly must have at least one module.</value>
  </data>
  <data name="ModuleCopyCannotBeUsedToCreateAssemblyMetadata" xml:space="preserve">
    <value>Module copy can't be used to create an assembly metadata.</value>
  </data>
  <data name="Unresolved" xml:space="preserve">
    <value>Unresolved: </value>
  </data>
  <data name="Assembly" xml:space="preserve">
    <value>assembly</value>
  </data>
  <data name="Class1" xml:space="preserve">
    <value>class</value>
  </data>
  <data name="Constructor" xml:space="preserve">
    <value>constructor</value>
  </data>
  <data name="Delegate1" xml:space="preserve">
    <value>delegate</value>
  </data>
  <data name="Enum1" xml:space="preserve">
    <value>enum</value>
  </data>
  <data name="Event1" xml:space="preserve">
    <value>event</value>
  </data>
  <data name="Field" xml:space="preserve">
    <value>field</value>
  </data>
  <data name="TypeParameter" xml:space="preserve">
    <value>type parameter</value>
  </data>
  <data name="Interface1" xml:space="preserve">
    <value>interface</value>
  </data>
  <data name="Method" xml:space="preserve">
    <value>method</value>
  </data>
  <data name="Module" xml:space="preserve">
    <value>module</value>
  </data>
  <data name="Parameter" xml:space="preserve">
    <value>parameter</value>
  </data>
  <data name="Property" xml:space="preserve">
    <value>property, indexer</value>
  </data>
  <data name="Return1" xml:space="preserve">
    <value>return</value>
  </data>
  <data name="Struct1" xml:space="preserve">
    <value>struct</value>
  </data>
  <data name="CannotCreateReferenceToSubmission" xml:space="preserve">
    <value>Can't create a reference to a submission.</value>
  </data>
  <data name="CannotCreateReferenceToModule" xml:space="preserve">
    <value>Can't create a reference to a module.</value>
  </data>
  <data name="InMemoryAssembly" xml:space="preserve">
    <value>&lt;in-memory assembly&gt;</value>
  </data>
  <data name="InMemoryModule" xml:space="preserve">
    <value>&lt;in-memory module&gt;</value>
  </data>
  <data name="SizeHasToBePositive" xml:space="preserve">
    <value>Size has to be positive.</value>
  </data>
  <data name="AssemblyFileNotFound" xml:space="preserve">
    <value>Assembly file not found</value>
  </data>
  <data name="CannotEmbedInteropTypesFromModule" xml:space="preserve">
    <value>Can't embed interop types from module.</value>
  </data>
  <data name="CannotAliasModule" xml:space="preserve">
    <value>Can't alias a module.</value>
  </data>
  <data name="InvalidAlias" xml:space="preserve">
    <value>Invalid alias.</value>
  </data>
  <data name="GetMetadataMustReturnInstance" xml:space="preserve">
    <value>{0}.GetMetadata() must return an instance of {1}.</value>
  </data>
  <data name="Value_too_large_to_be_represented_as_a_30_bit_unsigned_integer" xml:space="preserve">
    <value>Value too large to be represented as a 30 bit unsigned integer.</value>
  </data>
  <data name="Arrays_with_more_than_one_dimension_cannot_be_serialized" xml:space="preserve">
    <value>Arrays with more than one dimension cannot be serialized.</value>
  </data>
  <data name="InvalidAssemblyName" xml:space="preserve">
    <value>Invalid assembly name: '{0}'</value>
  </data>
  <data name="AbsolutePathExpected" xml:space="preserve">
    <value>Absolute path expected.</value>
  </data>
  <data name="EmptyKeyInPathMap" xml:space="preserve">
    <value>A key in the pathMap is empty.</value>
  </data>
  <data name="NullValueInPathMap" xml:space="preserve">
    <value>A value in the pathMap is null.</value>
  </data>
  <data name="CompilationOptionsMustNotHaveErrors" xml:space="preserve">
    <value>Compilation options must not have errors.</value>
  </data>
  <data name="ReturnTypeCannotBeValuePointerbyRefOrOpen" xml:space="preserve">
    <value>Return type can't be a value type, pointer, by-ref or open generic type</value>
  </data>
  <data name="ReturnTypeCannotBeVoidByRefOrOpen" xml:space="preserve">
    <value>Return type can't be void, by-ref or open generic type</value>
  </data>
  <data name="TypeMustBeSameAsHostObjectTypeOfPreviousSubmission" xml:space="preserve">
    <value>Type must be same as host object type of previous submission.</value>
  </data>
  <data name="PreviousSubmissionHasErrors" xml:space="preserve">
    <value>Previous submission has errors.</value>
  </data>
  <data name="InvalidOutputKindForSubmission" xml:space="preserve">
    <value>Invalid output kind for submission. DynamicallyLinkedLibrary expected.</value>
  </data>
  <data name="InvalidCompilationOptions" xml:space="preserve">
    <value>Invalid compilation options -- submission can't be signed.</value>
  </data>
  <data name="ResourceStreamProviderShouldReturnNonNullStream" xml:space="preserve">
    <value>Resource stream provider should return non-null stream.</value>
  </data>
  <data name="ReferenceResolverShouldReturnReadableNonNullStream" xml:space="preserve">
    <value>Reference resolver should return readable non-null stream.</value>
  </data>
  <data name="EmptyOrInvalidResourceName" xml:space="preserve">
    <value>Empty or invalid resource name</value>
  </data>
  <data name="EmptyOrInvalidFileName" xml:space="preserve">
    <value>Empty or invalid file name</value>
  </data>
  <data name="ResourceDataProviderShouldReturnNonNullStream" xml:space="preserve">
    <value>Resource data provider should return non-null stream</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found.</value>
  </data>
  <data name="PathReturnedByResolveStrongNameKeyFileMustBeAbsolute" xml:space="preserve">
    <value>Path returned by {0}.ResolveStrongNameKeyFile must be absolute: '{1}'</value>
  </data>
  <data name="TypeMustBeASubclassOfSyntaxAnnotation" xml:space="preserve">
    <value>type must be a subclass of SyntaxAnnotation.</value>
  </data>
  <data name="InvalidModuleName" xml:space="preserve">
    <value>Invalid module name specified in metadata module '{0}': '{1}'</value>
  </data>
  <data name="FileSizeExceedsMaximumAllowed" xml:space="preserve">
    <value>File size exceeds maximum allowed size of a valid metadata file.</value>
  </data>
  <data name="NameCannotBeNull" xml:space="preserve">
    <value>Name cannot be null.</value>
  </data>
  <data name="NameCannotBeEmpty" xml:space="preserve">
    <value>Name cannot be empty.</value>
  </data>
  <data name="NameCannotStartWithWhitespace" xml:space="preserve">
    <value>Name cannot start with whitespace.</value>
  </data>
  <data name="NameContainsInvalidCharacter" xml:space="preserve">
    <value>Name contains invalid characters.</value>
  </data>
  <data name="SpanDoesNotIncludeStartOfLine" xml:space="preserve">
    <value>The span does not include the start of a line.</value>
  </data>
  <data name="SpanDoesNotIncludeEndOfLine" xml:space="preserve">
    <value>The span does not include the end of a line.</value>
  </data>
  <data name="StartMustNotBeNegative" xml:space="preserve">
    <value>'start' must not be negative</value>
  </data>
  <data name="EndMustNotBeLessThanStart" xml:space="preserve">
    <value>'end' must not be less than 'start'</value>
  </data>
  <data name="InvalidContentType" xml:space="preserve">
    <value>Invalid content type</value>
  </data>
  <data name="ExpectedNonEmptyPublicKey" xml:space="preserve">
    <value>Expected non-empty public key</value>
  </data>
  <data name="InvalidSizeOfPublicKeyToken" xml:space="preserve">
    <value>Invalid size of public key token.</value>
  </data>
  <data name="InvalidCharactersInAssemblyName" xml:space="preserve">
    <value>Invalid characters in assembly name</value>
  </data>
  <data name="InvalidCharactersInAssemblyCultureName" xml:space="preserve">
    <value>Invalid characters in assembly culture name</value>
  </data>
  <data name="StreamMustSupportReadAndSeek" xml:space="preserve">
    <value>Stream must support read and seek operations.</value>
  </data>
  <data name="StreamMustSupportRead" xml:space="preserve">
    <value>Stream must be readable.</value>
  </data>
  <data name="StreamMustSupportWrite" xml:space="preserve">
    <value>Stream must be writable.</value>
  </data>
  <data name="PdbStreamUnexpectedWhenEmbedding" xml:space="preserve">
    <value>PDB stream should not be given when embedding PDB into the PE stream.</value>
  </data>
  <data name="PdbStreamUnexpectedWhenEmittingMetadataOnly" xml:space="preserve">
    <value>PDB stream should not be given when emitting metadata only.</value>
  </data>
  <data name="MetadataPeStreamUnexpectedWhenEmittingMetadataOnly" xml:space="preserve">
    <value>Metadata PE stream should not be given when emitting metadata only.</value>
  </data>
  <data name="IncludingPrivateMembersUnexpectedWhenEmittingToMetadataPeStream" xml:space="preserve">
    <value>Including private members should not be used when emitting to the secondary assembly output.</value>
  </data>
  <data name="MustIncludePrivateMembersUnlessRefAssembly" xml:space="preserve">
    <value>Must include private members unless emitting a ref assembly.</value>
  </data>
  <data name="EmbeddingPdbUnexpectedWhenEmittingMetadata" xml:space="preserve">
    <value>Embedding PDB is not allowed when emitting metadata.</value>
  </data>
  <data name="CannotTargetNetModuleWhenEmittingRefAssembly" xml:space="preserve">
    <value>Cannot target net module when emitting ref assembly.</value>
  </data>
  <data name="InvalidHash" xml:space="preserve">
    <value>Invalid hash.</value>
  </data>
  <data name="UnsupportedHashAlgorithm" xml:space="preserve">
    <value>Unsupported hash algorithm.</value>
  </data>
  <data name="InconsistentLanguageVersions" xml:space="preserve">
    <value>Inconsistent language versions</value>
  </data>
  <data name="CoffResourceInvalidRelocation" xml:space="preserve">
    <value>Win32 resources, assumed to be in COFF object format, have one or more invalid relocation header values.</value>
  </data>
  <data name="CoffResourceInvalidSectionSize" xml:space="preserve">
    <value>Win32 resources, assumed to be in COFF object format, have an invalid section size.</value>
  </data>
  <data name="CoffResourceInvalidSymbol" xml:space="preserve">
    <value>Win32 resources, assumed to be in COFF object format, have one or more invalid symbol values.</value>
  </data>
  <data name="CoffResourceMissingSection" xml:space="preserve">
    <value>Win32 resources, assumed to be in COFF object format, are missing one or both of sections '.rsrc$01' and '.rsrc$02'</value>
  </data>
  <data name="IconStreamUnexpectedFormat" xml:space="preserve">
    <value>Icon stream is not in the expected format.</value>
  </data>
  <data name="InvalidCultureName" xml:space="preserve">
    <value>Invalid culture name: '{0}'</value>
  </data>
  <data name="WinRTIdentityCantBeRetargetable" xml:space="preserve">
    <value>WindowsRuntime identity can't be retargetable</value>
  </data>
  <data name="PEImageNotAvailable" xml:space="preserve">
    <value>PE image not available.</value>
  </data>
  <data name="AssemblySigningNotSupported" xml:space="preserve">
    <value>Assembly signing not supported.</value>
  </data>
  <data name="XmlReferencesNotSupported" xml:space="preserve">
    <value>References to XML documents are not supported.</value>
  </data>
  <data name="FailedToResolveRuleSetName" xml:space="preserve">
    <value>Could not locate the rule set file '{0}'.</value>
  </data>
  <data name="InvalidRuleSetInclude" xml:space="preserve">
    <value>An error occurred while loading the included rule set file {0} - {1}</value>
  </data>
  <data name="CompilerAnalyzerFailure" xml:space="preserve">
    <value>Analyzer Failure</value>
    <comment>{0}: Analyzer name
{1}: Type name
{2}: Localized exception message
{3}: Localized detail message</comment>
  </data>
  <data name="CompilerAnalyzerThrows" xml:space="preserve">
    <value>Analyzer '{0}' threw an exception of type '{1}' with message '{2}'.
{3}</value>
  </data>
  <data name="CompilerAnalyzerThrowsDescription" xml:space="preserve">
    <value>Analyzer '{0}' threw the following exception:
'{1}'.</value>
  </data>
  <data name="AnalyzerDriverFailure" xml:space="preserve">
    <value>Analyzer Driver Failure</value>
  </data>
  <data name="AnalyzerDriverThrows" xml:space="preserve">
    <value>Analyzer driver threw an exception of type '{0}' with message '{1}'.</value>
  </data>
  <data name="AnalyzerDriverThrowsDescription" xml:space="preserve">
    <value>Analyzer driver threw the following exception:
'{0}'.</value>
  </data>
  <data name="PEImageDoesntContainManagedMetadata" xml:space="preserve">
    <value>PE image doesn't contain managed metadata.</value>
  </data>
  <data name="ChangesMustNotOverlap" xml:space="preserve">
    <value>The changes must not overlap.</value>
  </data>
  <data name="DiagnosticIdCantBeNullOrWhitespace" xml:space="preserve">
    <value>A DiagnosticDescriptor must have an Id that is neither null nor an empty string nor a string that only contains white space.</value>
  </data>
  <data name="SuppressionIdCantBeNullOrWhitespace" xml:space="preserve">
    <value>A SuppressionDescriptor must have an Id that is neither null nor an empty string nor a string that only contains white space.</value>
  </data>
  <data name="RuleSetHasDuplicateRules" xml:space="preserve">
    <value>The rule set file has duplicate rules for '{0}' with differing actions '{1}' and '{2}'.</value>
  </data>
  <data name="CantCreateModuleReferenceToAssembly" xml:space="preserve">
    <value>Can't create a module reference to an assembly.</value>
  </data>
  <data name="CantCreateReferenceToDynamicAssembly" xml:space="preserve">
    <value>Can't create a metadata reference to a dynamic assembly.</value>
  </data>
  <data name="CantCreateReferenceToAssemblyWithoutLocation" xml:space="preserve">
    <value>Can't create a metadata reference to an assembly without location.</value>
  </data>
  <data name="ArgumentCannotBeEmpty" xml:space="preserve">
    <value>Argument cannot be empty.</value>
  </data>
  <data name="ArgumentElementCannotBeNull" xml:space="preserve">
    <value>Argument cannot have a null element.</value>
  </data>
  <data name="AsyncAnalyzerActionCannotBeRegistered" xml:space="preserve">
    <value>Analyzer attempted to register an 'async' action, which is not supported.</value>
  </data>
  <data name="UnsupportedDiagnosticReported" xml:space="preserve">
    <value>Reported diagnostic with ID '{0}' is not supported by the analyzer.</value>
  </data>
  <data name="UnsupportedSuppressionReported" xml:space="preserve">
    <value>Reported suppression with ID '{0}' is not supported by the suppressor.</value>
  </data>
  <data name="InvalidDiagnosticSuppressionReported" xml:space="preserve">
    <value>Suppressed diagnostic ID '{0}' does not match suppressable ID '{1}' for the given suppression descriptor.</value>
  </data>
  <data name="NonReportedDiagnosticCannotBeSuppressed" xml:space="preserve">
    <value>Non-reported diagnostic with ID '{0}' cannot be suppressed.</value>
  </data>
  <data name="InvalidDiagnosticIdReported" xml:space="preserve">
    <value>Reported diagnostic has an ID '{0}', which is not a valid identifier.</value>
  </data>
  <data name="InvalidDiagnosticLocationReported" xml:space="preserve">
    <value>Reported diagnostic '{0}' has a source location in file '{1}', which is not part of the compilation being analyzed.</value>
  </data>
  <data name="SupportedDiagnosticsHasNullDescriptor" xml:space="preserve">
    <value>Analyzer '{0}' contains a null descriptor in its 'SupportedDiagnostics'.</value>
  </data>
  <data name="SupportedSuppressionsHasNullDescriptor" xml:space="preserve">
    <value>Analyzer '{0}' contains a null descriptor in its 'SupportedSuppressions'.</value>
  </data>
  <data name="The_type_0_is_not_understood_by_the_serialization_binder" xml:space="preserve">
    <value>The type '{0}' is not understood by the serialization binder.</value>
  </data>
  <data name="Cannot_deserialize_type_0" xml:space="preserve">
    <value>Cannot deserialize type '{0}'.</value>
  </data>
  <data name="Cannot_serialize_type_0" xml:space="preserve">
    <value>Cannot serialize type '{0}'.</value>
  </data>
  <data name="InvalidNodeToTrack" xml:space="preserve">
    <value>Node to track is not a descendant of the root.</value>
  </data>
  <data name="NodeOrTokenOutOfSequence" xml:space="preserve">
    <value>A node or token is out of sequence.</value>
  </data>
  <data name="UnexpectedTypeOfNodeInList" xml:space="preserve">
    <value>A node in the list is not of the expected type.</value>
  </data>
  <data name="MissingListItem" xml:space="preserve">
    <value>The item specified is not the element of a list.</value>
  </data>
  <data name="InvalidPublicKey" xml:space="preserve">
    <value>Invalid public key.</value>
  </data>
  <data name="InvalidPublicKeyToken" xml:space="preserve">
    <value>Invalid public key token.</value>
  </data>
  <data name="InvalidDataAtOffset" xml:space="preserve">
    <value>Invalid data at offset {0}: {1}{2}*{3}{4}</value>
  </data>
  <data name="SymWriterNotDeterministic" xml:space="preserve">
    <value>Windows PDB writer doesn't support deterministic compilation: '{0}'</value>
  </data>
  <data name="SymWriterOlderVersionThanRequired" xml:space="preserve">
    <value>The version of Windows PDB writer is older than required: '{0}'</value>
  </data>
  <data name="SymWriterDoesNotSupportSourceLink" xml:space="preserve">
    <value>Windows PDB writer doesn't support SourceLink feature: '{0}'</value>
  </data>
  <data name="RuleSetBadAttributeValue" xml:space="preserve">
    <value>The attribute {0} has an invalid value of {1}.</value>
  </data>
  <data name="RuleSetMissingAttribute" xml:space="preserve">
    <value>The element {0} is missing an attribute named {1}.</value>
  </data>
  <data name="KeepAliveIsNotAnInteger" xml:space="preserve">
    <value>Argument to '/keepalive' option is not a 32-bit integer.</value>
  </data>
  <data name="KeepAliveIsTooSmall" xml:space="preserve">
    <value>Arguments to '/keepalive' option below -1 are invalid.</value>
  </data>
  <data name="KeepAliveWithoutShared" xml:space="preserve">
    <value>'/keepalive' option is only valid with '/shared' option.</value>
  </data>
  <data name="MismatchedVersion" xml:space="preserve">
    <value>Roslyn compiler server reports different protocol version than build task.</value>
  </data>
  <data name="MissingKeepAlive" xml:space="preserve">
    <value>Missing argument for '/keepalive' option.</value>
  </data>
  <data name="AnalyzerTotalExecutionTime" xml:space="preserve">
    <value>Total analyzer execution time: {0} seconds.</value>
  </data>
  <data name="MultithreadedAnalyzerExecutionNote" xml:space="preserve">
    <value>NOTE: Elapsed time may be less than analyzer execution time because analyzers can run concurrently.</value>
  </data>
  <data name="AnalyzerExecutionTimeColumnHeader" xml:space="preserve">
    <value>Time (s)</value>
  </data>
  <data name="AnalyzerNameColumnHeader" xml:space="preserve">
    <value>Analyzer</value>
  </data>
  <data name="NoAnalyzersFound" xml:space="preserve">
    <value>No analyzers found</value>
  </data>
  <data name="DuplicateAnalyzerInstances" xml:space="preserve">
    <value>Argument contains duplicate analyzer instances.</value>
  </data>
  <data name="UnsupportedAnalyzerInstance" xml:space="preserve">
    <value>Argument contains an analyzer instance that does not belong to the 'Analyzers' for this CompilationWithAnalyzers instance.</value>
  </data>
  <data name="InvalidTree" xml:space="preserve">
    <value>Syntax tree doesn't belong to the underlying 'Compilation'.</value>
  </data>
  <data name="InvalidAdditionalFile" xml:space="preserve">
    <value>Additional file doesn't belong to the underlying 'CompilationWithAnalyzers'.</value>
  </data>
  <data name="ResourceStreamEndedUnexpectedly" xml:space="preserve">
    <value>Resource stream ended at {0} bytes, expected {1} bytes.</value>
  </data>
  <data name="SharedArgumentMissing" xml:space="preserve">
    <value>Value for argument '/shared:' must not be empty</value>
  </data>
  <data name="ExceptionContext" xml:space="preserve">
    <value>Exception occurred with following context:
{0}</value>
  </data>
  <data name="AnonymousTypeMemberAndNamesCountMismatch2" xml:space="preserve">
    <value>{0} and {1} must have the same length.</value>
  </data>
  <data name="AnonymousTypeArgumentCountMismatch2" xml:space="preserve">
    <value>{0} must either be 'default' or have the same length as {1}.</value>
  </data>
  <data name="InconsistentSyntaxTreeFeature" xml:space="preserve">
    <value>Inconsistent syntax tree features</value>
  </data>
  <data name="ReferenceOfTypeIsInvalid1" xml:space="preserve">
    <value>Reference of type '{0}' is not valid for this compilation.</value>
  </data>
  <data name="MetadataRefNotFoundToRemove1" xml:space="preserve">
    <value>MetadataReference '{0}' not found to remove.</value>
  </data>
  <data name="TupleElementNameCountMismatch" xml:space="preserve">
    <value>If tuple element names are specified, the number of element names must match the cardinality of the tuple.</value>
  </data>
  <data name="TupleElementNameEmpty" xml:space="preserve">
    <value>Tuple element name cannot be an empty string.</value>
  </data>
  <data name="TupleElementLocationCountMismatch" xml:space="preserve">
    <value>If tuple element locations are specified, the number of locations must match the cardinality of the tuple.</value>
  </data>
  <data name="TupleElementNullableAnnotationCountMismatch" xml:space="preserve">
    <value>If tuple element nullable annotations are specified, the number of annotations must match the cardinality of the tuple.</value>
  </data>
  <data name="TuplesNeedAtLeastTwoElements" xml:space="preserve">
    <value>Tuples must have at least two elements.</value>
  </data>
  <data name="CompilationReferencesAssembliesWithDifferentAutoGeneratedVersion" xml:space="preserve">
    <value>The compilation references multiple assemblies whose versions only differ in auto-generated build and/or revision numbers.</value>
  </data>
  <data name="TupleUnderlyingTypeMustBeTupleCompatible" xml:space="preserve">
    <value>The underlying type for a tuple must be tuple-compatible.</value>
  </data>
  <data name="UnrecognizedResourceFileFormat" xml:space="preserve">
    <value>Unrecognized resource file format.</value>
  </data>
  <data name="SourceTextCannotBeEmbedded" xml:space="preserve">
    <value>SourceText cannot be embedded. Provide encoding or canBeEmbedded=true at construction.</value>
  </data>
  <data name="StreamIsTooLong" xml:space="preserve">
    <value>Stream is too long.</value>
  </data>
  <data name="EmbeddedTextsRequirePdb" xml:space="preserve">
    <value>Embedded texts are only supported when emitting a PDB.</value>
  </data>
  <data name="TheStreamCannotBeWrittenTo" xml:space="preserve">
    <value>The stream cannot be written to.</value>
  </data>
  <data name="ElementIsExpected" xml:space="preserve">
    <value>element is expected</value>
  </data>
  <data name="SeparatorIsExpected" xml:space="preserve">
    <value>separator is expected</value>
  </data>
  <data name="TheStreamCannotBeReadFrom" xml:space="preserve">
    <value>The stream cannot be read from.</value>
  </data>
  <data name="Deserialization_reader_for_0_read_incorrect_number_of_values" xml:space="preserve">
    <value>Deserialization reader for '{0}' read incorrect number of values.</value>
  </data>
  <data name="Stream_contains_invalid_data" xml:space="preserve">
    <value>Stream contains invalid data</value>
  </data>
  <data name="InvalidDiagnosticSpanReported" xml:space="preserve">
    <value>Reported diagnostic '{0}' has a source location '{1}' in file '{2}', which is outside of the given file.</value>
  </data>
  <data name="ExceptionEnablingMulticoreJit" xml:space="preserve">
    <value>Warning: Could not enable multicore JIT due to exception: {0}.</value>
  </data>
  <data name="NotARootOperation" xml:space="preserve">
    <value>Given operation has a non-null parent.</value>
  </data>
  <data name="OperationHasNullSemanticModel" xml:space="preserve">
    <value>Given operation has a null semantic model.</value>
  </data>
  <data name="InvalidOperationBlockForAnalysisContext" xml:space="preserve">
    <value>Given operation block does not belong to the current analysis context.</value>
  </data>
  <data name="IsSymbolAccessibleBadWithin" xml:space="preserve">
    <value>Parameter '{0}' must be an 'INamedTypeSymbol' or an 'IAssemblySymbol'.</value>
  </data>
  <data name="IsSymbolAccessibleWrongAssembly" xml:space="preserve">
    <value>Parameter '{0}' must be a symbol from this compilation or some referenced assembly.</value>
  </data>
  <data name="OperationMustNotBeControlFlowGraphPart" xml:space="preserve">
    <value>The provided operation must not be part of a Control Flow Graph.</value>
  </data>
  <data name="A_language_name_cannot_be_specified_for_this_option" xml:space="preserve">
    <value>A language name cannot be specified for this option.</value>
  </data>
  <data name="A_language_name_must_be_specified_for_this_option" xml:space="preserve">
    <value>A language name must be specified for this option.</value>
  </data>
  <data name="WRN_InvalidSeverityInAnalyzerConfig" xml:space="preserve">
    <value>The diagnostic '{0}' was given an invalid severity '{1}' in the analyzer config file at '{2}'.</value>
  </data>
  <data name="WRN_InvalidSeverityInAnalyzerConfig_Title" xml:space="preserve">
    <value>Invalid severity in analyzer config file.</value>
  </data>
  <data name="SuppressionDiagnosticDescriptorTitle" xml:space="preserve">
    <value>Programmatic suppression of an analyzer diagnostic</value>
  </data>
  <data name="SuppressionDiagnosticDescriptorMessage" xml:space="preserve">
    <value>Diagnostic '{0}: {1}' was programmatically suppressed by a DiagnosticSuppressor with suppression ID '{2}' and justification '{3}'</value>
  </data>
  <data name="ModuleHasInvalidAttributes" xml:space="preserve">
    <value>Module has invalid attributes.</value>
  </data>
  <data name="UnableToDetermineSpecificCauseOfFailure" xml:space="preserve">
    <value>Unable to determine specific cause of the failure.</value>
  </data>
  <data name="ChangingVersionOfAssemblyReferenceIsNotAllowedDuringDebugging" xml:space="preserve">
    <value>Changing the version of an assembly reference is not allowed during debugging: '{0}' changed version to '{1}'.</value>
  </data>
  <data name="DisableAnalyzerDiagnosticsMessage" xml:space="preserve">
    <value>Suppress the following diagnostics to disable this analyzer: {0}</value>
    <comment>{0}: Comma-separated list of diagnostic IDs</comment>
  </data>
  <data name="Single_type_per_generator_0" xml:space="preserve">
    <value>Only a single {0} can be registered per generator.</value>
    <comment>{0}: type name</comment>
  </data>
  <data name="WRN_MultipleGlobalAnalyzerKeys" xml:space="preserve">
    <value>Multiple global analyzer config files set the same key '{0}' in section '{1}'. It has been unset. Key was set by the following files: '{2}'</value>
  </data>
  <data name="WRN_MultipleGlobalAnalyzerKeys_Title" xml:space="preserve">
    <value>Multiple global analyzer config files set the same key. It has been unset.</value>
  </data>
  <data name="HintNameUniquePerGenerator" xml:space="preserve">
    <value>The hintName of the added source file must be unique within a generator.</value>
  </data>
  <data name="HintNameInvalidChar" xml:space="preserve">
    <value>The hintName contains an invalid character '{0}' at position {1}.</value>
    <comment>{0}: the invalid character, {1} the position it occurred at</comment>
  </data>
  <data name="SourceTextRequiresEncoding" xml:space="preserve">
    <value>The provided SourceText must have an explicit encoding set.</value>
    <comment>'SourceText' is not localizable.</comment>
  </data>
  <data name="AssemblyReferencesNetFramework" xml:space="preserve">
    <value>The assembly containing type '{0}' references .NET Framework, which is not supported.</value>
  </data>
  <data name="WRN_InvalidGlobalSectionName" xml:space="preserve">
    <value>Global analyzer config section name '{0}' is invalid as it is not an absolute path. Section will be ignored. Section was declared in file: '{1}'</value>
    <comment>{0}: invalid section name, {1} path to global config</comment>
  </data>
  <data name="WRN_InvalidGlobalSectionName_Title" xml:space="preserve">
    <value>Global analyzer config section name is invalid as it is not an absolute path. Section will be ignored.</value>
  </data>
</root>