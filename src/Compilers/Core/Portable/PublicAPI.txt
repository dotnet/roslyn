Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.Friend = 4 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.Internal = 4 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.NotApplicable = 0 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.Private = 1 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.Protected = 3 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.ProtectedAndFriend = 2 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.ProtectedAndInternal = 2 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.ProtectedOrFriend = 5 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.ProtectedOrInternal = 5 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.Accessibility.Public = 6 -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.AdditionalText
Microsoft.CodeAnalysis.AnnotationExtensions
Microsoft.CodeAnalysis.AssemblyIdentity
Microsoft.CodeAnalysis.AssemblyIdentity.AssemblyIdentity(string name, System.Version version = null, string cultureName = null, System.Collections.Immutable.ImmutableArray<byte> publicKeyOrToken = default(System.Collections.Immutable.ImmutableArray<byte>), bool hasPublicKey = false, bool isRetargetable = false, System.Reflection.AssemblyContentType contentType = System.Reflection.AssemblyContentType.Default) -> void
Microsoft.CodeAnalysis.AssemblyIdentity.ContentType.get -> System.Reflection.AssemblyContentType
Microsoft.CodeAnalysis.AssemblyIdentity.CultureName.get -> string
Microsoft.CodeAnalysis.AssemblyIdentity.Equals(Microsoft.CodeAnalysis.AssemblyIdentity obj) -> bool
Microsoft.CodeAnalysis.AssemblyIdentity.Flags.get -> System.Reflection.AssemblyNameFlags
Microsoft.CodeAnalysis.AssemblyIdentity.GetDisplayName(bool fullKey = false) -> string
Microsoft.CodeAnalysis.AssemblyIdentity.HasPublicKey.get -> bool
Microsoft.CodeAnalysis.AssemblyIdentity.IsRetargetable.get -> bool
Microsoft.CodeAnalysis.AssemblyIdentity.IsStrongName.get -> bool
Microsoft.CodeAnalysis.AssemblyIdentity.Name.get -> string
Microsoft.CodeAnalysis.AssemblyIdentity.PublicKey.get -> System.Collections.Immutable.ImmutableArray<byte>
Microsoft.CodeAnalysis.AssemblyIdentity.PublicKeyToken.get -> System.Collections.Immutable.ImmutableArray<byte>
Microsoft.CodeAnalysis.AssemblyIdentity.Version.get -> System.Version
Microsoft.CodeAnalysis.AssemblyIdentityComparer
Microsoft.CodeAnalysis.AssemblyIdentityComparer.Compare(Microsoft.CodeAnalysis.AssemblyIdentity reference, Microsoft.CodeAnalysis.AssemblyIdentity definition) -> Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult.Equivalent = 1 -> Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult.EquivalentIgnoringVersion = 2 -> Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult.NotEquivalent = 0 -> Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult
Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(Microsoft.CodeAnalysis.AssemblyIdentity reference, Microsoft.CodeAnalysis.AssemblyIdentity definition) -> bool
Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(string referenceDisplayName, Microsoft.CodeAnalysis.AssemblyIdentity definition) -> bool
Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.ContentType = 512 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.Culture = 32 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.Name = 1 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.PublicKey = 64 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.PublicKeyOrToken = Microsoft.CodeAnalysis.AssemblyIdentityParts.PublicKey | Microsoft.CodeAnalysis.AssemblyIdentityParts.PublicKeyToken -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.PublicKeyToken = 128 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.Retargetability = 256 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.Unknown = 1024 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.Version = Microsoft.CodeAnalysis.AssemblyIdentityParts.VersionMajor | Microsoft.CodeAnalysis.AssemblyIdentityParts.VersionMinor | Microsoft.CodeAnalysis.AssemblyIdentityParts.VersionBuild | Microsoft.CodeAnalysis.AssemblyIdentityParts.VersionRevision -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.VersionBuild = 8 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.VersionMajor = 2 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.VersionMinor = 4 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyIdentityParts.VersionRevision = 16 -> Microsoft.CodeAnalysis.AssemblyIdentityParts
Microsoft.CodeAnalysis.AssemblyMetadata
Microsoft.CodeAnalysis.AssemblyMetadata.GetModules() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ModuleMetadata>
Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider documentation = null, System.Collections.Immutable.ImmutableArray<string> aliases = default(System.Collections.Immutable.ImmutableArray<string>), bool embedInteropTypes = false, string filePath = null, string display = null) -> Microsoft.CodeAnalysis.PortableExecutableReference
Microsoft.CodeAnalysis.AttributeData
Microsoft.CodeAnalysis.AttributeData.ApplicationSyntaxReference.get -> Microsoft.CodeAnalysis.SyntaxReference
Microsoft.CodeAnalysis.AttributeData.AttributeClass.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.AttributeData.AttributeConstructor.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.AttributeData.AttributeData() -> void
Microsoft.CodeAnalysis.AttributeData.ConstructorArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TypedConstant>
Microsoft.CodeAnalysis.AttributeData.NamedArguments.get -> System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.TypedConstant>>
Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.Ambiguous = 15 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.Inaccessible = 8 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.LateBound = 14 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.MemberGroup = 16 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.None = 0 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.NotATypeOrNamespace = 1 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.NotAValue = 9 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.NotAVariable = 10 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.NotAWithEventsMember = 3 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.NotAnAttributeType = 4 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.NotAnEvent = 2 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.NotCreatable = 6 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.NotInvocable = 11 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.NotReferencable = 7 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.OverloadResolutionFailure = 13 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.StaticInstanceMismatch = 12 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CandidateReason.WrongArity = 5 -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.CaseInsensitiveComparison
Microsoft.CodeAnalysis.ChildSyntaxList
Microsoft.CodeAnalysis.ChildSyntaxList.Any() -> bool
Microsoft.CodeAnalysis.ChildSyntaxList.Count.get -> int
Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator
Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator.Current.get -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator.Reset() -> void
Microsoft.CodeAnalysis.ChildSyntaxList.Equals(Microsoft.CodeAnalysis.ChildSyntaxList other) -> bool
Microsoft.CodeAnalysis.ChildSyntaxList.First() -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.ChildSyntaxList.GetEnumerator() -> Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator
Microsoft.CodeAnalysis.ChildSyntaxList.Last() -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.ChildSyntaxList.Reverse() -> Microsoft.CodeAnalysis.ChildSyntaxList.Reversed
Microsoft.CodeAnalysis.ChildSyntaxList.Reversed
Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator
Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator.Current.get -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator.Reset() -> void
Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Equals(Microsoft.CodeAnalysis.ChildSyntaxList.Reversed other) -> bool
Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.GetEnumerator() -> Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator
Microsoft.CodeAnalysis.ChildSyntaxList.this[int index].get -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.AddReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> references) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.AddReferences(params Microsoft.CodeAnalysis.MetadataReference[] references) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> trees) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(params Microsoft.CodeAnalysis.SyntaxTree[] trees) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.Assembly.get -> Microsoft.CodeAnalysis.IAssemblySymbol
Microsoft.CodeAnalysis.Compilation.AssemblyName.get -> string
Microsoft.CodeAnalysis.Compilation.Clone() -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.ContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree syntaxTree) -> bool
Microsoft.CodeAnalysis.Compilation.CreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol elementType, int rank = 1) -> Microsoft.CodeAnalysis.IArrayTypeSymbol
Microsoft.CodeAnalysis.Compilation.CreateDefaultWin32Resources(bool versionResource, bool noManifest, System.IO.Stream manifestContents, System.IO.Stream iconInIcoFormat) -> System.IO.Stream
Microsoft.CodeAnalysis.Compilation.CreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol pointedAtType) -> Microsoft.CodeAnalysis.IPointerTypeSymbol
Microsoft.CodeAnalysis.Compilation.DynamicType.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.Compilation.Emit(System.IO.Stream peStream, System.IO.Stream pdbStream = null, System.IO.Stream xmlDocumentationStream = null, System.IO.Stream win32Resources = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ResourceDescription> manifestResources = null, Microsoft.CodeAnalysis.Emit.EmitOptions options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Emit.EmitResult
Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline baseline, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Emit.SemanticEdit> edits, System.Func<Microsoft.CodeAnalysis.ISymbol, bool> isAddedSymbol, System.IO.Stream metadataStream, System.IO.Stream ilStream, System.IO.Stream pdbStream, System.Collections.Generic.ICollection<System.Reflection.Metadata.MethodDefinitionHandle> updatedMethods, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Emit.EmitDifferenceResult
Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline baseline, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Emit.SemanticEdit> edits, System.IO.Stream metadataStream, System.IO.Stream ilStream, System.IO.Stream pdbStream, System.Collections.Generic.ICollection<System.Reflection.Metadata.MethodDefinitionHandle> updatedMethods, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Emit.EmitDifferenceResult
Microsoft.CodeAnalysis.Compilation.ExternalReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference>
Microsoft.CodeAnalysis.Compilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference reference) -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.Compilation.GetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol namespaceSymbol) -> Microsoft.CodeAnalysis.INamespaceSymbol
Microsoft.CodeAnalysis.Compilation.GetEntryPoint(System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.Compilation.GetMetadataReference(Microsoft.CodeAnalysis.IAssemblySymbol assemblySymbol) -> Microsoft.CodeAnalysis.MetadataReference
Microsoft.CodeAnalysis.Compilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility = false) -> Microsoft.CodeAnalysis.SemanticModel
Microsoft.CodeAnalysis.Compilation.GetSpecialType(Microsoft.CodeAnalysis.SpecialType specialType) -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.Compilation.GetSubmissionResultType(out bool hasValue) -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.Compilation.GetTypeByMetadataName(string fullyQualifiedMetadataName) -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.Compilation.GlobalNamespace.get -> Microsoft.CodeAnalysis.INamespaceSymbol
Microsoft.CodeAnalysis.Compilation.ObjectType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.Compilation.Options.get -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.Compilation.PreviousSubmission.get -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.References.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference>
Microsoft.CodeAnalysis.Compilation.RemoveAllReferences() -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.RemoveAllSyntaxTrees() -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.RemoveReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> references) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.RemoveReferences(params Microsoft.CodeAnalysis.MetadataReference[] references) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> trees) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(params Microsoft.CodeAnalysis.SyntaxTree[] trees) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.ReplaceReference(Microsoft.CodeAnalysis.MetadataReference oldReference, Microsoft.CodeAnalysis.MetadataReference newReference) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree oldTree, Microsoft.CodeAnalysis.SyntaxTree newTree) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.ScriptClass.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.Compilation.SourceModule.get -> Microsoft.CodeAnalysis.IModuleSymbol
Microsoft.CodeAnalysis.Compilation.SyntaxTrees.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree>
Microsoft.CodeAnalysis.Compilation.WithAssemblyName(string assemblyName) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.WithOptions(Microsoft.CodeAnalysis.CompilationOptions options) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.WithPreviousSubmission(Microsoft.CodeAnalysis.Compilation newPreviousSubmission) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.WithReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> newReferences) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Compilation.WithReferences(params Microsoft.CodeAnalysis.MetadataReference[] newReferences) -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.AssemblyIdentityComparer.get -> Microsoft.CodeAnalysis.AssemblyIdentityComparer
Microsoft.CodeAnalysis.CompilationOptions.AssemblyIdentityComparer.set -> void
Microsoft.CodeAnalysis.CompilationOptions.CheckOverflow.get -> bool
Microsoft.CodeAnalysis.CompilationOptions.CheckOverflow.set -> void
Microsoft.CodeAnalysis.CompilationOptions.ConcurrentBuild.get -> bool
Microsoft.CodeAnalysis.CompilationOptions.ConcurrentBuild.set -> void
Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer.get -> string
Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer.set -> void
Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile.get -> string
Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile.set -> void
Microsoft.CodeAnalysis.CompilationOptions.CryptoPublicKey.get -> System.Collections.Immutable.ImmutableArray<byte>
Microsoft.CodeAnalysis.CompilationOptions.CryptoPublicKey.set -> void
Microsoft.CodeAnalysis.CompilationOptions.DelaySign.get -> bool?
Microsoft.CodeAnalysis.CompilationOptions.DelaySign.set -> void
Microsoft.CodeAnalysis.CompilationOptions.EqualsHelper(Microsoft.CodeAnalysis.CompilationOptions other) -> bool
Microsoft.CodeAnalysis.CompilationOptions.Errors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
Microsoft.CodeAnalysis.CompilationOptions.Features.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysis.CompilationOptions.Features.set -> void
Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption.get -> Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption.set -> void
Microsoft.CodeAnalysis.CompilationOptions.GetHashCodeHelper() -> int
Microsoft.CodeAnalysis.CompilationOptions.MainTypeName.get -> string
Microsoft.CodeAnalysis.CompilationOptions.MainTypeName.set -> void
Microsoft.CodeAnalysis.CompilationOptions.MetadataReferenceResolver.get -> Microsoft.CodeAnalysis.MetadataReferenceResolver
Microsoft.CodeAnalysis.CompilationOptions.MetadataReferenceResolver.set -> void
Microsoft.CodeAnalysis.CompilationOptions.ModuleName.get -> string
Microsoft.CodeAnalysis.CompilationOptions.ModuleName.set -> void
Microsoft.CodeAnalysis.CompilationOptions.OptimizationLevel.get -> Microsoft.CodeAnalysis.OptimizationLevel
Microsoft.CodeAnalysis.CompilationOptions.OptimizationLevel.set -> void
Microsoft.CodeAnalysis.CompilationOptions.OutputKind.get -> Microsoft.CodeAnalysis.OutputKind
Microsoft.CodeAnalysis.CompilationOptions.OutputKind.set -> void
Microsoft.CodeAnalysis.CompilationOptions.Platform.get -> Microsoft.CodeAnalysis.Platform
Microsoft.CodeAnalysis.CompilationOptions.Platform.set -> void
Microsoft.CodeAnalysis.CompilationOptions.ScriptClassName.get -> string
Microsoft.CodeAnalysis.CompilationOptions.ScriptClassName.set -> void
Microsoft.CodeAnalysis.CompilationOptions.SourceReferenceResolver.get -> Microsoft.CodeAnalysis.SourceReferenceResolver
Microsoft.CodeAnalysis.CompilationOptions.SourceReferenceResolver.set -> void
Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions.get -> System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysis.ReportDiagnostic>
Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions.set -> void
Microsoft.CodeAnalysis.CompilationOptions.StrongNameProvider.get -> Microsoft.CodeAnalysis.StrongNameProvider
Microsoft.CodeAnalysis.CompilationOptions.StrongNameProvider.set -> void
Microsoft.CodeAnalysis.CompilationOptions.WarningLevel.get -> int
Microsoft.CodeAnalysis.CompilationOptions.WarningLevel.set -> void
Microsoft.CodeAnalysis.CompilationOptions.WithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer comparer) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic value) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver resolver) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel value) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithOutputKind(Microsoft.CodeAnalysis.OutputKind kind) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithPlatform(Microsoft.CodeAnalysis.Platform platform) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver resolver) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>> value) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysis.ReportDiagnostic> value) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider provider) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.WithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver resolver) -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CompilationOptions.XmlReferenceResolver.get -> Microsoft.CodeAnalysis.XmlReferenceResolver
Microsoft.CodeAnalysis.CompilationOptions.XmlReferenceResolver.set -> void
Microsoft.CodeAnalysis.CompilationReference
Microsoft.CodeAnalysis.CompilationReference.Compilation.get -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Generic.IEnumerable<string> aliases) -> Microsoft.CodeAnalysis.CompilationReference
Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Immutable.ImmutableArray<string> aliases) -> Microsoft.CodeAnalysis.CompilationReference
Microsoft.CodeAnalysis.CompilationReference.WithEmbedInteropTypes(bool value) -> Microsoft.CodeAnalysis.CompilationReference
Microsoft.CodeAnalysis.CompilationReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties properties) -> Microsoft.CodeAnalysis.CompilationReference
Microsoft.CodeAnalysis.ControlFlowAnalysis
Microsoft.CodeAnalysis.CustomModifier
Microsoft.CodeAnalysis.DataFlowAnalysis
Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer
Microsoft.CodeAnalysis.Diagnostic
Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError.get -> bool
Microsoft.CodeAnalysis.DiagnosticDescriptor
Microsoft.CodeAnalysis.DiagnosticDescriptor.Category.get -> string
Microsoft.CodeAnalysis.DiagnosticDescriptor.CustomTags.get -> System.Collections.Generic.IEnumerable<string>
Microsoft.CodeAnalysis.DiagnosticDescriptor.DefaultSeverity.get -> Microsoft.CodeAnalysis.DiagnosticSeverity
Microsoft.CodeAnalysis.DiagnosticDescriptor.Description.get -> Microsoft.CodeAnalysis.LocalizableString
Microsoft.CodeAnalysis.DiagnosticDescriptor.DiagnosticDescriptor(string id, Microsoft.CodeAnalysis.LocalizableString title, Microsoft.CodeAnalysis.LocalizableString messageFormat, string category, Microsoft.CodeAnalysis.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, Microsoft.CodeAnalysis.LocalizableString description = null, string helpLinkUri = null, params string[] customTags) -> void
Microsoft.CodeAnalysis.DiagnosticDescriptor.DiagnosticDescriptor(string id, string title, string messageFormat, string category, Microsoft.CodeAnalysis.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, string description = null, string helpLinkUri = null, params string[] customTags) -> void
Microsoft.CodeAnalysis.DiagnosticDescriptor.Equals(Microsoft.CodeAnalysis.DiagnosticDescriptor other) -> bool
Microsoft.CodeAnalysis.DiagnosticDescriptor.HelpLinkUri.get -> string
Microsoft.CodeAnalysis.DiagnosticDescriptor.Id.get -> string
Microsoft.CodeAnalysis.DiagnosticDescriptor.IsEnabledByDefault.get -> bool
Microsoft.CodeAnalysis.DiagnosticDescriptor.MessageFormat.get -> Microsoft.CodeAnalysis.LocalizableString
Microsoft.CodeAnalysis.DiagnosticDescriptor.Title.get -> Microsoft.CodeAnalysis.LocalizableString
Microsoft.CodeAnalysis.DiagnosticFormatter
Microsoft.CodeAnalysis.DiagnosticSeverity
Microsoft.CodeAnalysis.DiagnosticSeverity.Error = 3 -> Microsoft.CodeAnalysis.DiagnosticSeverity
Microsoft.CodeAnalysis.DiagnosticSeverity.Hidden = 0 -> Microsoft.CodeAnalysis.DiagnosticSeverity
Microsoft.CodeAnalysis.DiagnosticSeverity.Info = 1 -> Microsoft.CodeAnalysis.DiagnosticSeverity
Microsoft.CodeAnalysis.DiagnosticSeverity.Warning = 2 -> Microsoft.CodeAnalysis.DiagnosticSeverity
Microsoft.CodeAnalysis.Diagnostics.AnalysisContext
Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext> action, params Microsoft.CodeAnalysis.SymbolKind[] symbolKinds) -> void
Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds) -> void
Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference
Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.AnalyzerImageReference(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, string fullPath = null, string display = null) -> void
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.AnalyzerLoadFailureEventArgs(Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode errorCode, System.Exception ex, string typeName) -> void
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.NoAnalyzers = 3 -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.None = 0 -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.UnableToCreateAnalyzer = 2 -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.UnableToLoadAnalyzer = 1 -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.AdditionalFiles.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.AdditionalText>
Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.AnalyzerOptions(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.AdditionalText> additionalFiles) -> void
Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.WithAdditionalFiles(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.AdditionalText> additionalFiles) -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.AnalyzerReference() -> void
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.CodeBlock.get -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.CodeBlockAnalysisContext(Microsoft.CodeAnalysis.SyntaxNode codeBlock, Microsoft.CodeAnalysis.ISymbol owningSymbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysis.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysis.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.Options.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.OwningSymbol.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.SemanticModel.get -> Microsoft.CodeAnalysis.SemanticModel
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.CodeBlock.get -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.CodeBlockStartAnalysisContext(Microsoft.CodeAnalysis.SyntaxNode codeBlock, Microsoft.CodeAnalysis.ISymbol owningSymbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.Options.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.OwningSymbol.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.RegisterSyntaxNodeAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds) -> void
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.SemanticModel.get -> Microsoft.CodeAnalysis.SemanticModel
Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext
Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.Compilation.get -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.CompilationAnalysisContext(Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysis.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysis.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.Options.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Compilation.get -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.CompilationStartAnalysisContext(Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Options.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext> action, params Microsoft.CodeAnalysis.SymbolKind[] symbolKinds) -> void
Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds) -> void
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.Compilation.get -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.CompilationWithAnalyzers(Microsoft.CodeAnalysis.Compilation compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync() -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync() -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute
Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.DiagnosticAnalyzerAttribute(string firstLanguage, params string[] additionalLanguages) -> void
Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.Languages.get -> string[]
Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.Options.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.SemanticModel.get -> Microsoft.CodeAnalysis.SemanticModel
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.SemanticModelAnalysisContext(Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysis.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysis.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Compilation.get -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Options.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Symbol.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.SymbolAnalysisContext(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysis.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysis.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Node.get -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Options.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.SemanticModel.get -> Microsoft.CodeAnalysis.SemanticModel
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.SyntaxNodeAnalysisContext(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysis.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysis.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext
Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Options.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic diagnostic) -> void
Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.SyntaxTreeAnalysisContext(Microsoft.CodeAnalysis.SyntaxTree tree, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, System.Action<Microsoft.CodeAnalysis.Diagnostic> reportDiagnostic, System.Func<Microsoft.CodeAnalysis.Diagnostic, bool> isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken) -> void
Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Tree.get -> Microsoft.CodeAnalysis.SyntaxTree
Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference
Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.UnresolvedAnalyzerReference(string unresolvedPath) -> void
Microsoft.CodeAnalysis.DllImportData
Microsoft.CodeAnalysis.DllImportData.BestFitMapping.get -> bool?
Microsoft.CodeAnalysis.DllImportData.CallingConvention.get -> System.Runtime.InteropServices.CallingConvention
Microsoft.CodeAnalysis.DllImportData.CharacterSet.get -> System.Runtime.InteropServices.CharSet
Microsoft.CodeAnalysis.DllImportData.EntryPointName.get -> string
Microsoft.CodeAnalysis.DllImportData.ExactSpelling.get -> bool
Microsoft.CodeAnalysis.DllImportData.ModuleName.get -> string
Microsoft.CodeAnalysis.DllImportData.SetLastError.get -> bool
Microsoft.CodeAnalysis.DllImportData.ThrowOnUnmappableCharacter.get -> bool?
Microsoft.CodeAnalysis.DocumentationCommentId
Microsoft.CodeAnalysis.DocumentationMode
Microsoft.CodeAnalysis.DocumentationMode.Diagnose = 2 -> Microsoft.CodeAnalysis.DocumentationMode
Microsoft.CodeAnalysis.DocumentationMode.None = 0 -> Microsoft.CodeAnalysis.DocumentationMode
Microsoft.CodeAnalysis.DocumentationMode.Parse = 1 -> Microsoft.CodeAnalysis.DocumentationMode
Microsoft.CodeAnalysis.DocumentationProvider
Microsoft.CodeAnalysis.DocumentationProvider.DocumentationProvider() -> void
Microsoft.CodeAnalysis.Emit.DebugInformationFormat
Microsoft.CodeAnalysis.Emit.DebugInformationFormat.Pdb = 1 -> Microsoft.CodeAnalysis.Emit.DebugInformationFormat
Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation
Microsoft.CodeAnalysis.Emit.EmitBaseline
Microsoft.CodeAnalysis.Emit.EmitDifferenceResult
Microsoft.CodeAnalysis.Emit.EmitDifferenceResult.Baseline.get -> Microsoft.CodeAnalysis.Emit.EmitBaseline
Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.BaseAddress.get -> ulong
Microsoft.CodeAnalysis.Emit.EmitOptions.DebugInformationFormat.get -> Microsoft.CodeAnalysis.Emit.DebugInformationFormat
Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly.get -> bool
Microsoft.CodeAnalysis.Emit.EmitOptions.EmitOptions(bool metadataOnly = false, Microsoft.CodeAnalysis.Emit.DebugInformationFormat debugInformationFormat = (Microsoft.CodeAnalysis.Emit.DebugInformationFormat)0, string pdbFilePath = null, string outputNameOverride = null, int fileAlignment = 0, ulong baseAddress = 0, bool highEntropyVirtualAddressSpace = false, Microsoft.CodeAnalysis.SubsystemVersion subsystemVersion = default(Microsoft.CodeAnalysis.SubsystemVersion), string runtimeMetadataVersion = null, bool tolerateErrors = false, bool includePrivateMembers = false) -> void
Microsoft.CodeAnalysis.Emit.EmitOptions.Equals(Microsoft.CodeAnalysis.Emit.EmitOptions other) -> bool
Microsoft.CodeAnalysis.Emit.EmitOptions.FileAlignment.get -> int
Microsoft.CodeAnalysis.Emit.EmitOptions.HighEntropyVirtualAddressSpace.get -> bool
Microsoft.CodeAnalysis.Emit.EmitOptions.IncludePrivateMembers.get -> bool
Microsoft.CodeAnalysis.Emit.EmitOptions.OutputNameOverride.get -> string
Microsoft.CodeAnalysis.Emit.EmitOptions.PdbFilePath.get -> string
Microsoft.CodeAnalysis.Emit.EmitOptions.RuntimeMetadataVersion.get -> string
Microsoft.CodeAnalysis.Emit.EmitOptions.SubsystemVersion.get -> Microsoft.CodeAnalysis.SubsystemVersion
Microsoft.CodeAnalysis.Emit.EmitOptions.TolerateErrors.get -> bool
Microsoft.CodeAnalysis.Emit.EmitOptions.WithBaseAddress(ulong value) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithDebugInformationFormat(Microsoft.CodeAnalysis.Emit.DebugInformationFormat format) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithEmitMetadataOnly(bool value) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithFileAlignment(int value) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithHighEntropyVirtualAddressSpace(bool value) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithIncludePrivateMembers(bool value) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithOutputNameOverride(string outputName) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithPdbFilePath(string path) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithRuntimeMetadataVersion(string version) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithSubsystemVersion(Microsoft.CodeAnalysis.SubsystemVersion subsystemVersion) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitOptions.WithTolerateErrors(bool value) -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.Emit.EmitResult
Microsoft.CodeAnalysis.Emit.EmitResult.Diagnostics.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
Microsoft.CodeAnalysis.Emit.EmitResult.Success.get -> bool
Microsoft.CodeAnalysis.Emit.SemanticEdit
Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysis.Emit.SemanticEdit other) -> bool
Microsoft.CodeAnalysis.Emit.SemanticEdit.SemanticEdit(Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol oldSymbol, Microsoft.CodeAnalysis.ISymbol newSymbol, System.Func<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode> syntaxMap = null, bool preserveLocalVariables = false) -> void
Microsoft.CodeAnalysis.Emit.SemanticEditKind
Microsoft.CodeAnalysis.Emit.SemanticEditKind.Delete = 3 -> Microsoft.CodeAnalysis.Emit.SemanticEditKind
Microsoft.CodeAnalysis.Emit.SemanticEditKind.Insert = 2 -> Microsoft.CodeAnalysis.Emit.SemanticEditKind
Microsoft.CodeAnalysis.Emit.SemanticEditKind.None = 0 -> Microsoft.CodeAnalysis.Emit.SemanticEditKind
Microsoft.CodeAnalysis.Emit.SemanticEditKind.Update = 1 -> Microsoft.CodeAnalysis.Emit.SemanticEditKind
Microsoft.CodeAnalysis.FileLinePositionSpan
Microsoft.CodeAnalysis.FileLinePositionSpan.EndLinePosition.get -> Microsoft.CodeAnalysis.Text.LinePosition
Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(Microsoft.CodeAnalysis.FileLinePositionSpan other) -> bool
Microsoft.CodeAnalysis.FileLinePositionSpan.FileLinePositionSpan(string path, Microsoft.CodeAnalysis.Text.LinePosition start, Microsoft.CodeAnalysis.Text.LinePosition end) -> void
Microsoft.CodeAnalysis.FileLinePositionSpan.FileLinePositionSpan(string path, Microsoft.CodeAnalysis.Text.LinePositionSpan span) -> void
Microsoft.CodeAnalysis.FileLinePositionSpan.HasMappedPath.get -> bool
Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid.get -> bool
Microsoft.CodeAnalysis.FileLinePositionSpan.Path.get -> string
Microsoft.CodeAnalysis.FileLinePositionSpan.Span.get -> Microsoft.CodeAnalysis.Text.LinePositionSpan
Microsoft.CodeAnalysis.FileLinePositionSpan.StartLinePosition.get -> Microsoft.CodeAnalysis.Text.LinePosition
Microsoft.CodeAnalysis.IAliasSymbol
Microsoft.CodeAnalysis.IAliasSymbol.Target.get -> Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader
Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader.AddDependencyLocation(string fullPath) -> void
Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader.LoadFromPath(string fullPath) -> System.Reflection.Assembly
Microsoft.CodeAnalysis.IArrayTypeSymbol
Microsoft.CodeAnalysis.IArrayTypeSymbol.CustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CustomModifier>
Microsoft.CodeAnalysis.IArrayTypeSymbol.ElementType.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.IArrayTypeSymbol.Equals(Microsoft.CodeAnalysis.IArrayTypeSymbol other) -> bool
Microsoft.CodeAnalysis.IArrayTypeSymbol.Rank.get -> int
Microsoft.CodeAnalysis.IAssemblySymbol
Microsoft.CodeAnalysis.IAssemblySymbol.GetTypeByMetadataName(string fullyQualifiedMetadataName) -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.IAssemblySymbol.GivesAccessTo(Microsoft.CodeAnalysis.IAssemblySymbol toAssembly) -> bool
Microsoft.CodeAnalysis.IAssemblySymbol.GlobalNamespace.get -> Microsoft.CodeAnalysis.INamespaceSymbol
Microsoft.CodeAnalysis.IAssemblySymbol.Identity.get -> Microsoft.CodeAnalysis.AssemblyIdentity
Microsoft.CodeAnalysis.IAssemblySymbol.IsInteractive.get -> bool
Microsoft.CodeAnalysis.IAssemblySymbol.MightContainExtensionMethods.get -> bool
Microsoft.CodeAnalysis.IAssemblySymbol.Modules.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.IModuleSymbol>
Microsoft.CodeAnalysis.IAssemblySymbol.NamespaceNames.get -> System.Collections.Generic.ICollection<string>
Microsoft.CodeAnalysis.IAssemblySymbol.ResolveForwardedType(string fullyQualifiedMetadataName) -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.IAssemblySymbol.TypeNames.get -> System.Collections.Generic.ICollection<string>
Microsoft.CodeAnalysis.IDynamicTypeSymbol
Microsoft.CodeAnalysis.IErrorTypeSymbol
Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateReason.get -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateSymbols.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
Microsoft.CodeAnalysis.IEventSymbol
Microsoft.CodeAnalysis.IEventSymbol.AddMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IEventSymbol.ExplicitInterfaceImplementations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IEventSymbol>
Microsoft.CodeAnalysis.IEventSymbol.IsWindowsRuntimeEvent.get -> bool
Microsoft.CodeAnalysis.IEventSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysis.IEventSymbol
Microsoft.CodeAnalysis.IEventSymbol.OverriddenEvent.get -> Microsoft.CodeAnalysis.IEventSymbol
Microsoft.CodeAnalysis.IEventSymbol.RaiseMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IEventSymbol.RemoveMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IEventSymbol.Type.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.IFieldSymbol
Microsoft.CodeAnalysis.IFieldSymbol.AssociatedSymbol.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.IFieldSymbol.ConstantValue.get -> object
Microsoft.CodeAnalysis.IFieldSymbol.CustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CustomModifier>
Microsoft.CodeAnalysis.IFieldSymbol.HasConstantValue.get -> bool
Microsoft.CodeAnalysis.IFieldSymbol.IsConst.get -> bool
Microsoft.CodeAnalysis.IFieldSymbol.IsReadOnly.get -> bool
Microsoft.CodeAnalysis.IFieldSymbol.IsVolatile.get -> bool
Microsoft.CodeAnalysis.IFieldSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysis.IFieldSymbol
Microsoft.CodeAnalysis.IFieldSymbol.Type.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.ILabelSymbol
Microsoft.CodeAnalysis.ILabelSymbol.ContainingMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.ILocalSymbol
Microsoft.CodeAnalysis.ILocalSymbol.ConstantValue.get -> object
Microsoft.CodeAnalysis.ILocalSymbol.HasConstantValue.get -> bool
Microsoft.CodeAnalysis.ILocalSymbol.IsConst.get -> bool
Microsoft.CodeAnalysis.ILocalSymbol.IsFunctionValue.get -> bool
Microsoft.CodeAnalysis.ILocalSymbol.Type.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IMethodSymbol.Arity.get -> int
Microsoft.CodeAnalysis.IMethodSymbol.AssociatedAnonymousDelegate.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.IMethodSymbol.AssociatedSymbol.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.IMethodSymbol.Construct(params Microsoft.CodeAnalysis.ITypeSymbol[] typeArguments) -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IMethodSymbol.ConstructedFrom.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IMethodSymbol.ExplicitInterfaceImplementations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IMethodSymbol>
Microsoft.CodeAnalysis.IMethodSymbol.GetDllImportData() -> Microsoft.CodeAnalysis.DllImportData
Microsoft.CodeAnalysis.IMethodSymbol.GetReturnTypeAttributes() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.AttributeData>
Microsoft.CodeAnalysis.IMethodSymbol.GetTypeInferredDuringReduction(Microsoft.CodeAnalysis.ITypeParameterSymbol reducedFromTypeParameter) -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.IMethodSymbol.HidesBaseMethodsByName.get -> bool
Microsoft.CodeAnalysis.IMethodSymbol.IsAsync.get -> bool
Microsoft.CodeAnalysis.IMethodSymbol.IsCheckedBuiltin.get -> bool
Microsoft.CodeAnalysis.IMethodSymbol.IsExtensionMethod.get -> bool
Microsoft.CodeAnalysis.IMethodSymbol.IsGenericMethod.get -> bool
Microsoft.CodeAnalysis.IMethodSymbol.IsVararg.get -> bool
Microsoft.CodeAnalysis.IMethodSymbol.MethodKind.get -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.IMethodSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IMethodSymbol.OverriddenMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IMethodSymbol.Parameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IParameterSymbol>
Microsoft.CodeAnalysis.IMethodSymbol.PartialDefinitionPart.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IMethodSymbol.PartialImplementationPart.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IMethodSymbol.ReceiverType.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.IMethodSymbol.ReduceExtensionMethod(Microsoft.CodeAnalysis.ITypeSymbol receiverType) -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IMethodSymbol.ReturnType.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.IMethodSymbol.ReturnTypeCustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CustomModifier>
Microsoft.CodeAnalysis.IMethodSymbol.ReturnsVoid.get -> bool
Microsoft.CodeAnalysis.IMethodSymbol.TypeArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol>
Microsoft.CodeAnalysis.IMethodSymbol.TypeParameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeParameterSymbol>
Microsoft.CodeAnalysis.IModuleSymbol
Microsoft.CodeAnalysis.IModuleSymbol.GetModuleNamespace(Microsoft.CodeAnalysis.INamespaceSymbol namespaceSymbol) -> Microsoft.CodeAnalysis.INamespaceSymbol
Microsoft.CodeAnalysis.IModuleSymbol.GlobalNamespace.get -> Microsoft.CodeAnalysis.INamespaceSymbol
Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblies.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.AssemblyIdentity>
Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblySymbols.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IAssemblySymbol>
Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.INamedTypeSymbol.Arity.get -> int
Microsoft.CodeAnalysis.INamedTypeSymbol.AssociatedSymbol.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.INamedTypeSymbol.Construct(params Microsoft.CodeAnalysis.ITypeSymbol[] typeArguments) -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructUnboundGenericType() -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructedFrom.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.INamedTypeSymbol.Constructors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IMethodSymbol>
Microsoft.CodeAnalysis.INamedTypeSymbol.DelegateInvokeMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.INamedTypeSymbol.EnumUnderlyingType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.INamedTypeSymbol.InstanceConstructors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IMethodSymbol>
Microsoft.CodeAnalysis.INamedTypeSymbol.IsGenericType.get -> bool
Microsoft.CodeAnalysis.INamedTypeSymbol.IsImplicitClass.get -> bool
Microsoft.CodeAnalysis.INamedTypeSymbol.IsScriptClass.get -> bool
Microsoft.CodeAnalysis.INamedTypeSymbol.IsUnboundGenericType.get -> bool
Microsoft.CodeAnalysis.INamedTypeSymbol.MemberNames.get -> System.Collections.Generic.IEnumerable<string>
Microsoft.CodeAnalysis.INamedTypeSymbol.MightContainExtensionMethods.get -> bool
Microsoft.CodeAnalysis.INamedTypeSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.INamedTypeSymbol.StaticConstructors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IMethodSymbol>
Microsoft.CodeAnalysis.INamedTypeSymbol.TypeArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol>
Microsoft.CodeAnalysis.INamedTypeSymbol.TypeParameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeParameterSymbol>
Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers(string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol>
Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol>
Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(string name, int arity) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol>
Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsNamespace.get -> bool
Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsType.get -> bool
Microsoft.CodeAnalysis.INamespaceSymbol
Microsoft.CodeAnalysis.INamespaceSymbol.ConstituentNamespaces.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamespaceSymbol>
Microsoft.CodeAnalysis.INamespaceSymbol.ContainingCompilation.get -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.INamespaceOrTypeSymbol>
Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers(string name) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.INamespaceOrTypeSymbol>
Microsoft.CodeAnalysis.INamespaceSymbol.GetNamespaceMembers() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.INamespaceSymbol>
Microsoft.CodeAnalysis.INamespaceSymbol.IsGlobalNamespace.get -> bool
Microsoft.CodeAnalysis.INamespaceSymbol.NamespaceKind.get -> Microsoft.CodeAnalysis.NamespaceKind
Microsoft.CodeAnalysis.IParameterSymbol
Microsoft.CodeAnalysis.IParameterSymbol.CustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CustomModifier>
Microsoft.CodeAnalysis.IParameterSymbol.ExplicitDefaultValue.get -> object
Microsoft.CodeAnalysis.IParameterSymbol.HasExplicitDefaultValue.get -> bool
Microsoft.CodeAnalysis.IParameterSymbol.IsOptional.get -> bool
Microsoft.CodeAnalysis.IParameterSymbol.IsParams.get -> bool
Microsoft.CodeAnalysis.IParameterSymbol.IsThis.get -> bool
Microsoft.CodeAnalysis.IParameterSymbol.Ordinal.get -> int
Microsoft.CodeAnalysis.IParameterSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysis.IParameterSymbol
Microsoft.CodeAnalysis.IParameterSymbol.RefKind.get -> Microsoft.CodeAnalysis.RefKind
Microsoft.CodeAnalysis.IParameterSymbol.Type.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.IPointerTypeSymbol
Microsoft.CodeAnalysis.IPointerTypeSymbol.CustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CustomModifier>
Microsoft.CodeAnalysis.IPointerTypeSymbol.PointedAtType.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.IPreprocessingSymbol
Microsoft.CodeAnalysis.IPropertySymbol
Microsoft.CodeAnalysis.IPropertySymbol.ExplicitInterfaceImplementations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IPropertySymbol>
Microsoft.CodeAnalysis.IPropertySymbol.GetMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IPropertySymbol.IsIndexer.get -> bool
Microsoft.CodeAnalysis.IPropertySymbol.IsReadOnly.get -> bool
Microsoft.CodeAnalysis.IPropertySymbol.IsWithEvents.get -> bool
Microsoft.CodeAnalysis.IPropertySymbol.IsWriteOnly.get -> bool
Microsoft.CodeAnalysis.IPropertySymbol.OriginalDefinition.get -> Microsoft.CodeAnalysis.IPropertySymbol
Microsoft.CodeAnalysis.IPropertySymbol.OverriddenProperty.get -> Microsoft.CodeAnalysis.IPropertySymbol
Microsoft.CodeAnalysis.IPropertySymbol.Parameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IParameterSymbol>
Microsoft.CodeAnalysis.IPropertySymbol.SetMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.IPropertySymbol.Type.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.IPropertySymbol.TypeCustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CustomModifier>
Microsoft.CodeAnalysis.IRangeVariableSymbol
Microsoft.CodeAnalysis.IStructuredTriviaSyntax
Microsoft.CodeAnalysis.IStructuredTriviaSyntax.ParentTrivia.get -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.ISymbol.Accept(Microsoft.CodeAnalysis.SymbolVisitor visitor) -> void
Microsoft.CodeAnalysis.ISymbol.Accept<TResult>(Microsoft.CodeAnalysis.SymbolVisitor<TResult> visitor) -> TResult
Microsoft.CodeAnalysis.ISymbol.CanBeReferencedByName.get -> bool
Microsoft.CodeAnalysis.ISymbol.ContainingAssembly.get -> Microsoft.CodeAnalysis.IAssemblySymbol
Microsoft.CodeAnalysis.ISymbol.ContainingModule.get -> Microsoft.CodeAnalysis.IModuleSymbol
Microsoft.CodeAnalysis.ISymbol.ContainingNamespace.get -> Microsoft.CodeAnalysis.INamespaceSymbol
Microsoft.CodeAnalysis.ISymbol.ContainingSymbol.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.ISymbol.ContainingType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.ISymbol.DeclaredAccessibility.get -> Microsoft.CodeAnalysis.Accessibility
Microsoft.CodeAnalysis.ISymbol.DeclaringSyntaxReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SyntaxReference>
Microsoft.CodeAnalysis.ISymbol.GetAttributes() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.AttributeData>
Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentId() -> string
Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentXml(System.Globalization.CultureInfo preferredCulture = null, bool expandIncludes = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> string
Microsoft.CodeAnalysis.ISymbol.HasUnsupportedMetadata.get -> bool
Microsoft.CodeAnalysis.ISymbol.IsAbstract.get -> bool
Microsoft.CodeAnalysis.ISymbol.IsDefinition.get -> bool
Microsoft.CodeAnalysis.ISymbol.IsExtern.get -> bool
Microsoft.CodeAnalysis.ISymbol.IsImplicitlyDeclared.get -> bool
Microsoft.CodeAnalysis.ISymbol.IsOverride.get -> bool
Microsoft.CodeAnalysis.ISymbol.IsSealed.get -> bool
Microsoft.CodeAnalysis.ISymbol.IsStatic.get -> bool
Microsoft.CodeAnalysis.ISymbol.IsVirtual.get -> bool
Microsoft.CodeAnalysis.ISymbol.Kind.get -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.ISymbol.Language.get -> string
Microsoft.CodeAnalysis.ISymbol.Locations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location>
Microsoft.CodeAnalysis.ISymbol.MetadataName.get -> string
Microsoft.CodeAnalysis.ISymbol.Name.get -> string
Microsoft.CodeAnalysis.ISymbol.OriginalDefinition.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.ISymbol.ToDisplayParts(Microsoft.CodeAnalysis.SymbolDisplayFormat format = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SymbolDisplayPart>
Microsoft.CodeAnalysis.ISymbol.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat format = null) -> string
Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SymbolDisplayPart>
Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null) -> string
Microsoft.CodeAnalysis.ISymbolExtensions
Microsoft.CodeAnalysis.ITypeParameterSymbol
Microsoft.CodeAnalysis.ITypeParameterSymbol.ConstraintTypes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol>
Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol
Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.ITypeParameterSymbol.HasConstructorConstraint.get -> bool
Microsoft.CodeAnalysis.ITypeParameterSymbol.HasReferenceTypeConstraint.get -> bool
Microsoft.CodeAnalysis.ITypeParameterSymbol.HasValueTypeConstraint.get -> bool
Microsoft.CodeAnalysis.ITypeParameterSymbol.Ordinal.get -> int
Microsoft.CodeAnalysis.ITypeParameterSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysis.ITypeParameterSymbol
Microsoft.CodeAnalysis.ITypeParameterSymbol.ReducedFrom.get -> Microsoft.CodeAnalysis.ITypeParameterSymbol
Microsoft.CodeAnalysis.ITypeParameterSymbol.TypeParameterKind.get -> Microsoft.CodeAnalysis.TypeParameterKind
Microsoft.CodeAnalysis.ITypeParameterSymbol.Variance.get -> Microsoft.CodeAnalysis.VarianceKind
Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol>
Microsoft.CodeAnalysis.ITypeSymbol.BaseType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysis.ISymbol interfaceMember) -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.ITypeSymbol.Interfaces.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol>
Microsoft.CodeAnalysis.ITypeSymbol.IsAnonymousType.get -> bool
Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType.get -> bool
Microsoft.CodeAnalysis.ITypeSymbol.IsValueType.get -> bool
Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.ITypeSymbol.SpecialType.get -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.ITypeSymbol.TypeKind.get -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.LanguageNames
Microsoft.CodeAnalysis.LineVisibility
Microsoft.CodeAnalysis.LineVisibility.BeforeFirstLineDirective = 0 -> Microsoft.CodeAnalysis.LineVisibility
Microsoft.CodeAnalysis.LineVisibility.Hidden = 1 -> Microsoft.CodeAnalysis.LineVisibility
Microsoft.CodeAnalysis.LineVisibility.Visible = 2 -> Microsoft.CodeAnalysis.LineVisibility
Microsoft.CodeAnalysis.LocalizableResourceString
Microsoft.CodeAnalysis.LocalizableResourceString.LocalizableResourceString(string nameOfLocalizableResource, System.Resources.ResourceManager resourceManager, System.Type resourceSource) -> void
Microsoft.CodeAnalysis.LocalizableResourceString.LocalizableResourceString(string nameOfLocalizableResource, System.Resources.ResourceManager resourceManager, System.Type resourceSource, params string[] formatArguments) -> void
Microsoft.CodeAnalysis.LocalizableString
Microsoft.CodeAnalysis.LocalizableString.Equals(Microsoft.CodeAnalysis.LocalizableString other) -> bool
Microsoft.CodeAnalysis.LocalizableString.OnException -> System.EventHandler<System.Exception>
Microsoft.CodeAnalysis.LocalizableString.ToString(System.IFormatProvider formatProvider) -> string
Microsoft.CodeAnalysis.Location
Microsoft.CodeAnalysis.Location.IsInMetadata.get -> bool
Microsoft.CodeAnalysis.Location.IsInSource.get -> bool
Microsoft.CodeAnalysis.LocationKind
Microsoft.CodeAnalysis.LocationKind.ExternalFile = 4 -> Microsoft.CodeAnalysis.LocationKind
Microsoft.CodeAnalysis.LocationKind.MetadataFile = 2 -> Microsoft.CodeAnalysis.LocationKind
Microsoft.CodeAnalysis.LocationKind.None = 0 -> Microsoft.CodeAnalysis.LocationKind
Microsoft.CodeAnalysis.LocationKind.SourceFile = 1 -> Microsoft.CodeAnalysis.LocationKind
Microsoft.CodeAnalysis.LocationKind.XmlFile = 3 -> Microsoft.CodeAnalysis.LocationKind
Microsoft.CodeAnalysis.Metadata
Microsoft.CodeAnalysis.Metadata.Copy() -> Microsoft.CodeAnalysis.Metadata
Microsoft.CodeAnalysis.MetadataImageKind
Microsoft.CodeAnalysis.MetadataImageKind.Assembly = 0 -> Microsoft.CodeAnalysis.MetadataImageKind
Microsoft.CodeAnalysis.MetadataImageKind.Module = 1 -> Microsoft.CodeAnalysis.MetadataImageKind
Microsoft.CodeAnalysis.MetadataReference
Microsoft.CodeAnalysis.MetadataReference.Properties.get -> Microsoft.CodeAnalysis.MetadataReferenceProperties
Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Generic.IEnumerable<string> aliases) -> Microsoft.CodeAnalysis.MetadataReference
Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Immutable.ImmutableArray<string> aliases) -> Microsoft.CodeAnalysis.MetadataReference
Microsoft.CodeAnalysis.MetadataReference.WithEmbedInteropTypes(bool value) -> Microsoft.CodeAnalysis.MetadataReference
Microsoft.CodeAnalysis.MetadataReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties properties) -> Microsoft.CodeAnalysis.MetadataReference
Microsoft.CodeAnalysis.MetadataReferenceProperties
Microsoft.CodeAnalysis.MetadataReferenceProperties.Aliases.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes.get -> bool
Microsoft.CodeAnalysis.MetadataReferenceProperties.Equals(Microsoft.CodeAnalysis.MetadataReferenceProperties other) -> bool
Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind.get -> Microsoft.CodeAnalysis.MetadataImageKind
Microsoft.CodeAnalysis.MetadataReferenceProperties.MetadataReferenceProperties(Microsoft.CodeAnalysis.MetadataImageKind kind = Microsoft.CodeAnalysis.MetadataImageKind.Assembly, System.Collections.Immutable.ImmutableArray<string> aliases = default(System.Collections.Immutable.ImmutableArray<string>), bool embedInteropTypes = false) -> void
Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Generic.IEnumerable<string> aliases) -> Microsoft.CodeAnalysis.MetadataReferenceProperties
Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Immutable.ImmutableArray<string> aliases) -> Microsoft.CodeAnalysis.MetadataReferenceProperties
Microsoft.CodeAnalysis.MetadataReferenceProperties.WithEmbedInteropTypes(bool embedInteropTypes) -> Microsoft.CodeAnalysis.MetadataReferenceProperties
Microsoft.CodeAnalysis.MetadataReferenceResolver
Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.AnonymousFunction = 0 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.BuiltinOperator = 15 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.Constructor = 1 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.Conversion = 2 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.DeclareMethod = 16 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.DelegateInvoke = 3 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.Destructor = 4 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.EventAdd = 5 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.EventRaise = 6 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.EventRemove = 7 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.ExplicitInterfaceImplementation = 8 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.LambdaMethod = 0 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.Ordinary = 10 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.PropertyGet = 11 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.PropertySet = 12 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.ReducedExtension = 13 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.SharedConstructor = 14 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.StaticConstructor = 14 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.MethodKind.UserDefinedOperator = 9 -> Microsoft.CodeAnalysis.MethodKind
Microsoft.CodeAnalysis.ModelExtensions
Microsoft.CodeAnalysis.ModuleMetadata
Microsoft.CodeAnalysis.ModuleMetadata.GetModuleNames() -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysis.ModuleMetadata.GetModuleVersionId() -> System.Guid
Microsoft.CodeAnalysis.ModuleMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider documentation = null, string filePath = null, string display = null) -> Microsoft.CodeAnalysis.PortableExecutableReference
Microsoft.CodeAnalysis.ModuleMetadata.Name.get -> string
Microsoft.CodeAnalysis.NamespaceKind
Microsoft.CodeAnalysis.NamespaceKind.Assembly = 2 -> Microsoft.CodeAnalysis.NamespaceKind
Microsoft.CodeAnalysis.NamespaceKind.Compilation = 3 -> Microsoft.CodeAnalysis.NamespaceKind
Microsoft.CodeAnalysis.NamespaceKind.Module = 1 -> Microsoft.CodeAnalysis.NamespaceKind
Microsoft.CodeAnalysis.OptimizationLevel
Microsoft.CodeAnalysis.OptimizationLevel.Debug = 0 -> Microsoft.CodeAnalysis.OptimizationLevel
Microsoft.CodeAnalysis.OptimizationLevel.Release = 1 -> Microsoft.CodeAnalysis.OptimizationLevel
Microsoft.CodeAnalysis.Optional<T>
Microsoft.CodeAnalysis.Optional<T>.HasValue.get -> bool
Microsoft.CodeAnalysis.Optional<T>.Optional(T value) -> void
Microsoft.CodeAnalysis.Optional<T>.Value.get -> T
Microsoft.CodeAnalysis.OutputKind
Microsoft.CodeAnalysis.OutputKind.ConsoleApplication = 0 -> Microsoft.CodeAnalysis.OutputKind
Microsoft.CodeAnalysis.OutputKind.DynamicallyLinkedLibrary = 2 -> Microsoft.CodeAnalysis.OutputKind
Microsoft.CodeAnalysis.OutputKind.NetModule = 3 -> Microsoft.CodeAnalysis.OutputKind
Microsoft.CodeAnalysis.OutputKind.WindowsApplication = 1 -> Microsoft.CodeAnalysis.OutputKind
Microsoft.CodeAnalysis.OutputKind.WindowsRuntimeApplication = 5 -> Microsoft.CodeAnalysis.OutputKind
Microsoft.CodeAnalysis.OutputKind.WindowsRuntimeMetadata = 4 -> Microsoft.CodeAnalysis.OutputKind
Microsoft.CodeAnalysis.ParseOptions
Microsoft.CodeAnalysis.ParseOptions.DocumentationMode.get -> Microsoft.CodeAnalysis.DocumentationMode
Microsoft.CodeAnalysis.ParseOptions.DocumentationMode.set -> void
Microsoft.CodeAnalysis.ParseOptions.EqualsHelper(Microsoft.CodeAnalysis.ParseOptions other) -> bool
Microsoft.CodeAnalysis.ParseOptions.GetHashCodeHelper() -> int
Microsoft.CodeAnalysis.ParseOptions.Kind.get -> Microsoft.CodeAnalysis.SourceCodeKind
Microsoft.CodeAnalysis.ParseOptions.Kind.set -> void
Microsoft.CodeAnalysis.ParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode documentationMode) -> Microsoft.CodeAnalysis.ParseOptions
Microsoft.CodeAnalysis.ParseOptions.WithFeatures(System.Collections.Immutable.ImmutableArray<string> features) -> Microsoft.CodeAnalysis.ParseOptions
Microsoft.CodeAnalysis.ParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind kind) -> Microsoft.CodeAnalysis.ParseOptions
Microsoft.CodeAnalysis.Platform
Microsoft.CodeAnalysis.Platform.AnyCpu = 0 -> Microsoft.CodeAnalysis.Platform
Microsoft.CodeAnalysis.Platform.AnyCpu32BitPreferred = 4 -> Microsoft.CodeAnalysis.Platform
Microsoft.CodeAnalysis.Platform.Arm = 5 -> Microsoft.CodeAnalysis.Platform
Microsoft.CodeAnalysis.Platform.Itanium = 3 -> Microsoft.CodeAnalysis.Platform
Microsoft.CodeAnalysis.Platform.X64 = 2 -> Microsoft.CodeAnalysis.Platform
Microsoft.CodeAnalysis.Platform.X86 = 1 -> Microsoft.CodeAnalysis.Platform
Microsoft.CodeAnalysis.PortableExecutableReference
Microsoft.CodeAnalysis.PortableExecutableReference.FilePath.get -> string
Microsoft.CodeAnalysis.PortableExecutableReference.PortableExecutableReference(Microsoft.CodeAnalysis.MetadataReferenceProperties properties, string fullPath = null, Microsoft.CodeAnalysis.DocumentationProvider initialDocumentation = null) -> void
Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Generic.IEnumerable<string> aliases) -> Microsoft.CodeAnalysis.PortableExecutableReference
Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Immutable.ImmutableArray<string> aliases) -> Microsoft.CodeAnalysis.PortableExecutableReference
Microsoft.CodeAnalysis.PortableExecutableReference.WithEmbedInteropTypes(bool value) -> Microsoft.CodeAnalysis.PortableExecutableReference
Microsoft.CodeAnalysis.PortableExecutableReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties properties) -> Microsoft.CodeAnalysis.PortableExecutableReference
Microsoft.CodeAnalysis.PreprocessingSymbolInfo
Microsoft.CodeAnalysis.PreprocessingSymbolInfo.Equals(Microsoft.CodeAnalysis.PreprocessingSymbolInfo other) -> bool
Microsoft.CodeAnalysis.PreprocessingSymbolInfo.IsDefined.get -> bool
Microsoft.CodeAnalysis.PreprocessingSymbolInfo.Symbol.get -> Microsoft.CodeAnalysis.IPreprocessingSymbol
Microsoft.CodeAnalysis.RefKind
Microsoft.CodeAnalysis.RefKind.None = 0 -> Microsoft.CodeAnalysis.RefKind
Microsoft.CodeAnalysis.RefKind.Out = 2 -> Microsoft.CodeAnalysis.RefKind
Microsoft.CodeAnalysis.RefKind.Ref = 1 -> Microsoft.CodeAnalysis.RefKind
Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.ReportDiagnostic.Default = 0 -> Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.ReportDiagnostic.Error = 1 -> Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.ReportDiagnostic.Hidden = 4 -> Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.ReportDiagnostic.Info = 3 -> Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.ReportDiagnostic.Suppress = 5 -> Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.ReportDiagnostic.Warn = 2 -> Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.ResourceDescription
Microsoft.CodeAnalysis.ResourceDescription.ResourceDescription(string resourceName, System.Func<System.IO.Stream> dataProvider, bool isPublic) -> void
Microsoft.CodeAnalysis.ResourceDescription.ResourceDescription(string resourceName, string fileName, System.Func<System.IO.Stream> dataProvider, bool isPublic) -> void
Microsoft.CodeAnalysis.SemanticModel
Microsoft.CodeAnalysis.SemanticModel.Compilation.get -> Microsoft.CodeAnalysis.Compilation
Microsoft.CodeAnalysis.SemanticModel.GetConstantValue(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Optional<object>
Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbol(int position, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfo(Microsoft.CodeAnalysis.SyntaxNode nameSyntax) -> Microsoft.CodeAnalysis.PreprocessingSymbolInfo
Microsoft.CodeAnalysis.SemanticModel.IsAccessible(int position, Microsoft.CodeAnalysis.ISymbol symbol) -> bool
Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsField(int position, Microsoft.CodeAnalysis.IEventSymbol eventSymbol) -> bool
Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(int position, string name = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
Microsoft.CodeAnalysis.SemanticModel.LookupLabels(int position, string name = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(int position, Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container = null, string name = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(int position, Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container = null, string name = null) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(int position, Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container = null, string name = null, bool includeReducedExtensionMethods = false) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
Microsoft.CodeAnalysis.SemanticModel.ParentModel.get -> Microsoft.CodeAnalysis.SemanticModel
Microsoft.CodeAnalysis.SemanticModel.SyntaxTree.get -> Microsoft.CodeAnalysis.SyntaxTree
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Add(TNode node) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.AddRange(System.Collections.Generic.IEnumerable<TNode> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Any() -> bool
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Contains(TNode node) -> bool
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Count.get -> int
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Enumerator
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Enumerator.Current.get -> TNode
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Enumerator.Reset() -> void
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Equals(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> other) -> bool
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.First() -> TNode
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.FirstOrDefault() -> TNode
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.FullSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.GetEnumerator() -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Enumerator
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.GetSeparator(int index) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.GetSeparators() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.GetWithSeparators() -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.IndexOf(System.Func<TNode, bool> predicate) -> int
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.IndexOf(TNode node) -> int
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Insert(int index, TNode node) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.InsertRange(int index, System.Collections.Generic.IEnumerable<TNode> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Last() -> TNode
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.LastIndexOf(System.Func<TNode, bool> predicate) -> int
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.LastIndexOf(TNode node) -> int
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.LastOrDefault() -> TNode
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Remove(TNode node) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.RemoveAt(int index) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Replace(TNode nodeInList, TNode newNode) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.ReplaceRange(TNode nodeInList, System.Collections.Generic.IEnumerable<TNode> newNodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.ReplaceSeparator(Microsoft.CodeAnalysis.SyntaxToken separatorToken, Microsoft.CodeAnalysis.SyntaxToken newSeparator) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.SeparatorCount.get -> int
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.ToFullString() -> string
Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.this[int index].get -> TNode
Microsoft.CodeAnalysis.SourceCodeKind
Microsoft.CodeAnalysis.SourceCodeKind.Interactive = 2 -> Microsoft.CodeAnalysis.SourceCodeKind
Microsoft.CodeAnalysis.SourceCodeKind.Regular = 0 -> Microsoft.CodeAnalysis.SourceCodeKind
Microsoft.CodeAnalysis.SourceCodeKind.Script = 1 -> Microsoft.CodeAnalysis.SourceCodeKind
Microsoft.CodeAnalysis.SourceReferenceResolver
Microsoft.CodeAnalysis.SourceReferenceResolver.SourceReferenceResolver() -> void
Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.Count = 43 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.None = 0 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_ArgIterator = 37 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Array = 23 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_AsyncCallback = 43 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Boolean = 7 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Byte = 10 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Char = 8 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Collections_Generic_ICollection_T = 27 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Collections_Generic_IEnumerable_T = 25 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Collections_Generic_IEnumerator_T = 29 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Collections_Generic_IList_T = 26 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Collections_Generic_IReadOnlyCollection_T = 31 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Collections_Generic_IReadOnlyList_T = 30 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Collections_IEnumerable = 24 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Collections_IEnumerator = 28 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_DateTime = 33 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Decimal = 17 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Delegate = 4 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Double = 19 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Enum = 2 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_IAsyncResult = 42 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_IDisposable = 35 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Int16 = 11 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Int32 = 13 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Int64 = 15 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_IntPtr = 21 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_MulticastDelegate = 3 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Nullable_T = 32 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Object = 1 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_RuntimeArgumentHandle = 38 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_RuntimeFieldHandle = 39 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_RuntimeMethodHandle = 40 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_RuntimeTypeHandle = 41 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Runtime_CompilerServices_IsVolatile = 34 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_SByte = 9 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Single = 18 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_String = 20 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_TypedReference = 36 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_UInt16 = 12 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_UInt32 = 14 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_UInt64 = 16 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_UIntPtr = 22 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_ValueType = 5 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Void = 6 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpeculativeBindingOption
Microsoft.CodeAnalysis.SpeculativeBindingOption.BindAsExpression = 0 -> Microsoft.CodeAnalysis.SpeculativeBindingOption
Microsoft.CodeAnalysis.SpeculativeBindingOption.BindAsTypeOrNamespace = 1 -> Microsoft.CodeAnalysis.SpeculativeBindingOption
Microsoft.CodeAnalysis.StrongNameProvider
Microsoft.CodeAnalysis.SubsystemVersion
Microsoft.CodeAnalysis.SubsystemVersion.Equals(Microsoft.CodeAnalysis.SubsystemVersion other) -> bool
Microsoft.CodeAnalysis.SubsystemVersion.IsValid.get -> bool
Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle.NameAndParameters = 1 -> Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle.NameAndSignature = 2 -> Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle.NameOnly = 0 -> Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle.Default = 0 -> Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle.InstanceMethod = 1 -> Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle.StaticMethod = 2 -> Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysis.SymbolDisplayExtensions
Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.AddGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.AddKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.AddLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.AddParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.DelegateStyle.get -> Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle
Microsoft.CodeAnalysis.SymbolDisplayFormat.ExtensionMethodStyle.get -> Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle
Microsoft.CodeAnalysis.SymbolDisplayFormat.GenericsOptions.get -> Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysis.SymbolDisplayFormat.GlobalNamespaceStyle.get -> Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysis.SymbolDisplayFormat.KindOptions.get -> Microsoft.CodeAnalysis.SymbolDisplayKindOptions
Microsoft.CodeAnalysis.SymbolDisplayFormat.LocalOptions.get -> Microsoft.CodeAnalysis.SymbolDisplayLocalOptions
Microsoft.CodeAnalysis.SymbolDisplayFormat.MemberOptions.get -> Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayFormat.MiscellaneousOptions.get -> Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysis.SymbolDisplayFormat.ParameterOptions.get -> Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
Microsoft.CodeAnalysis.SymbolDisplayFormat.PropertyStyle.get -> Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle
Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.SymbolDisplayFormat(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle globalNamespaceStyle = Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle.Omitted, Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle typeQualificationStyle = Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle.NameOnly, Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions genericsOptions = Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions.None, Microsoft.CodeAnalysis.SymbolDisplayMemberOptions memberOptions = Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.None, Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle delegateStyle = Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle.NameOnly, Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle extensionMethodStyle = Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle.Default, Microsoft.CodeAnalysis.SymbolDisplayParameterOptions parameterOptions = Microsoft.CodeAnalysis.SymbolDisplayParameterOptions.None, Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle propertyStyle = Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle.NameOnly, Microsoft.CodeAnalysis.SymbolDisplayLocalOptions localOptions = Microsoft.CodeAnalysis.SymbolDisplayLocalOptions.None, Microsoft.CodeAnalysis.SymbolDisplayKindOptions kindOptions = Microsoft.CodeAnalysis.SymbolDisplayKindOptions.None, Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions miscellaneousOptions = Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions.None) -> void
Microsoft.CodeAnalysis.SymbolDisplayFormat.TypeQualificationStyle.get -> Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGlobalNamespaceStyle(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle style) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.WithKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.WithLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayFormat.WithParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions options) -> Microsoft.CodeAnalysis.SymbolDisplayFormat
Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions.IncludeTypeConstraints = 2 -> Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions.IncludeTypeParameters = 1 -> Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions.IncludeVariance = 4 -> Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions.None = 0 -> Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions
Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle.Included = 2 -> Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle.Omitted = 0 -> Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle.OmittedAsContaining = 1 -> Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle
Microsoft.CodeAnalysis.SymbolDisplayKindOptions
Microsoft.CodeAnalysis.SymbolDisplayKindOptions.IncludeMemberKeyword = 4 -> Microsoft.CodeAnalysis.SymbolDisplayKindOptions
Microsoft.CodeAnalysis.SymbolDisplayKindOptions.IncludeNamespaceKeyword = 1 -> Microsoft.CodeAnalysis.SymbolDisplayKindOptions
Microsoft.CodeAnalysis.SymbolDisplayKindOptions.IncludeTypeKeyword = 2 -> Microsoft.CodeAnalysis.SymbolDisplayKindOptions
Microsoft.CodeAnalysis.SymbolDisplayKindOptions.None = 0 -> Microsoft.CodeAnalysis.SymbolDisplayKindOptions
Microsoft.CodeAnalysis.SymbolDisplayLocalOptions
Microsoft.CodeAnalysis.SymbolDisplayLocalOptions.IncludeConstantValue = 2 -> Microsoft.CodeAnalysis.SymbolDisplayLocalOptions
Microsoft.CodeAnalysis.SymbolDisplayLocalOptions.IncludeType = 1 -> Microsoft.CodeAnalysis.SymbolDisplayLocalOptions
Microsoft.CodeAnalysis.SymbolDisplayLocalOptions.None = 0 -> Microsoft.CodeAnalysis.SymbolDisplayLocalOptions
Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.IncludeAccessibility = 4 -> Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.IncludeConstantValue = 64 -> Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.IncludeContainingType = 32 -> Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.IncludeExplicitInterface = 8 -> Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.IncludeModifiers = 2 -> Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.IncludeParameters = 16 -> Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.IncludeType = 1 -> Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.None = 0 -> Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers = 2 -> Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions.ExpandNullable = 32 -> Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions.None = 0 -> Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions.RemoveAttributeSuffix = 16 -> Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions.UseAsterisksInMultiDimensionalArrays = 4 -> Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions.UseErrorTypeSymbolName = 8 -> Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions.UseSpecialTypes = 1 -> Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
Microsoft.CodeAnalysis.SymbolDisplayParameterOptions.IncludeDefaultValue = 16 -> Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
Microsoft.CodeAnalysis.SymbolDisplayParameterOptions.IncludeExtensionThis = 1 -> Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
Microsoft.CodeAnalysis.SymbolDisplayParameterOptions.IncludeName = 8 -> Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
Microsoft.CodeAnalysis.SymbolDisplayParameterOptions.IncludeOptionalBrackets = 32 -> Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
Microsoft.CodeAnalysis.SymbolDisplayParameterOptions.IncludeParamsRefOut = 2 -> Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
Microsoft.CodeAnalysis.SymbolDisplayParameterOptions.IncludeType = 4 -> Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
Microsoft.CodeAnalysis.SymbolDisplayParameterOptions.None = 0 -> Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
Microsoft.CodeAnalysis.SymbolDisplayPart
Microsoft.CodeAnalysis.SymbolDisplayPart.Kind.get -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPart.Symbol.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.SymbolDisplayPart.SymbolDisplayPart(Microsoft.CodeAnalysis.SymbolDisplayPartKind kind, Microsoft.CodeAnalysis.ISymbol symbol, string text) -> void
Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.AliasName = 0 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.AnonymousTypeIndicator = 24 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.AssemblyName = 1 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.ClassName = 2 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.DelegateName = 3 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.EnumName = 4 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.ErrorTypeName = 5 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.EventName = 6 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.FieldName = 7 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.InterfaceName = 8 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.Keyword = 9 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.LabelName = 10 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.LineBreak = 11 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.LocalName = 14 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.MethodName = 15 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.ModuleName = 16 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.NamespaceName = 17 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.NumericLiteral = 12 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.Operator = 18 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.ParameterName = 19 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.PropertyName = 20 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.Punctuation = 21 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.RangeVariableName = 27 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.Space = 22 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.StringLiteral = 13 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.StructName = 23 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.Text = 25 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPartKind.TypeParameterName = 26 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle
Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle.NameOnly = 0 -> Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle
Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle.ShowReadWriteDescriptor = 1 -> Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle
Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle.NameAndContainingTypes = 1 -> Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces = 2 -> Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle.NameOnly = 0 -> Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle
Microsoft.CodeAnalysis.SymbolFilter
Microsoft.CodeAnalysis.SymbolFilter.All = Microsoft.CodeAnalysis.SymbolFilter.Namespace | Microsoft.CodeAnalysis.SymbolFilter.TypeAndMember -> Microsoft.CodeAnalysis.SymbolFilter
Microsoft.CodeAnalysis.SymbolFilter.Member = 4 -> Microsoft.CodeAnalysis.SymbolFilter
Microsoft.CodeAnalysis.SymbolFilter.Namespace = 1 -> Microsoft.CodeAnalysis.SymbolFilter
Microsoft.CodeAnalysis.SymbolFilter.None = 0 -> Microsoft.CodeAnalysis.SymbolFilter
Microsoft.CodeAnalysis.SymbolFilter.Type = 2 -> Microsoft.CodeAnalysis.SymbolFilter
Microsoft.CodeAnalysis.SymbolFilter.TypeAndMember = Microsoft.CodeAnalysis.SymbolFilter.Type | Microsoft.CodeAnalysis.SymbolFilter.Member -> Microsoft.CodeAnalysis.SymbolFilter
Microsoft.CodeAnalysis.SymbolInfo
Microsoft.CodeAnalysis.SymbolInfo.CandidateReason.get -> Microsoft.CodeAnalysis.CandidateReason
Microsoft.CodeAnalysis.SymbolInfo.CandidateSymbols.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
Microsoft.CodeAnalysis.SymbolInfo.Equals(Microsoft.CodeAnalysis.SymbolInfo other) -> bool
Microsoft.CodeAnalysis.SymbolInfo.Symbol.get -> Microsoft.CodeAnalysis.ISymbol
Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Alias = 0 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.ArrayType = 1 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Assembly = 2 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.DynamicType = 3 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.ErrorType = 4 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Event = 5 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Field = 6 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Label = 7 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Local = 8 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Method = 9 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.NamedType = 11 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Namespace = 12 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.NetModule = 10 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Parameter = 13 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.PointerType = 14 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Preprocessing = 18 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.Property = 15 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.RangeVariable = 16 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolKind.TypeParameter = 17 -> Microsoft.CodeAnalysis.SymbolKind
Microsoft.CodeAnalysis.SymbolVisitor
Microsoft.CodeAnalysis.SymbolVisitor<TResult>
Microsoft.CodeAnalysis.SyntaxAnnotation
Microsoft.CodeAnalysis.SyntaxAnnotation.Data.get -> string
Microsoft.CodeAnalysis.SyntaxAnnotation.Equals(Microsoft.CodeAnalysis.SyntaxAnnotation other) -> bool
Microsoft.CodeAnalysis.SyntaxAnnotation.Kind.get -> string
Microsoft.CodeAnalysis.SyntaxAnnotation.SyntaxAnnotation() -> void
Microsoft.CodeAnalysis.SyntaxAnnotation.SyntaxAnnotation(string kind) -> void
Microsoft.CodeAnalysis.SyntaxAnnotation.SyntaxAnnotation(string kind, string data) -> void
Microsoft.CodeAnalysis.SyntaxList<TNode>
Microsoft.CodeAnalysis.SyntaxList<TNode>.Add(TNode node) -> Microsoft.CodeAnalysis.SyntaxList<TNode>
Microsoft.CodeAnalysis.SyntaxList<TNode>.AddRange(System.Collections.Generic.IEnumerable<TNode> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode>
Microsoft.CodeAnalysis.SyntaxList<TNode>.Any() -> bool
Microsoft.CodeAnalysis.SyntaxList<TNode>.Count.get -> int
Microsoft.CodeAnalysis.SyntaxList<TNode>.Enumerator
Microsoft.CodeAnalysis.SyntaxList<TNode>.Enumerator.Current.get -> TNode
Microsoft.CodeAnalysis.SyntaxList<TNode>.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SyntaxList<TNode>.Enumerator.Reset() -> void
Microsoft.CodeAnalysis.SyntaxList<TNode>.Equals(Microsoft.CodeAnalysis.SyntaxList<TNode> other) -> bool
Microsoft.CodeAnalysis.SyntaxList<TNode>.First() -> TNode
Microsoft.CodeAnalysis.SyntaxList<TNode>.FirstOrDefault() -> TNode
Microsoft.CodeAnalysis.SyntaxList<TNode>.FullSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxList<TNode>.GetEnumerator() -> Microsoft.CodeAnalysis.SyntaxList<TNode>.Enumerator
Microsoft.CodeAnalysis.SyntaxList<TNode>.IndexOf(System.Func<TNode, bool> predicate) -> int
Microsoft.CodeAnalysis.SyntaxList<TNode>.IndexOf(TNode node) -> int
Microsoft.CodeAnalysis.SyntaxList<TNode>.Insert(int index, TNode node) -> Microsoft.CodeAnalysis.SyntaxList<TNode>
Microsoft.CodeAnalysis.SyntaxList<TNode>.InsertRange(int index, System.Collections.Generic.IEnumerable<TNode> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode>
Microsoft.CodeAnalysis.SyntaxList<TNode>.Last() -> TNode
Microsoft.CodeAnalysis.SyntaxList<TNode>.LastIndexOf(System.Func<TNode, bool> predicate) -> int
Microsoft.CodeAnalysis.SyntaxList<TNode>.LastIndexOf(TNode node) -> int
Microsoft.CodeAnalysis.SyntaxList<TNode>.LastOrDefault() -> TNode
Microsoft.CodeAnalysis.SyntaxList<TNode>.Remove(TNode node) -> Microsoft.CodeAnalysis.SyntaxList<TNode>
Microsoft.CodeAnalysis.SyntaxList<TNode>.RemoveAt(int index) -> Microsoft.CodeAnalysis.SyntaxList<TNode>
Microsoft.CodeAnalysis.SyntaxList<TNode>.Replace(TNode nodeInList, TNode newNode) -> Microsoft.CodeAnalysis.SyntaxList<TNode>
Microsoft.CodeAnalysis.SyntaxList<TNode>.ReplaceRange(TNode nodeInList, System.Collections.Generic.IEnumerable<TNode> newNodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode>
Microsoft.CodeAnalysis.SyntaxList<TNode>.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxList<TNode>.ToFullString() -> string
Microsoft.CodeAnalysis.SyntaxList<TNode>.this[int index].get -> TNode
Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.SyntaxNode.Ancestors(bool ascendOutOfTrivia = true) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxNode.AncestorsAndSelf(bool ascendOutOfTrivia = true) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxNode.ChildNodes() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxNode.ChildNodesAndTokens() -> Microsoft.CodeAnalysis.ChildSyntaxList
Microsoft.CodeAnalysis.SyntaxNode.ChildTokens() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>
Microsoft.CodeAnalysis.SyntaxNode.Contains(Microsoft.CodeAnalysis.SyntaxNode node) -> bool
Microsoft.CodeAnalysis.SyntaxNode.ContainsAnnotations.get -> bool
Microsoft.CodeAnalysis.SyntaxNode.ContainsDiagnostics.get -> bool
Microsoft.CodeAnalysis.SyntaxNode.ContainsDirectives.get -> bool
Microsoft.CodeAnalysis.SyntaxNode.ContainsSkippedText.get -> bool
Microsoft.CodeAnalysis.SyntaxNode.CopyAnnotationsTo<T>(T node) -> T
Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(Microsoft.CodeAnalysis.Text.TextSpan span, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(Microsoft.CodeAnalysis.Text.TextSpan span, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(Microsoft.CodeAnalysis.Text.TextSpan span, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>
Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>
Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(Microsoft.CodeAnalysis.Text.TextSpan span, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>
Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>
Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(Microsoft.CodeAnalysis.Text.TextSpan span, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>
Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>
Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(Microsoft.CodeAnalysis.Text.TextSpan span, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>
Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>
Microsoft.CodeAnalysis.SyntaxNode.FindNode(Microsoft.CodeAnalysis.Text.TextSpan span, bool findInsideTrivia = false, bool getInnermostNodeForTie = false) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.SyntaxNode.FindToken(int position, bool findInsideTrivia = false) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxNode.FindTrivia(int position, bool findInsideTrivia = false) -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxNode.FirstAncestorOrSelf<TNode>(System.Func<TNode, bool> predicate = null, bool ascendOutOfTrivia = true) -> TNode
Microsoft.CodeAnalysis.SyntaxNode.FullSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(Microsoft.CodeAnalysis.SyntaxAnnotation syntaxAnnotation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(Microsoft.CodeAnalysis.SyntaxAnnotation annotation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(params string[] annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(Microsoft.CodeAnalysis.SyntaxAnnotation syntaxAnnotation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(Microsoft.CodeAnalysis.SyntaxAnnotation annotation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(params string[] annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation>
Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation>
Microsoft.CodeAnalysis.SyntaxNode.GetDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
Microsoft.CodeAnalysis.SyntaxNode.GetFirstToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxNode.GetLastToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxNode.GetLeadingTrivia() -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxNode.GetLocation() -> Microsoft.CodeAnalysis.Location
Microsoft.CodeAnalysis.SyntaxNode.GetRed<T>(ref T field, int slot) -> T
Microsoft.CodeAnalysis.SyntaxNode.GetRedAtZero<T>(ref T field) -> T
Microsoft.CodeAnalysis.SyntaxNode.GetReference() -> Microsoft.CodeAnalysis.SyntaxReference
Microsoft.CodeAnalysis.SyntaxNode.GetText(System.Text.Encoding encoding = null, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1) -> Microsoft.CodeAnalysis.Text.SourceText
Microsoft.CodeAnalysis.SyntaxNode.GetTrailingTrivia() -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxNode.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation annotation) -> bool
Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> bool
Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(string annotationKind) -> bool
Microsoft.CodeAnalysis.SyntaxNode.HasLeadingTrivia.get -> bool
Microsoft.CodeAnalysis.SyntaxNode.HasStructuredTrivia.get -> bool
Microsoft.CodeAnalysis.SyntaxNode.HasTrailingTrivia.get -> bool
Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode node, bool topLevel = false) -> bool
Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode other) -> bool
Microsoft.CodeAnalysis.SyntaxNode.IsMissing.get -> bool
Microsoft.CodeAnalysis.SyntaxNode.IsPartOfStructuredTrivia() -> bool
Microsoft.CodeAnalysis.SyntaxNode.IsStructuredTrivia.get -> bool
Microsoft.CodeAnalysis.SyntaxNode.Parent.get -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.SyntaxNode.RawKind.get -> int
Microsoft.CodeAnalysis.SyntaxNode.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxNode.SpanStart.get -> int
Microsoft.CodeAnalysis.SyntaxNode.SyntaxTree.get -> Microsoft.CodeAnalysis.SyntaxTree
Microsoft.CodeAnalysis.SyntaxNodeExtensions
Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsNode() -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsToken() -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.ChildNodesAndTokens() -> Microsoft.CodeAnalysis.ChildSyntaxList
Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsAnnotations.get -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDiagnostics.get -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDirectives.get -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrToken other) -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.FullSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation>
Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation>
Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLeadingTrivia() -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLocation() -> Microsoft.CodeAnalysis.Location
Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetNextSibling() -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetPreviousSibling() -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetTrailingTrivia() -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation annotation) -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(string annotationKind) -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasLeadingTrivia.get -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasTrailingTrivia.get -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNodeOrToken other) -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsMissing.get -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsNode.get -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsToken.get -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.Language.get -> string
Microsoft.CodeAnalysis.SyntaxNodeOrToken.Parent.get -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.SyntaxNodeOrToken.RawKind.get -> int
Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxNodeOrToken.SpanStart.get -> int
Microsoft.CodeAnalysis.SyntaxNodeOrToken.SyntaxTree.get -> Microsoft.CodeAnalysis.SyntaxTree
Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToFullString() -> string
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(params Microsoft.CodeAnalysis.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithLeadingTrivia(params Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithTrailingTrivia(params Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(params Microsoft.CodeAnalysis.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(string annotationKind) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrToken.WriteTo(System.IO.TextWriter writer) -> void
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Add(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken) -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.AddRange(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken> nodesOrTokens) -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Any() -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Count.get -> int
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator.Current.get -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList other) -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.First() -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FirstOrDefault() -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FullSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetEnumerator() -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken) -> int
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Insert(int index, Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken) -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.InsertRange(int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken> nodesAndTokens) -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Last() -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.LastOrDefault() -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Remove(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrTokenInList) -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.RemoveAt(int index) -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Replace(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrTokenInList, Microsoft.CodeAnalysis.SyntaxNodeOrToken newNodeOrToken) -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrTokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken> newNodesAndTokens) -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToFullString() -> string
Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.this[int index].get -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
Microsoft.CodeAnalysis.SyntaxReference
Microsoft.CodeAnalysis.SyntaxRemoveOptions
Microsoft.CodeAnalysis.SyntaxRemoveOptions.AddElasticMarker = 32 -> Microsoft.CodeAnalysis.SyntaxRemoveOptions
Microsoft.CodeAnalysis.SyntaxRemoveOptions.KeepDirectives = 8 -> Microsoft.CodeAnalysis.SyntaxRemoveOptions
Microsoft.CodeAnalysis.SyntaxRemoveOptions.KeepEndOfLine = 16 -> Microsoft.CodeAnalysis.SyntaxRemoveOptions
Microsoft.CodeAnalysis.SyntaxRemoveOptions.KeepExteriorTrivia = Microsoft.CodeAnalysis.SyntaxRemoveOptions.KeepLeadingTrivia | Microsoft.CodeAnalysis.SyntaxRemoveOptions.KeepTrailingTrivia -> Microsoft.CodeAnalysis.SyntaxRemoveOptions
Microsoft.CodeAnalysis.SyntaxRemoveOptions.KeepLeadingTrivia = 1 -> Microsoft.CodeAnalysis.SyntaxRemoveOptions
Microsoft.CodeAnalysis.SyntaxRemoveOptions.KeepNoTrivia = 0 -> Microsoft.CodeAnalysis.SyntaxRemoveOptions
Microsoft.CodeAnalysis.SyntaxRemoveOptions.KeepTrailingTrivia = 2 -> Microsoft.CodeAnalysis.SyntaxRemoveOptions
Microsoft.CodeAnalysis.SyntaxRemoveOptions.KeepUnbalancedDirectives = 4 -> Microsoft.CodeAnalysis.SyntaxRemoveOptions
Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.ContainsAnnotations.get -> bool
Microsoft.CodeAnalysis.SyntaxToken.ContainsDiagnostics.get -> bool
Microsoft.CodeAnalysis.SyntaxToken.ContainsDirectives.get -> bool
Microsoft.CodeAnalysis.SyntaxToken.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxToken token) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.Equals(Microsoft.CodeAnalysis.SyntaxToken other) -> bool
Microsoft.CodeAnalysis.SyntaxToken.FullSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxToken.GetAllTrivia() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>
Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.Collections.Generic.IEnumerable<string> annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation>
Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(params string[] annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation>
Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation>
Microsoft.CodeAnalysis.SyntaxToken.GetDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
Microsoft.CodeAnalysis.SyntaxToken.GetLocation() -> Microsoft.CodeAnalysis.Location
Microsoft.CodeAnalysis.SyntaxToken.GetNextToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.GetPreviousToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation annotation) -> bool
Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(params string[] annotationKinds) -> bool
Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(string annotationKind) -> bool
Microsoft.CodeAnalysis.SyntaxToken.HasLeadingTrivia.get -> bool
Microsoft.CodeAnalysis.SyntaxToken.HasStructuredTrivia.get -> bool
Microsoft.CodeAnalysis.SyntaxToken.HasTrailingTrivia.get -> bool
Microsoft.CodeAnalysis.SyntaxToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxToken token) -> bool
Microsoft.CodeAnalysis.SyntaxToken.IsMissing.get -> bool
Microsoft.CodeAnalysis.SyntaxToken.IsPartOfStructuredTrivia() -> bool
Microsoft.CodeAnalysis.SyntaxToken.Language.get -> string
Microsoft.CodeAnalysis.SyntaxToken.LeadingTrivia.get -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxToken.Parent.get -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.SyntaxToken.RawKind.get -> int
Microsoft.CodeAnalysis.SyntaxToken.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxToken.SpanStart.get -> int
Microsoft.CodeAnalysis.SyntaxToken.SyntaxTree.get -> Microsoft.CodeAnalysis.SyntaxTree
Microsoft.CodeAnalysis.SyntaxToken.Text.get -> string
Microsoft.CodeAnalysis.SyntaxToken.ToFullString() -> string
Microsoft.CodeAnalysis.SyntaxToken.TrailingTrivia.get -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxToken.Value.get -> object
Microsoft.CodeAnalysis.SyntaxToken.ValueText.get -> string
Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(params Microsoft.CodeAnalysis.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList trivia) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(params Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList trivia) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(params Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithTriviaFrom(Microsoft.CodeAnalysis.SyntaxToken token) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(params Microsoft.CodeAnalysis.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(string annotationKind) -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxToken.WriteTo(System.IO.TextWriter writer) -> void
Microsoft.CodeAnalysis.SyntaxTokenList
Microsoft.CodeAnalysis.SyntaxTokenList.Add(Microsoft.CodeAnalysis.SyntaxToken token) -> Microsoft.CodeAnalysis.SyntaxTokenList
Microsoft.CodeAnalysis.SyntaxTokenList.AddRange(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> tokens) -> Microsoft.CodeAnalysis.SyntaxTokenList
Microsoft.CodeAnalysis.SyntaxTokenList.Any() -> bool
Microsoft.CodeAnalysis.SyntaxTokenList.Count.get -> int
Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator
Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator.Current.get -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SyntaxTokenList.Equals(Microsoft.CodeAnalysis.SyntaxTokenList other) -> bool
Microsoft.CodeAnalysis.SyntaxTokenList.First() -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxTokenList.FullSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxTokenList.GetEnumerator() -> Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator
Microsoft.CodeAnalysis.SyntaxTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxToken tokenInList) -> int
Microsoft.CodeAnalysis.SyntaxTokenList.Insert(int index, Microsoft.CodeAnalysis.SyntaxToken token) -> Microsoft.CodeAnalysis.SyntaxTokenList
Microsoft.CodeAnalysis.SyntaxTokenList.InsertRange(int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> tokens) -> Microsoft.CodeAnalysis.SyntaxTokenList
Microsoft.CodeAnalysis.SyntaxTokenList.Last() -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxTokenList.Remove(Microsoft.CodeAnalysis.SyntaxToken tokenInList) -> Microsoft.CodeAnalysis.SyntaxTokenList
Microsoft.CodeAnalysis.SyntaxTokenList.RemoveAt(int index) -> Microsoft.CodeAnalysis.SyntaxTokenList
Microsoft.CodeAnalysis.SyntaxTokenList.Replace(Microsoft.CodeAnalysis.SyntaxToken tokenInList, Microsoft.CodeAnalysis.SyntaxToken newToken) -> Microsoft.CodeAnalysis.SyntaxTokenList
Microsoft.CodeAnalysis.SyntaxTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> newTokens) -> Microsoft.CodeAnalysis.SyntaxTokenList
Microsoft.CodeAnalysis.SyntaxTokenList.Reverse() -> Microsoft.CodeAnalysis.SyntaxTokenList.Reversed
Microsoft.CodeAnalysis.SyntaxTokenList.Reversed
Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator
Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator.Current.get -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator.Enumerator(ref Microsoft.CodeAnalysis.SyntaxTokenList list) -> void
Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Equals(Microsoft.CodeAnalysis.SyntaxTokenList.Reversed other) -> bool
Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.GetEnumerator() -> Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator
Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Reversed(Microsoft.CodeAnalysis.SyntaxTokenList list) -> void
Microsoft.CodeAnalysis.SyntaxTokenList.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxTokenList.ToFullString() -> string
Microsoft.CodeAnalysis.SyntaxTokenList.this[int index].get -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxTree
Microsoft.CodeAnalysis.SyntaxTree.GetRoot(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.SyntaxTree.GetRootAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.SyntaxNode>
Microsoft.CodeAnalysis.SyntaxTree.Options.get -> Microsoft.CodeAnalysis.ParseOptions
Microsoft.CodeAnalysis.SyntaxTree.TryGetRoot(out Microsoft.CodeAnalysis.SyntaxNode root) -> bool
Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTrivia.ContainsDiagnostics.get -> bool
Microsoft.CodeAnalysis.SyntaxTrivia.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxTrivia trivia) -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTrivia.Equals(Microsoft.CodeAnalysis.SyntaxTrivia other) -> bool
Microsoft.CodeAnalysis.SyntaxTrivia.FullSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(params string[] annotationKinds) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation>
Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(string annotationKind) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation>
Microsoft.CodeAnalysis.SyntaxTrivia.GetDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
Microsoft.CodeAnalysis.SyntaxTrivia.GetLocation() -> Microsoft.CodeAnalysis.Location
Microsoft.CodeAnalysis.SyntaxTrivia.GetStructure() -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation annotation) -> bool
Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(params string[] annotationKinds) -> bool
Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(string annotationKind) -> bool
Microsoft.CodeAnalysis.SyntaxTrivia.HasStructure.get -> bool
Microsoft.CodeAnalysis.SyntaxTrivia.IsDirective.get -> bool
Microsoft.CodeAnalysis.SyntaxTrivia.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTrivia trivia) -> bool
Microsoft.CodeAnalysis.SyntaxTrivia.IsPartOfStructuredTrivia() -> bool
Microsoft.CodeAnalysis.SyntaxTrivia.Language.get -> string
Microsoft.CodeAnalysis.SyntaxTrivia.RawKind.get -> int
Microsoft.CodeAnalysis.SyntaxTrivia.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxTrivia.SpanStart.get -> int
Microsoft.CodeAnalysis.SyntaxTrivia.SyntaxTree.get -> Microsoft.CodeAnalysis.SyntaxTree
Microsoft.CodeAnalysis.SyntaxTrivia.ToFullString() -> string
Microsoft.CodeAnalysis.SyntaxTrivia.Token.get -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(params Microsoft.CodeAnalysis.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation> annotations) -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(params Microsoft.CodeAnalysis.SyntaxAnnotation[] annotations) -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(string annotationKind) -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTrivia.WriteTo(System.IO.TextWriter writer) -> void
Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxTriviaList.Add(Microsoft.CodeAnalysis.SyntaxTrivia trivia) -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxTriviaList.AddRange(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxTriviaList.Any() -> bool
Microsoft.CodeAnalysis.SyntaxTriviaList.Count.get -> int
Microsoft.CodeAnalysis.SyntaxTriviaList.ElementAt(int index) -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator
Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator.Current.get -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SyntaxTriviaList.Equals(Microsoft.CodeAnalysis.SyntaxTriviaList other) -> bool
Microsoft.CodeAnalysis.SyntaxTriviaList.First() -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTriviaList.FullSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxTriviaList.GetEnumerator() -> Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator
Microsoft.CodeAnalysis.SyntaxTriviaList.IndexOf(Microsoft.CodeAnalysis.SyntaxTrivia triviaInList) -> int
Microsoft.CodeAnalysis.SyntaxTriviaList.Insert(int index, Microsoft.CodeAnalysis.SyntaxTrivia trivia) -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxTriviaList.InsertRange(int index, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia) -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxTriviaList.Last() -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTriviaList.Remove(Microsoft.CodeAnalysis.SyntaxTrivia triviaInList) -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxTriviaList.RemoveAt(int index) -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxTriviaList.Replace(Microsoft.CodeAnalysis.SyntaxTrivia triviaInList, Microsoft.CodeAnalysis.SyntaxTrivia newTrivia) -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxTriviaList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxTrivia triviaInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> newTrivia) -> Microsoft.CodeAnalysis.SyntaxTriviaList
Microsoft.CodeAnalysis.SyntaxTriviaList.Reverse() -> Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed
Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed
Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator
Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator.Current.get -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator.Enumerator(ref Microsoft.CodeAnalysis.SyntaxTriviaList list) -> void
Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Equals(Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed other) -> bool
Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.GetEnumerator() -> Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator
Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Reversed(Microsoft.CodeAnalysis.SyntaxTriviaList list) -> void
Microsoft.CodeAnalysis.SyntaxTriviaList.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.SyntaxTriviaList.ToFullString() -> string
Microsoft.CodeAnalysis.SyntaxTriviaList.this[int index].get -> Microsoft.CodeAnalysis.SyntaxTrivia
Microsoft.CodeAnalysis.SyntaxWalker
Microsoft.CodeAnalysis.SyntaxWalker.SyntaxWalker(Microsoft.CodeAnalysis.SyntaxWalkerDepth depth = Microsoft.CodeAnalysis.SyntaxWalkerDepth.Node) -> void
Microsoft.CodeAnalysis.SyntaxWalkerDepth
Microsoft.CodeAnalysis.SyntaxWalkerDepth.Node = 0 -> Microsoft.CodeAnalysis.SyntaxWalkerDepth
Microsoft.CodeAnalysis.SyntaxWalkerDepth.StructuredTrivia = 3 -> Microsoft.CodeAnalysis.SyntaxWalkerDepth
Microsoft.CodeAnalysis.SyntaxWalkerDepth.Token = 1 -> Microsoft.CodeAnalysis.SyntaxWalkerDepth
Microsoft.CodeAnalysis.SyntaxWalkerDepth.Trivia = 2 -> Microsoft.CodeAnalysis.SyntaxWalkerDepth
Microsoft.CodeAnalysis.Text.LinePosition
Microsoft.CodeAnalysis.Text.LinePosition.Character.get -> int
Microsoft.CodeAnalysis.Text.LinePosition.CompareTo(Microsoft.CodeAnalysis.Text.LinePosition other) -> int
Microsoft.CodeAnalysis.Text.LinePosition.Equals(Microsoft.CodeAnalysis.Text.LinePosition other) -> bool
Microsoft.CodeAnalysis.Text.LinePosition.Line.get -> int
Microsoft.CodeAnalysis.Text.LinePosition.LinePosition(int line, int character) -> void
Microsoft.CodeAnalysis.Text.LinePositionSpan
Microsoft.CodeAnalysis.Text.LinePositionSpan.End.get -> Microsoft.CodeAnalysis.Text.LinePosition
Microsoft.CodeAnalysis.Text.LinePositionSpan.Equals(Microsoft.CodeAnalysis.Text.LinePositionSpan other) -> bool
Microsoft.CodeAnalysis.Text.LinePositionSpan.LinePositionSpan(Microsoft.CodeAnalysis.Text.LinePosition start, Microsoft.CodeAnalysis.Text.LinePosition end) -> void
Microsoft.CodeAnalysis.Text.LinePositionSpan.Start.get -> Microsoft.CodeAnalysis.Text.LinePosition
Microsoft.CodeAnalysis.Text.SourceHashAlgorithm
Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.None = 0 -> Microsoft.CodeAnalysis.Text.SourceHashAlgorithm
Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1 = 1 -> Microsoft.CodeAnalysis.Text.SourceHashAlgorithm
Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha256 = 2 -> Microsoft.CodeAnalysis.Text.SourceHashAlgorithm
Microsoft.CodeAnalysis.Text.SourceText
Microsoft.CodeAnalysis.Text.SourceText.ChecksumAlgorithm.get -> Microsoft.CodeAnalysis.Text.SourceHashAlgorithm
Microsoft.CodeAnalysis.Text.SourceText.ContentEquals(Microsoft.CodeAnalysis.Text.SourceText other) -> bool
Microsoft.CodeAnalysis.Text.SourceText.GetSubText(int start) -> Microsoft.CodeAnalysis.Text.SourceText
Microsoft.CodeAnalysis.Text.SourceText.Lines.get -> Microsoft.CodeAnalysis.Text.TextLineCollection
Microsoft.CodeAnalysis.Text.SourceText.Replace(Microsoft.CodeAnalysis.Text.TextSpan span, string newText) -> Microsoft.CodeAnalysis.Text.SourceText
Microsoft.CodeAnalysis.Text.SourceText.Replace(int start, int length, string newText) -> Microsoft.CodeAnalysis.Text.SourceText
Microsoft.CodeAnalysis.Text.SourceText.SourceText(System.Collections.Immutable.ImmutableArray<byte> checksum = default(System.Collections.Immutable.ImmutableArray<byte>), Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1, Microsoft.CodeAnalysis.Text.SourceTextContainer container = null) -> void
Microsoft.CodeAnalysis.Text.SourceText.WithChanges(params Microsoft.CodeAnalysis.Text.TextChange[] changes) -> Microsoft.CodeAnalysis.Text.SourceText
Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter textWriter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
Microsoft.CodeAnalysis.Text.SourceTextContainer
Microsoft.CodeAnalysis.Text.TextChange
Microsoft.CodeAnalysis.Text.TextChange.Equals(Microsoft.CodeAnalysis.Text.TextChange other) -> bool
Microsoft.CodeAnalysis.Text.TextChange.NewText.get -> string
Microsoft.CodeAnalysis.Text.TextChange.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.Text.TextChange.TextChange(Microsoft.CodeAnalysis.Text.TextSpan span, string newText) -> void
Microsoft.CodeAnalysis.Text.TextChangeEventArgs
Microsoft.CodeAnalysis.Text.TextChangeEventArgs.Changes.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Text.TextChangeRange>
Microsoft.CodeAnalysis.Text.TextChangeEventArgs.NewText.get -> Microsoft.CodeAnalysis.Text.SourceText
Microsoft.CodeAnalysis.Text.TextChangeEventArgs.OldText.get -> Microsoft.CodeAnalysis.Text.SourceText
Microsoft.CodeAnalysis.Text.TextChangeEventArgs.TextChangeEventArgs(Microsoft.CodeAnalysis.Text.SourceText oldText, Microsoft.CodeAnalysis.Text.SourceText newText, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Text.TextChangeRange> changes) -> void
Microsoft.CodeAnalysis.Text.TextChangeEventArgs.TextChangeEventArgs(Microsoft.CodeAnalysis.Text.SourceText oldText, Microsoft.CodeAnalysis.Text.SourceText newText, params Microsoft.CodeAnalysis.Text.TextChangeRange[] changes) -> void
Microsoft.CodeAnalysis.Text.TextChangeRange
Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(Microsoft.CodeAnalysis.Text.TextChangeRange other) -> bool
Microsoft.CodeAnalysis.Text.TextChangeRange.NewLength.get -> int
Microsoft.CodeAnalysis.Text.TextChangeRange.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.Text.TextChangeRange.TextChangeRange(Microsoft.CodeAnalysis.Text.TextSpan span, int newLength) -> void
Microsoft.CodeAnalysis.Text.TextLine
Microsoft.CodeAnalysis.Text.TextLine.End.get -> int
Microsoft.CodeAnalysis.Text.TextLine.EndIncludingLineBreak.get -> int
Microsoft.CodeAnalysis.Text.TextLine.Equals(Microsoft.CodeAnalysis.Text.TextLine other) -> bool
Microsoft.CodeAnalysis.Text.TextLine.LineNumber.get -> int
Microsoft.CodeAnalysis.Text.TextLine.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.Text.TextLine.SpanIncludingLineBreak.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.Text.TextLine.Start.get -> int
Microsoft.CodeAnalysis.Text.TextLine.Text.get -> Microsoft.CodeAnalysis.Text.SourceText
Microsoft.CodeAnalysis.Text.TextLineCollection
Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator
Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator.Current.get -> Microsoft.CodeAnalysis.Text.TextLine
Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.Text.TextLineCollection.GetEnumerator() -> Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator
Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePositionSpan(Microsoft.CodeAnalysis.Text.TextSpan span) -> Microsoft.CodeAnalysis.Text.LinePositionSpan
Microsoft.CodeAnalysis.Text.TextLineCollection.GetPosition(Microsoft.CodeAnalysis.Text.LinePosition position) -> int
Microsoft.CodeAnalysis.Text.TextLineCollection.GetTextSpan(Microsoft.CodeAnalysis.Text.LinePositionSpan span) -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.Text.TextSpan.CompareTo(Microsoft.CodeAnalysis.Text.TextSpan other) -> int
Microsoft.CodeAnalysis.Text.TextSpan.Contains(Microsoft.CodeAnalysis.Text.TextSpan span) -> bool
Microsoft.CodeAnalysis.Text.TextSpan.Contains(int position) -> bool
Microsoft.CodeAnalysis.Text.TextSpan.End.get -> int
Microsoft.CodeAnalysis.Text.TextSpan.Equals(Microsoft.CodeAnalysis.Text.TextSpan other) -> bool
Microsoft.CodeAnalysis.Text.TextSpan.Intersection(Microsoft.CodeAnalysis.Text.TextSpan span) -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(Microsoft.CodeAnalysis.Text.TextSpan span) -> bool
Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(int position) -> bool
Microsoft.CodeAnalysis.Text.TextSpan.IsEmpty.get -> bool
Microsoft.CodeAnalysis.Text.TextSpan.Length.get -> int
Microsoft.CodeAnalysis.Text.TextSpan.Overlap(Microsoft.CodeAnalysis.Text.TextSpan span) -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Text.TextSpan.OverlapsWith(Microsoft.CodeAnalysis.Text.TextSpan span) -> bool
Microsoft.CodeAnalysis.Text.TextSpan.Start.get -> int
Microsoft.CodeAnalysis.Text.TextSpan.TextSpan(int start, int length) -> void
Microsoft.CodeAnalysis.TypeInfo
Microsoft.CodeAnalysis.TypeInfo.ConvertedType.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.TypeInfo.Equals(Microsoft.CodeAnalysis.TypeInfo other) -> bool
Microsoft.CodeAnalysis.TypeInfo.Type.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Array = 1 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Class = 2 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Delegate = 3 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Dynamic = 4 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Enum = 5 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Error = 6 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Interface = 7 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Module = 8 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Pointer = 9 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Struct = 10 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Structure = 10 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Submission = 12 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.TypeParameter = 11 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeKind.Unknown = 0 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.TypeParameterKind
Microsoft.CodeAnalysis.TypeParameterKind.Cref = 2 -> Microsoft.CodeAnalysis.TypeParameterKind
Microsoft.CodeAnalysis.TypeParameterKind.Method = 1 -> Microsoft.CodeAnalysis.TypeParameterKind
Microsoft.CodeAnalysis.TypeParameterKind.Type = 0 -> Microsoft.CodeAnalysis.TypeParameterKind
Microsoft.CodeAnalysis.TypedConstant
Microsoft.CodeAnalysis.TypedConstant.Equals(Microsoft.CodeAnalysis.TypedConstant other) -> bool
Microsoft.CodeAnalysis.TypedConstant.IsNull.get -> bool
Microsoft.CodeAnalysis.TypedConstant.Kind.get -> Microsoft.CodeAnalysis.TypedConstantKind
Microsoft.CodeAnalysis.TypedConstant.Type.get -> Microsoft.CodeAnalysis.ITypeSymbol
Microsoft.CodeAnalysis.TypedConstant.Value.get -> object
Microsoft.CodeAnalysis.TypedConstant.Values.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TypedConstant>
Microsoft.CodeAnalysis.TypedConstantKind
Microsoft.CodeAnalysis.TypedConstantKind.Array = 4 -> Microsoft.CodeAnalysis.TypedConstantKind
Microsoft.CodeAnalysis.TypedConstantKind.Enum = 2 -> Microsoft.CodeAnalysis.TypedConstantKind
Microsoft.CodeAnalysis.TypedConstantKind.Error = 0 -> Microsoft.CodeAnalysis.TypedConstantKind
Microsoft.CodeAnalysis.TypedConstantKind.Primitive = 1 -> Microsoft.CodeAnalysis.TypedConstantKind
Microsoft.CodeAnalysis.TypedConstantKind.Type = 3 -> Microsoft.CodeAnalysis.TypedConstantKind
Microsoft.CodeAnalysis.UnresolvedMetadataReference
Microsoft.CodeAnalysis.UnresolvedMetadataReference.Reference.get -> string
Microsoft.CodeAnalysis.VarianceKind
Microsoft.CodeAnalysis.VarianceKind.In = 2 -> Microsoft.CodeAnalysis.VarianceKind
Microsoft.CodeAnalysis.VarianceKind.None = 0 -> Microsoft.CodeAnalysis.VarianceKind
Microsoft.CodeAnalysis.VarianceKind.Out = 1 -> Microsoft.CodeAnalysis.VarianceKind
Microsoft.CodeAnalysis.WellKnownDiagnosticTags
Microsoft.CodeAnalysis.WellKnownMemberNames
Microsoft.CodeAnalysis.XmlReferenceResolver
Microsoft.CodeAnalysis.XmlReferenceResolver.XmlReferenceResolver() -> void
abstract Microsoft.CodeAnalysis.AdditionalText.GetText(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Text.SourceText
abstract Microsoft.CodeAnalysis.AdditionalText.Path.get -> string
abstract Microsoft.CodeAnalysis.AttributeData.CommonApplicationSyntaxReference.get -> Microsoft.CodeAnalysis.SyntaxReference
abstract Microsoft.CodeAnalysis.AttributeData.CommonAttributeClass.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
abstract Microsoft.CodeAnalysis.AttributeData.CommonAttributeConstructor.get -> Microsoft.CodeAnalysis.IMethodSymbol
abstract Microsoft.CodeAnalysis.AttributeData.CommonConstructorArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TypedConstant>
abstract Microsoft.CodeAnalysis.AttributeData.CommonNamedArguments.get -> System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.TypedConstant>>
abstract Microsoft.CodeAnalysis.Compilation.AppendDefaultVersionResource(System.IO.Stream resourceStream) -> void
abstract Microsoft.CodeAnalysis.Compilation.CommonAddSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> trees) -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.CommonAssembly.get -> Microsoft.CodeAnalysis.IAssemblySymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonClone() -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.CommonContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree syntaxTree) -> bool
abstract Microsoft.CodeAnalysis.Compilation.CommonCreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol elementType, int rank) -> Microsoft.CodeAnalysis.IArrayTypeSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonCreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol elementType) -> Microsoft.CodeAnalysis.IPointerTypeSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonDynamicType.get -> Microsoft.CodeAnalysis.ITypeSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonGetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference reference) -> Microsoft.CodeAnalysis.ISymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonGetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol namespaceSymbol) -> Microsoft.CodeAnalysis.INamespaceSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonGetEntryPoint(System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.IMethodSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonGetMetadataReference(Microsoft.CodeAnalysis.IAssemblySymbol assemblySymbol) -> Microsoft.CodeAnalysis.MetadataReference
abstract Microsoft.CodeAnalysis.Compilation.CommonGetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility) -> Microsoft.CodeAnalysis.SemanticModel
abstract Microsoft.CodeAnalysis.Compilation.CommonGetSpecialType(Microsoft.CodeAnalysis.SpecialType specialType) -> Microsoft.CodeAnalysis.INamedTypeSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonGetSubmissionResultType(out bool hasValue) -> Microsoft.CodeAnalysis.ITypeSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonGetTypeByMetadataName(string metadataName) -> Microsoft.CodeAnalysis.INamedTypeSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonGlobalNamespace.get -> Microsoft.CodeAnalysis.INamespaceSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonObjectType.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonOptions.get -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.Compilation.CommonPreviousSubmission.get -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.CommonRemoveAllSyntaxTrees() -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.CommonRemoveSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> trees) -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.CommonReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree oldTree, Microsoft.CodeAnalysis.SyntaxTree newTree) -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.CommonScriptClass.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonSourceModule.get -> Microsoft.CodeAnalysis.IModuleSymbol
abstract Microsoft.CodeAnalysis.Compilation.CommonSyntaxTrees.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree>
abstract Microsoft.CodeAnalysis.Compilation.CommonWithAssemblyName(string outputName) -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.CommonWithOptions(Microsoft.CodeAnalysis.CompilationOptions options) -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.CommonWithPreviousSubmission(Microsoft.CodeAnalysis.Compilation newPreviousSubmission) -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.CommonWithReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> newReferences) -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.Compilation.ContainsSymbolsWithName(System.Func<string, bool> predicate, Microsoft.CodeAnalysis.SymbolFilter filter = Microsoft.CodeAnalysis.SymbolFilter.TypeAndMember, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> bool
abstract Microsoft.CodeAnalysis.Compilation.CreateErrorTypeSymbol(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container, string name, int arity) -> Microsoft.CodeAnalysis.INamedTypeSymbol
abstract Microsoft.CodeAnalysis.Compilation.DirectiveReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference>
abstract Microsoft.CodeAnalysis.Compilation.GetDeclarationDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.Compilation.GetDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.Compilation.GetMethodBodyDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.Compilation.GetParseDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.Compilation.GetSymbolsWithName(System.Func<string, bool> predicate, Microsoft.CodeAnalysis.SymbolFilter filter = Microsoft.CodeAnalysis.SymbolFilter.TypeAndMember, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.Compilation.IsCaseSensitive.get -> bool
abstract Microsoft.CodeAnalysis.Compilation.Language.get -> string
abstract Microsoft.CodeAnalysis.Compilation.ReferencedAssemblyNames.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.AssemblyIdentity>
abstract Microsoft.CodeAnalysis.Compilation.ToMetadataReference(System.Collections.Immutable.ImmutableArray<string> aliases = default(System.Collections.Immutable.ImmutableArray<string>), bool embedInteropTypes = false) -> Microsoft.CodeAnalysis.CompilationReference
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer comparer) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithFeatures(System.Collections.Immutable.ImmutableArray<string> features) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver resolver) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel value) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithOutputKind(Microsoft.CodeAnalysis.OutputKind kind) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithPlatform(Microsoft.CodeAnalysis.Platform platform) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver resolver) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>> specificDiagnosticOptions) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysis.ReportDiagnostic> specificDiagnosticOptions) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider provider) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CompilationOptions.CommonWithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver resolver) -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.ControlFlowAnalysis.EndPointIsReachable.get -> bool
abstract Microsoft.CodeAnalysis.ControlFlowAnalysis.EntryPoints.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SyntaxNode>
abstract Microsoft.CodeAnalysis.ControlFlowAnalysis.ExitPoints.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SyntaxNode>
abstract Microsoft.CodeAnalysis.ControlFlowAnalysis.ReturnStatements.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SyntaxNode>
abstract Microsoft.CodeAnalysis.ControlFlowAnalysis.StartPointIsReachable.get -> bool
abstract Microsoft.CodeAnalysis.ControlFlowAnalysis.Succeeded.get -> bool
abstract Microsoft.CodeAnalysis.CustomModifier.IsOptional.get -> bool
abstract Microsoft.CodeAnalysis.CustomModifier.Modifier.get -> Microsoft.CodeAnalysis.INamedTypeSymbol
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.AlwaysAssigned.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.Captured.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsIn.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsOut.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.ReadInside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.ReadOutside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.Succeeded.get -> bool
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.UnsafeAddressTaken.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.VariablesDeclared.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenInside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenOutside.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Location>
abstract Microsoft.CodeAnalysis.Diagnostic.Descriptor.get -> Microsoft.CodeAnalysis.DiagnosticDescriptor
abstract Microsoft.CodeAnalysis.Diagnostic.Equals(Microsoft.CodeAnalysis.Diagnostic obj) -> bool
abstract Microsoft.CodeAnalysis.Diagnostic.GetMessage(System.IFormatProvider formatProvider = null) -> string
abstract Microsoft.CodeAnalysis.Diagnostic.Id.get -> string
abstract Microsoft.CodeAnalysis.Diagnostic.Location.get -> Microsoft.CodeAnalysis.Location
abstract Microsoft.CodeAnalysis.Diagnostic.Severity.get -> Microsoft.CodeAnalysis.DiagnosticSeverity
abstract Microsoft.CodeAnalysis.Diagnostic.WarningLevel.get -> int
abstract Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockStartAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationStartAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSemanticModelAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext> action, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SymbolKind> symbolKinds) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext> action, System.Collections.Immutable.ImmutableArray<TLanguageKindEnum> syntaxKinds) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxTreeAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.FullPath.get -> string
abstract Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzers(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer>
abstract Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzersForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer>
abstract Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Id.get -> string
abstract Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.RegisterCodeBlockEndAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.RegisterSyntaxNodeAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext> action, System.Collections.Immutable.ImmutableArray<TLanguageKindEnum> syntaxKinds) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockStartAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCompilationEndAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext> action, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SymbolKind> symbolKinds) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction<TLanguageKindEnum>(System.Action<Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext> action, System.Collections.Immutable.ImmutableArray<TLanguageKindEnum> syntaxKinds) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction(System.Action<Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext> action) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext context) -> void
abstract Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.DiagnosticDescriptor>
abstract Microsoft.CodeAnalysis.DocumentationProvider.GetDocumentationForSymbol(string documentationMemberID, System.Globalization.CultureInfo preferredCulture, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> string
abstract Microsoft.CodeAnalysis.LocalizableString.AreEqual(object other) -> bool
abstract Microsoft.CodeAnalysis.LocalizableString.GetHash() -> int
abstract Microsoft.CodeAnalysis.LocalizableString.GetText(System.IFormatProvider formatProvider) -> string
abstract Microsoft.CodeAnalysis.Location.Kind.get -> Microsoft.CodeAnalysis.LocationKind
abstract Microsoft.CodeAnalysis.Metadata.CommonCopy() -> Microsoft.CodeAnalysis.Metadata
abstract Microsoft.CodeAnalysis.Metadata.Dispose() -> void
abstract Microsoft.CodeAnalysis.Metadata.Kind.get -> Microsoft.CodeAnalysis.MetadataImageKind
abstract Microsoft.CodeAnalysis.MetadataReferenceResolver.ResolveReference(string reference, string baseFilePath, Microsoft.CodeAnalysis.MetadataReferenceProperties properties) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.PortableExecutableReference>
abstract Microsoft.CodeAnalysis.ParseOptions.CommonWithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode documentationMode) -> Microsoft.CodeAnalysis.ParseOptions
abstract Microsoft.CodeAnalysis.ParseOptions.CommonWithFeatures(System.Collections.Immutable.ImmutableArray<string> features) -> Microsoft.CodeAnalysis.ParseOptions
abstract Microsoft.CodeAnalysis.ParseOptions.CommonWithKind(Microsoft.CodeAnalysis.SourceCodeKind kind) -> Microsoft.CodeAnalysis.ParseOptions
abstract Microsoft.CodeAnalysis.ParseOptions.Features.get -> System.Collections.Immutable.ImmutableArray<string>
abstract Microsoft.CodeAnalysis.ParseOptions.PreprocessorSymbolNames.get -> System.Collections.Generic.IEnumerable<string>
abstract Microsoft.CodeAnalysis.PortableExecutableReference.CreateDocumentationProvider() -> Microsoft.CodeAnalysis.DocumentationProvider
abstract Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadataImpl() -> Microsoft.CodeAnalysis.Metadata
abstract Microsoft.CodeAnalysis.PortableExecutableReference.WithPropertiesImpl(Microsoft.CodeAnalysis.MetadataReferenceProperties properties) -> Microsoft.CodeAnalysis.PortableExecutableReference
abstract Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode firstStatement, Microsoft.CodeAnalysis.SyntaxNode lastStatement) -> Microsoft.CodeAnalysis.ControlFlowAnalysis
abstract Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode statement) -> Microsoft.CodeAnalysis.ControlFlowAnalysis
abstract Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode firstStatement, Microsoft.CodeAnalysis.SyntaxNode lastStatement) -> Microsoft.CodeAnalysis.DataFlowAnalysis
abstract Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode statementOrExpression) -> Microsoft.CodeAnalysis.DataFlowAnalysis
abstract Microsoft.CodeAnalysis.SemanticModel.CompilationCore.get -> Microsoft.CodeAnalysis.Compilation
abstract Microsoft.CodeAnalysis.SemanticModel.GetAliasInfoCore(Microsoft.CodeAnalysis.SyntaxNode nameSyntax, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.IAliasSymbol
abstract Microsoft.CodeAnalysis.SemanticModel.GetConstantValueCore(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Optional<object>
abstract Microsoft.CodeAnalysis.SemanticModel.GetDeclarationDiagnostics(Microsoft.CodeAnalysis.Text.TextSpan? span = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolCore(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.ISymbol
abstract Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolsCore(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.SemanticModel.GetDiagnostics(Microsoft.CodeAnalysis.Text.TextSpan? span = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbolCore(int position, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.ISymbol
abstract Microsoft.CodeAnalysis.SemanticModel.GetMemberGroupCore(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.SemanticModel.GetMethodBodyDiagnostics(Microsoft.CodeAnalysis.Text.TextSpan? span = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode nameSyntax) -> Microsoft.CodeAnalysis.PreprocessingSymbolInfo
abstract Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeAliasInfoCore(int position, Microsoft.CodeAnalysis.SyntaxNode nameSyntax, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysis.IAliasSymbol
abstract Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeSymbolInfoCore(int position, Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysis.SymbolInfo
abstract Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeTypeInfoCore(int position, Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysis.TypeInfo
abstract Microsoft.CodeAnalysis.SemanticModel.GetSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.SymbolInfo
abstract Microsoft.CodeAnalysis.SemanticModel.GetSyntaxDiagnostics(Microsoft.CodeAnalysis.Text.TextSpan? span = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.SemanticModel.GetTypeInfoCore(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.TypeInfo
abstract Microsoft.CodeAnalysis.SemanticModel.IsAccessibleCore(int position, Microsoft.CodeAnalysis.ISymbol symbol) -> bool
abstract Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsFieldCore(int position, Microsoft.CodeAnalysis.IEventSymbol eventSymbol) -> bool
abstract Microsoft.CodeAnalysis.SemanticModel.IsSpeculativeSemanticModel.get -> bool
abstract Microsoft.CodeAnalysis.SemanticModel.Language.get -> string
abstract Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembersCore(int position, string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.SemanticModel.LookupLabelsCore(int position, string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypesCore(int position, Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container, string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembersCore(int position, Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container, string name) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.SemanticModel.LookupSymbolsCore(int position, Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container, string name, bool includeReducedExtensionMethods) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
abstract Microsoft.CodeAnalysis.SemanticModel.OriginalPositionForSpeculation.get -> int
abstract Microsoft.CodeAnalysis.SemanticModel.ParentModelCore.get -> Microsoft.CodeAnalysis.SemanticModel
abstract Microsoft.CodeAnalysis.SemanticModel.SyntaxTreeCore.get -> Microsoft.CodeAnalysis.SyntaxTree
abstract Microsoft.CodeAnalysis.SourceReferenceResolver.NormalizePath(string path, string baseFilePath) -> string
abstract Microsoft.CodeAnalysis.SourceReferenceResolver.OpenRead(string resolvedPath) -> System.IO.Stream
abstract Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(string path, string baseFilePath) -> string
abstract Microsoft.CodeAnalysis.SyntaxNode.ChildThatContainsPosition(int position) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
abstract Microsoft.CodeAnalysis.SyntaxNode.EquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode other) -> bool
abstract Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(int position, System.Func<Microsoft.CodeAnalysis.SyntaxTrivia, bool> stepInto) -> Microsoft.CodeAnalysis.SyntaxToken
abstract Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(int position, bool findInsideTrivia) -> Microsoft.CodeAnalysis.SyntaxToken
abstract Microsoft.CodeAnalysis.SyntaxNode.FindTriviaCore(int position, bool findInsideTrivia) -> Microsoft.CodeAnalysis.SyntaxTrivia
abstract Microsoft.CodeAnalysis.SyntaxNode.InsertNodesInListCore(Microsoft.CodeAnalysis.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> nodesToInsert, bool insertBefore) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxNode.InsertTokensInListCore(Microsoft.CodeAnalysis.SyntaxToken originalToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> newTokens, bool insertBefore) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxNode.InsertTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> newTrivia, bool insertBefore) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode node, bool topLevel = false) -> bool
abstract Microsoft.CodeAnalysis.SyntaxNode.KindText.get -> string
abstract Microsoft.CodeAnalysis.SyntaxNode.Language.get -> string
abstract Microsoft.CodeAnalysis.SyntaxNode.NormalizeWhitespaceCore(string indentation, bool elasticTrivia) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxNode.RemoveNodesCore(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> nodes, Microsoft.CodeAnalysis.SyntaxRemoveOptions options) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxNode.ReplaceCore<TNode>(System.Collections.Generic.IEnumerable<TNode> nodes = null, System.Func<TNode, TNode, Microsoft.CodeAnalysis.SyntaxNode> computeReplacementNode = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> tokens = null, System.Func<Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken> computeReplacementToken = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia = null, System.Func<Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia> computeReplacementTrivia = null) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxNode.ReplaceNodeInListCore(Microsoft.CodeAnalysis.SyntaxNode originalNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> replacementNodes) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxNode.ReplaceTokenInListCore(Microsoft.CodeAnalysis.SyntaxToken originalToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> newTokens) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxNode.ReplaceTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> newTrivia) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxNode.SerializeTo(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
abstract Microsoft.CodeAnalysis.SyntaxNode.SyntaxTreeCore.get -> Microsoft.CodeAnalysis.SyntaxTree
abstract Microsoft.CodeAnalysis.SyntaxNode.ToFullString() -> string
abstract Microsoft.CodeAnalysis.SyntaxNode.WriteTo(System.IO.TextWriter writer) -> void
abstract Microsoft.CodeAnalysis.SyntaxReference.GetSyntax(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxReference.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
abstract Microsoft.CodeAnalysis.SyntaxReference.SyntaxTree.get -> Microsoft.CodeAnalysis.SyntaxTree
abstract Microsoft.CodeAnalysis.SyntaxTree.Encoding.get -> System.Text.Encoding
abstract Microsoft.CodeAnalysis.SyntaxTree.FilePath.get -> string
abstract Microsoft.CodeAnalysis.SyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree syntaxTree) -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextSpan>
abstract Microsoft.CodeAnalysis.SyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree oldTree) -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextChange>
abstract Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode node) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken token) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia trivia) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
abstract Microsoft.CodeAnalysis.SyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan span, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.FileLinePositionSpan
abstract Microsoft.CodeAnalysis.SyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan span) -> Microsoft.CodeAnalysis.Location
abstract Microsoft.CodeAnalysis.SyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan span, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.FileLinePositionSpan
abstract Microsoft.CodeAnalysis.SyntaxTree.GetReference(Microsoft.CodeAnalysis.SyntaxNode node) -> Microsoft.CodeAnalysis.SyntaxReference
abstract Microsoft.CodeAnalysis.SyntaxTree.GetRootAsyncCore(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.SyntaxNode>
abstract Microsoft.CodeAnalysis.SyntaxTree.GetRootCore(System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.SyntaxTree.GetText(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Text.SourceText
abstract Microsoft.CodeAnalysis.SyntaxTree.HasCompilationUnitRoot.get -> bool
abstract Microsoft.CodeAnalysis.SyntaxTree.HasHiddenRegions() -> bool
abstract Microsoft.CodeAnalysis.SyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree tree, bool topLevel = false) -> bool
abstract Microsoft.CodeAnalysis.SyntaxTree.Length.get -> int
abstract Microsoft.CodeAnalysis.SyntaxTree.OptionsCore.get -> Microsoft.CodeAnalysis.ParseOptions
abstract Microsoft.CodeAnalysis.SyntaxTree.TryGetRootCore(out Microsoft.CodeAnalysis.SyntaxNode root) -> bool
abstract Microsoft.CodeAnalysis.SyntaxTree.TryGetText(out Microsoft.CodeAnalysis.Text.SourceText text) -> bool
abstract Microsoft.CodeAnalysis.SyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText newText) -> Microsoft.CodeAnalysis.SyntaxTree
abstract Microsoft.CodeAnalysis.SyntaxTree.WithFilePath(string path) -> Microsoft.CodeAnalysis.SyntaxTree
abstract Microsoft.CodeAnalysis.SyntaxTree.WithRootAndOptions(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.ParseOptions options) -> Microsoft.CodeAnalysis.SyntaxTree
abstract Microsoft.CodeAnalysis.Text.SourceText.CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) -> void
abstract Microsoft.CodeAnalysis.Text.SourceText.Encoding.get -> System.Text.Encoding
abstract Microsoft.CodeAnalysis.Text.SourceText.Length.get -> int
abstract Microsoft.CodeAnalysis.Text.SourceText.this[int position].get -> char
abstract Microsoft.CodeAnalysis.Text.SourceTextContainer.CurrentText.get -> Microsoft.CodeAnalysis.Text.SourceText
abstract Microsoft.CodeAnalysis.Text.SourceTextContainer.TextChanged -> System.EventHandler<Microsoft.CodeAnalysis.Text.TextChangeEventArgs>
abstract Microsoft.CodeAnalysis.Text.TextLineCollection.Count.get -> int
abstract Microsoft.CodeAnalysis.Text.TextLineCollection.IndexOf(int position) -> int
abstract Microsoft.CodeAnalysis.Text.TextLineCollection.this[int index].get -> Microsoft.CodeAnalysis.Text.TextLine
abstract Microsoft.CodeAnalysis.XmlReferenceResolver.OpenRead(string resolvedPath) -> System.IO.Stream
abstract Microsoft.CodeAnalysis.XmlReferenceResolver.ResolveReference(string path, string baseFilePath) -> string
const Microsoft.CodeAnalysis.LanguageNames.CSharp = "C#" -> string
const Microsoft.CodeAnalysis.LanguageNames.VisualBasic = "Visual Basic" -> string
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.AnalyzerException = "AnalyzerException" -> string
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Build = "Build" -> string
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Compiler = "Compiler" -> string
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.EditAndContinue = "EditAndContinue" -> string
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.NotConfigurable = "NotConfigurable" -> string
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Telemetry = "Telemetry" -> string
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Unnecessary = "Unnecessary" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.AdditionOperatorName = "op_Addition" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseAndOperatorName = "op_BitwiseAnd" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseOrOperatorName = "op_BitwiseOr" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.CollectionInitializerAddMethodName = "Add" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ConcatenateOperatorName = "op_Concatenate" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.CurrentPropertyName = "Current" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.DecrementOperatorName = "op_Decrement" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.DefaultScriptClassName = "Script" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateBeginInvokeName = "BeginInvoke" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateEndInvokeName = "EndInvoke" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateInvokeName = "Invoke" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.DestructorName = "Finalize" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.DivisionOperatorName = "op_Division" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.EntryPointMethodName = "Main" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.EnumBackingFieldName = "value__" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.EqualityOperatorName = "op_Equality" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ExclusiveOrOperatorName = "op_ExclusiveOr" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ExplicitConversionName = "op_Explicit" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ExponentOperatorName = "op_Exponent" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.FalseOperatorName = "op_False" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.GetAwaiter = "GetAwaiter" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.GetEnumeratorMethodName = "GetEnumerator" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.GetResult = "GetResult" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.GreaterThanOperatorName = "op_GreaterThan" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.GreaterThanOrEqualOperatorName = "op_GreaterThanOrEqual" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ImplicitConversionName = "op_Implicit" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.IncrementOperatorName = "op_Increment" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.Indexer = "this[]" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.InequalityOperatorName = "op_Inequality" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.InstanceConstructorName = ".ctor" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.IntegerDivisionOperatorName = "op_IntegerDivision" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.IsCompleted = "IsCompleted" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.LeftShiftOperatorName = "op_LeftShift" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.LessThanOperatorName = "op_LessThan" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.LessThanOrEqualOperatorName = "op_LessThanOrEqual" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.LikeOperatorName = "op_Like" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalAndOperatorName = "op_LogicalAnd" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalNotOperatorName = "op_LogicalNot" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalOrOperatorName = "op_LogicalOr" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ModulusOperatorName = "op_Modulus" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.MoveNextMethodName = "MoveNext" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.MultiplyOperatorName = "op_Multiply" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectEquals = "Equals" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectGetHashCode = "GetHashCode" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectToString = "ToString" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.OnCompleted = "OnCompleted" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.OnesComplementOperatorName = "op_OnesComplement" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.RightShiftOperatorName = "op_RightShift" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.StaticConstructorName = ".cctor" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.SubtractionOperatorName = "op_Subtraction" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.TrueOperatorName = "op_True" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.UnaryNegationOperatorName = "op_UnaryNegation" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.UnaryPlusOperatorName = "op_UnaryPlus" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.UnsignedLeftShiftOperatorName = "op_UnsignedLeftShift" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.UnsignedRightShiftOperatorName = "op_UnsignedRightShift" -> string
const Microsoft.CodeAnalysis.WellKnownMemberNames.ValuePropertyName = "Value" -> string
override Microsoft.CodeAnalysis.AssemblyIdentity.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.AssemblyIdentity.GetHashCode() -> int
override Microsoft.CodeAnalysis.AssemblyIdentity.ToString() -> string
override Microsoft.CodeAnalysis.AssemblyMetadata.CommonCopy() -> Microsoft.CodeAnalysis.Metadata
override Microsoft.CodeAnalysis.AssemblyMetadata.Dispose() -> void
override Microsoft.CodeAnalysis.AssemblyMetadata.Kind.get -> Microsoft.CodeAnalysis.MetadataImageKind
override Microsoft.CodeAnalysis.ChildSyntaxList.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.ChildSyntaxList.GetHashCode() -> int
override Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.GetHashCode() -> int
override Microsoft.CodeAnalysis.CompilationReference.Display.get -> string
override Microsoft.CodeAnalysis.Diagnostic.ToString() -> string
override Microsoft.CodeAnalysis.DiagnosticDescriptor.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.DiagnosticDescriptor.GetHashCode() -> int
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.Display.get -> string
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.FullPath.get -> string
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.GetAnalyzers(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.GetAnalyzersForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.Id.get -> string
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.GetHashCode() -> int
override Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.Display.get -> string
override Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.FullPath.get -> string
override Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.GetAnalyzers(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.GetAnalyzersForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.Id.get -> string
override Microsoft.CodeAnalysis.Emit.EmitOptions.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Emit.EmitOptions.GetHashCode() -> int
override Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Emit.SemanticEdit.GetHashCode() -> int
override Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(object other) -> bool
override Microsoft.CodeAnalysis.FileLinePositionSpan.GetHashCode() -> int
override Microsoft.CodeAnalysis.FileLinePositionSpan.ToString() -> string
override Microsoft.CodeAnalysis.LocalizableResourceString.AreEqual(object other) -> bool
override Microsoft.CodeAnalysis.LocalizableResourceString.GetHash() -> int
override Microsoft.CodeAnalysis.LocalizableResourceString.GetText(System.IFormatProvider formatProvider) -> string
override Microsoft.CodeAnalysis.Location.ToString() -> string
override Microsoft.CodeAnalysis.MetadataReferenceProperties.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.MetadataReferenceProperties.GetHashCode() -> int
override Microsoft.CodeAnalysis.ModuleMetadata.CommonCopy() -> Microsoft.CodeAnalysis.Metadata
override Microsoft.CodeAnalysis.ModuleMetadata.Dispose() -> void
override Microsoft.CodeAnalysis.ModuleMetadata.Kind.get -> Microsoft.CodeAnalysis.MetadataImageKind
override Microsoft.CodeAnalysis.PortableExecutableReference.Display.get -> string
override Microsoft.CodeAnalysis.PreprocessingSymbolInfo.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.PreprocessingSymbolInfo.GetHashCode() -> int
override Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.GetHashCode() -> int
override Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.ToString() -> string
override Microsoft.CodeAnalysis.SubsystemVersion.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SubsystemVersion.GetHashCode() -> int
override Microsoft.CodeAnalysis.SubsystemVersion.ToString() -> string
override Microsoft.CodeAnalysis.SymbolDisplayPart.ToString() -> string
override Microsoft.CodeAnalysis.SymbolInfo.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SymbolInfo.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxAnnotation.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxAnnotation.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxList<TNode>.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxList<TNode>.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxList<TNode>.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxList<TNode>.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxList<TNode>.ToString() -> string
override Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToString() -> string
override Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToString() -> string
override Microsoft.CodeAnalysis.SyntaxToken.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxToken.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxToken.ToString() -> string
override Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxTokenList.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxTokenList.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxTokenList.ToString() -> string
override Microsoft.CodeAnalysis.SyntaxTrivia.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxTrivia.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxTrivia.ToString() -> string
override Microsoft.CodeAnalysis.SyntaxTriviaList.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxTriviaList.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.GetHashCode() -> int
override Microsoft.CodeAnalysis.SyntaxTriviaList.ToString() -> string
override Microsoft.CodeAnalysis.Text.LinePosition.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Text.LinePosition.GetHashCode() -> int
override Microsoft.CodeAnalysis.Text.LinePosition.ToString() -> string
override Microsoft.CodeAnalysis.Text.LinePositionSpan.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Text.LinePositionSpan.GetHashCode() -> int
override Microsoft.CodeAnalysis.Text.LinePositionSpan.ToString() -> string
override Microsoft.CodeAnalysis.Text.SourceText.ToString() -> string
override Microsoft.CodeAnalysis.Text.TextChange.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Text.TextChange.GetHashCode() -> int
override Microsoft.CodeAnalysis.Text.TextChange.ToString() -> string
override Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Text.TextChangeRange.GetHashCode() -> int
override Microsoft.CodeAnalysis.Text.TextLine.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Text.TextLine.GetHashCode() -> int
override Microsoft.CodeAnalysis.Text.TextLine.ToString() -> string
override Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator.GetHashCode() -> int
override Microsoft.CodeAnalysis.Text.TextSpan.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Text.TextSpan.GetHashCode() -> int
override Microsoft.CodeAnalysis.Text.TextSpan.ToString() -> string
override Microsoft.CodeAnalysis.TypeInfo.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.TypeInfo.GetHashCode() -> int
override Microsoft.CodeAnalysis.TypedConstant.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.TypedConstant.GetHashCode() -> int
override Microsoft.CodeAnalysis.UnresolvedMetadataReference.Display.get -> string
override abstract Microsoft.CodeAnalysis.CompilationOptions.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysis.CompilationOptions.GetHashCode() -> int
override abstract Microsoft.CodeAnalysis.Diagnostic.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysis.Diagnostic.GetHashCode() -> int
override abstract Microsoft.CodeAnalysis.DocumentationProvider.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysis.DocumentationProvider.GetHashCode() -> int
override abstract Microsoft.CodeAnalysis.Location.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysis.Location.GetHashCode() -> int
override abstract Microsoft.CodeAnalysis.MetadataReferenceResolver.Equals(object other) -> bool
override abstract Microsoft.CodeAnalysis.MetadataReferenceResolver.GetHashCode() -> int
override abstract Microsoft.CodeAnalysis.ParseOptions.Equals(object obj) -> bool
override abstract Microsoft.CodeAnalysis.ParseOptions.GetHashCode() -> int
override abstract Microsoft.CodeAnalysis.SourceReferenceResolver.Equals(object other) -> bool
override abstract Microsoft.CodeAnalysis.SourceReferenceResolver.GetHashCode() -> int
override abstract Microsoft.CodeAnalysis.StrongNameProvider.Equals(object other) -> bool
override abstract Microsoft.CodeAnalysis.StrongNameProvider.GetHashCode() -> int
override abstract Microsoft.CodeAnalysis.SyntaxNode.ToString() -> string
override abstract Microsoft.CodeAnalysis.XmlReferenceResolver.Equals(object other) -> bool
override abstract Microsoft.CodeAnalysis.XmlReferenceResolver.GetHashCode() -> int
override sealed Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.Equals(object obj) -> bool
override sealed Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.GetHashCode() -> int
override sealed Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.ToString() -> string
override sealed Microsoft.CodeAnalysis.LocalizableString.Equals(object other) -> bool
override sealed Microsoft.CodeAnalysis.LocalizableString.GetHashCode() -> int
override sealed Microsoft.CodeAnalysis.LocalizableString.ToString() -> string
readonly Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.ErrorCode -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
readonly Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.Exception -> System.Exception
readonly Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.TypeName -> string
readonly Microsoft.CodeAnalysis.Emit.EmitBaseline.OriginalMetadata -> Microsoft.CodeAnalysis.ModuleMetadata
readonly Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind -> Microsoft.CodeAnalysis.Emit.SemanticEditKind
readonly Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol -> Microsoft.CodeAnalysis.ISymbol
readonly Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol -> Microsoft.CodeAnalysis.ISymbol
readonly Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables -> bool
readonly Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap -> System.Func<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode>
readonly Microsoft.CodeAnalysis.SubsystemVersion.Major -> int
readonly Microsoft.CodeAnalysis.SubsystemVersion.Minor -> int
readonly Microsoft.CodeAnalysis.SyntaxWalker.Depth -> Microsoft.CodeAnalysis.SyntaxWalkerDepth
static Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations<TNode>(this TNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation> annotations) -> TNode
static Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations<TNode>(this TNode node, params Microsoft.CodeAnalysis.SyntaxAnnotation[] annotations) -> TNode
static Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations<TNode>(this TNode node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxAnnotation> annotations) -> TNode
static Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations<TNode>(this TNode node, params Microsoft.CodeAnalysis.SyntaxAnnotation[] annotations) -> TNode
static Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations<TNode>(this TNode node, string annotationKind) -> TNode
static Microsoft.CodeAnalysis.AssemblyIdentity.FromAssemblyDefinition(System.Reflection.Assembly assembly) -> Microsoft.CodeAnalysis.AssemblyIdentity
static Microsoft.CodeAnalysis.AssemblyIdentity.TryParseDisplayName(string displayName, out Microsoft.CodeAnalysis.AssemblyIdentity identity) -> bool
static Microsoft.CodeAnalysis.AssemblyIdentity.TryParseDisplayName(string displayName, out Microsoft.CodeAnalysis.AssemblyIdentity identity, out Microsoft.CodeAnalysis.AssemblyIdentityParts parts) -> bool
static Microsoft.CodeAnalysis.AssemblyIdentity.operator !=(Microsoft.CodeAnalysis.AssemblyIdentity left, Microsoft.CodeAnalysis.AssemblyIdentity right) -> bool
static Microsoft.CodeAnalysis.AssemblyIdentity.operator ==(Microsoft.CodeAnalysis.AssemblyIdentity left, Microsoft.CodeAnalysis.AssemblyIdentity right) -> bool
static Microsoft.CodeAnalysis.AssemblyIdentityComparer.CultureComparer.get -> System.StringComparer
static Microsoft.CodeAnalysis.AssemblyIdentityComparer.SimpleNameComparer.get -> System.StringComparer
static Microsoft.CodeAnalysis.AssemblyMetadata.Create(Microsoft.CodeAnalysis.ModuleMetadata module) -> Microsoft.CodeAnalysis.AssemblyMetadata
static Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ModuleMetadata> modules) -> Microsoft.CodeAnalysis.AssemblyMetadata
static Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ModuleMetadata> modules) -> Microsoft.CodeAnalysis.AssemblyMetadata
static Microsoft.CodeAnalysis.AssemblyMetadata.Create(params Microsoft.CodeAnalysis.ModuleMetadata[] modules) -> Microsoft.CodeAnalysis.AssemblyMetadata
static Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(string path) -> Microsoft.CodeAnalysis.AssemblyMetadata
static Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Generic.IEnumerable<byte> peImage) -> Microsoft.CodeAnalysis.AssemblyMetadata
static Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray<byte> peImage) -> Microsoft.CodeAnalysis.AssemblyMetadata
static Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options) -> Microsoft.CodeAnalysis.AssemblyMetadata
static Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream peStream, bool leaveOpen = false) -> Microsoft.CodeAnalysis.AssemblyMetadata
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.Compare(string left, string right) -> int
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.Comparer.get -> System.StringComparer
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.EndsWith(string value, string possibleEnd) -> bool
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.Equals(string left, string right) -> bool
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.GetHashCode(string value) -> int
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.Text.StringBuilder builder) -> void
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(char c) -> char
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(string value) -> string
static Microsoft.CodeAnalysis.ChildSyntaxList.operator !=(Microsoft.CodeAnalysis.ChildSyntaxList list1, Microsoft.CodeAnalysis.ChildSyntaxList list2) -> bool
static Microsoft.CodeAnalysis.ChildSyntaxList.operator ==(Microsoft.CodeAnalysis.ChildSyntaxList list1, Microsoft.CodeAnalysis.ChildSyntaxList list2) -> bool
static Microsoft.CodeAnalysis.CompilationOptions.operator !=(Microsoft.CodeAnalysis.CompilationOptions left, Microsoft.CodeAnalysis.CompilationOptions right) -> bool
static Microsoft.CodeAnalysis.CompilationOptions.operator ==(Microsoft.CodeAnalysis.CompilationOptions left, Microsoft.CodeAnalysis.CompilationOptions right) -> bool
static Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.LoadFromXml(System.IO.Stream input) -> Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer
static Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Location location, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Location> additionalLocations, System.Collections.Immutable.ImmutableDictionary<string, string> properties, params object[] messageArgs) -> Microsoft.CodeAnalysis.Diagnostic
static Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Location location, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Location> additionalLocations, params object[] messageArgs) -> Microsoft.CodeAnalysis.Diagnostic
static Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Location location, System.Collections.Immutable.ImmutableDictionary<string, string> properties, params object[] messageArgs) -> Microsoft.CodeAnalysis.Diagnostic
static Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Location location, params object[] messageArgs) -> Microsoft.CodeAnalysis.Diagnostic
static Microsoft.CodeAnalysis.Diagnostic.Create(string id, string category, Microsoft.CodeAnalysis.LocalizableString message, Microsoft.CodeAnalysis.DiagnosticSeverity severity, Microsoft.CodeAnalysis.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, Microsoft.CodeAnalysis.LocalizableString title = null, Microsoft.CodeAnalysis.LocalizableString description = null, string helpLink = null, Microsoft.CodeAnalysis.Location location = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Location> additionalLocations = null, System.Collections.Generic.IEnumerable<string> customTags = null, System.Collections.Immutable.ImmutableDictionary<string, string> properties = null) -> Microsoft.CodeAnalysis.Diagnostic
static Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic> diagnostics, Microsoft.CodeAnalysis.Compilation compilation) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>
static Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.IsDiagnosticAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.CompilationOptions options, System.Action<System.Exception, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Diagnostic> onAnalyzerException = null) -> bool
static Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(this Microsoft.CodeAnalysis.Compilation compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
static Microsoft.CodeAnalysis.DocumentationCommentId.CreateDeclarationId(Microsoft.CodeAnalysis.ISymbol symbol) -> string
static Microsoft.CodeAnalysis.DocumentationCommentId.CreateReferenceId(Microsoft.CodeAnalysis.ISymbol symbol) -> string
static Microsoft.CodeAnalysis.DocumentationCommentId.GetFirstSymbolForDeclarationId(string id, Microsoft.CodeAnalysis.Compilation compilation) -> Microsoft.CodeAnalysis.ISymbol
static Microsoft.CodeAnalysis.DocumentationCommentId.GetFirstSymbolForReferenceId(string id, Microsoft.CodeAnalysis.Compilation compilation) -> Microsoft.CodeAnalysis.ISymbol
static Microsoft.CodeAnalysis.DocumentationCommentId.GetSymbolsForDeclarationId(string id, Microsoft.CodeAnalysis.Compilation compilation) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
static Microsoft.CodeAnalysis.DocumentationCommentId.GetSymbolsForReferenceId(string id, Microsoft.CodeAnalysis.Compilation compilation) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
static Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation.Create(System.Collections.Immutable.ImmutableArray<byte> compressedSlotMap, System.Collections.Immutable.ImmutableArray<byte> compressedLambdaMap) -> Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation
static Microsoft.CodeAnalysis.Emit.EmitBaseline.CreateInitialBaseline(Microsoft.CodeAnalysis.ModuleMetadata module, System.Func<System.Reflection.Metadata.MethodDefinitionHandle, Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation> debugInformationProvider) -> Microsoft.CodeAnalysis.Emit.EmitBaseline
static Microsoft.CodeAnalysis.Emit.EmitOptions.operator !=(Microsoft.CodeAnalysis.Emit.EmitOptions left, Microsoft.CodeAnalysis.Emit.EmitOptions right) -> bool
static Microsoft.CodeAnalysis.Emit.EmitOptions.operator ==(Microsoft.CodeAnalysis.Emit.EmitOptions left, Microsoft.CodeAnalysis.Emit.EmitOptions right) -> bool
static Microsoft.CodeAnalysis.ISymbolExtensions.GetConstructedReducedFrom(this Microsoft.CodeAnalysis.IMethodSymbol method) -> Microsoft.CodeAnalysis.IMethodSymbol
static Microsoft.CodeAnalysis.LocalizableString.explicit operator string(Microsoft.CodeAnalysis.LocalizableString localizableResource) -> string
static Microsoft.CodeAnalysis.LocalizableString.implicit operator Microsoft.CodeAnalysis.LocalizableString(string fixedResource) -> Microsoft.CodeAnalysis.LocalizableString
static Microsoft.CodeAnalysis.Location.Create(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, Microsoft.CodeAnalysis.Text.TextSpan textSpan) -> Microsoft.CodeAnalysis.Location
static Microsoft.CodeAnalysis.Location.Create(string filePath, Microsoft.CodeAnalysis.Text.TextSpan textSpan, Microsoft.CodeAnalysis.Text.LinePositionSpan lineSpan) -> Microsoft.CodeAnalysis.Location
static Microsoft.CodeAnalysis.Location.None.get -> Microsoft.CodeAnalysis.Location
static Microsoft.CodeAnalysis.Location.operator !=(Microsoft.CodeAnalysis.Location left, Microsoft.CodeAnalysis.Location right) -> bool
static Microsoft.CodeAnalysis.Location.operator ==(Microsoft.CodeAnalysis.Location left, Microsoft.CodeAnalysis.Location right) -> bool
static Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly assembly) -> Microsoft.CodeAnalysis.MetadataReference
static Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly assembly, Microsoft.CodeAnalysis.MetadataReferenceProperties properties, Microsoft.CodeAnalysis.DocumentationProvider documentation = null) -> Microsoft.CodeAnalysis.MetadataReference
static Microsoft.CodeAnalysis.MetadataReference.CreateFromFile(string path, Microsoft.CodeAnalysis.MetadataReferenceProperties properties = default(Microsoft.CodeAnalysis.MetadataReferenceProperties), Microsoft.CodeAnalysis.DocumentationProvider documentation = null) -> Microsoft.CodeAnalysis.PortableExecutableReference
static Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Generic.IEnumerable<byte> peImage, Microsoft.CodeAnalysis.MetadataReferenceProperties properties = default(Microsoft.CodeAnalysis.MetadataReferenceProperties), Microsoft.CodeAnalysis.DocumentationProvider documentation = null, string filePath = null) -> Microsoft.CodeAnalysis.PortableExecutableReference
static Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Immutable.ImmutableArray<byte> peImage, Microsoft.CodeAnalysis.MetadataReferenceProperties properties = default(Microsoft.CodeAnalysis.MetadataReferenceProperties), Microsoft.CodeAnalysis.DocumentationProvider documentation = null, string filePath = null) -> Microsoft.CodeAnalysis.PortableExecutableReference
static Microsoft.CodeAnalysis.MetadataReference.CreateFromStream(System.IO.Stream peStream, Microsoft.CodeAnalysis.MetadataReferenceProperties properties = default(Microsoft.CodeAnalysis.MetadataReferenceProperties), Microsoft.CodeAnalysis.DocumentationProvider documentation = null, string filePath = null) -> Microsoft.CodeAnalysis.PortableExecutableReference
static Microsoft.CodeAnalysis.MetadataReferenceProperties.operator !=(Microsoft.CodeAnalysis.MetadataReferenceProperties left, Microsoft.CodeAnalysis.MetadataReferenceProperties right) -> bool
static Microsoft.CodeAnalysis.MetadataReferenceProperties.operator ==(Microsoft.CodeAnalysis.MetadataReferenceProperties left, Microsoft.CodeAnalysis.MetadataReferenceProperties right) -> bool
static Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode firstStatement, Microsoft.CodeAnalysis.SyntaxNode lastStatement) -> Microsoft.CodeAnalysis.ControlFlowAnalysis
static Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode statement) -> Microsoft.CodeAnalysis.ControlFlowAnalysis
static Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode firstStatement, Microsoft.CodeAnalysis.SyntaxNode lastStatement) -> Microsoft.CodeAnalysis.DataFlowAnalysis
static Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode statementOrExpression) -> Microsoft.CodeAnalysis.DataFlowAnalysis
static Microsoft.CodeAnalysis.ModelExtensions.GetAliasInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode nameSyntax, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.IAliasSymbol
static Microsoft.CodeAnalysis.ModelExtensions.GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode declaration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.ISymbol
static Microsoft.CodeAnalysis.ModelExtensions.GetMemberGroup(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
static Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeAliasInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SyntaxNode nameSyntax, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysis.IAliasSymbol
static Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysis.SymbolInfo
static Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeTypeInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) -> Microsoft.CodeAnalysis.TypeInfo
static Microsoft.CodeAnalysis.ModelExtensions.GetSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.SymbolInfo
static Microsoft.CodeAnalysis.ModelExtensions.GetTypeInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.TypeInfo
static Microsoft.CodeAnalysis.ModuleMetadata.CreateFromFile(string path) -> Microsoft.CodeAnalysis.ModuleMetadata
static Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Generic.IEnumerable<byte> peImage) -> Microsoft.CodeAnalysis.ModuleMetadata
static Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray<byte> peImage) -> Microsoft.CodeAnalysis.ModuleMetadata
static Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.IntPtr peImage, int size) -> Microsoft.CodeAnalysis.ModuleMetadata
static Microsoft.CodeAnalysis.ModuleMetadata.CreateFromMetadata(System.IntPtr metadata, int size) -> Microsoft.CodeAnalysis.ModuleMetadata
static Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options) -> Microsoft.CodeAnalysis.ModuleMetadata
static Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream peStream, bool leaveOpen = false) -> Microsoft.CodeAnalysis.ModuleMetadata
static Microsoft.CodeAnalysis.Optional<T>.implicit operator Microsoft.CodeAnalysis.Optional<T>(T value) -> Microsoft.CodeAnalysis.Optional<T>
static Microsoft.CodeAnalysis.ParseOptions.operator !=(Microsoft.CodeAnalysis.ParseOptions left, Microsoft.CodeAnalysis.ParseOptions right) -> bool
static Microsoft.CodeAnalysis.ParseOptions.operator ==(Microsoft.CodeAnalysis.ParseOptions left, Microsoft.CodeAnalysis.ParseOptions right) -> bool
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.operator !=(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> left, Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> right) -> bool
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.operator ==(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> left, Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> right) -> bool
static Microsoft.CodeAnalysis.SubsystemVersion.Create(int major, int minor) -> Microsoft.CodeAnalysis.SubsystemVersion
static Microsoft.CodeAnalysis.SubsystemVersion.TryParse(string str, out Microsoft.CodeAnalysis.SubsystemVersion version) -> bool
static Microsoft.CodeAnalysis.SymbolDisplayExtensions.ToDisplayString(this System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SymbolDisplayPart> parts) -> string
static Microsoft.CodeAnalysis.SyntaxAnnotation.operator !=(Microsoft.CodeAnalysis.SyntaxAnnotation left, Microsoft.CodeAnalysis.SyntaxAnnotation right) -> bool
static Microsoft.CodeAnalysis.SyntaxAnnotation.operator ==(Microsoft.CodeAnalysis.SyntaxAnnotation left, Microsoft.CodeAnalysis.SyntaxAnnotation right) -> bool
static Microsoft.CodeAnalysis.SyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode>(Microsoft.CodeAnalysis.SyntaxList<TNode> nodes) -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode>
static Microsoft.CodeAnalysis.SyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SyntaxList<TNode>(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode>
static Microsoft.CodeAnalysis.SyntaxList<TNode>.operator !=(Microsoft.CodeAnalysis.SyntaxList<TNode> left, Microsoft.CodeAnalysis.SyntaxList<TNode> right) -> bool
static Microsoft.CodeAnalysis.SyntaxList<TNode>.operator ==(Microsoft.CodeAnalysis.SyntaxList<TNode> left, Microsoft.CodeAnalysis.SyntaxList<TNode> right) -> bool
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNode<TNode>(this Microsoft.CodeAnalysis.SyntaxNode root, TNode node) -> TNode
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes<TNode>(this Microsoft.CodeAnalysis.SyntaxNode root, System.Collections.Generic.IEnumerable<TNode> nodes) -> System.Collections.Generic.IEnumerable<TNode>
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes<TNode>(this Microsoft.CodeAnalysis.SyntaxNode root, TNode node) -> System.Collections.Generic.IEnumerable<TNode>
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesAfter<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> newNodes) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesBefore<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> newNodes) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensAfter<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> newTokens) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensBefore<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> newTokens) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaAfter<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxTrivia trivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> newTrivia) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaBefore<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxTrivia trivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> newTrivia) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace<TNode>(this TNode node, string indentation = "    ", bool elasticTrivia = false) -> TNode
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxRemoveOptions options) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNodes<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> nodes, Microsoft.CodeAnalysis.SyntaxRemoveOptions options) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.SyntaxNode newNode) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxNode oldNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> newNodes) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes<TRoot, TNode>(this TRoot root, System.Collections.Generic.IEnumerable<TNode> nodes, System.Func<TNode, TNode, Microsoft.CodeAnalysis.SyntaxNode> computeReplacementNode) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> nodes, System.Func<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode> computeReplacementNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> tokens, System.Func<Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken> computeReplacementToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia, System.Func<Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia> computeReplacementTrivia) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxToken oldToken, Microsoft.CodeAnalysis.SyntaxToken newToken) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> newTokens) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTokens<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> tokens, System.Func<Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken> computeReplacementToken) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxTrivia oldTrivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> newTrivia) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia<TRoot>(this TRoot root, Microsoft.CodeAnalysis.SyntaxTrivia trivia, Microsoft.CodeAnalysis.SyntaxTrivia newTrivia) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia, System.Func<Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia> computeReplacementTrivia) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes<TRoot>(this TRoot root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> nodes) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes<TRoot>(this TRoot root, params Microsoft.CodeAnalysis.SyntaxNode[] nodes) -> TRoot
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia<TSyntax>(this TSyntax node, Microsoft.CodeAnalysis.SyntaxTriviaList trivia) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia<TSyntax>(this TSyntax node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia<TSyntax>(this TSyntax node, params Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia<TSyntax>(this TSyntax node, Microsoft.CodeAnalysis.SyntaxTriviaList trivia) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia<TSyntax>(this TSyntax node, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia<TSyntax>(this TSyntax node, params Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTriviaFrom<TSyntax>(this TSyntax syntax, Microsoft.CodeAnalysis.SyntaxNode node) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutLeadingTrivia<TSyntax>(this TSyntax node) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrailingTrivia<TSyntax>(this TSyntax node) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrivia<TSyntax>(this TSyntax syntax) -> TSyntax
static Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetFirstChildIndexSpanningPosition(Microsoft.CodeAnalysis.SyntaxNode node, int position) -> int
static Microsoft.CodeAnalysis.SyntaxNodeOrToken.explicit operator Microsoft.CodeAnalysis.SyntaxNode(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken) -> Microsoft.CodeAnalysis.SyntaxNode
static Microsoft.CodeAnalysis.SyntaxNodeOrToken.explicit operator Microsoft.CodeAnalysis.SyntaxToken(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken) -> Microsoft.CodeAnalysis.SyntaxToken
static Microsoft.CodeAnalysis.SyntaxNodeOrToken.implicit operator Microsoft.CodeAnalysis.SyntaxNodeOrToken(Microsoft.CodeAnalysis.SyntaxNode node) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
static Microsoft.CodeAnalysis.SyntaxNodeOrToken.implicit operator Microsoft.CodeAnalysis.SyntaxNodeOrToken(Microsoft.CodeAnalysis.SyntaxToken token) -> Microsoft.CodeAnalysis.SyntaxNodeOrToken
static Microsoft.CodeAnalysis.SyntaxNodeOrToken.operator !=(Microsoft.CodeAnalysis.SyntaxNodeOrToken left, Microsoft.CodeAnalysis.SyntaxNodeOrToken right) -> bool
static Microsoft.CodeAnalysis.SyntaxNodeOrToken.operator ==(Microsoft.CodeAnalysis.SyntaxNodeOrToken left, Microsoft.CodeAnalysis.SyntaxNodeOrToken right) -> bool
static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.operator !=(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList left, Microsoft.CodeAnalysis.SyntaxNodeOrTokenList right) -> bool
static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.operator ==(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList left, Microsoft.CodeAnalysis.SyntaxNodeOrTokenList right) -> bool
static Microsoft.CodeAnalysis.SyntaxToken.operator !=(Microsoft.CodeAnalysis.SyntaxToken left, Microsoft.CodeAnalysis.SyntaxToken right) -> bool
static Microsoft.CodeAnalysis.SyntaxToken.operator ==(Microsoft.CodeAnalysis.SyntaxToken left, Microsoft.CodeAnalysis.SyntaxToken right) -> bool
static Microsoft.CodeAnalysis.SyntaxTokenList.Create(Microsoft.CodeAnalysis.SyntaxToken token) -> Microsoft.CodeAnalysis.SyntaxTokenList
static Microsoft.CodeAnalysis.SyntaxTokenList.operator !=(Microsoft.CodeAnalysis.SyntaxTokenList left, Microsoft.CodeAnalysis.SyntaxTokenList right) -> bool
static Microsoft.CodeAnalysis.SyntaxTokenList.operator ==(Microsoft.CodeAnalysis.SyntaxTokenList left, Microsoft.CodeAnalysis.SyntaxTokenList right) -> bool
static Microsoft.CodeAnalysis.SyntaxTrivia.operator !=(Microsoft.CodeAnalysis.SyntaxTrivia left, Microsoft.CodeAnalysis.SyntaxTrivia right) -> bool
static Microsoft.CodeAnalysis.SyntaxTrivia.operator ==(Microsoft.CodeAnalysis.SyntaxTrivia left, Microsoft.CodeAnalysis.SyntaxTrivia right) -> bool
static Microsoft.CodeAnalysis.SyntaxTriviaList.Create(Microsoft.CodeAnalysis.SyntaxTrivia trivia) -> Microsoft.CodeAnalysis.SyntaxTriviaList
static Microsoft.CodeAnalysis.SyntaxTriviaList.operator !=(Microsoft.CodeAnalysis.SyntaxTriviaList left, Microsoft.CodeAnalysis.SyntaxTriviaList right) -> bool
static Microsoft.CodeAnalysis.SyntaxTriviaList.operator ==(Microsoft.CodeAnalysis.SyntaxTriviaList left, Microsoft.CodeAnalysis.SyntaxTriviaList right) -> bool
static Microsoft.CodeAnalysis.Text.LinePosition.operator !=(Microsoft.CodeAnalysis.Text.LinePosition left, Microsoft.CodeAnalysis.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysis.Text.LinePosition.operator <(Microsoft.CodeAnalysis.Text.LinePosition left, Microsoft.CodeAnalysis.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysis.Text.LinePosition.operator <=(Microsoft.CodeAnalysis.Text.LinePosition left, Microsoft.CodeAnalysis.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysis.Text.LinePosition.operator ==(Microsoft.CodeAnalysis.Text.LinePosition left, Microsoft.CodeAnalysis.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysis.Text.LinePosition.operator >(Microsoft.CodeAnalysis.Text.LinePosition left, Microsoft.CodeAnalysis.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysis.Text.LinePosition.operator >=(Microsoft.CodeAnalysis.Text.LinePosition left, Microsoft.CodeAnalysis.Text.LinePosition right) -> bool
static Microsoft.CodeAnalysis.Text.LinePositionSpan.operator !=(Microsoft.CodeAnalysis.Text.LinePositionSpan left, Microsoft.CodeAnalysis.Text.LinePositionSpan right) -> bool
static Microsoft.CodeAnalysis.Text.LinePositionSpan.operator ==(Microsoft.CodeAnalysis.Text.LinePositionSpan left, Microsoft.CodeAnalysis.Text.LinePositionSpan right) -> bool
static Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.Stream stream, System.Text.Encoding encoding = null, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1, bool throwIfBinaryDetected = false) -> Microsoft.CodeAnalysis.Text.SourceText
static Microsoft.CodeAnalysis.Text.SourceText.From(byte[] buffer, int length, System.Text.Encoding encoding = null, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1, bool throwIfBinaryDetected = false) -> Microsoft.CodeAnalysis.Text.SourceText
static Microsoft.CodeAnalysis.Text.SourceText.From(string text, System.Text.Encoding encoding = null, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1) -> Microsoft.CodeAnalysis.Text.SourceText
static Microsoft.CodeAnalysis.Text.TextChange.implicit operator Microsoft.CodeAnalysis.Text.TextChangeRange(Microsoft.CodeAnalysis.Text.TextChange change) -> Microsoft.CodeAnalysis.Text.TextChangeRange
static Microsoft.CodeAnalysis.Text.TextChange.operator !=(Microsoft.CodeAnalysis.Text.TextChange left, Microsoft.CodeAnalysis.Text.TextChange right) -> bool
static Microsoft.CodeAnalysis.Text.TextChange.operator ==(Microsoft.CodeAnalysis.Text.TextChange left, Microsoft.CodeAnalysis.Text.TextChange right) -> bool
static Microsoft.CodeAnalysis.Text.TextChangeRange.Collapse(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Text.TextChangeRange> changes) -> Microsoft.CodeAnalysis.Text.TextChangeRange
static Microsoft.CodeAnalysis.Text.TextChangeRange.operator !=(Microsoft.CodeAnalysis.Text.TextChangeRange left, Microsoft.CodeAnalysis.Text.TextChangeRange right) -> bool
static Microsoft.CodeAnalysis.Text.TextChangeRange.operator ==(Microsoft.CodeAnalysis.Text.TextChangeRange left, Microsoft.CodeAnalysis.Text.TextChangeRange right) -> bool
static Microsoft.CodeAnalysis.Text.TextLine.FromSpan(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.Text.TextSpan span) -> Microsoft.CodeAnalysis.Text.TextLine
static Microsoft.CodeAnalysis.Text.TextLine.operator !=(Microsoft.CodeAnalysis.Text.TextLine left, Microsoft.CodeAnalysis.Text.TextLine right) -> bool
static Microsoft.CodeAnalysis.Text.TextLine.operator ==(Microsoft.CodeAnalysis.Text.TextLine left, Microsoft.CodeAnalysis.Text.TextLine right) -> bool
static Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(int start, int end) -> Microsoft.CodeAnalysis.Text.TextSpan
static Microsoft.CodeAnalysis.Text.TextSpan.operator !=(Microsoft.CodeAnalysis.Text.TextSpan left, Microsoft.CodeAnalysis.Text.TextSpan right) -> bool
static Microsoft.CodeAnalysis.Text.TextSpan.operator ==(Microsoft.CodeAnalysis.Text.TextSpan left, Microsoft.CodeAnalysis.Text.TextSpan right) -> bool
static readonly Microsoft.CodeAnalysis.AssemblyIdentityComparer.Default -> Microsoft.CodeAnalysis.AssemblyIdentityComparer
static readonly Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.Default -> Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer
static readonly Microsoft.CodeAnalysis.DocumentationProvider.Default -> Microsoft.CodeAnalysis.DocumentationProvider
static readonly Microsoft.CodeAnalysis.MetadataReferenceProperties.Assembly -> Microsoft.CodeAnalysis.MetadataReferenceProperties
static readonly Microsoft.CodeAnalysis.MetadataReferenceProperties.GlobalAlias -> string
static readonly Microsoft.CodeAnalysis.MetadataReferenceProperties.Module -> Microsoft.CodeAnalysis.MetadataReferenceProperties
static readonly Microsoft.CodeAnalysis.SubsystemVersion.None -> Microsoft.CodeAnalysis.SubsystemVersion
static readonly Microsoft.CodeAnalysis.SubsystemVersion.Windows2000 -> Microsoft.CodeAnalysis.SubsystemVersion
static readonly Microsoft.CodeAnalysis.SubsystemVersion.Windows7 -> Microsoft.CodeAnalysis.SubsystemVersion
static readonly Microsoft.CodeAnalysis.SubsystemVersion.Windows8 -> Microsoft.CodeAnalysis.SubsystemVersion
static readonly Microsoft.CodeAnalysis.SubsystemVersion.WindowsVista -> Microsoft.CodeAnalysis.SubsystemVersion
static readonly Microsoft.CodeAnalysis.SubsystemVersion.WindowsXP -> Microsoft.CodeAnalysis.SubsystemVersion
static readonly Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat -> Microsoft.CodeAnalysis.SymbolDisplayFormat
static readonly Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpShortErrorMessageFormat -> Microsoft.CodeAnalysis.SymbolDisplayFormat
static readonly Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat -> Microsoft.CodeAnalysis.SymbolDisplayFormat
static readonly Microsoft.CodeAnalysis.SymbolDisplayFormat.MinimallyQualifiedFormat -> Microsoft.CodeAnalysis.SymbolDisplayFormat
static readonly Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicErrorMessageFormat -> Microsoft.CodeAnalysis.SymbolDisplayFormat
static readonly Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicShortErrorMessageFormat -> Microsoft.CodeAnalysis.SymbolDisplayFormat
static readonly Microsoft.CodeAnalysis.SyntaxAnnotation.ElasticAnnotation -> Microsoft.CodeAnalysis.SyntaxAnnotation
static readonly Microsoft.CodeAnalysis.SyntaxTriviaList.Empty -> Microsoft.CodeAnalysis.SyntaxTriviaList
static readonly Microsoft.CodeAnalysis.Text.LinePosition.Zero -> Microsoft.CodeAnalysis.Text.LinePosition
static readonly Microsoft.CodeAnalysis.Text.TextChange.NoChanges -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Text.TextChange>
static readonly Microsoft.CodeAnalysis.Text.TextChangeRange.NoChanges -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Text.TextChangeRange>
virtual Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity.get -> Microsoft.CodeAnalysis.DiagnosticSeverity
virtual Microsoft.CodeAnalysis.Diagnostic.Properties.get -> System.Collections.Immutable.ImmutableDictionary<string, string>
virtual Microsoft.CodeAnalysis.DiagnosticFormatter.Format(Microsoft.CodeAnalysis.Diagnostic diagnostic, System.IFormatProvider formatter = null) -> string
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Display.get -> string
virtual Microsoft.CodeAnalysis.Emit.EmitResult.GetDebuggerDisplay() -> string
virtual Microsoft.CodeAnalysis.Location.GetDebuggerDisplay() -> string
virtual Microsoft.CodeAnalysis.Location.GetLineSpan() -> Microsoft.CodeAnalysis.FileLinePositionSpan
virtual Microsoft.CodeAnalysis.Location.GetMappedLineSpan() -> Microsoft.CodeAnalysis.FileLinePositionSpan
virtual Microsoft.CodeAnalysis.Location.MetadataModule.get -> Microsoft.CodeAnalysis.IModuleSymbol
virtual Microsoft.CodeAnalysis.Location.SourceSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
virtual Microsoft.CodeAnalysis.Location.SourceTree.get -> Microsoft.CodeAnalysis.SyntaxTree
virtual Microsoft.CodeAnalysis.MetadataReference.Display.get -> string
virtual Microsoft.CodeAnalysis.SemanticModel.GetTopmostNodeForDiagnosticAnalysis(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SyntaxNode declaringSyntax) -> Microsoft.CodeAnalysis.SyntaxNode
virtual Microsoft.CodeAnalysis.SemanticModel.IgnoresAccessibility.get -> bool
virtual Microsoft.CodeAnalysis.SymbolVisitor.DefaultVisit(Microsoft.CodeAnalysis.ISymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.Visit(Microsoft.CodeAnalysis.ISymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitAlias(Microsoft.CodeAnalysis.IAliasSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitArrayType(Microsoft.CodeAnalysis.IArrayTypeSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitAssembly(Microsoft.CodeAnalysis.IAssemblySymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitDynamicType(Microsoft.CodeAnalysis.IDynamicTypeSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitEvent(Microsoft.CodeAnalysis.IEventSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitField(Microsoft.CodeAnalysis.IFieldSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitLabel(Microsoft.CodeAnalysis.ILabelSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitLocal(Microsoft.CodeAnalysis.ILocalSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitMethod(Microsoft.CodeAnalysis.IMethodSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitModule(Microsoft.CodeAnalysis.IModuleSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitNamedType(Microsoft.CodeAnalysis.INamedTypeSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitNamespace(Microsoft.CodeAnalysis.INamespaceSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitParameter(Microsoft.CodeAnalysis.IParameterSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitPointerType(Microsoft.CodeAnalysis.IPointerTypeSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitProperty(Microsoft.CodeAnalysis.IPropertySymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitRangeVariable(Microsoft.CodeAnalysis.IRangeVariableSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor.VisitTypeParameter(Microsoft.CodeAnalysis.ITypeParameterSymbol symbol) -> void
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.DefaultVisit(Microsoft.CodeAnalysis.ISymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.Visit(Microsoft.CodeAnalysis.ISymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitAlias(Microsoft.CodeAnalysis.IAliasSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitArrayType(Microsoft.CodeAnalysis.IArrayTypeSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitAssembly(Microsoft.CodeAnalysis.IAssemblySymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitDynamicType(Microsoft.CodeAnalysis.IDynamicTypeSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitEvent(Microsoft.CodeAnalysis.IEventSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitField(Microsoft.CodeAnalysis.IFieldSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitLabel(Microsoft.CodeAnalysis.ILabelSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitLocal(Microsoft.CodeAnalysis.ILocalSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitMethod(Microsoft.CodeAnalysis.IMethodSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitModule(Microsoft.CodeAnalysis.IModuleSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitNamedType(Microsoft.CodeAnalysis.INamedTypeSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitNamespace(Microsoft.CodeAnalysis.INamespaceSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitParameter(Microsoft.CodeAnalysis.IParameterSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitPointerType(Microsoft.CodeAnalysis.IPointerTypeSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitProperty(Microsoft.CodeAnalysis.IPropertySymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitRangeVariable(Microsoft.CodeAnalysis.IRangeVariableSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TResult>.VisitTypeParameter(Microsoft.CodeAnalysis.ITypeParameterSymbol symbol) -> TResult
virtual Microsoft.CodeAnalysis.SyntaxNode.ParentTrivia.get -> Microsoft.CodeAnalysis.SyntaxTrivia
virtual Microsoft.CodeAnalysis.SyntaxReference.GetSyntaxAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.SyntaxNode>
virtual Microsoft.CodeAnalysis.SyntaxTree.GetLineVisibility(int position, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.LineVisibility
virtual Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Text.SourceText>
virtual Microsoft.CodeAnalysis.SyntaxWalker.Visit(Microsoft.CodeAnalysis.SyntaxNode node) -> void
virtual Microsoft.CodeAnalysis.SyntaxWalker.VisitToken(Microsoft.CodeAnalysis.SyntaxToken token) -> void
virtual Microsoft.CodeAnalysis.SyntaxWalker.VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia trivia) -> void
virtual Microsoft.CodeAnalysis.Text.SourceText.Container.get -> Microsoft.CodeAnalysis.Text.SourceTextContainer
virtual Microsoft.CodeAnalysis.Text.SourceText.ContentEqualsImpl(Microsoft.CodeAnalysis.Text.SourceText other) -> bool
virtual Microsoft.CodeAnalysis.Text.SourceText.GetChangeRanges(Microsoft.CodeAnalysis.Text.SourceText oldText) -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Text.TextChangeRange>
virtual Microsoft.CodeAnalysis.Text.SourceText.GetLinesCore() -> Microsoft.CodeAnalysis.Text.TextLineCollection
virtual Microsoft.CodeAnalysis.Text.SourceText.GetSubText(Microsoft.CodeAnalysis.Text.TextSpan span) -> Microsoft.CodeAnalysis.Text.SourceText
virtual Microsoft.CodeAnalysis.Text.SourceText.GetTextChanges(Microsoft.CodeAnalysis.Text.SourceText oldText) -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.Text.TextChange>
virtual Microsoft.CodeAnalysis.Text.SourceText.ToString(Microsoft.CodeAnalysis.Text.TextSpan span) -> string
virtual Microsoft.CodeAnalysis.Text.SourceText.WithChanges(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Text.TextChange> changes) -> Microsoft.CodeAnalysis.Text.SourceText
virtual Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter writer, Microsoft.CodeAnalysis.Text.TextSpan span, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
virtual Microsoft.CodeAnalysis.Text.TextLineCollection.GetLineFromPosition(int position) -> Microsoft.CodeAnalysis.Text.TextLine
virtual Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePosition(int position) -> Microsoft.CodeAnalysis.Text.LinePosition
Microsoft.CodeAnalysis.DesktopStrongNameProvider
Microsoft.CodeAnalysis.DesktopStrongNameProvider.DesktopStrongNameProvider(System.Collections.Immutable.ImmutableArray<string> keyFileSearchPaths = default(System.Collections.Immutable.ImmutableArray<string>)) -> void
override Microsoft.CodeAnalysis.DesktopStrongNameProvider.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.DesktopStrongNameProvider.GetHashCode() -> int
static Microsoft.CodeAnalysis.RuleSet.GetDiagnosticOptionsFromRulesetFile(string rulesetFileFullPath, out System.Collections.Generic.Dictionary<string, Microsoft.CodeAnalysis.ReportDiagnostic> specificDiagnosticOptions) -> Microsoft.CodeAnalysis.ReportDiagnostic
static Microsoft.CodeAnalysis.RuleSet.GetEffectiveIncludesFromFile(string filePath) -> System.Collections.Immutable.ImmutableArray<string>
static Microsoft.CodeAnalysis.RuleSet.LoadEffectiveRuleSetFromFile(string filePath) -> Microsoft.CodeAnalysis.RuleSet
Microsoft.CodeAnalysis.RuleSet
Microsoft.CodeAnalysis.RuleSet.FilePath.get -> string
Microsoft.CodeAnalysis.RuleSet.GeneralDiagnosticOption.get -> Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.RuleSet.Includes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.RuleSetInclude>
Microsoft.CodeAnalysis.RuleSet.RuleSet(string filePath, Microsoft.CodeAnalysis.ReportDiagnostic generalOption, System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysis.ReportDiagnostic> specificOptions, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.RuleSetInclude> includes) -> void
Microsoft.CodeAnalysis.RuleSet.SpecificDiagnosticOptions.get -> System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysis.ReportDiagnostic>
Microsoft.CodeAnalysis.RuleSet.WithEffectiveAction(Microsoft.CodeAnalysis.ReportDiagnostic action) -> Microsoft.CodeAnalysis.RuleSet
Microsoft.CodeAnalysis.RuleSetInclude
Microsoft.CodeAnalysis.RuleSetInclude.Action.get -> Microsoft.CodeAnalysis.ReportDiagnostic
Microsoft.CodeAnalysis.RuleSetInclude.IncludePath.get -> string
Microsoft.CodeAnalysis.RuleSetInclude.LoadRuleSet(Microsoft.CodeAnalysis.RuleSet parent) -> Microsoft.CodeAnalysis.RuleSet
Microsoft.CodeAnalysis.RuleSetInclude.RuleSetInclude(string includePath, Microsoft.CodeAnalysis.ReportDiagnostic action) -> void
Microsoft.CodeAnalysis.CommandLineAnalyzerReference
Microsoft.CodeAnalysis.CommandLineAnalyzerReference.CommandLineAnalyzerReference(string path) -> void
Microsoft.CodeAnalysis.CommandLineAnalyzerReference.Equals(Microsoft.CodeAnalysis.CommandLineAnalyzerReference other) -> bool
Microsoft.CodeAnalysis.CommandLineAnalyzerReference.FilePath.get -> string
Microsoft.CodeAnalysis.CommandLineArguments
Microsoft.CodeAnalysis.CommandLineArguments.AdditionalFiles.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CommandLineSourceFile>
Microsoft.CodeAnalysis.CommandLineArguments.AnalyzerReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CommandLineAnalyzerReference>
Microsoft.CodeAnalysis.CommandLineArguments.AppConfigPath.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.BaseDirectory.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.ChecksumAlgorithm.get -> Microsoft.CodeAnalysis.Text.SourceHashAlgorithm
Microsoft.CodeAnalysis.CommandLineArguments.CompilationName.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.CompilationOptions.get -> Microsoft.CodeAnalysis.CompilationOptions
Microsoft.CodeAnalysis.CommandLineArguments.DisplayHelp.get -> bool
Microsoft.CodeAnalysis.CommandLineArguments.DisplayLogo.get -> bool
Microsoft.CodeAnalysis.CommandLineArguments.DocumentationPath.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.EmitOptions.get -> Microsoft.CodeAnalysis.Emit.EmitOptions
Microsoft.CodeAnalysis.CommandLineArguments.EmitPdb.get -> bool
Microsoft.CodeAnalysis.CommandLineArguments.Encoding.get -> System.Text.Encoding
Microsoft.CodeAnalysis.CommandLineArguments.ErrorLogPath.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.Errors.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
Microsoft.CodeAnalysis.CommandLineArguments.KeyFileSearchPaths.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysis.CommandLineArguments.ManifestResources.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ResourceDescription>
Microsoft.CodeAnalysis.CommandLineArguments.MetadataReferences.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CommandLineReference>
Microsoft.CodeAnalysis.CommandLineArguments.NoWin32Manifest.get -> bool
Microsoft.CodeAnalysis.CommandLineArguments.OutputDirectory.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.OutputFileName.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.ParseOptions.get -> Microsoft.CodeAnalysis.ParseOptions
Microsoft.CodeAnalysis.CommandLineArguments.PdbPath.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.PreferredUILang.get -> System.Globalization.CultureInfo
Microsoft.CodeAnalysis.CommandLineArguments.PrintFullPaths.get -> bool
Microsoft.CodeAnalysis.CommandLineArguments.ReferencePaths.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysis.CommandLineArguments.ResolveAnalyzerReferences(Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader analyzerLoader) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference>
Microsoft.CodeAnalysis.CommandLineArguments.ResolveMetadataReferences(Microsoft.CodeAnalysis.MetadataReferenceResolver metadataResolver) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference>
Microsoft.CodeAnalysis.CommandLineArguments.ScriptArguments.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysis.CommandLineArguments.SourceFiles.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CommandLineSourceFile>
Microsoft.CodeAnalysis.CommandLineArguments.TouchedFilesPath.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.Utf8Output.get -> bool
Microsoft.CodeAnalysis.CommandLineArguments.Win32Icon.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.Win32Manifest.get -> string
Microsoft.CodeAnalysis.CommandLineArguments.Win32ResourceFile.get -> string
Microsoft.CodeAnalysis.CommandLineParser
Microsoft.CodeAnalysis.CommandLineParser.IsInteractive.get -> bool
Microsoft.CodeAnalysis.CommandLineParser.Parse(System.Collections.Generic.IEnumerable<string> args, string baseDirectory, string sdkDirectory, string additionalReferenceDirectories) -> Microsoft.CodeAnalysis.CommandLineArguments
Microsoft.CodeAnalysis.CommandLineReference
Microsoft.CodeAnalysis.CommandLineReference.Equals(Microsoft.CodeAnalysis.CommandLineReference other) -> bool
Microsoft.CodeAnalysis.CommandLineReference.Properties.get -> Microsoft.CodeAnalysis.MetadataReferenceProperties
Microsoft.CodeAnalysis.CommandLineReference.Reference.get -> string
Microsoft.CodeAnalysis.CommandLineSourceFile
Microsoft.CodeAnalysis.CommandLineSourceFile.IsScript.get -> bool
Microsoft.CodeAnalysis.CommandLineSourceFile.Path.get -> string
abstract Microsoft.CodeAnalysis.CommandLineArguments.CompilationOptionsCore.get -> Microsoft.CodeAnalysis.CompilationOptions
abstract Microsoft.CodeAnalysis.CommandLineArguments.ParseOptionsCore.get -> Microsoft.CodeAnalysis.ParseOptions
abstract Microsoft.CodeAnalysis.CommandLineParser.RegularFileExtension.get -> string
abstract Microsoft.CodeAnalysis.CommandLineParser.ScriptFileExtension.get -> string
override Microsoft.CodeAnalysis.CommandLineAnalyzerReference.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.CommandLineAnalyzerReference.GetHashCode() -> int
override Microsoft.CodeAnalysis.CommandLineReference.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.CommandLineReference.GetHashCode() -> int
static Microsoft.CodeAnalysis.CommandLineParser.SplitCommandLineIntoArguments(string commandLine, bool removeHashComments) -> System.Collections.Generic.IEnumerable<string>
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.AnalyzerLoadFailureEventArgs(Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode errorCode, System.Exception ex, string typeName) -> void
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.NoAnalyzers = 3 -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.None = 0 -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.UnableToCreateAnalyzer = 2 -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.UnableToLoadAnalyzer = 1 -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.FileSystemExtensions
Microsoft.CodeAnalysis.SourceFileResolver
Microsoft.CodeAnalysis.SourceFileResolver.BaseDirectory.get -> string
Microsoft.CodeAnalysis.SourceFileResolver.SearchPaths.get -> System.Collections.Immutable.ImmutableArray<string>
Microsoft.CodeAnalysis.SourceFileResolver.SourceFileResolver(System.Collections.Generic.IEnumerable<string> searchPaths, string baseDirectory) -> void
Microsoft.CodeAnalysis.SourceFileResolver.SourceFileResolver(System.Collections.Immutable.ImmutableArray<string> searchPaths, string baseDirectory) -> void
Microsoft.CodeAnalysis.XmlFileResolver
Microsoft.CodeAnalysis.XmlFileResolver.BaseDirectory.get -> string
Microsoft.CodeAnalysis.XmlFileResolver.XmlFileResolver(string baseDirectory) -> void
override Microsoft.CodeAnalysis.SourceFileResolver.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.SourceFileResolver.GetHashCode() -> int
override Microsoft.CodeAnalysis.SourceFileResolver.NormalizePath(string path, string baseFilePath) -> string
override Microsoft.CodeAnalysis.SourceFileResolver.OpenRead(string resolvedPath) -> System.IO.Stream
override Microsoft.CodeAnalysis.SourceFileResolver.ResolveReference(string path, string baseFilePath) -> string
override Microsoft.CodeAnalysis.XmlFileResolver.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.XmlFileResolver.GetHashCode() -> int
override Microsoft.CodeAnalysis.XmlFileResolver.OpenRead(string resolvedPath) -> System.IO.Stream
override Microsoft.CodeAnalysis.XmlFileResolver.ResolveReference(string path, string baseFilePath) -> string
readonly Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.ErrorCode -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
readonly Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.Exception -> System.Exception
readonly Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.TypeName -> string
static Microsoft.CodeAnalysis.FileSystemExtensions.Emit(this Microsoft.CodeAnalysis.Compilation compilation, string outputPath, string pdbPath = null, string xmlDocPath = null, string win32ResourcesPath = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ResourceDescription> manifestResources = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Emit.EmitResult
static readonly Microsoft.CodeAnalysis.SourceFileResolver.Default -> Microsoft.CodeAnalysis.SourceFileResolver
static readonly Microsoft.CodeAnalysis.XmlFileResolver.Default -> Microsoft.CodeAnalysis.XmlFileResolver
virtual Microsoft.CodeAnalysis.SourceFileResolver.FileExists(string resolvedPath) -> bool
virtual Microsoft.CodeAnalysis.XmlFileResolver.FileExists(string resolvedPath) -> bool
Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference
Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.AnalyzerFileReference(string fullPath, Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader assemblyLoader) -> void
Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.AnalyzerLoadFailed -> System.EventHandler<Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs>
Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Equals(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference other) -> bool
Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetAssembly() -> System.Reflection.Assembly
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Display.get -> string
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Equals(object obj) -> bool
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.FullPath.get -> string
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetAnalyzers(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetAnalyzersForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer>
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetHashCode() -> int
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Id.get -> string
