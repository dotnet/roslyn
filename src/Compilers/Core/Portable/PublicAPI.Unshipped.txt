Microsoft.CodeAnalysis.GeneratorDriver.RunGenerators(Microsoft.CodeAnalysis.Compilation! compilation) -> Microsoft.CodeAnalysis.GeneratorDriver!
Microsoft.CodeAnalysis.GeneratorDriver.RunGenerators(Microsoft.CodeAnalysis.Compilation! compilation, System.Func<Microsoft.CodeAnalysis.GeneratorFilterContext, bool>? generatorFilter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.GeneratorDriver!
Microsoft.CodeAnalysis.GeneratorDriver.RunGenerators(Microsoft.CodeAnalysis.Compilation! compilation, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.GeneratorDriver!
*REMOVED*Microsoft.CodeAnalysis.GeneratorDriver.RunGenerators(Microsoft.CodeAnalysis.Compilation! compilation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.GeneratorDriver!
Microsoft.CodeAnalysis.GeneratorFilterContext
Microsoft.CodeAnalysis.GeneratorFilterContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.GeneratorFilterContext.Generator.get -> Microsoft.CodeAnalysis.ISourceGenerator!
Microsoft.CodeAnalysis.GeneratorFilterContext.GeneratorFilterContext() -> void
Microsoft.CodeAnalysis.IPropertySymbol.PartialDefinitionPart.get -> Microsoft.CodeAnalysis.IPropertySymbol?
Microsoft.CodeAnalysis.IPropertySymbol.PartialImplementationPart.get -> Microsoft.CodeAnalysis.IPropertySymbol?
Microsoft.CodeAnalysis.IPropertySymbol.IsPartialDefinition.get -> bool
Microsoft.CodeAnalysis.ITypeParameterSymbol.AllowsRefLikeType.get -> bool
Microsoft.CodeAnalysis.RuntimeCapability.ByRefLikeGenerics = 8 -> Microsoft.CodeAnalysis.RuntimeCapability
static Microsoft.CodeAnalysis.GeneratorExtensions.AsIncrementalGenerator(this Microsoft.CodeAnalysis.ISourceGenerator! sourceGenerator) -> Microsoft.CodeAnalysis.IIncrementalGenerator!
static Microsoft.CodeAnalysis.GeneratorExtensions.GetGeneratorType(this Microsoft.CodeAnalysis.IIncrementalGenerator! generator) -> System.Type!
Microsoft.CodeAnalysis.IParameterSymbol.IsParamsCollection.get -> bool
Microsoft.CodeAnalysis.IParameterSymbol.IsParamsArray.get -> bool
Microsoft.CodeAnalysis.Operations.ArgumentKind.ParamCollection = 4 -> Microsoft.CodeAnalysis.Operations.ArgumentKind
Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo.ProgrammaticSuppressions.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.Suppression>
Microsoft.CodeAnalysis.Emit.InstrumentationKind.ModuleCancellation = 3 -> Microsoft.CodeAnalysis.Emit.InstrumentationKind
Microsoft.CodeAnalysis.Emit.InstrumentationKind.StackOverflowProbing = 2 -> Microsoft.CodeAnalysis.Emit.InstrumentationKind
Microsoft.CodeAnalysis.OperationKind.CollectionExpression = 127 -> Microsoft.CodeAnalysis.OperationKind
Microsoft.CodeAnalysis.OperationKind.Spread = 128 -> Microsoft.CodeAnalysis.OperationKind
Microsoft.CodeAnalysis.Operations.ICollectionExpressionOperation.ConstructMethod.get -> Microsoft.CodeAnalysis.IMethodSymbol?
Microsoft.CodeAnalysis.Operations.ICollectionExpressionOperation
Microsoft.CodeAnalysis.Operations.ICollectionExpressionOperation.Elements.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation!>
Microsoft.CodeAnalysis.Operations.ISpreadOperation
Microsoft.CodeAnalysis.Operations.ISpreadOperation.ElementConversion.get -> Microsoft.CodeAnalysis.Operations.CommonConversion
Microsoft.CodeAnalysis.Operations.ISpreadOperation.ElementType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.Operations.ISpreadOperation.Operand.get -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.SeparatedSyntaxList
Microsoft.CodeAnalysis.SyntaxList
static Microsoft.CodeAnalysis.SeparatedSyntaxList.Create<TNode>(System.ReadOnlySpan<TNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
static Microsoft.CodeAnalysis.SyntaxList.Create<TNode>(System.ReadOnlySpan<TNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Create(System.ReadOnlySpan<Microsoft.CodeAnalysis.SyntaxNodeOrToken> nodesAndTokens) -> Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
static Microsoft.CodeAnalysis.SyntaxTokenList.Create(System.ReadOnlySpan<Microsoft.CodeAnalysis.SyntaxToken> tokens) -> Microsoft.CodeAnalysis.SyntaxTokenList
static Microsoft.CodeAnalysis.SyntaxTriviaList.Create(System.ReadOnlySpan<Microsoft.CodeAnalysis.SyntaxTrivia> trivias) -> Microsoft.CodeAnalysis.SyntaxTriviaList
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitCollectionExpression(Microsoft.CodeAnalysis.Operations.ICollectionExpressionOperation! operation) -> void
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSpread(Microsoft.CodeAnalysis.Operations.ISpreadOperation! operation) -> void
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor<TArgument, TResult>.VisitCollectionExpression(Microsoft.CodeAnalysis.Operations.ICollectionExpressionOperation! operation, TArgument argument) -> TResult?
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor<TArgument, TResult>.VisitSpread(Microsoft.CodeAnalysis.Operations.ISpreadOperation! operation, TArgument argument) -> TResult?
*REMOVED*static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
*REMOVED*static Microsoft.CodeAnalysis.SyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SyntaxList<TNode!>(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
*REMOVED*Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
*REMOVED*Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
*REMOVED*static Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(this Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers!
const Metalama.Compiler.MetalamaCompilerAnnotations.GeneratedCodeAnnotationKind = "Metalama.Compiler.GeneratedCode" -> string!
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.CustomSeverityConfigurable = "CustomSeverityConfigurable" -> string!
Metalama.Compiler.DiagnosticFilteringRequest
Metalama.Compiler.DiagnosticFilteringRequest.Compilation.get -> Microsoft.CodeAnalysis.Compilation!
Metalama.Compiler.DiagnosticFilteringRequest.Diagnostic.get -> Microsoft.CodeAnalysis.Diagnostic!
Metalama.Compiler.DiagnosticFilteringRequest.IsSuppressed.get -> bool
Metalama.Compiler.DiagnosticFilteringRequest.Suppress() -> void
Metalama.Compiler.DiagnosticFilteringRequest.Symbol.get -> Microsoft.CodeAnalysis.ISymbol!
Metalama.Compiler.DiagnosticFilteringRequest.SyntaxNode.get -> Microsoft.CodeAnalysis.SyntaxNode!
Metalama.Compiler.InitializeServicesContext
Metalama.Compiler.InitializeServicesContext.AnalyzerConfigOptionsProvider.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptionsProvider!
Metalama.Compiler.InitializeServicesContext.Compilation.get -> Microsoft.CodeAnalysis.Compilation!
Metalama.Compiler.InitializeServicesContext.Options.get -> Metalama.Compiler.InitializeServicesOptions!
Metalama.Compiler.InitializeServicesContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic! diagnostic) -> void
Metalama.Compiler.InitializeServicesOptions
Metalama.Compiler.InitializeServicesOptions.IsLongRunningProcess.get -> bool
Metalama.Compiler.InitializeServicesOptions.MsBuildProjectFullPath.get -> string?
Metalama.Compiler.InitializeServicesOptions.RequiresMetalamaLicenseAudit.get -> bool
Metalama.Compiler.InitializeServicesOptions.RequiresMetalamaLicenseEnforcement.get -> bool
Metalama.Compiler.InitializeServicesOptions.RequiresMetalamaSupportServices.get -> bool
Metalama.Compiler.Intrinsics
Metalama.Compiler.ISourceTransformerWithServices
Metalama.Compiler.ISourceTransformerWithServices.InitializeServices(Metalama.Compiler.InitializeServicesContext! context) -> System.IServiceProvider?
Metalama.Compiler.ManagedResource
Metalama.Compiler.ManagedResource.DataProvider.get -> System.Func<System.IO.Stream!>?
Metalama.Compiler.ManagedResource.IncludeInRefAssembly.get -> bool
Metalama.Compiler.ManagedResource.IsEmbedded.get -> bool?
Metalama.Compiler.ManagedResource.IsPublic.get -> bool
Metalama.Compiler.ManagedResource.ManagedResource(string! name, byte[]! data, bool includeInRefAssembly = false) -> void
Metalama.Compiler.ManagedResource.Name.get -> string!
Metalama.Compiler.ManagedResource.Resource.get -> Microsoft.CodeAnalysis.ResourceDescription!
Metalama.Compiler.MetalamaCompilerAnnotations
Metalama.Compiler.MetalamaCompilerInfo
Metalama.Compiler.Services.IDisposableServiceProvider
Metalama.Compiler.Services.IDisposableServiceProvider.DisposeServices(System.Action<Microsoft.CodeAnalysis.Diagnostic!>! reportDiagnostic) -> void
Metalama.Compiler.Services.IExceptionReporter
Metalama.Compiler.Services.IExceptionReporter.ReportException(System.Exception! reportedException) -> void
Metalama.Compiler.Services.ILogger
Metalama.Compiler.Services.ILogger.Error.get -> Metalama.Compiler.Services.ILogWriter?
Metalama.Compiler.Services.ILogger.Info.get -> Metalama.Compiler.Services.ILogWriter?
Metalama.Compiler.Services.ILogger.Trace.get -> Metalama.Compiler.Services.ILogWriter?
Metalama.Compiler.Services.ILogger.Warning.get -> Metalama.Compiler.Services.ILogWriter?
Metalama.Compiler.Services.ILogWriter
Metalama.Compiler.Services.ILogWriter.Log(string! message) -> void
Metalama.Compiler.SyntaxTreeTransformation
Metalama.Compiler.SyntaxTreeTransformation.FilePath.get -> string!
Metalama.Compiler.SyntaxTreeTransformation.Kind.get -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformation.NewTree.get -> Microsoft.CodeAnalysis.SyntaxTree?
Metalama.Compiler.SyntaxTreeTransformation.OldTree.get -> Microsoft.CodeAnalysis.SyntaxTree?
Metalama.Compiler.SyntaxTreeTransformation.SyntaxTreeTransformation() -> void
Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformationKind.Add = 1 -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformationKind.None = 0 -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformationKind.Remove = 2 -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformationKind.Replace = 3 -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.TransformerAttribute
Metalama.Compiler.TransformerAttribute.TransformerAttribute() -> void
Metalama.Compiler.TransformerContext.AddSyntaxTreeTransformations(params Metalama.Compiler.SyntaxTreeTransformation[]! transformations) -> void
Metalama.Compiler.TransformerContext.AnalyzerConfigOptionsProvider.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptionsProvider!
Metalama.Compiler.TransformerContext.Options.get -> Metalama.Compiler.TransformerOptions!
Metalama.Compiler.TransformerOptions
Metalama.Compiler.TransformerOptions.RequiresCodeCoverageAnnotations.get -> bool
Metalama.Compiler.TransformerOrderAttribute
Metalama.Compiler.TransformerOrderAttribute.TransformerNames.get -> string![]!
Metalama.Compiler.TransformerOrderAttribute.TransformerOrderAttribute(params string![]! transformerNames) -> void
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.CompilationWithAnalyzers(Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options) -> void
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
*REMOVED*Microsoft.CodeAnalysis.Emit.SemanticEdit.SemanticEdit(Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol? oldSymbol, Microsoft.CodeAnalysis.ISymbol? newSymbol, System.Func<Microsoft.CodeAnalysis.SyntaxNode!, Microsoft.CodeAnalysis.SyntaxNode?>? syntaxMap = null, bool preserveLocalVariables = false, Microsoft.CodeAnalysis.Emit.MethodInstrumentation instrumentation = default(Microsoft.CodeAnalysis.Emit.MethodInstrumentation)) -> void
Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit
Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit.Message.get -> string!
Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit.RuntimeRudeEdit() -> void
Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit.RuntimeRudeEdit(string! message) -> void
Microsoft.CodeAnalysis.Emit.SemanticEdit.RuntimeRudeEdit.get -> System.Func<Microsoft.CodeAnalysis.SyntaxNode!, Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit?>?
Microsoft.CodeAnalysis.Emit.SemanticEdit.SemanticEdit(Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol? oldSymbol, Microsoft.CodeAnalysis.ISymbol? newSymbol, System.Func<Microsoft.CodeAnalysis.SyntaxNode!, Microsoft.CodeAnalysis.SyntaxNode?>? syntaxMap = null, System.Func<Microsoft.CodeAnalysis.SyntaxNode!, Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit?>? runtimeRudeEdit = null, Microsoft.CodeAnalysis.Emit.MethodInstrumentation instrumentation = default(Microsoft.CodeAnalysis.Emit.MethodInstrumentation)) -> void
Microsoft.CodeAnalysis.Emit.SemanticEdit.SemanticEdit(Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol? oldSymbol, Microsoft.CodeAnalysis.ISymbol? newSymbol, System.Func<Microsoft.CodeAnalysis.SyntaxNode!, Microsoft.CodeAnalysis.SyntaxNode?>? syntaxMap, bool preserveLocalVariables, Microsoft.CodeAnalysis.Emit.MethodInstrumentation instrumentation) -> void
Microsoft.CodeAnalysis.Text.SourceText.GetContentHash() -> System.Collections.Immutable.ImmutableArray<byte>
static Metalama.Compiler.Intrinsics.GetRuntimeFieldHandle(string! documentationId) -> System.RuntimeFieldHandle
static Metalama.Compiler.Intrinsics.GetRuntimeMethodHandle(string! documentationId) -> System.RuntimeMethodHandle
static Metalama.Compiler.Intrinsics.GetRuntimeTypeHandle(string! documentationId) -> System.RuntimeTypeHandle
static Metalama.Compiler.MetalamaCompilerAnnotations.CreateGeneratedCodeAnnotation(string! origin) -> Microsoft.CodeAnalysis.SyntaxAnnotation!
static Metalama.Compiler.MetalamaCompilerAnnotations.IncludeInReferenceAssemblyAnnotation.get -> Microsoft.CodeAnalysis.SyntaxAnnotation!
static Metalama.Compiler.MetalamaCompilerAnnotations.SourceCodeAnnotation.get -> Microsoft.CodeAnalysis.SyntaxAnnotation!
static Metalama.Compiler.MetalamaCompilerAnnotations.TryGetCodeCoverageRedirectionFromAnnotation(this Microsoft.CodeAnalysis.SyntaxNode! syntaxNode, Microsoft.CodeAnalysis.Compilation! compilation, out Microsoft.CodeAnalysis.ISymbol? redirectedSymbol) -> bool
static Metalama.Compiler.MetalamaCompilerAnnotations.WithIgnoreCodeCoverageAnnotation<T>(this T! syntaxNode) -> T!
static Metalama.Compiler.MetalamaCompilerAnnotations.WithIncludeInReferenceAssemblyAnnotation<T>(this T! syntaxNode) -> T!
static Metalama.Compiler.MetalamaCompilerAnnotations.WithOriginalLocationAnnotationFrom<T>(this T! node, Microsoft.CodeAnalysis.SyntaxNode! originalNode) -> T!
static Metalama.Compiler.MetalamaCompilerAnnotations.WithRedirectCodeCoverageAnnotation<T>(this T! syntaxNode, Microsoft.CodeAnalysis.ISymbol! originalSymbol) -> T!
static Metalama.Compiler.MetalamaCompilerInfo.EnsureInitialized() -> void
static Metalama.Compiler.MetalamaCompilerInfo.IsActive.get -> bool
static Metalama.Compiler.SyntaxTreeTransformation.AddTree(Microsoft.CodeAnalysis.SyntaxTree! tree) -> Metalama.Compiler.SyntaxTreeTransformation
static Metalama.Compiler.SyntaxTreeTransformation.RemoveTree(Microsoft.CodeAnalysis.SyntaxTree! tree) -> Metalama.Compiler.SyntaxTreeTransformation
static Metalama.Compiler.SyntaxTreeTransformation.ReplaceTree(Microsoft.CodeAnalysis.SyntaxTree! oldTree, Microsoft.CodeAnalysis.SyntaxTree! newTree) -> Metalama.Compiler.SyntaxTreeTransformation
static Metalama.Compiler.TransformerOptions.Default.get -> Metalama.Compiler.TransformerOptions!
static Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(this Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options = null) -> Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers!
static Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(this Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers!
Microsoft.CodeAnalysis.RefKind.RefReadOnlyParameter = 4 -> Microsoft.CodeAnalysis.RefKind
virtual Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.MinimumReportedSeverity.get -> Microsoft.CodeAnalysis.DiagnosticSeverity
static Microsoft.CodeAnalysis.Emit.EmitBaseline.CreateInitialBaseline(Microsoft.CodeAnalysis.Compilation! compilation, Microsoft.CodeAnalysis.ModuleMetadata! module, System.Func<System.Reflection.Metadata.MethodDefinitionHandle, Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation>! debugInformationProvider, System.Func<System.Reflection.Metadata.MethodDefinitionHandle, System.Reflection.Metadata.StandaloneSignatureHandle>! localSignatureProvider, bool hasPortableDebugInformation) -> Microsoft.CodeAnalysis.Emit.EmitBaseline!
virtual Microsoft.CodeAnalysis.SyntaxContextReceiverCreator.Invoke() -> Microsoft.CodeAnalysis.ISyntaxContextReceiver?
virtual Microsoft.CodeAnalysis.SyntaxReceiverCreator.Invoke() -> Microsoft.CodeAnalysis.ISyntaxReceiver!
static Microsoft.CodeAnalysis.DocumentationCommentId.CreateDeclarationId(Microsoft.CodeAnalysis.ISymbol! symbol) -> string?
*REMOVED*static Microsoft.CodeAnalysis.DocumentationCommentId.CreateDeclarationId(Microsoft.CodeAnalysis.ISymbol! symbol) -> string!
[RSEXPERIMENTAL001]Microsoft.CodeAnalysis.SemanticModelOptions
[RSEXPERIMENTAL001]Microsoft.CodeAnalysis.SemanticModelOptions.None = 0 -> Microsoft.CodeAnalysis.SemanticModelOptions
[RSEXPERIMENTAL001]Microsoft.CodeAnalysis.SemanticModelOptions.IgnoreAccessibility = 1 -> Microsoft.CodeAnalysis.SemanticModelOptions
[RSEXPERIMENTAL001]Microsoft.CodeAnalysis.SemanticModelOptions.DisableNullableAnalysis = 2 -> Microsoft.CodeAnalysis.SemanticModelOptions
[RSEXPERIMENTAL001]Microsoft.CodeAnalysis.Compilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree! syntaxTree, Microsoft.CodeAnalysis.SemanticModelOptions options) -> Microsoft.CodeAnalysis.SemanticModel!
abstract Microsoft.CodeAnalysis.SemanticModel.NullableAnalysisIsDisabled.get -> bool
