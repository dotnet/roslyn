*REMOVED*override abstract Microsoft.CodeAnalysis.Diagnostic.Equals(object? obj) -> bool
abstract Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.DefaultResult.get -> TResult
Microsoft.CodeAnalysis.Compilation.GetTypesByMetadataName(string! fullyQualifiedMetadataName) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol!>
Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext
Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.Attributes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.AttributeData!>
Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.GeneratorAttributeSyntaxContext() -> void
Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.SemanticModel.get -> Microsoft.CodeAnalysis.SemanticModel!
Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.TargetNode.get -> Microsoft.CodeAnalysis.SyntaxNode!
Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.TargetSymbol.get -> Microsoft.CodeAnalysis.ISymbol!
Microsoft.CodeAnalysis.IFieldSymbol.IsRequired.get -> bool
Microsoft.CodeAnalysis.IFieldSymbol.RefCustomModifiers.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CustomModifier!>
Microsoft.CodeAnalysis.IFieldSymbol.RefKind.get -> Microsoft.CodeAnalysis.RefKind
Microsoft.CodeAnalysis.IImportScope
Microsoft.CodeAnalysis.IImportScope.Aliases.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IAliasSymbol!>
Microsoft.CodeAnalysis.IImportScope.ExternAliases.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IAliasSymbol!>
Microsoft.CodeAnalysis.IImportScope.Imports.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ImportedNamespaceOrType>
Microsoft.CodeAnalysis.IImportScope.XmlNamespaces.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ImportedXmlNamespace>
Microsoft.CodeAnalysis.ImportedNamespaceOrType
Microsoft.CodeAnalysis.ImportedNamespaceOrType.DeclaringSyntaxReference.get -> Microsoft.CodeAnalysis.SyntaxReference?
Microsoft.CodeAnalysis.ImportedNamespaceOrType.ImportedNamespaceOrType() -> void
Microsoft.CodeAnalysis.ImportedNamespaceOrType.NamespaceOrType.get -> Microsoft.CodeAnalysis.INamespaceOrTypeSymbol!
Microsoft.CodeAnalysis.ImportedXmlNamespace
Microsoft.CodeAnalysis.ImportedXmlNamespace.DeclaringSyntaxReference.get -> Microsoft.CodeAnalysis.SyntaxReference?
Microsoft.CodeAnalysis.ImportedXmlNamespace.ImportedXmlNamespace() -> void
Microsoft.CodeAnalysis.ImportedXmlNamespace.XmlNamespace.get -> string!
Microsoft.CodeAnalysis.GeneratorDriver.GetTimingInfo() -> Microsoft.CodeAnalysis.GeneratorDriverTimingInfo
Microsoft.CodeAnalysis.GeneratorDriverTimingInfo
Microsoft.CodeAnalysis.GeneratorDriverTimingInfo.ElapsedTime.get -> System.TimeSpan
Microsoft.CodeAnalysis.GeneratorDriverTimingInfo.GeneratorDriverTimingInfo() -> void
Microsoft.CodeAnalysis.GeneratorDriverTimingInfo.GeneratorTimes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.GeneratorTimingInfo>
Microsoft.CodeAnalysis.GeneratorTimingInfo
Microsoft.CodeAnalysis.GeneratorTimingInfo.ElapsedTime.get -> System.TimeSpan
Microsoft.CodeAnalysis.GeneratorTimingInfo.Generator.get -> Microsoft.CodeAnalysis.ISourceGenerator!
Microsoft.CodeAnalysis.GeneratorTimingInfo.GeneratorTimingInfo() -> void
Microsoft.CodeAnalysis.IOperation.ChildOperations.get -> Microsoft.CodeAnalysis.IOperation.OperationList
Microsoft.CodeAnalysis.IOperation.OperationList
Microsoft.CodeAnalysis.IOperation.OperationList.Any() -> bool
Microsoft.CodeAnalysis.IOperation.OperationList.OperationList() -> void
Microsoft.CodeAnalysis.IOperation.OperationList.Count.get -> int
Microsoft.CodeAnalysis.IOperation.OperationList.First() -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.IOperation.OperationList.GetEnumerator() -> Microsoft.CodeAnalysis.IOperation.OperationList.Enumerator
Microsoft.CodeAnalysis.IOperation.OperationList.Last() -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.IOperation.OperationList.Reverse() -> Microsoft.CodeAnalysis.IOperation.OperationList.Reversed
Microsoft.CodeAnalysis.IOperation.OperationList.ToImmutableArray() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation!>
Microsoft.CodeAnalysis.IOperation.OperationList.Enumerator
Microsoft.CodeAnalysis.IOperation.OperationList.Enumerator.Current.get -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.IOperation.OperationList.Enumerator.Enumerator() -> void
Microsoft.CodeAnalysis.IOperation.OperationList.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.IOperation.OperationList.Enumerator.Reset() -> void
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.Enumerator
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.Enumerator.Current.get -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.Enumerator.Enumerator() -> void
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.Enumerator.Reset() -> void
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.Reversed() -> void
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.Count.get -> int
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.GetEnumerator() -> Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.Enumerator
Microsoft.CodeAnalysis.IOperation.OperationList.Reversed.ToImmutableArray() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation!>
Microsoft.CodeAnalysis.IPropertySymbol.IsRequired.get -> bool
Microsoft.CodeAnalysis.Operations.CommonConversion.ConstrainedToType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.Operations.IBinaryOperation.ConstrainedToType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation.ConstrainedToType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.Operations.IConversionOperation.ConstrainedToType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.ConstrainedToType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.Operations.IInvocationOperation.ConstrainedToType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.Operations.IMemberReferenceOperation.ConstrainedToType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.Operations.IUnaryOperation.ConstrainedToType.get -> Microsoft.CodeAnalysis.ITypeSymbol?
Microsoft.CodeAnalysis.SemanticModel.GetImportScopes(int position, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IImportScope!>
Microsoft.CodeAnalysis.ISymbol.Accept<TArgument, TResult>(Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>! visitor, TArgument argument) -> TResult
Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>
Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.SymbolVisitor() -> void
Microsoft.CodeAnalysis.SyntaxValueProvider.ForAttributeWithMetadataName<T>(string! fullyQualifiedMetadataName, System.Func<Microsoft.CodeAnalysis.SyntaxNode!, System.Threading.CancellationToken, bool>! predicate, System.Func<Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext, System.Threading.CancellationToken, T>! transform) -> Microsoft.CodeAnalysis.IncrementalValuesProvider<T>
override sealed Microsoft.CodeAnalysis.Diagnostic.Equals(object? obj) -> bool
*REMOVED*static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax<TRoot>(this TRoot! root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode!>! nodes, System.Func<Microsoft.CodeAnalysis.SyntaxNode!, Microsoft.CodeAnalysis.SyntaxNode!, Microsoft.CodeAnalysis.SyntaxNode!>! computeReplacementNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>! tokens, System.Func<Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken>! computeReplacementToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>! trivia, System.Func<Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia>! computeReplacementTrivia) -> TRoot!
static Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation.Create(System.Collections.Immutable.ImmutableArray<byte> compressedSlotMap, System.Collections.Immutable.ImmutableArray<byte> compressedLambdaMap, System.Collections.Immutable.ImmutableArray<byte> compressedStateMachineStateMap) -> Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation
static Microsoft.CodeAnalysis.ModuleMetadata.CreateFromMetadata(System.IntPtr metadata, int size, System.IDisposable! owner, bool disposeOwner) -> Microsoft.CodeAnalysis.ModuleMetadata!
static Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax<TRoot>(this TRoot! root, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode!>? nodes, System.Func<Microsoft.CodeAnalysis.SyntaxNode!, Microsoft.CodeAnalysis.SyntaxNode!, Microsoft.CodeAnalysis.SyntaxNode!>? computeReplacementNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>? tokens, System.Func<Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken>? computeReplacementToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>? trivia, System.Func<Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia>? computeReplacementTrivia) -> TRoot!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedDecrementOperatorName = "op_CheckedDecrement" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedIncrementOperatorName = "op_CheckedIncrement" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedUnaryNegationOperatorName = "op_CheckedUnaryNegation" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedAdditionOperatorName = "op_CheckedAddition" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedDivisionOperatorName = "op_CheckedDivision" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedMultiplyOperatorName = "op_CheckedMultiply" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedSubtractionOperatorName = "op_CheckedSubtraction" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedExplicitConversionName = "op_CheckedExplicit" -> string!
Microsoft.CodeAnalysis.OperationKind.Utf8String = 124 -> Microsoft.CodeAnalysis.OperationKind
Microsoft.CodeAnalysis.Operations.IUtf8StringOperation
Microsoft.CodeAnalysis.Operations.IUtf8StringOperation.Value.get -> string!
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions.Keys.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode.ReferencesNewerCompiler = 5 -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode
Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.ReferencedCompilerVersion.get -> System.Version?
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitUtf8String(Microsoft.CodeAnalysis.Operations.IUtf8StringOperation! operation) -> void
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor<TArgument, TResult>.VisitUtf8String(Microsoft.CodeAnalysis.Operations.IUtf8StringOperation! operation, TArgument argument) -> TResult?
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.DefaultVisit(Microsoft.CodeAnalysis.ISymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.Visit(Microsoft.CodeAnalysis.ISymbol? symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitAlias(Microsoft.CodeAnalysis.IAliasSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitArrayType(Microsoft.CodeAnalysis.IArrayTypeSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitAssembly(Microsoft.CodeAnalysis.IAssemblySymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitDiscard(Microsoft.CodeAnalysis.IDiscardSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitDynamicType(Microsoft.CodeAnalysis.IDynamicTypeSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitEvent(Microsoft.CodeAnalysis.IEventSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitField(Microsoft.CodeAnalysis.IFieldSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitFunctionPointerType(Microsoft.CodeAnalysis.IFunctionPointerTypeSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitLabel(Microsoft.CodeAnalysis.ILabelSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitLocal(Microsoft.CodeAnalysis.ILocalSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitMethod(Microsoft.CodeAnalysis.IMethodSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitModule(Microsoft.CodeAnalysis.IModuleSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitNamedType(Microsoft.CodeAnalysis.INamedTypeSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitNamespace(Microsoft.CodeAnalysis.INamespaceSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitParameter(Microsoft.CodeAnalysis.IParameterSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitPointerType(Microsoft.CodeAnalysis.IPointerTypeSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitProperty(Microsoft.CodeAnalysis.IPropertySymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitRangeVariable(Microsoft.CodeAnalysis.IRangeVariableSymbol! symbol, TArgument argument) -> TResult
virtual Microsoft.CodeAnalysis.SymbolVisitor<TArgument, TResult>.VisitTypeParameter(Microsoft.CodeAnalysis.ITypeParameterSymbol! symbol, TArgument argument) -> TResult
Microsoft.CodeAnalysis.Operations.BinaryOperatorKind.UnsignedRightShift = 25 -> Microsoft.CodeAnalysis.Operations.BinaryOperatorKind