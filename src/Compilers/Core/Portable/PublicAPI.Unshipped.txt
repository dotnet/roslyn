*REMOVED*Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode! other) -> bool
Caravela.Compiler.DiagnosticFilteringRequest
Caravela.Compiler.DiagnosticFilteringRequest.Compilation.get -> Microsoft.CodeAnalysis.Compilation!
Caravela.Compiler.DiagnosticFilteringRequest.Diagnostic.get -> Microsoft.CodeAnalysis.Diagnostic!
Caravela.Compiler.DiagnosticFilteringRequest.IsSuppressed.get -> bool
Caravela.Compiler.DiagnosticFilteringRequest.Suppress() -> void
Caravela.Compiler.DiagnosticFilteringRequest.Symbol.get -> Microsoft.CodeAnalysis.ISymbol!
Caravela.Compiler.DiagnosticFilteringRequest.SyntaxNode.get -> Microsoft.CodeAnalysis.SyntaxNode!
Caravela.Compiler.ISourceTransformer.Execute(Caravela.Compiler.TransformerContext! context) -> void
Caravela.Compiler.TransformerContext.AddResources(params Microsoft.CodeAnalysis.ResourceDescription![]! resources) -> void
Caravela.Compiler.TransformerContext.AddResources(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ResourceDescription!>! resources) -> void
Caravela.Compiler.TransformerContext.AddSyntaxTrees(params Microsoft.CodeAnalysis.SyntaxTree![]! syntaxTrees) -> void
Caravela.Compiler.TransformerContext.AddSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree!>! syntaxTrees) -> void
Caravela.Compiler.TransformerContext.AddSyntaxTreeTransformations(System.Collections.Generic.IEnumerable<Caravela.Compiler.SyntaxTreeTransformation>! transformations) -> void
Caravela.Compiler.TransformerContext.RegisterDiagnosticFilter(Microsoft.CodeAnalysis.SuppressionDescriptor! descriptor, System.Action<Caravela.Compiler.DiagnosticFilteringRequest!>! filter) -> void
Caravela.Compiler.TransformerContext.ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree! oldTree, Microsoft.CodeAnalysis.SyntaxTree! newTree) -> void
Caravela.Compiler.TransformerContext.Resources.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ResourceDescription!>
const Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.CompilerPlugInAttributeAssembly = "Caravela.Framework.Sdk" -> string!
const Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.CompilerPlugInAttributeTypeNamespace = "Caravela.Framework.Impl.Sdk" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.PrintMembersMethodName = "PrintMembers" -> string!
Microsoft.CodeAnalysis.GeneratorAttribute.GeneratorAttribute(string! firstLanguage, params string![]! additionalLanguages) -> void
Microsoft.CodeAnalysis.GeneratorAttribute.Languages.get -> string![]!
Microsoft.CodeAnalysis.IFieldSymbol.IsExplicitlyNamedTupleElement.get -> bool
Microsoft.CodeAnalysis.GeneratorExecutionContext.SyntaxContextReceiver.get -> Microsoft.CodeAnalysis.ISyntaxContextReceiver?
Microsoft.CodeAnalysis.GeneratorInitializationContext.RegisterForSyntaxNotifications(Microsoft.CodeAnalysis.SyntaxContextReceiverCreator! receiverCreator) -> void
Microsoft.CodeAnalysis.GeneratorSyntaxContext
Microsoft.CodeAnalysis.GeneratorSyntaxContext.GeneratorSyntaxContext() -> void
Microsoft.CodeAnalysis.GeneratorSyntaxContext.Node.get -> Microsoft.CodeAnalysis.SyntaxNode!
Microsoft.CodeAnalysis.GeneratorSyntaxContext.SemanticModel.get -> Microsoft.CodeAnalysis.SemanticModel!
Microsoft.CodeAnalysis.IMethodSymbol.IsPartialDefinition.get -> bool
Microsoft.CodeAnalysis.ISyntaxContextReceiver
Microsoft.CodeAnalysis.ISyntaxContextReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext context) -> void
Microsoft.CodeAnalysis.GeneratorInitializationContext.RegisterForPostInitialization(System.Action<Microsoft.CodeAnalysis.GeneratorPostInitializationContext>! callback) -> void
Microsoft.CodeAnalysis.GeneratorPostInitializationContext
Microsoft.CodeAnalysis.GeneratorPostInitializationContext.AddSource(string! hintName, Microsoft.CodeAnalysis.Text.SourceText! sourceText) -> void
Microsoft.CodeAnalysis.GeneratorPostInitializationContext.AddSource(string! hintName, string! source) -> void
Microsoft.CodeAnalysis.GeneratorPostInitializationContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.GeneratorPostInitializationContext.GeneratorPostInitializationContext() -> void
Microsoft.CodeAnalysis.IMethodSymbol.MethodImplementationFlags.get -> System.Reflection.MethodImplAttributes
Microsoft.CodeAnalysis.ITypeSymbol.IsRecord.get -> bool
Microsoft.CodeAnalysis.Operations.OperationWalker<TArgument>
Microsoft.CodeAnalysis.Operations.OperationWalker<TArgument>.OperationWalker() -> void
Microsoft.CodeAnalysis.SymbolDisplayPartKind.RecordClassName = 31 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.CompilationEnd = "CompilationEnd" -> string!
Microsoft.CodeAnalysis.SymbolDisplayPartKind.RecordStructName = 32 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SyntaxContextReceiverCreator
Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode? other) -> bool
Microsoft.CodeAnalysis.SyntaxNode.IsIncrementallyIdenticalTo(Microsoft.CodeAnalysis.SyntaxNode? other) -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsIncrementallyIdenticalTo(Microsoft.CodeAnalysis.SyntaxNodeOrToken other) -> bool
Microsoft.CodeAnalysis.SyntaxToken.IsIncrementallyIdenticalTo(Microsoft.CodeAnalysis.SyntaxToken token) -> bool
override Microsoft.CodeAnalysis.Text.TextChangeRange.ToString() -> string!
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.Compare(System.ReadOnlySpan<char> left, System.ReadOnlySpan<char> right) -> int
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.Equals(System.ReadOnlySpan<char> left, System.ReadOnlySpan<char> right) -> bool
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetGeneratorsForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator!>
override Microsoft.CodeAnalysis.Operations.OperationWalker<TArgument>.DefaultVisit(Microsoft.CodeAnalysis.IOperation! operation, TArgument argument) -> object?
override Microsoft.CodeAnalysis.Operations.OperationWalker<TArgument>.Visit(Microsoft.CodeAnalysis.IOperation? operation, TArgument argument) -> object?
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetGenerators(string! language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator!>
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetGeneratorsForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator!>
abstract Microsoft.CodeAnalysis.Compilation.GetUsedAssemblyReferences(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference!>
Caravela.Compiler.TransformerContext.Plugins.get -> System.Collections.Immutable.ImmutableArray<object!>
Caravela.Compiler.ISourceTransformer
Caravela.Compiler.TransformerAttribute
Caravela.Compiler.TransformerAttribute.TransformerAttribute() -> void
Caravela.Compiler.TransformerOrderAttribute
Caravela.Compiler.TransformerOrderAttribute.TransformerNames.get -> string[]
Caravela.Compiler.TransformerOrderAttribute.TransformerOrderAttribute(params string[] transformerNames) -> void
Caravela.Compiler.Intrinsics
Caravela.Compiler.ResourceDescriptionExtensions
Caravela.Compiler.CaravelaCompilerInfo
Caravela.Compiler.TransformerContext
Caravela.Compiler.TransformerContext.Compilation.get -> Microsoft.CodeAnalysis.Compilation!
Caravela.Compiler.TransformerContext.GlobalOptions.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions!
Caravela.Compiler.TransformerContext.LoadReferencedAssembly(Microsoft.CodeAnalysis.IAssemblySymbol! assemblySymbol) -> System.Reflection.Assembly!
Caravela.Compiler.TransformerContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic! diagnostic) -> void
const Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.CompilerPlugInAttributeTypeName = "CompilerPluginAttribute" -> string!
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetPlugins() -> System.Collections.Immutable.ImmutableArray<object!>
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetTransformers() -> System.Collections.Immutable.ImmutableArray<Caravela.Compiler.ISourceTransformer!>
static Caravela.Compiler.Intrinsics.GetRuntimeFieldHandle(string documentationId) -> System.RuntimeFieldHandle
static Caravela.Compiler.Intrinsics.GetRuntimeMethodHandle(string documentationId) -> System.RuntimeMethodHandle
static Caravela.Compiler.Intrinsics.GetRuntimeTypeHandle(string documentationId) -> System.RuntimeTypeHandle
static Caravela.Compiler.ResourceDescriptionExtensions.GetData(this Microsoft.CodeAnalysis.ResourceDescription resource) -> System.IO.Stream
static Caravela.Compiler.ResourceDescriptionExtensions.GetFileName(this Microsoft.CodeAnalysis.ResourceDescription resource) -> string
static Caravela.Compiler.ResourceDescriptionExtensions.GetResourceName(this Microsoft.CodeAnalysis.ResourceDescription resource) -> string
static Caravela.Compiler.ResourceDescriptionExtensions.IsPublic(this Microsoft.CodeAnalysis.ResourceDescription resource) -> bool
static Caravela.Compiler.CaravelaCompilerInfo.IsActive.get -> bool
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetPlugins() -> System.Collections.Immutable.ImmutableArray<object>
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetTransformers() -> System.Collections.Immutable.ImmutableArray<Caravela.Compiler.ISourceTransformer>
