Microsoft.CodeAnalysis.CommandLineArguments.GeneratedArtifactsOutputDirectory.get -> string
Microsoft.CodeAnalysis.Diagnostics.ArtifactGenerationContext
Microsoft.CodeAnalysis.Diagnostics.ArtifactGenerationContext.ArtifactGenerationContext() -> void
Microsoft.CodeAnalysis.Diagnostics.ArtifactGenerationContext.GenerateArtifact(string hintName, Microsoft.CodeAnalysis.Text.SourceText sourceText) -> void
Microsoft.CodeAnalysis.Diagnostics.ArtifactGenerationContext.GenerateArtifact(string hintName, string source) -> void
Microsoft.CodeAnalysis.Diagnostics.ArtifactGenerationContext.GenerateArtifact(string hintName, System.Action<System.IO.Stream> writeStream) -> void
Microsoft.CodeAnalysis.Diagnostics.ArtifactGenerationContext.GenerateArtifact(string hintName, System.Text.StringBuilder builder) -> void
Microsoft.CodeAnalysis.Diagnostics.ArtifactProducer
Microsoft.CodeAnalysis.Diagnostics.ArtifactProducer.ArtifactProducer() -> void
Microsoft.CodeAnalysis.Diagnostics.ArtifactProducer.WriteArtifact(string fileName, Microsoft.CodeAnalysis.Text.SourceText sourceText) -> void
Microsoft.CodeAnalysis.Diagnostics.ArtifactProducer.WriteArtifact(string fileName, string source) -> void
Microsoft.CodeAnalysis.Diagnostics.ArtifactProducer.WriteArtifact(string fileName, System.Action<System.IO.Stream> writeStream) -> void
Microsoft.CodeAnalysis.Diagnostics.ArtifactProducer.WriteArtifact(string fileName, System.Text.StringBuilder builder) -> void
Microsoft.CodeAnalysis.GeneratorAttribute.GeneratorAttribute(string firstLanguage, params string[] additionalLanguages) -> void
Microsoft.CodeAnalysis.GeneratorAttribute.Languages.get -> string[]
Microsoft.CodeAnalysis.ITypeSymbol.IsRecord.get -> bool
Microsoft.CodeAnalysis.SymbolDisplayPartKind.RecordName = 31 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.CompilationEnd = "CompilationEnd" -> string
override Microsoft.CodeAnalysis.Diagnostics.ArtifactProducer.SupportedDiagnostics.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.DiagnosticDescriptor>
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.Compare(System.ReadOnlySpan<char> left, System.ReadOnlySpan<char> right) -> int
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.Equals(System.ReadOnlySpan<char> left, System.ReadOnlySpan<char> right) -> bool
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetGenerators(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator>
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetGeneratorsForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator>
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetGenerators(string language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator>
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetGeneratorsForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator>
