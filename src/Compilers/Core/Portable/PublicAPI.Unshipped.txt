*REMOVED*Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode! other) -> bool
const Microsoft.CodeAnalysis.WellKnownMemberNames.PrintMembersMethodName = "PrintMembers" -> string!
Microsoft.CodeAnalysis.GeneratorAttribute.GeneratorAttribute(string! firstLanguage, params string![]! additionalLanguages) -> void
Microsoft.CodeAnalysis.GeneratorAttribute.Languages.get -> string![]!
Microsoft.CodeAnalysis.IFieldSymbol.IsExplicitlyNamedTupleElement.get -> bool
Microsoft.CodeAnalysis.GeneratorExecutionContext.SyntaxContextReceiver.get -> Microsoft.CodeAnalysis.ISyntaxContextReceiver?
Microsoft.CodeAnalysis.GeneratorInitializationContext.RegisterForSyntaxNotifications(Microsoft.CodeAnalysis.SyntaxContextReceiverCreator! receiverCreator) -> void
Microsoft.CodeAnalysis.GeneratorSyntaxContext
Microsoft.CodeAnalysis.GeneratorSyntaxContext.GeneratorSyntaxContext() -> void
Microsoft.CodeAnalysis.GeneratorSyntaxContext.Node.get -> Microsoft.CodeAnalysis.SyntaxNode!
Microsoft.CodeAnalysis.GeneratorSyntaxContext.SemanticModel.get -> Microsoft.CodeAnalysis.SemanticModel!
Microsoft.CodeAnalysis.IIncrementalGenerator
Microsoft.CodeAnalysis.IIncrementalGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext context) -> void
Microsoft.CodeAnalysis.IMethodSymbol.IsPartialDefinition.get -> bool
Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext
Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext.IncrementalGeneratorInitializationContext() -> void
Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext.RegisterExecutionPipeline(System.Action<Microsoft.CodeAnalysis.IncrementalGeneratorPipelineContext>! callback) -> void
Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext.RegisterForPostInitialization(System.Action<Microsoft.CodeAnalysis.IncrementalGeneratorPostInitializationContext>! callback) -> void
Microsoft.CodeAnalysis.IncrementalGeneratorPipelineContext
Microsoft.CodeAnalysis.IncrementalGeneratorPipelineContext.IncrementalGeneratorPipelineContext() -> void
Microsoft.CodeAnalysis.IncrementalGeneratorPipelineContext.Sources.get -> Microsoft.CodeAnalysis.IncrementalValueSources
Microsoft.CodeAnalysis.IncrementalGeneratorPostInitializationContext
Microsoft.CodeAnalysis.IncrementalGeneratorPostInitializationContext.AddSource(string! hintName, Microsoft.CodeAnalysis.Text.SourceText! sourceText) -> void
Microsoft.CodeAnalysis.IncrementalGeneratorPostInitializationContext.AddSource(string! hintName, string! source) -> void
Microsoft.CodeAnalysis.IncrementalGeneratorPostInitializationContext.IncrementalGeneratorPostInitializationContext() -> void
Microsoft.CodeAnalysis.IncrementalValueSource<T>
Microsoft.CodeAnalysis.IncrementalValueSource<T>.IncrementalValueSource() -> void
Microsoft.CodeAnalysis.IncrementalValueSources
Microsoft.CodeAnalysis.IncrementalValueSources.AdditionalTexts.get -> Microsoft.CodeAnalysis.IncrementalValueSource<Microsoft.CodeAnalysis.AdditionalText!>
Microsoft.CodeAnalysis.IncrementalValueSources.AnalyzerConfigOptions.get -> Microsoft.CodeAnalysis.IncrementalValueSource<Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptionsProvider!>
Microsoft.CodeAnalysis.IncrementalValueSources.Compilation.get -> Microsoft.CodeAnalysis.IncrementalValueSource<Microsoft.CodeAnalysis.Compilation!>
Microsoft.CodeAnalysis.IncrementalValueSources.IncrementalValueSources() -> void
Microsoft.CodeAnalysis.IncrementalValueSources.ParseOptions.get -> Microsoft.CodeAnalysis.IncrementalValueSource<Microsoft.CodeAnalysis.ParseOptions!>
Microsoft.CodeAnalysis.IncrementalValueSourceExtensions
Microsoft.CodeAnalysis.IncrementalValueSources.Syntax.get -> Microsoft.CodeAnalysis.SyntaxValueSources
Microsoft.CodeAnalysis.ISyntaxContextReceiver
Microsoft.CodeAnalysis.ISyntaxContextReceiver.OnVisitSyntaxNode(Microsoft.CodeAnalysis.GeneratorSyntaxContext context) -> void
Microsoft.CodeAnalysis.GeneratorInitializationContext.RegisterForPostInitialization(System.Action<Microsoft.CodeAnalysis.GeneratorPostInitializationContext>! callback) -> void
Microsoft.CodeAnalysis.GeneratorPostInitializationContext
Microsoft.CodeAnalysis.GeneratorPostInitializationContext.AddSource(string! hintName, Microsoft.CodeAnalysis.Text.SourceText! sourceText) -> void
Microsoft.CodeAnalysis.GeneratorPostInitializationContext.AddSource(string! hintName, string! source) -> void
Microsoft.CodeAnalysis.GeneratorPostInitializationContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.GeneratorPostInitializationContext.GeneratorPostInitializationContext() -> void
Microsoft.CodeAnalysis.IMethodSymbol.MethodImplementationFlags.get -> System.Reflection.MethodImplAttributes
Microsoft.CodeAnalysis.ITypeSymbol.IsRecord.get -> bool
Microsoft.CodeAnalysis.Operations.OperationWalker<TArgument>
Microsoft.CodeAnalysis.Operations.OperationWalker<TArgument>.OperationWalker() -> void
Microsoft.CodeAnalysis.SourceProductionContext
Microsoft.CodeAnalysis.SourceProductionContext.AddSource(string! hintName, Microsoft.CodeAnalysis.Text.SourceText! sourceText) -> void
Microsoft.CodeAnalysis.SourceProductionContext.AddSource(string! hintName, string! source) -> void
Microsoft.CodeAnalysis.SourceProductionContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.SourceProductionContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic! diagnostic) -> void
Microsoft.CodeAnalysis.SourceProductionContext.SourceProductionContext() -> void
Microsoft.CodeAnalysis.SymbolDisplayPartKind.RecordClassName = 31 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
const Microsoft.CodeAnalysis.WellKnownDiagnosticTags.CompilationEnd = "CompilationEnd" -> string!
Microsoft.CodeAnalysis.SymbolDisplayPartKind.RecordStructName = 32 -> Microsoft.CodeAnalysis.SymbolDisplayPartKind
Microsoft.CodeAnalysis.SyntaxContextReceiverCreator
Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode? other) -> bool
Microsoft.CodeAnalysis.SyntaxNode.IsIncrementallyIdenticalTo(Microsoft.CodeAnalysis.SyntaxNode? other) -> bool
Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsIncrementallyIdenticalTo(Microsoft.CodeAnalysis.SyntaxNodeOrToken other) -> bool
Microsoft.CodeAnalysis.SyntaxToken.IsIncrementallyIdenticalTo(Microsoft.CodeAnalysis.SyntaxToken token) -> bool
Microsoft.CodeAnalysis.SyntaxValueSources
Microsoft.CodeAnalysis.SyntaxValueSources.SyntaxValueSources() -> void
Microsoft.CodeAnalysis.SyntaxValueSources.Transform<T>(System.Func<Microsoft.CodeAnalysis.SyntaxNode!, bool>! filterFunc, System.Func<Microsoft.CodeAnalysis.GeneratorSyntaxContext, T>! transformFunc) -> Microsoft.CodeAnalysis.IncrementalValueSource<T>
override Microsoft.CodeAnalysis.Text.TextChangeRange.ToString() -> string!
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.Compare(System.ReadOnlySpan<char> left, System.ReadOnlySpan<char> right) -> int
static Microsoft.CodeAnalysis.CaseInsensitiveComparison.Equals(System.ReadOnlySpan<char> left, System.ReadOnlySpan<char> right) -> bool
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetGenerators(string! language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator!>
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.GetGeneratorsForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator!>
override Microsoft.CodeAnalysis.Operations.OperationWalker<TArgument>.DefaultVisit(Microsoft.CodeAnalysis.IOperation! operation, TArgument argument) -> object?
override Microsoft.CodeAnalysis.Operations.OperationWalker<TArgument>.Visit(Microsoft.CodeAnalysis.IOperation? operation, TArgument argument) -> object?
static Microsoft.CodeAnalysis.GeneratorDriver.GetGeneratorType(Microsoft.CodeAnalysis.ISourceGenerator! generator) -> System.Type!
static Microsoft.CodeAnalysis.GeneratorDriver.WrapGenerator(Microsoft.CodeAnalysis.IIncrementalGenerator! incrementalGenerator) -> Microsoft.CodeAnalysis.ISourceGenerator!
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.BatchTransform<T, U>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source, System.Func<System.Collections.Immutable.ImmutableArray<T>, U>! func) -> Microsoft.CodeAnalysis.IncrementalValueSource<U>
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.BatchTransformMany<T, U>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source, System.Func<System.Collections.Immutable.ImmutableArray<T>, System.Collections.Generic.IEnumerable<U>!>! func) -> Microsoft.CodeAnalysis.IncrementalValueSource<U>
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.BatchTransformMany<T, U>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source, System.Func<System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<U>>! func) -> Microsoft.CodeAnalysis.IncrementalValueSource<U>
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.Filter<T>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source, System.Func<T, bool>! filter) -> Microsoft.CodeAnalysis.IncrementalValueSource<T>
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.GenerateSource<T>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source, System.Action<Microsoft.CodeAnalysis.SourceProductionContext, T>! action) -> void
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.Join<T, U>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source1, Microsoft.CodeAnalysis.IncrementalValueSource<U> source2) -> Microsoft.CodeAnalysis.IncrementalValueSource<(T, System.Collections.Immutable.ImmutableArray<U>)>
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.Transform<T, U>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source, System.Func<T, U>! func) -> Microsoft.CodeAnalysis.IncrementalValueSource<U>
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.TransformMany<T, U>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source, System.Func<T, System.Collections.Generic.IEnumerable<U>!>! func) -> Microsoft.CodeAnalysis.IncrementalValueSource<U>
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.TransformMany<T, U>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source, System.Func<T, System.Collections.Immutable.ImmutableArray<U>>! func) -> Microsoft.CodeAnalysis.IncrementalValueSource<U>
static Microsoft.CodeAnalysis.IncrementalValueSourceExtensions.WithComparer<T>(this Microsoft.CodeAnalysis.IncrementalValueSource<T> source, System.Collections.Generic.IEqualityComparer<T>! comparer) -> Microsoft.CodeAnalysis.IncrementalValueSource<T>
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetGenerators(string! language) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator!>
virtual Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetGeneratorsForAllLanguages() -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISourceGenerator!>
abstract Microsoft.CodeAnalysis.Compilation.GetUsedAssemblyReferences(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference!>
