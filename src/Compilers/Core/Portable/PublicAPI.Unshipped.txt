*REMOVED*static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
*REMOVED*static Microsoft.CodeAnalysis.SyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SyntaxList<TNode!>(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
const Metalama.Compiler.MetalamaCompilerAnnotations.GeneratedCodeAnnotationKind = "Metalama.Compiler.GeneratedCode" -> string!
Metalama.Compiler.DiagnosticFilteringRequest
Metalama.Compiler.DiagnosticFilteringRequest.Compilation.get -> Microsoft.CodeAnalysis.Compilation!
Metalama.Compiler.DiagnosticFilteringRequest.Diagnostic.get -> Microsoft.CodeAnalysis.Diagnostic!
Metalama.Compiler.DiagnosticFilteringRequest.IsSuppressed.get -> bool
Metalama.Compiler.DiagnosticFilteringRequest.Suppress() -> void
Metalama.Compiler.DiagnosticFilteringRequest.Symbol.get -> Microsoft.CodeAnalysis.ISymbol!
Metalama.Compiler.DiagnosticFilteringRequest.SyntaxNode.get -> Microsoft.CodeAnalysis.SyntaxNode!
Metalama.Compiler.Intrinsics
Metalama.Compiler.ManagedResource
Metalama.Compiler.ManagedResource.DataProvider.get -> System.Func<System.IO.Stream!>?
Metalama.Compiler.ManagedResource.IncludeInRefAssembly.get -> bool
Metalama.Compiler.ManagedResource.IsEmbedded.get -> bool?
Metalama.Compiler.ManagedResource.IsPublic.get -> bool
Metalama.Compiler.ManagedResource.ManagedResource(string! name, byte[]! data, bool includeInRefAssembly = false) -> void
Metalama.Compiler.ManagedResource.Name.get -> string!
Metalama.Compiler.ManagedResource.Resource.get -> Microsoft.CodeAnalysis.ResourceDescription!
Metalama.Compiler.MetalamaCompilerAnnotations
Metalama.Compiler.MetalamaCompilerInfo
Metalama.Compiler.MetalamaPlugInAttribute
Metalama.Compiler.MetalamaPlugInAttribute.MetalamaPlugInAttribute() -> void
Metalama.Compiler.SyntaxTreeTransformation
Metalama.Compiler.SyntaxTreeTransformation.FilePath.get -> string!
Metalama.Compiler.SyntaxTreeTransformation.Kind.get -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformation.NewTree.get -> Microsoft.CodeAnalysis.SyntaxTree?
Metalama.Compiler.SyntaxTreeTransformation.OldTree.get -> Microsoft.CodeAnalysis.SyntaxTree?
Metalama.Compiler.SyntaxTreeTransformation.SyntaxTreeTransformation() -> void
Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformationKind.Add = 1 -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformationKind.None = 0 -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformationKind.Remove = 2 -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.SyntaxTreeTransformationKind.Replace = 3 -> Metalama.Compiler.SyntaxTreeTransformationKind
Metalama.Compiler.TransformerAttribute
Metalama.Compiler.TransformerAttribute.TransformerAttribute() -> void
Metalama.Compiler.TransformerContext.AddSyntaxTreeTransformations(params Metalama.Compiler.SyntaxTreeTransformation[]! transformations) -> void
Metalama.Compiler.TransformerContext.AnalyzerConfigOptionsProvider.get -> Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptionsProvider!
Metalama.Compiler.TransformerContext.Options.get -> Metalama.Compiler.TransformerOptions!
Metalama.Compiler.TransformerContext.Services.get -> System.IServiceProvider?
Metalama.Compiler.TransformerOptions
Metalama.Compiler.TransformerOptions.RequiresCodeCoverageAnnotations.get -> bool
Metalama.Compiler.TransformerOrderAttribute
Metalama.Compiler.TransformerOrderAttribute.TransformerNames.get -> string![]!
Metalama.Compiler.TransformerOrderAttribute.TransformerOrderAttribute(params string![]! transformerNames) -> void
Microsoft.CodeAnalysis.CommandLineArguments.ReportInternalsVisibleToAttributes.get -> bool
Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>
Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>.AdditionalTextValueProvider(System.Func<Microsoft.CodeAnalysis.AdditionalText!, TValue>! computeValue, System.Collections.Generic.IEqualityComparer<Microsoft.CodeAnalysis.AdditionalText!>? additionalTextComparer = null) -> void
Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysis.AdditionalText! text, Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>! valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysis.AdditionalText! text, Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>! valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysis.AdditionalText! text, Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>! valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(Microsoft.CodeAnalysis.AdditionalText! file, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Diagnostics.AnalysisResult!>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(Microsoft.CodeAnalysis.AdditionalText! file, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Diagnostics.AnalysisResult!>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Diagnostics.AnalysisResult!>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Diagnostics.AnalysisResult!>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSyntaxDiagnosticsAsync(Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSyntaxDiagnosticsAsync(Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree?
Microsoft.CodeAnalysis.Diagnostics.SymbolStartAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.SymbolStartAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree?
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
static Metalama.Compiler.Intrinsics.GetRuntimeFieldHandle(string! documentationId) -> System.RuntimeFieldHandle
static Metalama.Compiler.Intrinsics.GetRuntimeMethodHandle(string! documentationId) -> System.RuntimeMethodHandle
static Metalama.Compiler.Intrinsics.GetRuntimeTypeHandle(string! documentationId) -> System.RuntimeTypeHandle
static Metalama.Compiler.MetalamaCompilerAnnotations.CreateGeneratedCodeAnnotation(string! origin) -> Microsoft.CodeAnalysis.SyntaxAnnotation!
static Metalama.Compiler.MetalamaCompilerAnnotations.IncludeInReferenceAssemblyAnnotation.get -> Microsoft.CodeAnalysis.SyntaxAnnotation!
static Metalama.Compiler.MetalamaCompilerAnnotations.SourceCodeAnnotation.get -> Microsoft.CodeAnalysis.SyntaxAnnotation!
static Metalama.Compiler.MetalamaCompilerAnnotations.TryGetCodeCoverageRedirectionFromAnnotation(this Microsoft.CodeAnalysis.SyntaxNode! syntaxNode, Microsoft.CodeAnalysis.Compilation! compilation, out Microsoft.CodeAnalysis.ISymbol? redirectedSymbol) -> bool
static Metalama.Compiler.MetalamaCompilerAnnotations.WithIgnoreCodeCoverageAnnotation<T>(this T! syntaxNode) -> T!
static Metalama.Compiler.MetalamaCompilerAnnotations.WithIncludeInReferenceAssemblyAnnotation<T>(this T! syntaxNode) -> T!
static Metalama.Compiler.MetalamaCompilerAnnotations.WithOriginalLocationAnnotationFrom<T>(this T! node, Microsoft.CodeAnalysis.SyntaxNode! originalNode) -> T!
static Metalama.Compiler.MetalamaCompilerAnnotations.WithRedirectCodeCoverageAnnotation<T>(this T! syntaxNode, Microsoft.CodeAnalysis.ISymbol! originalSymbol) -> T!
static Metalama.Compiler.MetalamaCompilerInfo.EnsureInitialized() -> void
static Metalama.Compiler.MetalamaCompilerInfo.IsActive.get -> bool
static Metalama.Compiler.SyntaxTreeTransformation.AddTree(Microsoft.CodeAnalysis.SyntaxTree! tree) -> Metalama.Compiler.SyntaxTreeTransformation
static Metalama.Compiler.SyntaxTreeTransformation.RemoveTree(Microsoft.CodeAnalysis.SyntaxTree! tree) -> Metalama.Compiler.SyntaxTreeTransformation
static Metalama.Compiler.SyntaxTreeTransformation.ReplaceTree(Microsoft.CodeAnalysis.SyntaxTree! oldTree, Microsoft.CodeAnalysis.SyntaxTree! newTree) -> Metalama.Compiler.SyntaxTreeTransformation
static Metalama.Compiler.TransformerOptions.Default.get -> Metalama.Compiler.TransformerOptions!
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.explicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.op_Implicit(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
static Microsoft.CodeAnalysis.SyntaxList<TNode>.explicit operator Microsoft.CodeAnalysis.SyntaxList<TNode!>(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
static Microsoft.CodeAnalysis.SyntaxList<TNode>.op_Implicit(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
Microsoft.CodeAnalysis.OperationKind.InlineArrayAccess = 126 -> Microsoft.CodeAnalysis.OperationKind
Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation
Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation.Argument.get -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation.Instance.get -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.RuntimeCapability.InlineArrayTypes = 7 -> Microsoft.CodeAnalysis.RuntimeCapability
*REMOVED*Microsoft.CodeAnalysis.SpecialType.Count = 45 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.Count = 46 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Runtime_CompilerServices_InlineArrayAttribute = 46 -> Microsoft.CodeAnalysis.SpecialType
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitInlineArrayAccess(Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation! operation) -> void
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor<TArgument, TResult>.VisitInlineArrayAccess(Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation! operation, TArgument argument) -> TResult?
