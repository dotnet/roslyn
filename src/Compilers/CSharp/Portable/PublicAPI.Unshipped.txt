Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions
Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.AddBodyAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.AddBodyAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken breakKeyword, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) -> Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.AddBodyAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddBodyAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.AddBodyAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken fixedKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax variable, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken forKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax> initializers, Microsoft.CodeAnalysis.SyntaxToken firstSemicolonToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken secondSemicolonToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax> incrementors, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken gotoKeyword, Microsoft.CodeAnalysis.SyntaxToken caseOrDefaultKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax else) -> Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.AddBodyAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken lockKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.AddBodyAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.AddBodyAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken returnKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken switchKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax> sections, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken throwKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken tryKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax> catches, Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally) -> Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.IsNint.get -> bool
Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.IsNuint.get -> bool
Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.AddBlockAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken unsafeKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) -> Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken yieldKeyword, Microsoft.CodeAnalysis.SyntaxToken returnOrBreakKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
abstract Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
override Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.AttributeLists.get -> Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAccessorDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax accessorDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAccessorList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAliasQualifiedName(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax aliasQualifiedName) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAnonymousFunctionExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax anonymousFunctionExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAnonymousMethodExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax anonymousMethodExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAnonymousObjectCreationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax anonymousObjectCreationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAnonymousObjectMemberDeclarator(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax anonymousObjectMemberDeclarator) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsArgument(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax argument) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsArgumentList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsArrayCreationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax arrayCreationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsArrayRankSpecifier(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax arrayRankSpecifier) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsArrayType(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax arrayType) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsArrowExpressionClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax arrowExpressionClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAssignmentExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax assignmentExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAttribute(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax attribute) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAttributeArgument(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax attributeArgument) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAttributeArgumentList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax attributeArgumentList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAttributeList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax attributeList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAttributeTargetSpecifier(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax attributeTargetSpecifier) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsAwaitExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax awaitExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBadDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax badDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseArgumentList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax baseArgumentList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseCrefParameterList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax baseCrefParameterList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax baseExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseFieldDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax baseFieldDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseMethodDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax baseMethodDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseObjectCreationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax baseObjectCreationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseParameterList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax baseParameterList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBasePropertyDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax basePropertyDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseType(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax baseType) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBaseTypeDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax baseTypeDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBinaryExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax binaryExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBlock(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBracketedArgumentList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax bracketedArgumentList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBracketedParameterList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax bracketedParameterList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBranchingDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BranchingDirectiveTriviaSyntax branchingDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsBreakStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax breakStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCasePatternSwitchLabel(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax casePatternSwitchLabel) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCaseSwitchLabel(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax caseSwitchLabel) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCastExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax castExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCatchClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax catchClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCatchDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax catchDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCatchFilterClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax catchFilterClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCheckedExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax checkedExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCheckedStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax checkedStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsClassDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax classDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsClassOrStructConstraint(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax classOrStructConstraint) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCommonForEachStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax commonForEachStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCompilationUnit(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax compilationUnit) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsConditionalAccessExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax conditionalAccessExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsConditionalDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax conditionalDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsConditionalExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax conditionalExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsConstantPattern(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax constantPattern) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsConstructorConstraint(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax constructorConstraint) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsConstructorDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax constructorDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsConstructorInitializer(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax constructorInitializer) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsContinueStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax continueStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsConversionOperatorDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax conversionOperatorDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsConversionOperatorMemberCref(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax conversionOperatorMemberCref) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCref(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCrefBracketedParameterList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax crefBracketedParameterList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCrefParameter(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax crefParameter) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsCrefParameterList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax crefParameterList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDeclarationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax declarationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDeclarationPattern(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax declarationPattern) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDefaultExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax defaultExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDefaultSwitchLabel(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax defaultSwitchLabel) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDefineDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax defineDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDelegateDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax delegateDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDestructorDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax destructorDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax directiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDiscardDesignation(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax discardDesignation) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDiscardPattern(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DiscardPatternSyntax discardPattern) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDoStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax doStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsDocumentationCommentTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax documentationCommentTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsElementAccessExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax elementAccessExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsElementBindingExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax elementBindingExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsElifDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax elifDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsElseClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax elseClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsElseDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax elseDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsEmptyStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax emptyStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsEndIfDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax endIfDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsEndRegionDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax endRegionDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsEnumDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax enumDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsEnumMemberDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax enumMemberDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsEqualsValueClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax equalsValueClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsErrorDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax errorDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsEventDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax eventDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsEventFieldDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax eventFieldDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsExplicitInterfaceSpecifier(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsExpressionStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax expressionStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsExternAliasDirective(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax externAliasDirective) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsFieldDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax fieldDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsFinallyClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finallyClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsFixedStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax fixedStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsForEachStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax forEachStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsForEachVariableStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax forEachVariableStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsForStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax forStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsFromClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax fromClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsGenericName(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax genericName) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsGlobalStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax globalStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsGotoStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax gotoStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsGroupClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax groupClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsIdentifierName(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax identifierName) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsIfDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax ifDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsIfStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax ifStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsImplicitArrayCreationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax implicitArrayCreationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsImplicitElementAccess(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax implicitElementAccess) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsImplicitObjectCreationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax implicitObjectCreationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsImplicitStackAllocArrayCreationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax implicitStackAllocArrayCreationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsIncompleteMember(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax incompleteMember) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsIndexerDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax indexerDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsIndexerMemberCref(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax indexerMemberCref) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInitializerExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializerExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInstanceExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InstanceExpressionSyntax instanceExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInterfaceDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax interfaceDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInterpolatedStringContent(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax interpolatedStringContent) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInterpolatedStringExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax interpolatedStringExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInterpolatedStringText(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax interpolatedStringText) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInterpolation(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax interpolation) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInterpolationAlignmentClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax interpolationAlignmentClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInterpolationFormatClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax interpolationFormatClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsInvocationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax invocationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsIsPatternExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax isPatternExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsJoinClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax joinClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsJoinIntoClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax joinIntoClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsLabeledStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax labeledStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsLambdaExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax lambdaExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsLetClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax letClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsLineDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax lineDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsLiteralExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax literalExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsLoadDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax loadDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsLocalDeclarationStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax localDeclarationStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsLocalFunctionStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax localFunctionStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsLockStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax lockStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsMakeRefExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax makeRefExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsMemberAccessExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax memberAccessExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsMemberBindingExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax memberBindingExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsMemberCref(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax memberCref) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsMemberDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax memberDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsMethodDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax methodDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsName(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsNameColon(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax nameColon) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsNameEquals(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax nameEquals) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsNameMemberCref(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax nameMemberCref) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsNamespaceDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax namespaceDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsNullableDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax nullableDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsNullableType(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax nullableType) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsObjectCreationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax objectCreationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsOmittedArraySizeExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax omittedArraySizeExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsOmittedTypeArgument(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax omittedTypeArgument) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsOperatorDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax operatorDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsOperatorMemberCref(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax operatorMemberCref) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsOrderByClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax orderByClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsOrdering(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax ordering) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsParameter(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsParameterList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsParenthesizedExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax parenthesizedExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsParenthesizedLambdaExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax parenthesizedLambdaExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsParenthesizedVariableDesignation(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax parenthesizedVariableDesignation) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPattern(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPointerType(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax pointerType) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPositionalPatternClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PositionalPatternClauseSyntax positionalPatternClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPostfixUnaryExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax postfixUnaryExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPragmaChecksumDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax pragmaChecksumDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPragmaWarningDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax pragmaWarningDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPredefinedType(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax predefinedType) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPrefixUnaryExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax prefixUnaryExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPropertyDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax propertyDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsPropertyPatternClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.PropertyPatternClauseSyntax propertyPatternClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsQualifiedCref(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax qualifiedCref) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsQualifiedName(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax qualifiedName) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsQueryBody(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax queryBody) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsQueryClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax queryClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsQueryContinuation(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax queryContinuation) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsQueryExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax queryExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsRangeExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax rangeExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsRecursivePattern(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.RecursivePatternSyntax recursivePattern) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsRefExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax refExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsRefType(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax refType) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsRefTypeExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax refTypeExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsRefValueExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax refValueExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsReferenceDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax referenceDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsRegionDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax regionDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsReturnStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax returnStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSelectClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax selectClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSelectOrGroupClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax selectOrGroupClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsShebangDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax shebangDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSimpleBaseType(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax simpleBaseType) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSimpleLambdaExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax simpleLambdaExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSimpleName(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax simpleName) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSingleVariableDesignation(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax singleVariableDesignation) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSizeOfExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax sizeOfExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSkippedTokensTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax skippedTokensTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsStackAllocArrayCreationExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax stackAllocArrayCreationExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsStructDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax structDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSubpattern(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax subpattern) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSwitchExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SwitchExpressionSyntax switchExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSwitchExpressionArm(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SwitchExpressionArmSyntax switchExpressionArm) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSwitchLabel(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax switchLabel) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSwitchSection(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax switchSection) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsSwitchStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax switchStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsThisExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax thisExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsThrowExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax throwExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsThrowStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax throwStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTryStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax tryStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTupleElement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax tupleElement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTupleExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax tupleExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTupleType(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax tupleType) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsType(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTypeArgumentList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax typeArgumentList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTypeConstraint(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax typeConstraint) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTypeCref(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax typeCref) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTypeDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax typeDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTypeOfExpression(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax typeOfExpression) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTypeParameter(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax typeParameter) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTypeParameterConstraint(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax typeParameterConstraint) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTypeParameterConstraintClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax typeParameterConstraintClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsTypeParameterList(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsUndefDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax undefDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsUnsafeStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax unsafeStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsUsingDirective(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax usingDirective) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsUsingStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax usingStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsVarPattern(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.VarPatternSyntax varPattern) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsVariableDeclaration(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax variableDeclaration) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsVariableDeclarator(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax variableDeclarator) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsVariableDesignation(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax variableDesignation) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsWarningDirectiveTrivia(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax warningDirectiveTrivia) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsWhenClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax whenClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsWhereClause(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax whereClause) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsWhileStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax whileStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlAttribute(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax xmlAttribute) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlCDataSection(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax xmlCDataSection) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlComment(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax xmlComment) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlCrefAttribute(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax xmlCrefAttribute) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlElement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax xmlElement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlElementEndTag(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax xmlElementEndTag) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlElementStartTag(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax xmlElementStartTag) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlEmptyElement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax xmlEmptyElement) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlName(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax xmlName) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlNameAttribute(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax xmlNameAttribute) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlNode(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax xmlNode) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlPrefix(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax xmlPrefix) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlProcessingInstruction(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax xmlProcessingInstruction) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlText(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax xmlText) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsXmlTextAttribute(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax xmlTextAttribute) -> bool
static Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNodeExtensions.IsYieldStatement(this Microsoft.CodeAnalysis.SyntaxNode node, out Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax yieldStatement) -> bool
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax> statements) -> Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken breakKeyword, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) -> Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) -> Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition) -> Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists) -> Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) -> Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken fixedKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax variable, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax variable, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax> initializers, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax> incrementors, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken forKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax> initializers, Microsoft.CodeAnalysis.SyntaxToken firstSemicolonToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken secondSemicolonToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax> incrementors, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken caseOrDefaultKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) -> Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken gotoKeyword, Microsoft.CodeAnalysis.SyntaxToken caseOrDefaultKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax else) -> Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax else) -> Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken lockKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) -> Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken returnKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken switchKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax> sections, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) -> Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken throwKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax> catches, Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally) -> Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken tryKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax> catches, Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally) -> Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) -> Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken unsafeKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) -> Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) -> Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) -> Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken yieldKeyword, Microsoft.CodeAnalysis.SyntaxToken returnOrBreakKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken) -> Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
*REMOVED*Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.ArgumentList.get -> Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
*REMOVED*Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Initializer.get -> Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
*REMOVED*Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.NewKeyword.get -> Microsoft.CodeAnalysis.SyntaxToken
*REMOVED*Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.ArgumentList.get -> Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
*REMOVED*Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Initializer.get -> Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
*REMOVED*Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.NewKeyword.get -> Microsoft.CodeAnalysis.SyntaxToken
Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax.AddArgumentListArguments(params Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList) -> Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax.WithInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) -> Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax.WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken newKeyword) -> Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.AddArgumentListArguments(params Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[] items) -> Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) -> Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList) -> Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.WithInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) -> Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken newKeyword) -> Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax
Microsoft.CodeAnalysis.CSharp.SyntaxKind.ImplicitObjectCreationExpression = 8659 -> Microsoft.CodeAnalysis.CSharp.SyntaxKind
abstract Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax.ArgumentList.get -> Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
abstract Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax.Initializer.get -> Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
abstract Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax.NewKeyword.get -> Microsoft.CodeAnalysis.SyntaxToken
override Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitImplicitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax node) -> Microsoft.CodeAnalysis.SyntaxNode
override Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor) -> void
override Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.Accept<TResult>(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor<TResult> visitor) -> TResult
override Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.ArgumentList.get -> Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
override Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.Initializer.get -> Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
override Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax.NewKeyword.get -> Microsoft.CodeAnalysis.SyntaxToken
override Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.ArgumentList.get -> Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
override Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Initializer.get -> Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
override Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.NewKeyword.get -> Microsoft.CodeAnalysis.SyntaxToken
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitObjectCreationExpression() -> Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) -> Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax
static Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) -> Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax
virtual Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitImplicitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax node) -> void
virtual Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor<TResult>.VisitImplicitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax node) -> TResult