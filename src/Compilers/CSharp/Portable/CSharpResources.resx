<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IDS_NULL" xml:space="preserve">
    <value>&lt;null&gt;</value>
  </data>
  <data name="IDS_ThrowExpression" xml:space="preserve">
    <value>&lt;throw expression&gt;</value>
  </data>
  <data name="IDS_RELATEDERROR" xml:space="preserve">
    <value>(Location of symbol related to previous error)</value>
  </data>
  <data name="IDS_RELATEDWARNING" xml:space="preserve">
    <value>(Location of symbol related to previous warning)</value>
  </data>
  <data name="IDS_XMLIGNORED" xml:space="preserve">
    <value>&lt;!-- Badly formed XML comment ignored for member "{0}" --&gt;</value>
  </data>
  <data name="IDS_XMLIGNORED2" xml:space="preserve">
    <value> Badly formed XML file "{0}" cannot be included </value>
  </data>
  <data name="IDS_XMLFAILEDINCLUDE" xml:space="preserve">
    <value> Failed to insert some or all of included XML </value>
  </data>
  <data name="IDS_XMLBADINCLUDE" xml:space="preserve">
    <value> Include tag is invalid </value>
  </data>
  <data name="IDS_XMLNOINCLUDE" xml:space="preserve">
    <value> No matching elements were found for the following include tag </value>
  </data>
  <data name="IDS_XMLMISSINGINCLUDEFILE" xml:space="preserve">
    <value>Missing file attribute</value>
  </data>
  <data name="IDS_XMLMISSINGINCLUDEPATH" xml:space="preserve">
    <value>Missing path attribute</value>
  </data>
  <data name="IDS_GlobalNamespace" xml:space="preserve">
    <value>&lt;global namespace&gt;</value>
  </data>
  <data name="IDS_FeatureGenerics" xml:space="preserve">
    <value>generics</value>
  </data>
  <data name="IDS_FeatureAnonDelegates" xml:space="preserve">
    <value>anonymous methods</value>
  </data>
  <data name="IDS_FeatureModuleAttrLoc" xml:space="preserve">
    <value>module as an attribute target specifier</value>
  </data>
  <data name="IDS_FeatureGlobalNamespace" xml:space="preserve">
    <value>namespace alias qualifier</value>
  </data>
  <data name="IDS_FeatureFixedBuffer" xml:space="preserve">
    <value>fixed size buffers</value>
  </data>
  <data name="IDS_FeaturePragma" xml:space="preserve">
    <value>#pragma</value>
  </data>
  <data name="IDS_FeatureStaticClasses" xml:space="preserve">
    <value>static classes</value>
  </data>
  <data name="IDS_FeatureReadOnlyStructs" xml:space="preserve">
    <value>readonly structs</value>
  </data>
  <data name="IDS_FeaturePartialTypes" xml:space="preserve">
    <value>partial types</value>
  </data>
  <data name="IDS_FeatureAsync" xml:space="preserve">
    <value>async function</value>
  </data>
  <data name="IDS_FeatureSwitchOnBool" xml:space="preserve">
    <value>switch on boolean type</value>
  </data>
  <data name="IDS_MethodGroup" xml:space="preserve">
    <value>method group</value>
  </data>
  <data name="IDS_AnonMethod" xml:space="preserve">
    <value>anonymous method</value>
  </data>
  <data name="IDS_Lambda" xml:space="preserve">
    <value>lambda expression</value>
  </data>
  <data name="IDS_Collection" xml:space="preserve">
    <value>collection</value>
  </data>
  <data name="IDS_FeaturePropertyAccessorMods" xml:space="preserve">
    <value>access modifiers on properties</value>
  </data>
  <data name="IDS_FeatureExternAlias" xml:space="preserve">
    <value>extern alias</value>
  </data>
  <data name="IDS_FeatureIterators" xml:space="preserve">
    <value>iterators</value>
  </data>
  <data name="IDS_FeatureDefault" xml:space="preserve">
    <value>default operator</value>
  </data>
  <data name="IDS_FeatureDefaultLiteral" xml:space="preserve">
    <value>default literal</value>
  </data>
  <data name="IDS_FeaturePrivateProtected" xml:space="preserve">
    <value>private protected</value>
  </data>
  <data name="IDS_FeatureTupleEquality" xml:space="preserve">
    <value>tuple equality</value>
  </data>
  <data name="IDS_FeatureNullable" xml:space="preserve">
    <value>nullable types</value>
  </data>
  <data name="IDS_FeaturePatternMatching" xml:space="preserve">
    <value>pattern matching</value>
  </data>
  <data name="IDS_FeatureExpressionBodiedAccessor" xml:space="preserve">
    <value>expression body property accessor</value>
  </data>
  <data name="IDS_FeatureExpressionBodiedDeOrConstructor" xml:space="preserve">
    <value>expression body constructor and destructor</value>
  </data>
  <data name="IDS_FeatureThrowExpression" xml:space="preserve">
    <value>throw expression</value>
  </data>
  <data name="IDS_FeatureImplicitArray" xml:space="preserve">
    <value>implicitly typed array</value>
  </data>
  <data name="IDS_FeatureImplicitLocal" xml:space="preserve">
    <value>implicitly typed local variable</value>
  </data>
  <data name="IDS_FeatureAnonymousTypes" xml:space="preserve">
    <value>anonymous types</value>
  </data>
  <data name="IDS_FeatureAutoImplementedProperties" xml:space="preserve">
    <value>automatically implemented properties</value>
  </data>
  <data name="IDS_FeatureReadonlyAutoImplementedProperties" xml:space="preserve">
    <value>readonly automatically implemented properties</value>
  </data>
  <data name="IDS_FeatureObjectInitializer" xml:space="preserve">
    <value>object initializer</value>
  </data>
  <data name="IDS_FeatureCollectionInitializer" xml:space="preserve">
    <value>collection initializer</value>
  </data>
  <data name="IDS_FeatureQueryExpression" xml:space="preserve">
    <value>query expression</value>
  </data>
  <data name="IDS_FeatureExtensionMethod" xml:space="preserve">
    <value>extension method</value>
  </data>
  <data name="IDS_FeaturePartialMethod" xml:space="preserve">
    <value>partial method</value>
  </data>
  <data name="IDS_SK_METHOD" xml:space="preserve">
    <value>method</value>
  </data>
  <data name="IDS_SK_TYPE" xml:space="preserve">
    <value>type</value>
  </data>
  <data name="IDS_SK_NAMESPACE" xml:space="preserve">
    <value>namespace</value>
  </data>
  <data name="IDS_SK_FIELD" xml:space="preserve">
    <value>field</value>
  </data>
  <data name="IDS_SK_PROPERTY" xml:space="preserve">
    <value>property</value>
  </data>
  <data name="IDS_SK_UNKNOWN" xml:space="preserve">
    <value>element</value>
  </data>
  <data name="IDS_SK_VARIABLE" xml:space="preserve">
    <value>variable</value>
  </data>
  <data name="IDS_SK_LABEL" xml:space="preserve">
    <value>label</value>
  </data>
  <data name="IDS_SK_EVENT" xml:space="preserve">
    <value>event</value>
  </data>
  <data name="IDS_SK_TYVAR" xml:space="preserve">
    <value>type parameter</value>
  </data>
  <data name="IDS_SK_ALIAS" xml:space="preserve">
    <value>using alias</value>
  </data>
  <data name="IDS_SK_EXTERNALIAS" xml:space="preserve">
    <value>extern alias</value>
  </data>
  <data name="IDS_SK_CONSTRUCTOR" xml:space="preserve">
    <value>constructor</value>
  </data>
  <data name="IDS_FOREACHLOCAL" xml:space="preserve">
    <value>foreach iteration variable</value>
  </data>
  <data name="IDS_FIXEDLOCAL" xml:space="preserve">
    <value>fixed variable</value>
  </data>
  <data name="IDS_USINGLOCAL" xml:space="preserve">
    <value>using variable</value>
  </data>
  <data name="IDS_Contravariant" xml:space="preserve">
    <value>contravariant</value>
  </data>
  <data name="IDS_Contravariantly" xml:space="preserve">
    <value>contravariantly</value>
  </data>
  <data name="IDS_Covariant" xml:space="preserve">
    <value>covariant</value>
  </data>
  <data name="IDS_Covariantly" xml:space="preserve">
    <value>covariantly</value>
  </data>
  <data name="IDS_Invariantly" xml:space="preserve">
    <value>invariantly</value>
  </data>
  <data name="IDS_FeatureDynamic" xml:space="preserve">
    <value>dynamic</value>
  </data>
  <data name="IDS_FeatureNamedArgument" xml:space="preserve">
    <value>named argument</value>
  </data>
  <data name="IDS_FeatureOptionalParameter" xml:space="preserve">
    <value>optional parameter</value>
  </data>
  <data name="IDS_FeatureExceptionFilter" xml:space="preserve">
    <value>exception filter</value>
  </data>
  <data name="IDS_FeatureTypeVariance" xml:space="preserve">
    <value>type variance</value>
  </data>
  <data name="XML_InvalidToken" xml:space="preserve">
    <value>The character(s) '{0}' cannot be used at this location.</value>
  </data>
  <data name="XML_IncorrectComment" xml:space="preserve">
    <value>Incorrect syntax was used in a comment.</value>
  </data>
  <data name="XML_InvalidCharEntity" xml:space="preserve">
    <value>An invalid character was found inside an entity reference.</value>
  </data>
  <data name="XML_ExpectedEndOfTag" xml:space="preserve">
    <value>Expected '&gt;' or '/&gt;' to close tag '{0}'.</value>
  </data>
  <data name="XML_ExpectedIdentifier" xml:space="preserve">
    <value>An identifier was expected.</value>
  </data>
  <data name="XML_InvalidUnicodeChar" xml:space="preserve">
    <value>Invalid unicode character.</value>
  </data>
  <data name="XML_InvalidWhitespace" xml:space="preserve">
    <value>Whitespace is not allowed at this location.</value>
  </data>
  <data name="XML_LessThanInAttributeValue" xml:space="preserve">
    <value>The character '&lt;' cannot be used in an attribute value.</value>
  </data>
  <data name="XML_MissingEqualsAttribute" xml:space="preserve">
    <value>Missing equals sign between attribute and attribute value.</value>
  </data>
  <data name="XML_RefUndefinedEntity_1" xml:space="preserve">
    <value>Reference to undefined entity '{0}'.</value>
  </data>
  <data name="XML_StringLiteralNoStartQuote" xml:space="preserve">
    <value>A string literal was expected, but no opening quotation mark was found.</value>
  </data>
  <data name="XML_StringLiteralNoEndQuote" xml:space="preserve">
    <value>Missing closing quotation mark for string literal.</value>
  </data>
  <data name="XML_StringLiteralNonAsciiQuote" xml:space="preserve">
    <value>Non-ASCII quotations marks may not be used around string literals.</value>
  </data>
  <data name="XML_EndTagNotExpected" xml:space="preserve">
    <value>End tag was not expected at this location.</value>
  </data>
  <data name="XML_ElementTypeMatch" xml:space="preserve">
    <value>End tag '{0}' does not match the start tag '{1}'.</value>
  </data>
  <data name="XML_EndTagExpected" xml:space="preserve">
    <value>Expected an end tag for element '{0}'.</value>
  </data>
  <data name="XML_WhitespaceMissing" xml:space="preserve">
    <value>Required white space was missing.</value>
  </data>
  <data name="XML_ExpectedEndOfXml" xml:space="preserve">
    <value>Unexpected character at this location.</value>
  </data>
  <data name="XML_CDataEndTagNotAllowed" xml:space="preserve">
    <value>The literal string ']]&gt;' is not allowed in element content.</value>
  </data>
  <data name="XML_DuplicateAttribute" xml:space="preserve">
    <value>Duplicate '{0}' attribute</value>
  </data>
  <data name="ERR_NoMetadataFile" xml:space="preserve">
    <value>Metadata file '{0}' could not be found</value>
  </data>
  <data name="ERR_MetadataReferencesNotSupported" xml:space="preserve">
    <value>Metadata references are not supported.</value>
  </data>
  <data name="FTL_MetadataCantOpenFile" xml:space="preserve">
    <value>Metadata file '{0}' could not be opened -- {1}</value>
  </data>
  <data name="ERR_NoTypeDef" xml:space="preserve">
    <value>The type '{0}' is defined in an assembly that is not referenced. You must add a reference to assembly '{1}'.</value>
  </data>
  <data name="ERR_NoTypeDefFromModule" xml:space="preserve">
    <value>The type '{0}' is defined in a module that has not been added. You must add the module '{1}'.</value>
  </data>
  <data name="ERR_OutputWriteFailed" xml:space="preserve">
    <value>Could not write to output file '{0}' -- '{1}'</value>
  </data>
  <data name="ERR_MultipleEntryPoints" xml:space="preserve">
    <value>Program has more than one entry point defined. Compile with /main to specify the type that contains the entry point.</value>
  </data>
  <data name="ERR_BadBinaryOps" xml:space="preserve">
    <value>Operator '{0}' cannot be applied to operands of type '{1}' and '{2}'</value>
  </data>
  <data name="ERR_IntDivByZero" xml:space="preserve">
    <value>Division by constant zero</value>
  </data>
  <data name="ERR_BadIndexLHS" xml:space="preserve">
    <value>Cannot apply indexing with [] to an expression of type '{0}'</value>
  </data>
  <data name="ERR_BadIndexCount" xml:space="preserve">
    <value>Wrong number of indices inside []; expected {0}</value>
  </data>
  <data name="ERR_BadUnaryOp" xml:space="preserve">
    <value>Operator '{0}' cannot be applied to operand of type '{1}'</value>
  </data>
  <data name="ERR_BadOpOnNullOrDefault" xml:space="preserve">
    <value>Operator '{0}' cannot be applied to operand '{1}'</value>
  </data>
  <data name="ERR_ThisInStaticMeth" xml:space="preserve">
    <value>Keyword 'this' is not valid in a static property, static method, or static field initializer</value>
  </data>
  <data name="ERR_ThisInBadContext" xml:space="preserve">
    <value>Keyword 'this' is not available in the current context</value>
  </data>
  <data name="WRN_InvalidMainSig" xml:space="preserve">
    <value>'{0}' has the wrong signature to be an entry point</value>
  </data>
  <data name="WRN_InvalidMainSig_Title" xml:space="preserve">
    <value>Method has the wrong signature to be an entry point</value>
  </data>
  <data name="ERR_NoImplicitConv" xml:space="preserve">
    <value>Cannot implicitly convert type '{0}' to '{1}'</value>
  </data>
  <data name="ERR_NoExplicitConv" xml:space="preserve">
    <value>Cannot convert type '{0}' to '{1}'</value>
  </data>
  <data name="ERR_ConstOutOfRange" xml:space="preserve">
    <value>Constant value '{0}' cannot be converted to a '{1}'</value>
  </data>
  <data name="ERR_AmbigBinaryOps" xml:space="preserve">
    <value>Operator '{0}' is ambiguous on operands of type '{1}' and '{2}'</value>
  </data>
  <data name="ERR_AmbigBinaryOpsOnDefault" xml:space="preserve">
    <value>Operator '{0}' is ambiguous on operands 'default' and 'default'</value>
  </data>
  <data name="ERR_AmbigUnaryOp" xml:space="preserve">
    <value>Operator '{0}' is ambiguous on an operand of type '{1}'</value>
  </data>
  <data name="ERR_InAttrOnOutParam" xml:space="preserve">
    <value>An out parameter cannot have the In attribute</value>
  </data>
  <data name="ERR_ValueCantBeNull" xml:space="preserve">
    <value>Cannot convert null to '{0}' because it is a non-nullable value type</value>
  </data>
  <data name="ERR_NoExplicitBuiltinConv" xml:space="preserve">
    <value>Cannot convert type '{0}' to '{1}' via a reference conversion, boxing conversion, unboxing conversion, wrapping conversion, or null type conversion</value>
  </data>
  <data name="FTL_DebugEmitFailure" xml:space="preserve">
    <value>Unexpected error writing debug information -- '{0}'</value>
  </data>
  <data name="ERR_BadVisReturnType" xml:space="preserve">
    <value>Inconsistent accessibility: return type '{1}' is less accessible than method '{0}'</value>
  </data>
  <data name="ERR_BadVisParamType" xml:space="preserve">
    <value>Inconsistent accessibility: parameter type '{1}' is less accessible than method '{0}'</value>
  </data>
  <data name="ERR_BadVisFieldType" xml:space="preserve">
    <value>Inconsistent accessibility: field type '{1}' is less accessible than field '{0}'</value>
  </data>
  <data name="ERR_BadVisPropertyType" xml:space="preserve">
    <value>Inconsistent accessibility: property type '{1}' is less accessible than property '{0}'</value>
  </data>
  <data name="ERR_BadVisIndexerReturn" xml:space="preserve">
    <value>Inconsistent accessibility: indexer return type '{1}' is less accessible than indexer '{0}'</value>
  </data>
  <data name="ERR_BadVisIndexerParam" xml:space="preserve">
    <value>Inconsistent accessibility: parameter type '{1}' is less accessible than indexer '{0}'</value>
  </data>
  <data name="ERR_BadVisOpReturn" xml:space="preserve">
    <value>Inconsistent accessibility: return type '{1}' is less accessible than operator '{0}'</value>
  </data>
  <data name="ERR_BadVisOpParam" xml:space="preserve">
    <value>Inconsistent accessibility: parameter type '{1}' is less accessible than operator '{0}'</value>
  </data>
  <data name="ERR_BadVisDelegateReturn" xml:space="preserve">
    <value>Inconsistent accessibility: return type '{1}' is less accessible than delegate '{0}'</value>
  </data>
  <data name="ERR_BadVisDelegateParam" xml:space="preserve">
    <value>Inconsistent accessibility: parameter type '{1}' is less accessible than delegate '{0}'</value>
  </data>
  <data name="ERR_BadVisBaseClass" xml:space="preserve">
    <value>Inconsistent accessibility: base class '{1}' is less accessible than class '{0}'</value>
  </data>
  <data name="ERR_BadVisBaseInterface" xml:space="preserve">
    <value>Inconsistent accessibility: base interface '{1}' is less accessible than interface '{0}'</value>
  </data>
  <data name="ERR_EventNeedsBothAccessors" xml:space="preserve">
    <value>'{0}': event property must have both add and remove accessors</value>
  </data>
  <data name="ERR_EventNotDelegate" xml:space="preserve">
    <value>'{0}': event must be of a delegate type</value>
  </data>
  <data name="WRN_UnreferencedEvent" xml:space="preserve">
    <value>The event '{0}' is never used</value>
  </data>
  <data name="WRN_UnreferencedEvent_Title" xml:space="preserve">
    <value>Event is never used</value>
  </data>
  <data name="ERR_InterfaceEventInitializer" xml:space="preserve">
    <value>'{0}': event in interface cannot have initializer</value>
  </data>
  <data name="ERR_EventPropertyInInterface" xml:space="preserve">
    <value>An event in an interface cannot have add or remove accessors</value>
  </data>
  <data name="ERR_BadEventUsage" xml:space="preserve">
    <value>The event '{0}' can only appear on the left hand side of += or -= (except when used from within the type '{1}')</value>
  </data>
  <data name="ERR_ExplicitEventFieldImpl" xml:space="preserve">
    <value>An explicit interface implementation of an event must use event accessor syntax</value>
  </data>
  <data name="ERR_CantOverrideNonEvent" xml:space="preserve">
    <value>'{0}': cannot override; '{1}' is not an event</value>
  </data>
  <data name="ERR_AddRemoveMustHaveBody" xml:space="preserve">
    <value>An add or remove accessor must have a body</value>
  </data>
  <data name="ERR_AbstractEventInitializer" xml:space="preserve">
    <value>'{0}': abstract event cannot have initializer</value>
  </data>
  <data name="ERR_ReservedAssemblyName" xml:space="preserve">
    <value>The assembly name '{0}' is reserved and cannot be used as a reference in an interactive session</value>
  </data>
  <data name="ERR_ReservedEnumerator" xml:space="preserve">
    <value>The enumerator name '{0}' is reserved and cannot be used</value>
  </data>
  <data name="ERR_AsMustHaveReferenceType" xml:space="preserve">
    <value>The as operator must be used with a reference type or nullable type ('{0}' is a non-nullable value type)</value>
  </data>
  <data name="WRN_LowercaseEllSuffix" xml:space="preserve">
    <value>The 'l' suffix is easily confused with the digit '1' -- use 'L' for clarity</value>
  </data>
  <data name="WRN_LowercaseEllSuffix_Title" xml:space="preserve">
    <value>The 'l' suffix is easily confused with the digit '1'</value>
  </data>
  <data name="ERR_BadEventUsageNoField" xml:space="preserve">
    <value>The event '{0}' can only appear on the left hand side of += or -=</value>
  </data>
  <data name="ERR_ConstraintOnlyAllowedOnGenericDecl" xml:space="preserve">
    <value>Constraints are not allowed on non-generic declarations</value>
  </data>
  <data name="ERR_TypeParamMustBeIdentifier" xml:space="preserve">
    <value>Type parameter declaration must be an identifier not a type</value>
  </data>
  <data name="ERR_MemberReserved" xml:space="preserve">
    <value>Type '{1}' already reserves a member called '{0}' with the same parameter types</value>
  </data>
  <data name="ERR_DuplicateParamName" xml:space="preserve">
    <value>The parameter name '{0}' is a duplicate</value>
  </data>
  <data name="ERR_DuplicateNameInNS" xml:space="preserve">
    <value>The namespace '{1}' already contains a definition for '{0}'</value>
  </data>
  <data name="ERR_DuplicateNameInClass" xml:space="preserve">
    <value>The type '{0}' already contains a definition for '{1}'</value>
  </data>
  <data name="ERR_NameNotInContext" xml:space="preserve">
    <value>The name '{0}' does not exist in the current context</value>
  </data>
  <data name="ERR_NameNotInContextPossibleMissingReference" xml:space="preserve">
    <value>The name '{0}' does not exist in the current context (are you missing a reference to assembly '{1}'?)</value>
  </data>
  <data name="ERR_AmbigContext" xml:space="preserve">
    <value>'{0}' is an ambiguous reference between '{1}' and '{2}'</value>
  </data>
  <data name="WRN_DuplicateUsing" xml:space="preserve">
    <value>The using directive for '{0}' appeared previously in this namespace</value>
  </data>
  <data name="WRN_DuplicateUsing_Title" xml:space="preserve">
    <value>Using directive appeared previously in this namespace</value>
  </data>
  <data name="ERR_BadMemberFlag" xml:space="preserve">
    <value>The modifier '{0}' is not valid for this item</value>
  </data>
  <data name="ERR_BadMemberProtection" xml:space="preserve">
    <value>More than one protection modifier</value>
  </data>
  <data name="WRN_NewRequired" xml:space="preserve">
    <value>'{0}' hides inherited member '{1}'. Use the new keyword if hiding was intended.</value>
  </data>
  <data name="WRN_NewRequired_Title" xml:space="preserve">
    <value>Member hides inherited member; missing new keyword</value>
  </data>
  <data name="WRN_NewRequired_Description" xml:space="preserve">
    <value>A variable was declared with the same name as a variable in a base class. However, the new keyword was not used. This warning informs you that you should use new; the variable is declared as if new had been used in the declaration.</value>
  </data>
  <data name="WRN_NewNotRequired" xml:space="preserve">
    <value>The member '{0}' does not hide an accessible member. The new keyword is not required.</value>
  </data>
  <data name="WRN_NewNotRequired_Title" xml:space="preserve">
    <value>Member does not hide an inherited member; new keyword is not required</value>
  </data>
  <data name="ERR_CircConstValue" xml:space="preserve">
    <value>The evaluation of the constant value for '{0}' involves a circular definition</value>
  </data>
  <data name="ERR_MemberAlreadyExists" xml:space="preserve">
    <value>Type '{1}' already defines a member called '{0}' with the same parameter types</value>
  </data>
  <data name="ERR_StaticNotVirtual" xml:space="preserve">
    <value>A static member '{0}' cannot be marked as override, virtual, or abstract</value>
  </data>
  <data name="ERR_OverrideNotNew" xml:space="preserve">
    <value>A member '{0}' marked as override cannot be marked as new or virtual</value>
  </data>
  <data name="WRN_NewOrOverrideExpected" xml:space="preserve">
    <value>'{0}' hides inherited member '{1}'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword.</value>
  </data>
  <data name="WRN_NewOrOverrideExpected_Title" xml:space="preserve">
    <value>Member hides inherited member; missing override keyword</value>
  </data>
  <data name="ERR_OverrideNotExpected" xml:space="preserve">
    <value>'{0}': no suitable method found to override</value>
  </data>
  <data name="ERR_NamespaceUnexpected" xml:space="preserve">
    <value>A namespace cannot directly contain members such as fields or methods</value>
  </data>
  <data name="ERR_NoSuchMember" xml:space="preserve">
    <value>'{0}' does not contain a definition for '{1}'</value>
  </data>
  <data name="ERR_BadSKknown" xml:space="preserve">
    <value>'{0}' is a {1} but is used like a {2}</value>
  </data>
  <data name="ERR_BadSKunknown" xml:space="preserve">
    <value>'{0}' is a {1}, which is not valid in the given context</value>
  </data>
  <data name="ERR_ObjectRequired" xml:space="preserve">
    <value>An object reference is required for the non-static field, method, or property '{0}'</value>
  </data>
  <data name="ERR_AmbigCall" xml:space="preserve">
    <value>The call is ambiguous between the following methods or properties: '{0}' and '{1}'</value>
  </data>
  <data name="ERR_BadAccess" xml:space="preserve">
    <value>'{0}' is inaccessible due to its protection level</value>
  </data>
  <data name="ERR_MethDelegateMismatch" xml:space="preserve">
    <value>No overload for '{0}' matches delegate '{1}'</value>
  </data>
  <data name="ERR_RetObjectRequired" xml:space="preserve">
    <value>An object of a type convertible to '{0}' is required</value>
  </data>
  <data name="ERR_RetNoObjectRequired" xml:space="preserve">
    <value>Since '{0}' returns void, a return keyword must not be followed by an object expression</value>
  </data>
  <data name="ERR_LocalDuplicate" xml:space="preserve">
    <value>A local variable or function named '{0}' is already defined in this scope</value>
  </data>
  <data name="ERR_AssgLvalueExpected" xml:space="preserve">
    <value>The left-hand side of an assignment must be a variable, property or indexer</value>
  </data>
  <data name="ERR_StaticConstParam" xml:space="preserve">
    <value>'{0}': a static constructor must be parameterless</value>
  </data>
  <data name="ERR_NotConstantExpression" xml:space="preserve">
    <value>The expression being assigned to '{0}' must be constant</value>
  </data>
  <data name="ERR_NotNullConstRefField" xml:space="preserve">
    <value>'{0}' is of type '{1}'. A const field of a reference type other than string can only be initialized with null.</value>
  </data>
  <data name="ERR_LocalIllegallyOverrides" xml:space="preserve">
    <value>A local or parameter named '{0}' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter</value>
  </data>
  <data name="ERR_BadUsingNamespace" xml:space="preserve">
    <value>A 'using namespace' directive can only be applied to namespaces; '{0}' is a type not a namespace. Consider a 'using static' directive instead</value>
  </data>
  <data name="ERR_BadUsingType" xml:space="preserve">
    <value>A 'using static' directive can only be applied to types; '{0}' is a namespace not a type. Consider a 'using namespace' directive instead</value>
  </data>
  <data name="ERR_NoAliasHere" xml:space="preserve">
    <value>A 'using static' directive cannot be used to declare an alias</value>
  </data>
  <data name="ERR_NoBreakOrCont" xml:space="preserve">
    <value>No enclosing loop out of which to break or continue</value>
  </data>
  <data name="ERR_DuplicateLabel" xml:space="preserve">
    <value>The label '{0}' is a duplicate</value>
  </data>
  <data name="ERR_NoConstructors" xml:space="preserve">
    <value>The type '{0}' has no constructors defined</value>
  </data>
  <data name="ERR_NoNewAbstract" xml:space="preserve">
    <value>Cannot create an instance of the abstract class or interface '{0}'</value>
  </data>
  <data name="ERR_ConstValueRequired" xml:space="preserve">
    <value>A const field requires a value to be provided</value>
  </data>
  <data name="ERR_CircularBase" xml:space="preserve">
    <value>Circular base class dependency involving '{0}' and '{1}'</value>
  </data>
  <data name="ERR_BadDelegateConstructor" xml:space="preserve">
    <value>The delegate '{0}' does not have a valid constructor</value>
  </data>
  <data name="ERR_MethodNameExpected" xml:space="preserve">
    <value>Method name expected</value>
  </data>
  <data name="ERR_ConstantExpected" xml:space="preserve">
    <value>A constant value is expected</value>
  </data>
  <data name="ERR_V6SwitchGoverningTypeValueExpected" xml:space="preserve">
    <value>A switch expression or case label must be a bool, char, string, integral, enum, or corresponding nullable type in C# 6 and earlier.</value>
  </data>
  <data name="ERR_IntegralTypeValueExpected" xml:space="preserve">
    <value>A value of an integral type expected</value>
  </data>
  <data name="ERR_DuplicateCaseLabel" xml:space="preserve">
    <value>The switch statement contains multiple cases with the label value '{0}'</value>
  </data>
  <data name="ERR_InvalidGotoCase" xml:space="preserve">
    <value>A goto case is only valid inside a switch statement</value>
  </data>
  <data name="ERR_PropertyLacksGet" xml:space="preserve">
    <value>The property or indexer '{0}' cannot be used in this context because it lacks the get accessor</value>
  </data>
  <data name="ERR_BadExceptionType" xml:space="preserve">
    <value>The type caught or thrown must be derived from System.Exception</value>
  </data>
  <data name="ERR_BadEmptyThrow" xml:space="preserve">
    <value>A throw statement with no arguments is not allowed outside of a catch clause</value>
  </data>
  <data name="ERR_BadFinallyLeave" xml:space="preserve">
    <value>Control cannot leave the body of a finally clause</value>
  </data>
  <data name="ERR_LabelShadow" xml:space="preserve">
    <value>The label '{0}' shadows another label by the same name in a contained scope</value>
  </data>
  <data name="ERR_LabelNotFound" xml:space="preserve">
    <value>No such label '{0}' within the scope of the goto statement</value>
  </data>
  <data name="ERR_UnreachableCatch" xml:space="preserve">
    <value>A previous catch clause already catches all exceptions of this or of a super type ('{0}')</value>
  </data>
  <data name="WRN_FilterIsConstantTrue" xml:space="preserve">
    <value>Filter expression is a constant 'true', consider removing the filter</value>
  </data>
  <data name="WRN_FilterIsConstantTrue_Title" xml:space="preserve">
    <value>Filter expression is a constant 'true'</value>
  </data>
  <data name="ERR_ReturnExpected" xml:space="preserve">
    <value>'{0}': not all code paths return a value</value>
  </data>
  <data name="WRN_UnreachableCode" xml:space="preserve">
    <value>Unreachable code detected</value>
  </data>
  <data name="WRN_UnreachableCode_Title" xml:space="preserve">
    <value>Unreachable code detected</value>
  </data>
  <data name="ERR_SwitchFallThrough" xml:space="preserve">
    <value>Control cannot fall through from one case label ('{0}') to another</value>
  </data>
  <data name="WRN_UnreferencedLabel" xml:space="preserve">
    <value>This label has not been referenced</value>
  </data>
  <data name="WRN_UnreferencedLabel_Title" xml:space="preserve">
    <value>This label has not been referenced</value>
  </data>
  <data name="ERR_UseDefViolation" xml:space="preserve">
    <value>Use of unassigned local variable '{0}'</value>
  </data>
  <data name="WRN_UnreferencedVar" xml:space="preserve">
    <value>The variable '{0}' is declared but never used</value>
  </data>
  <data name="WRN_UnreferencedVar_Title" xml:space="preserve">
    <value>Variable is declared but never used</value>
  </data>
  <data name="WRN_UnreferencedField" xml:space="preserve">
    <value>The field '{0}' is never used</value>
  </data>
  <data name="WRN_UnreferencedField_Title" xml:space="preserve">
    <value>Field is never used</value>
  </data>
  <data name="ERR_UseDefViolationField" xml:space="preserve">
    <value>Use of possibly unassigned field '{0}'</value>
  </data>
  <data name="ERR_UseDefViolationProperty" xml:space="preserve">
    <value>Use of possibly unassigned auto-implemented property '{0}'</value>
  </data>
  <data name="ERR_UnassignedThis" xml:space="preserve">
    <value>Field '{0}' must be fully assigned before control is returned to the caller</value>
  </data>
  <data name="ERR_AmbigQM" xml:space="preserve">
    <value>Type of conditional expression cannot be determined because '{0}' and '{1}' implicitly convert to one another</value>
  </data>
  <data name="ERR_InvalidQM" xml:space="preserve">
    <value>Type of conditional expression cannot be determined because there is no implicit conversion between '{0}' and '{1}'</value>
  </data>
  <data name="ERR_NoBaseClass" xml:space="preserve">
    <value>A base class is required for a 'base' reference</value>
  </data>
  <data name="ERR_BaseIllegal" xml:space="preserve">
    <value>Use of keyword 'base' is not valid in this context</value>
  </data>
  <data name="ERR_ObjectProhibited" xml:space="preserve">
    <value>Member '{0}' cannot be accessed with an instance reference; qualify it with a type name instead</value>
  </data>
  <data name="ERR_ParamUnassigned" xml:space="preserve">
    <value>The out parameter '{0}' must be assigned to before control leaves the current method</value>
  </data>
  <data name="ERR_InvalidArray" xml:space="preserve">
    <value>Invalid rank specifier: expected ',' or ']'</value>
  </data>
  <data name="ERR_ExternHasBody" xml:space="preserve">
    <value>'{0}' cannot be extern and declare a body</value>
  </data>
  <data name="ERR_ExternHasConstructorInitializer" xml:space="preserve">
    <value>'{0}' cannot be extern and have a constructor initializer</value>
  </data>
  <data name="ERR_AbstractAndExtern" xml:space="preserve">
    <value>'{0}' cannot be both extern and abstract</value>
  </data>
  <data name="ERR_BadAttributeParamType" xml:space="preserve">
    <value>Attribute constructor parameter '{0}' has type '{1}', which is not a valid attribute parameter type</value>
  </data>
  <data name="ERR_BadAttributeArgument" xml:space="preserve">
    <value>An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type</value>
  </data>
  <data name="ERR_BadAttributeParamDefaultArgument" xml:space="preserve">
    <value>Attribute constructor parameter '{0}' is optional, but no default parameter value was specified.</value>
  </data>
  <data name="WRN_IsAlwaysTrue" xml:space="preserve">
    <value>The given expression is always of the provided ('{0}') type</value>
  </data>
  <data name="WRN_IsAlwaysTrue_Title" xml:space="preserve">
    <value>'is' expression's given expression is always of the provided type</value>
  </data>
  <data name="WRN_IsAlwaysFalse" xml:space="preserve">
    <value>The given expression is never of the provided ('{0}') type</value>
  </data>
  <data name="WRN_IsAlwaysFalse_Title" xml:space="preserve">
    <value>'is' expression's given expression is never of the provided type</value>
  </data>
  <data name="ERR_LockNeedsReference" xml:space="preserve">
    <value>'{0}' is not a reference type as required by the lock statement</value>
  </data>
  <data name="ERR_NullNotValid" xml:space="preserve">
    <value>Use of null is not valid in this context</value>
  </data>
  <data name="ERR_DefaultLiteralNotValid" xml:space="preserve">
    <value>Use of default literal is not valid in this context</value>
  </data>
  <data name="ERR_UseDefViolationThis" xml:space="preserve">
    <value>The 'this' object cannot be used before all of its fields are assigned to</value>
  </data>
  <data name="ERR_ArgsInvalid" xml:space="preserve">
    <value>The __arglist construct is valid only within a variable argument method</value>
  </data>
  <data name="ERR_PtrExpected" xml:space="preserve">
    <value>The * or -&gt; operator must be applied to a pointer</value>
  </data>
  <data name="ERR_PtrIndexSingle" xml:space="preserve">
    <value>A pointer must be indexed by only one value</value>
  </data>
  <data name="WRN_ByRefNonAgileField" xml:space="preserve">
    <value>Using '{0}' as a ref or out value or taking its address may cause a runtime exception because it is a field of a marshal-by-reference class</value>
  </data>
  <data name="WRN_ByRefNonAgileField_Title" xml:space="preserve">
    <value>Using a field of a marshal-by-reference class as a ref or out value or taking its address may cause a runtime exception</value>
  </data>
  <data name="ERR_AssgReadonlyStatic" xml:space="preserve">
    <value>A static readonly field cannot be assigned to (except in a static constructor or a variable initializer)</value>
  </data>
  <data name="ERR_RefReadonlyStatic" xml:space="preserve">
    <value>A static readonly field cannot be used as a ref or out value (except in a static constructor)</value>
  </data>
  <data name="ERR_AssgReadonlyProp" xml:space="preserve">
    <value>Property or indexer '{0}' cannot be assigned to -- it is read only</value>
  </data>
  <data name="ERR_IllegalStatement" xml:space="preserve">
    <value>Only assignment, call, increment, decrement, and new object expressions can be used as a statement</value>
  </data>
  <data name="ERR_BadGetEnumerator" xml:space="preserve">
    <value>foreach requires that the return type '{0}' of '{1}' must have a suitable public MoveNext method and public Current property</value>
  </data>
  <data name="ERR_TooManyLocals" xml:space="preserve">
    <value>Only 65534 locals, including those generated by the compiler, are allowed</value>
  </data>
  <data name="ERR_AbstractBaseCall" xml:space="preserve">
    <value>Cannot call an abstract base member: '{0}'</value>
  </data>
  <data name="ERR_RefProperty" xml:space="preserve">
    <value>A property or indexer may not be passed as an out or ref parameter</value>
  </data>
  <data name="ERR_ManagedAddr" xml:space="preserve">
    <value>Cannot take the address of, get the size of, or declare a pointer to a managed type ('{0}')</value>
  </data>
  <data name="ERR_BadFixedInitType" xml:space="preserve">
    <value>The type of a local declared in a fixed statement must be a pointer type</value>
  </data>
  <data name="ERR_FixedMustInit" xml:space="preserve">
    <value>You must provide an initializer in a fixed or using statement declaration</value>
  </data>
  <data name="ERR_InvalidAddrOp" xml:space="preserve">
    <value>Cannot take the address of the given expression</value>
  </data>
  <data name="ERR_FixedNeeded" xml:space="preserve">
    <value>You can only take the address of an unfixed expression inside of a fixed statement initializer</value>
  </data>
  <data name="ERR_FixedNotNeeded" xml:space="preserve">
    <value>You cannot use the fixed statement to take the address of an already fixed expression</value>
  </data>
  <data name="ERR_ExprCannotBeFixed" xml:space="preserve">
    <value>The given expression cannot be used in a fixed statement</value>
  </data>
  <data name="ERR_UnsafeNeeded" xml:space="preserve">
    <value>Pointers and fixed size buffers may only be used in an unsafe context</value>
  </data>
  <data name="ERR_OpTFRetType" xml:space="preserve">
    <value>The return type of operator True or False must be bool</value>
  </data>
  <data name="ERR_OperatorNeedsMatch" xml:space="preserve">
    <value>The operator '{0}' requires a matching operator '{1}' to also be defined</value>
  </data>
  <data name="ERR_BadBoolOp" xml:space="preserve">
    <value>In order to be applicable as a short circuit operator a user-defined logical operator ('{0}') must have the same return type and parameter types</value>
  </data>
  <data name="ERR_MustHaveOpTF" xml:space="preserve">
    <value>In order for '{0}' to be applicable as a short circuit operator, its declaring type '{1}' must define operator true and operator false</value>
  </data>
  <data name="WRN_UnreferencedVarAssg" xml:space="preserve">
    <value>The variable '{0}' is assigned but its value is never used</value>
  </data>
  <data name="WRN_UnreferencedVarAssg_Title" xml:space="preserve">
    <value>Variable is assigned but its value is never used</value>
  </data>
  <data name="ERR_CheckedOverflow" xml:space="preserve">
    <value>The operation overflows at compile time in checked mode</value>
  </data>
  <data name="ERR_ConstOutOfRangeChecked" xml:space="preserve">
    <value>Constant value '{0}' cannot be converted to a '{1}' (use 'unchecked' syntax to override)</value>
  </data>
  <data name="ERR_BadVarargs" xml:space="preserve">
    <value>A method with vararg cannot be generic, be in a generic type, or have a params parameter</value>
  </data>
  <data name="ERR_ParamsMustBeArray" xml:space="preserve">
    <value>The params parameter must be a single dimensional array</value>
  </data>
  <data name="ERR_IllegalArglist" xml:space="preserve">
    <value>An __arglist expression may only appear inside of a call or new expression</value>
  </data>
  <data name="ERR_IllegalUnsafe" xml:space="preserve">
    <value>Unsafe code may only appear if compiling with /unsafe</value>
  </data>
  <data name="ERR_AmbigMember" xml:space="preserve">
    <value>Ambiguity between '{0}' and '{1}'</value>
  </data>
  <data name="ERR_BadForeachDecl" xml:space="preserve">
    <value>Type and identifier are both required in a foreach statement</value>
  </data>
  <data name="ERR_ParamsLast" xml:space="preserve">
    <value>A params parameter must be the last parameter in a formal parameter list</value>
  </data>
  <data name="ERR_SizeofUnsafe" xml:space="preserve">
    <value>'{0}' does not have a predefined size, therefore sizeof can only be used in an unsafe context (consider using System.Runtime.InteropServices.Marshal.SizeOf)</value>
  </data>
  <data name="ERR_DottedTypeNameNotFoundInNS" xml:space="preserve">
    <value>The type or namespace name '{0}' does not exist in the namespace '{1}' (are you missing an assembly reference?)</value>
  </data>
  <data name="ERR_FieldInitRefNonstatic" xml:space="preserve">
    <value>A field initializer cannot reference the non-static field, method, or property '{0}'</value>
  </data>
  <data name="ERR_SealedNonOverride" xml:space="preserve">
    <value>'{0}' cannot be sealed because it is not an override</value>
  </data>
  <data name="ERR_CantOverrideSealed" xml:space="preserve">
    <value>'{0}': cannot override inherited member '{1}' because it is sealed</value>
  </data>
  <data name="ERR_VoidError" xml:space="preserve">
    <value>The operation in question is undefined on void pointers</value>
  </data>
  <data name="ERR_ConditionalOnOverride" xml:space="preserve">
    <value>The Conditional attribute is not valid on '{0}' because it is an override method</value>
  </data>
  <data name="ERR_PointerInAsOrIs" xml:space="preserve">
    <value>Neither 'is' nor 'as' is valid on pointer types</value>
  </data>
  <data name="ERR_CallingFinalizeDeprecated" xml:space="preserve">
    <value>Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available.</value>
  </data>
  <data name="ERR_SingleTypeNameNotFound" xml:space="preserve">
    <value>The type or namespace name '{0}' could not be found (are you missing a using directive or an assembly reference?)</value>
  </data>
  <data name="ERR_NegativeStackAllocSize" xml:space="preserve">
    <value>Cannot use a negative size with stackalloc</value>
  </data>
  <data name="ERR_NegativeArraySize" xml:space="preserve">
    <value>Cannot create an array with a negative size</value>
  </data>
  <data name="ERR_OverrideFinalizeDeprecated" xml:space="preserve">
    <value>Do not override object.Finalize. Instead, provide a destructor.</value>
  </data>
  <data name="ERR_CallingBaseFinalizeDeprecated" xml:space="preserve">
    <value>Do not directly call your base class Finalize method. It is called automatically from your destructor.</value>
  </data>
  <data name="WRN_NegativeArrayIndex" xml:space="preserve">
    <value>Indexing an array with a negative index (array indices always start at zero)</value>
  </data>
  <data name="WRN_NegativeArrayIndex_Title" xml:space="preserve">
    <value>Indexing an array with a negative index</value>
  </data>
  <data name="WRN_BadRefCompareLeft" xml:space="preserve">
    <value>Possible unintended reference comparison; to get a value comparison, cast the left hand side to type '{0}'</value>
  </data>
  <data name="WRN_BadRefCompareLeft_Title" xml:space="preserve">
    <value>Possible unintended reference comparison; left hand side needs cast</value>
  </data>
  <data name="WRN_BadRefCompareRight" xml:space="preserve">
    <value>Possible unintended reference comparison; to get a value comparison, cast the right hand side to type '{0}'</value>
  </data>
  <data name="WRN_BadRefCompareRight_Title" xml:space="preserve">
    <value>Possible unintended reference comparison; right hand side needs cast</value>
  </data>
  <data name="ERR_BadCastInFixed" xml:space="preserve">
    <value>The right hand side of a fixed statement assignment may not be a cast expression</value>
  </data>
  <data name="ERR_StackallocInCatchFinally" xml:space="preserve">
    <value>stackalloc may not be used in a catch or finally block</value>
  </data>
  <data name="ERR_VarargsLast" xml:space="preserve">
    <value>An __arglist parameter must be the last parameter in a formal parameter list</value>
  </data>
  <data name="ERR_MissingPartial" xml:space="preserve">
    <value>Missing partial modifier on declaration of type '{0}'; another partial declaration of this type exists</value>
  </data>
  <data name="ERR_PartialTypeKindConflict" xml:space="preserve">
    <value>Partial declarations of '{0}' must be all classes, all structs, or all interfaces</value>
  </data>
  <data name="ERR_PartialModifierConflict" xml:space="preserve">
    <value>Partial declarations of '{0}' have conflicting accessibility modifiers</value>
  </data>
  <data name="ERR_PartialMultipleBases" xml:space="preserve">
    <value>Partial declarations of '{0}' must not specify different base classes</value>
  </data>
  <data name="ERR_PartialWrongTypeParams" xml:space="preserve">
    <value>Partial declarations of '{0}' must have the same type parameter names in the same order</value>
  </data>
  <data name="ERR_PartialWrongConstraints" xml:space="preserve">
    <value>Partial declarations of '{0}' have inconsistent constraints for type parameter '{1}'</value>
  </data>
  <data name="ERR_NoImplicitConvCast" xml:space="preserve">
    <value>Cannot implicitly convert type '{0}' to '{1}'. An explicit conversion exists (are you missing a cast?)</value>
  </data>
  <data name="ERR_PartialMisplaced" xml:space="preserve">
    <value>The 'partial' modifier can only appear immediately before 'class', 'struct', 'interface', or 'void'</value>
  </data>
  <data name="ERR_ImportedCircularBase" xml:space="preserve">
    <value>Imported type '{0}' is invalid. It contains a circular base class dependency.</value>
  </data>
  <data name="ERR_UseDefViolationOut" xml:space="preserve">
    <value>Use of unassigned out parameter '{0}'</value>
  </data>
  <data name="ERR_ArraySizeInDeclaration" xml:space="preserve">
    <value>Array size cannot be specified in a variable declaration (try initializing with a 'new' expression)</value>
  </data>
  <data name="ERR_InaccessibleGetter" xml:space="preserve">
    <value>The property or indexer '{0}' cannot be used in this context because the get accessor is inaccessible</value>
  </data>
  <data name="ERR_InaccessibleSetter" xml:space="preserve">
    <value>The property or indexer '{0}' cannot be used in this context because the set accessor is inaccessible</value>
  </data>
  <data name="ERR_InvalidPropertyAccessMod" xml:space="preserve">
    <value>The accessibility modifier of the '{0}' accessor must be more restrictive than the property or indexer '{1}'</value>
  </data>
  <data name="ERR_DuplicatePropertyAccessMods" xml:space="preserve">
    <value>Cannot specify accessibility modifiers for both accessors of the property or indexer '{0}'</value>
  </data>
  <data name="ERR_PropertyAccessModInInterface" xml:space="preserve">
    <value>'{0}': accessibility modifiers may not be used on accessors in an interface</value>
  </data>
  <data name="ERR_AccessModMissingAccessor" xml:space="preserve">
    <value>'{0}': accessibility modifiers on accessors may only be used if the property or indexer has both a get and a set accessor</value>
  </data>
  <data name="ERR_UnimplementedInterfaceAccessor" xml:space="preserve">
    <value>'{0}' does not implement interface member '{1}'. '{2}' is not public.</value>
  </data>
  <data name="WRN_PatternIsAmbiguous" xml:space="preserve">
    <value>'{0}' does not implement the '{1}' pattern. '{2}' is ambiguous with '{3}'.</value>
  </data>
  <data name="WRN_PatternIsAmbiguous_Title" xml:space="preserve">
    <value>Type does not implement the collection pattern; members are ambiguous</value>
  </data>
  <data name="WRN_PatternStaticOrInaccessible" xml:space="preserve">
    <value>'{0}' does not implement the '{1}' pattern. '{2}' is either static or not public.</value>
  </data>
  <data name="WRN_PatternStaticOrInaccessible_Title" xml:space="preserve">
    <value>Type does not implement the collection pattern; member is either static or not public</value>
  </data>
  <data name="WRN_PatternBadSignature" xml:space="preserve">
    <value>'{0}' does not implement the '{1}' pattern. '{2}' has the wrong signature.</value>
  </data>
  <data name="WRN_PatternBadSignature_Title" xml:space="preserve">
    <value>Type does not implement the collection pattern; member has the wrong signature</value>
  </data>
  <data name="ERR_FriendRefNotEqualToThis" xml:space="preserve">
    <value>Friend access was granted by '{0}', but the public key of the output assembly does not match that specified by the attribute in the granting assembly.</value>
  </data>
  <data name="ERR_FriendRefSigningMismatch" xml:space="preserve">
    <value>Friend access was granted by '{0}', but the strong name signing state of the output assembly does not match that of the granting assembly.</value>
  </data>
  <data name="WRN_SequentialOnPartialClass" xml:space="preserve">
    <value>There is no defined ordering between fields in multiple declarations of partial struct '{0}'. To specify an ordering, all instance fields must be in the same declaration.</value>
  </data>
  <data name="WRN_SequentialOnPartialClass_Title" xml:space="preserve">
    <value>There is no defined ordering between fields in multiple declarations of partial struct</value>
  </data>
  <data name="ERR_BadConstType" xml:space="preserve">
    <value>The type '{0}' cannot be declared const</value>
  </data>
  <data name="ERR_NoNewTyvar" xml:space="preserve">
    <value>Cannot create an instance of the variable type '{0}' because it does not have the new() constraint</value>
  </data>
  <data name="ERR_BadArity" xml:space="preserve">
    <value>Using the generic {1} '{0}' requires {2} type arguments</value>
  </data>
  <data name="ERR_BadTypeArgument" xml:space="preserve">
    <value>The type '{0}' may not be used as a type argument</value>
  </data>
  <data name="ERR_TypeArgsNotAllowed" xml:space="preserve">
    <value>The {1} '{0}' cannot be used with type arguments</value>
  </data>
  <data name="ERR_HasNoTypeVars" xml:space="preserve">
    <value>The non-generic {1} '{0}' cannot be used with type arguments</value>
  </data>
  <data name="ERR_NewConstraintNotSatisfied" xml:space="preserve">
    <value>'{2}' must be a non-abstract type with a public parameterless constructor in order to use it as parameter '{1}' in the generic type or method '{0}'</value>
  </data>
  <data name="ERR_GenericConstraintNotSatisfiedRefType" xml:space="preserve">
    <value>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. There is no implicit reference conversion from '{3}' to '{1}'.</value>
  </data>
  <data name="ERR_GenericConstraintNotSatisfiedNullableEnum" xml:space="preserve">
    <value>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. The nullable type '{3}' does not satisfy the constraint of '{1}'.</value>
  </data>
  <data name="ERR_GenericConstraintNotSatisfiedNullableInterface" xml:space="preserve">
    <value>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. The nullable type '{3}' does not satisfy the constraint of '{1}'. Nullable types can not satisfy any interface constraints.</value>
  </data>
  <data name="ERR_GenericConstraintNotSatisfiedTyVar" xml:space="preserve">
    <value>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. There is no boxing conversion or type parameter conversion from '{3}' to '{1}'.</value>
  </data>
  <data name="ERR_GenericConstraintNotSatisfiedValType" xml:space="preserve">
    <value>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. There is no boxing conversion from '{3}' to '{1}'.</value>
  </data>
  <data name="ERR_DuplicateGeneratedName" xml:space="preserve">
    <value>The parameter name '{0}' conflicts with an automatically-generated parameter name</value>
  </data>
  <data name="ERR_GlobalSingleTypeNameNotFound" xml:space="preserve">
    <value>The type or namespace name '{0}' could not be found in the global namespace (are you missing an assembly reference?)</value>
  </data>
  <data name="ERR_NewBoundMustBeLast" xml:space="preserve">
    <value>The new() constraint must be the last constraint specified</value>
  </data>
  <data name="WRN_MainCantBeGeneric" xml:space="preserve">
    <value>'{0}': an entry point cannot be generic or in a generic type</value>
  </data>
  <data name="WRN_MainCantBeGeneric_Title" xml:space="preserve">
    <value>An entry point cannot be generic or in a generic type</value>
  </data>
  <data name="ERR_TypeVarCantBeNull" xml:space="preserve">
    <value>Cannot convert null to type parameter '{0}' because it could be a non-nullable value type. Consider using 'default({0})' instead.</value>
  </data>
  <data name="ERR_AttributeCantBeGeneric" xml:space="preserve">
    <value>Cannot apply attribute class '{0}' because it is generic</value>
  </data>
  <data name="ERR_DuplicateBound" xml:space="preserve">
    <value>Duplicate constraint '{0}' for type parameter '{1}'</value>
  </data>
  <data name="ERR_ClassBoundNotFirst" xml:space="preserve">
    <value>The class type constraint '{0}' must come before any other constraints</value>
  </data>
  <data name="ERR_BadRetType" xml:space="preserve">
    <value>'{1} {0}' has the wrong return type</value>
  </data>
  <data name="ERR_DelegateRefMismatch" xml:space="preserve">
    <value>Ref mismatch between '{0}' and delegate '{1}'</value>
  </data>
  <data name="ERR_DuplicateConstraintClause" xml:space="preserve">
    <value>A constraint clause has already been specified for type parameter '{0}'. All of the constraints for a type parameter must be specified in a single where clause.</value>
  </data>
  <data name="ERR_CantInferMethTypeArgs" xml:space="preserve">
    <value>The type arguments for method '{0}' cannot be inferred from the usage. Try specifying the type arguments explicitly.</value>
  </data>
  <data name="ERR_LocalSameNameAsTypeParam" xml:space="preserve">
    <value>'{0}': a parameter, local variable, or local function cannot have the same name as a method type parameter</value>
  </data>
  <data name="ERR_AsWithTypeVar" xml:space="preserve">
    <value>The type parameter '{0}' cannot be used with the 'as' operator because it does not have a class type constraint nor a 'class' constraint</value>
  </data>
  <data name="WRN_UnreferencedFieldAssg" xml:space="preserve">
    <value>The field '{0}' is assigned but its value is never used</value>
  </data>
  <data name="WRN_UnreferencedFieldAssg_Title" xml:space="preserve">
    <value>Field is assigned but its value is never used</value>
  </data>
  <data name="ERR_BadIndexerNameAttr" xml:space="preserve">
    <value>The '{0}' attribute is valid only on an indexer that is not an explicit interface member declaration</value>
  </data>
  <data name="ERR_AttrArgWithTypeVars" xml:space="preserve">
    <value>'{0}': an attribute argument cannot use type parameters</value>
  </data>
  <data name="ERR_NewTyvarWithArgs" xml:space="preserve">
    <value>'{0}': cannot provide arguments when creating an instance of a variable type</value>
  </data>
  <data name="ERR_AbstractSealedStatic" xml:space="preserve">
    <value>'{0}': an abstract class cannot be sealed or static</value>
  </data>
  <data name="WRN_AmbiguousXMLReference" xml:space="preserve">
    <value>Ambiguous reference in cref attribute: '{0}'. Assuming '{1}', but could have also matched other overloads including '{2}'.</value>
  </data>
  <data name="WRN_AmbiguousXMLReference_Title" xml:space="preserve">
    <value>Ambiguous reference in cref attribute</value>
  </data>
  <data name="WRN_VolatileByRef" xml:space="preserve">
    <value>'{0}': a reference to a volatile field will not be treated as volatile</value>
  </data>
  <data name="WRN_VolatileByRef_Title" xml:space="preserve">
    <value>A reference to a volatile field will not be treated as volatile</value>
  </data>
  <data name="WRN_VolatileByRef_Description" xml:space="preserve">
    <value>A volatile field should not normally be used as a ref or out value, since it will not be treated as volatile. There are exceptions to this, such as when calling an interlocked API.</value>
  </data>
  <data name="ERR_ComImportWithImpl" xml:space="preserve">
    <value>Since '{1}' has the ComImport attribute, '{0}' must be extern or abstract</value>
  </data>
  <data name="ERR_ComImportWithBase" xml:space="preserve">
    <value>'{0}': a class with the ComImport attribute cannot specify a base class</value>
  </data>
  <data name="ERR_ImplBadConstraints" xml:space="preserve">
    <value>The constraints for type parameter '{0}' of method '{1}' must match the constraints for type parameter '{2}' of interface method '{3}'. Consider using an explicit interface implementation instead.</value>
  </data>
  <data name="ERR_ImplBadTupleNames" xml:space="preserve">
    <value>The tuple element names in the signature of method '{0}' must match the tuple element names of interface method '{1}' (including on the return type).</value>
  </data>
  <data name="ERR_DottedTypeNameNotFoundInAgg" xml:space="preserve">
    <value>The type name '{0}' does not exist in the type '{1}'</value>
  </data>
  <data name="ERR_MethGrpToNonDel" xml:space="preserve">
    <value>Cannot convert method group '{0}' to non-delegate type '{1}'. Did you intend to invoke the method?</value>
  </data>
  <data name="ERR_BadExternAlias" xml:space="preserve">
    <value>The extern alias '{0}' was not specified in a /reference option</value>
  </data>
  <data name="ERR_ColColWithTypeAlias" xml:space="preserve">
    <value>Cannot use alias '{0}' with '::' since the alias references a type. Use '.' instead.</value>
  </data>
  <data name="ERR_AliasNotFound" xml:space="preserve">
    <value>Alias '{0}' not found</value>
  </data>
  <data name="ERR_SameFullNameAggAgg" xml:space="preserve">
    <value>The type '{1}' exists in both '{0}' and '{2}'</value>
  </data>
  <data name="ERR_SameFullNameNsAgg" xml:space="preserve">
    <value>The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'</value>
  </data>
  <data name="WRN_SameFullNameThisNsAgg" xml:space="preserve">
    <value>The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.</value>
  </data>
  <data name="WRN_SameFullNameThisNsAgg_Title" xml:space="preserve">
    <value>Namespace conflicts with imported type</value>
  </data>
  <data name="WRN_SameFullNameThisAggAgg" xml:space="preserve">
    <value>The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.</value>
  </data>
  <data name="WRN_SameFullNameThisAggAgg_Title" xml:space="preserve">
    <value>Type conflicts with imported type</value>
  </data>
  <data name="WRN_SameFullNameThisAggNs" xml:space="preserve">
    <value>The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.</value>
  </data>
  <data name="WRN_SameFullNameThisAggNs_Title" xml:space="preserve">
    <value>Type conflicts with imported namespace</value>
  </data>
  <data name="ERR_SameFullNameThisAggThisNs" xml:space="preserve">
    <value>The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'</value>
  </data>
  <data name="ERR_ExternAfterElements" xml:space="preserve">
    <value>An extern alias declaration must precede all other elements defined in the namespace</value>
  </data>
  <data name="WRN_GlobalAliasDefn" xml:space="preserve">
    <value>Defining an alias named 'global' is ill-advised since 'global::' always references the global namespace and not an alias</value>
  </data>
  <data name="WRN_GlobalAliasDefn_Title" xml:space="preserve">
    <value>Defining an alias named 'global' is ill-advised</value>
  </data>
  <data name="ERR_SealedStaticClass" xml:space="preserve">
    <value>'{0}': a class cannot be both static and sealed</value>
  </data>
  <data name="ERR_PrivateAbstractAccessor" xml:space="preserve">
    <value>'{0}': abstract properties cannot have private accessors</value>
  </data>
  <data name="ERR_ValueExpected" xml:space="preserve">
    <value>Syntax error; value expected</value>
  </data>
  <data name="ERR_UnboxNotLValue" xml:space="preserve">
    <value>Cannot modify the result of an unboxing conversion</value>
  </data>
  <data name="ERR_AnonMethGrpInForEach" xml:space="preserve">
    <value>Foreach cannot operate on a '{0}'. Did you intend to invoke the '{0}'?</value>
  </data>
  <data name="ERR_BadIncDecRetType" xml:space="preserve">
    <value>The return type for ++ or -- operator must match the parameter type or be derived from the parameter type</value>
  </data>
  <data name="ERR_RefValBoundMustBeFirst" xml:space="preserve">
    <value>The 'class' or 'struct' constraint must come before any other constraints</value>
  </data>
  <data name="ERR_RefValBoundWithClass" xml:space="preserve">
    <value>'{0}': cannot specify both a constraint class and the 'class' or 'struct' constraint</value>
  </data>
  <data name="ERR_UnmanagedBoundWithClass" xml:space="preserve">
    <value>'{0}': cannot specify both a constraint class and the 'unmanaged' constraint</value>
  </data>
  <data name="ERR_NewBoundWithVal" xml:space="preserve">
    <value>The 'new()' constraint cannot be used with the 'struct' constraint</value>
  </data>
  <data name="ERR_RefConstraintNotSatisfied" xml:space="preserve">
    <value>The type '{2}' must be a reference type in order to use it as parameter '{1}' in the generic type or method '{0}'</value>
  </data>
  <data name="ERR_ValConstraintNotSatisfied" xml:space="preserve">
    <value>The type '{2}' must be a non-nullable value type in order to use it as parameter '{1}' in the generic type or method '{0}'</value>
  </data>
  <data name="ERR_CircularConstraint" xml:space="preserve">
    <value>Circular constraint dependency involving '{0}' and '{1}'</value>
  </data>
  <data name="ERR_BaseConstraintConflict" xml:space="preserve">
    <value>Type parameter '{0}' inherits conflicting constraints '{1}' and '{2}'</value>
  </data>
  <data name="ERR_ConWithValCon" xml:space="preserve">
    <value>Type parameter '{1}' has the 'struct' constraint so '{1}' cannot be used as a constraint for '{0}'</value>
  </data>
  <data name="ERR_AmbigUDConv" xml:space="preserve">
    <value>Ambiguous user defined conversions '{0}' and '{1}' when converting from '{2}' to '{3}'</value>
  </data>
  <data name="WRN_AlwaysNull" xml:space="preserve">
    <value>The result of the expression is always 'null' of type '{0}'</value>
  </data>
  <data name="WRN_AlwaysNull_Title" xml:space="preserve">
    <value>The result of the expression is always 'null'</value>
  </data>
  <data name="ERR_RefReturnThis" xml:space="preserve">
    <value>Cannot return 'this' by reference.</value>
  </data>
  <data name="ERR_AttributeCtorInParameter" xml:space="preserve">
    <value>Cannot use attribute constructor '{0}' because it is has 'in' parameters.</value>
  </data>
  <data name="ERR_OverrideWithConstraints" xml:space="preserve">
    <value>Constraints for override and explicit interface implementation methods are inherited from the base method, so they cannot be specified directly</value>
  </data>
  <data name="ERR_AmbigOverride" xml:space="preserve">
    <value>The inherited members '{0}' and '{1}' have the same signature in type '{2}', so they cannot be overridden</value>
  </data>
  <data name="ERR_DecConstError" xml:space="preserve">
    <value>Evaluation of the decimal constant expression failed</value>
  </data>
  <data name="WRN_CmpAlwaysFalse" xml:space="preserve">
    <value>Comparing with null of type '{0}' always produces 'false'</value>
  </data>
  <data name="WRN_CmpAlwaysFalse_Title" xml:space="preserve">
    <value>Comparing with null of struct type always produces 'false'</value>
  </data>
  <data name="WRN_FinalizeMethod" xml:space="preserve">
    <value>Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?</value>
  </data>
  <data name="WRN_FinalizeMethod_Title" xml:space="preserve">
    <value>Introducing a 'Finalize' method can interfere with destructor invocation</value>
  </data>
  <data name="WRN_FinalizeMethod_Description" xml:space="preserve">
    <value>This warning occurs when you create a class with a method whose signature is public virtual void Finalize.

If such a class is used as a base class and if the deriving class defines a destructor, the destructor will override the base class Finalize method, not Finalize.</value>
  </data>
  <data name="ERR_ExplicitImplParams" xml:space="preserve">
    <value>'{0}' should not have a params parameter since '{1}' does not</value>
  </data>
  <data name="WRN_GotoCaseShouldConvert" xml:space="preserve">
    <value>The 'goto case' value is not implicitly convertible to type '{0}'</value>
  </data>
  <data name="WRN_GotoCaseShouldConvert_Title" xml:space="preserve">
    <value>The 'goto case' value is not implicitly convertible to the switch type</value>
  </data>
  <data name="ERR_MethodImplementingAccessor" xml:space="preserve">
    <value>Method '{0}' cannot implement interface accessor '{1}' for type '{2}'. Use an explicit interface implementation.</value>
  </data>
  <data name="WRN_NubExprIsConstBool" xml:space="preserve">
    <value>The result of the expression is always '{0}' since a value of type '{1}' is never equal to 'null' of type '{2}'</value>
  </data>
  <data name="WRN_NubExprIsConstBool_Title" xml:space="preserve">
    <value>The result of the expression is always the same since a value of this type is never equal to 'null'</value>
  </data>
  <data name="WRN_NubExprIsConstBool2" xml:space="preserve">
    <value>The result of the expression is always '{0}' since a value of type '{1}' is never equal to 'null' of type '{2}'</value>
  </data>
  <data name="WRN_NubExprIsConstBool2_Title" xml:space="preserve">
    <value>The result of the expression is always the same since a value of this type is never equal to 'null'</value>
  </data>
  <data name="WRN_ExplicitImplCollision" xml:space="preserve">
    <value>Explicit interface implementation '{0}' matches more than one interface member. Which interface member is actually chosen is implementation-dependent. Consider using a non-explicit implementation instead.</value>
  </data>
  <data name="WRN_ExplicitImplCollision_Title" xml:space="preserve">
    <value>Explicit interface implementation matches more than one interface member</value>
  </data>
  <data name="ERR_AbstractHasBody" xml:space="preserve">
    <value>'{0}' cannot declare a body because it is marked abstract</value>
  </data>
  <data name="ERR_ConcreteMissingBody" xml:space="preserve">
    <value>'{0}' must declare a body because it is not marked abstract, extern, or partial</value>
  </data>
  <data name="ERR_AbstractAndSealed" xml:space="preserve">
    <value>'{0}' cannot be both abstract and sealed</value>
  </data>
  <data name="ERR_AbstractNotVirtual" xml:space="preserve">
    <value>The abstract {0} '{1}' cannot be marked virtual</value>
  </data>
  <data name="ERR_StaticConstant" xml:space="preserve">
    <value>The constant '{0}' cannot be marked static</value>
  </data>
  <data name="ERR_CantOverrideNonFunction" xml:space="preserve">
    <value>'{0}': cannot override because '{1}' is not a function</value>
  </data>
  <data name="ERR_CantOverrideNonVirtual" xml:space="preserve">
    <value>'{0}': cannot override inherited member '{1}' because it is not marked virtual, abstract, or override</value>
  </data>
  <data name="ERR_CantChangeAccessOnOverride" xml:space="preserve">
    <value>'{0}': cannot change access modifiers when overriding '{1}' inherited member '{2}'</value>
  </data>
  <data name="ERR_CantChangeTupleNamesOnOverride" xml:space="preserve">
    <value>'{0}': cannot change tuple element names when overriding inherited member '{1}'</value>
  </data>
  <data name="ERR_CantChangeReturnTypeOnOverride" xml:space="preserve">
    <value>'{0}': return type must be '{2}' to match overridden member '{1}'</value>
  </data>
  <data name="ERR_CantDeriveFromSealedType" xml:space="preserve">
    <value>'{0}': cannot derive from sealed type '{1}'</value>
  </data>
  <data name="ERR_AbstractInConcreteClass" xml:space="preserve">
    <value>'{0}' is abstract but it is contained in non-abstract class '{1}'</value>
  </data>
  <data name="ERR_StaticConstructorWithExplicitConstructorCall" xml:space="preserve">
    <value>'{0}': static constructor cannot have an explicit 'this' or 'base' constructor call</value>
  </data>
  <data name="ERR_StaticConstructorWithAccessModifiers" xml:space="preserve">
    <value>'{0}': access modifiers are not allowed on static constructors</value>
  </data>
  <data name="ERR_RecursiveConstructorCall" xml:space="preserve">
    <value>Constructor '{0}' cannot call itself</value>
  </data>
  <data name="ERR_IndirectRecursiveConstructorCall" xml:space="preserve">
    <value>Constructor '{0}' cannot call itself through another constructor</value>
  </data>
  <data name="ERR_ObjectCallingBaseConstructor" xml:space="preserve">
    <value>'{0}' has no base class and cannot call a base constructor</value>
  </data>
  <data name="ERR_PredefinedTypeNotFound" xml:space="preserve">
    <value>Predefined type '{0}' is not defined or imported</value>
  </data>
  <data name="ERR_PredefinedValueTupleTypeNotFound" xml:space="preserve">
    <value>Predefined type '{0}' is not defined or imported</value>
  </data>
  <data name="ERR_PredefinedValueTupleTypeAmbiguous3" xml:space="preserve">
    <value>Predefined type '{0}' is declared in multiple referenced assemblies: '{1}' and '{2}'</value>
  </data>
  <data name="ERR_StructWithBaseConstructorCall" xml:space="preserve">
    <value>'{0}': structs cannot call base class constructors</value>
  </data>
  <data name="ERR_StructLayoutCycle" xml:space="preserve">
    <value>Struct member '{0}' of type '{1}' causes a cycle in the struct layout</value>
  </data>
  <data name="ERR_InterfacesCannotContainTypes" xml:space="preserve">
    <value>'{0}': interfaces cannot declare types</value>
  </data>
  <data name="ERR_InterfacesCantContainFields" xml:space="preserve">
    <value>Interfaces cannot contain fields</value>
  </data>
  <data name="ERR_InterfacesCantContainConstructors" xml:space="preserve">
    <value>Interfaces cannot contain constructors</value>
  </data>
  <data name="ERR_NonInterfaceInInterfaceList" xml:space="preserve">
    <value>Type '{0}' in interface list is not an interface</value>
  </data>
  <data name="ERR_DuplicateInterfaceInBaseList" xml:space="preserve">
    <value>'{0}' is already listed in interface list</value>
  </data>
  <data name="ERR_DuplicateInterfaceWithTupleNamesInBaseList" xml:space="preserve">
    <value>'{0}' is already listed in the interface list on type '{2}' with different tuple element names, as '{1}'.</value>
  </data>
  <data name="ERR_CycleInInterfaceInheritance" xml:space="preserve">
    <value>Inherited interface '{1}' causes a cycle in the interface hierarchy of '{0}'</value>
  </data>
  <data name="ERR_InterfaceMemberHasBody" xml:space="preserve">
    <value>'{0}': interface members cannot have a definition</value>
  </data>
  <data name="ERR_HidingAbstractMethod" xml:space="preserve">
    <value>'{0}' hides inherited abstract member '{1}'</value>
  </data>
  <data name="ERR_UnimplementedAbstractMethod" xml:space="preserve">
    <value>'{0}' does not implement inherited abstract member '{1}'</value>
  </data>
  <data name="ERR_UnimplementedInterfaceMember" xml:space="preserve">
    <value>'{0}' does not implement interface member '{1}'</value>
  </data>
  <data name="ERR_ObjectCantHaveBases" xml:space="preserve">
    <value>The class System.Object cannot have a base class or implement an interface</value>
  </data>
  <data name="ERR_ExplicitInterfaceImplementationNotInterface" xml:space="preserve">
    <value>'{0}' in explicit interface declaration is not an interface</value>
  </data>
  <data name="ERR_InterfaceMemberNotFound" xml:space="preserve">
    <value>'{0}' in explicit interface declaration is not a member of interface</value>
  </data>
  <data name="ERR_ClassDoesntImplementInterface" xml:space="preserve">
    <value>'{0}': containing type does not implement interface '{1}'</value>
  </data>
  <data name="ERR_ExplicitInterfaceImplementationInNonClassOrStruct" xml:space="preserve">
    <value>'{0}': explicit interface declaration can only be declared in a class or struct</value>
  </data>
  <data name="ERR_MemberNameSameAsType" xml:space="preserve">
    <value>'{0}': member names cannot be the same as their enclosing type</value>
  </data>
  <data name="ERR_EnumeratorOverflow" xml:space="preserve">
    <value>'{0}': the enumerator value is too large to fit in its type</value>
  </data>
  <data name="ERR_CantOverrideNonProperty" xml:space="preserve">
    <value>'{0}': cannot override because '{1}' is not a property</value>
  </data>
  <data name="ERR_NoGetToOverride" xml:space="preserve">
    <value>'{0}': cannot override because '{1}' does not have an overridable get accessor</value>
  </data>
  <data name="ERR_NoSetToOverride" xml:space="preserve">
    <value>'{0}': cannot override because '{1}' does not have an overridable set accessor</value>
  </data>
  <data name="ERR_PropertyCantHaveVoidType" xml:space="preserve">
    <value>'{0}': property or indexer cannot have void type</value>
  </data>
  <data name="ERR_PropertyWithNoAccessors" xml:space="preserve">
    <value>'{0}': property or indexer must have at least one accessor</value>
  </data>
  <data name="ERR_CantUseVoidInArglist" xml:space="preserve">
    <value>__arglist cannot have an argument of void type</value>
  </data>
  <data name="ERR_NewVirtualInSealed" xml:space="preserve">
    <value>'{0}' is a new virtual member in sealed class '{1}'</value>
  </data>
  <data name="ERR_ExplicitPropertyAddingAccessor" xml:space="preserve">
    <value>'{0}' adds an accessor not found in interface member '{1}'</value>
  </data>
  <data name="ERR_ExplicitPropertyMissingAccessor" xml:space="preserve">
    <value>Explicit interface implementation '{0}' is missing accessor '{1}'</value>
  </data>
  <data name="ERR_ConversionWithInterface" xml:space="preserve">
    <value>'{0}': user-defined conversions to or from an interface are not allowed</value>
  </data>
  <data name="ERR_ConversionWithBase" xml:space="preserve">
    <value>'{0}': user-defined conversions to or from a base class are not allowed</value>
  </data>
  <data name="ERR_ConversionWithDerived" xml:space="preserve">
    <value>'{0}': user-defined conversions to or from a derived class are not allowed</value>
  </data>
  <data name="ERR_IdentityConversion" xml:space="preserve">
    <value>User-defined operator cannot take an object of the enclosing type and convert to an object of the enclosing type</value>
  </data>
  <data name="ERR_ConversionNotInvolvingContainedType" xml:space="preserve">
    <value>User-defined conversion must convert to or from the enclosing type</value>
  </data>
  <data name="ERR_DuplicateConversionInClass" xml:space="preserve">
    <value>Duplicate user-defined conversion in type '{0}'</value>
  </data>
  <data name="ERR_OperatorsMustBeStatic" xml:space="preserve">
    <value>User-defined operator '{0}' must be declared static and public</value>
  </data>
  <data name="ERR_BadIncDecSignature" xml:space="preserve">
    <value>The parameter type for ++ or -- operator must be the containing type</value>
  </data>
  <data name="ERR_BadUnaryOperatorSignature" xml:space="preserve">
    <value>The parameter of a unary operator must be the containing type</value>
  </data>
  <data name="ERR_BadBinaryOperatorSignature" xml:space="preserve">
    <value>One of the parameters of a binary operator must be the containing type</value>
  </data>
  <data name="ERR_BadShiftOperatorSignature" xml:space="preserve">
    <value>The first operand of an overloaded shift operator must have the same type as the containing type, and the type of the second operand must be int</value>
  </data>
  <data name="ERR_InterfacesCantContainOperators" xml:space="preserve">
    <value>Interfaces cannot contain operators</value>
  </data>
  <data name="ERR_StructsCantContainDefaultConstructor" xml:space="preserve">
    <value>Structs cannot contain explicit parameterless constructors</value>
  </data>
  <data name="ERR_EnumsCantContainDefaultConstructor" xml:space="preserve">
    <value>Enums cannot contain explicit parameterless constructors</value>
  </data>
  <data name="ERR_CantOverrideBogusMethod" xml:space="preserve">
    <value>'{0}': cannot override '{1}' because it is not supported by the language</value>
  </data>
  <data name="ERR_BindToBogus" xml:space="preserve">
    <value>'{0}' is not supported by the language</value>
  </data>
  <data name="ERR_CantCallSpecialMethod" xml:space="preserve">
    <value>'{0}': cannot explicitly call operator or accessor</value>
  </data>
  <data name="ERR_BadTypeReference" xml:space="preserve">
    <value>'{0}': cannot reference a type through an expression; try '{1}' instead</value>
  </data>
  <data name="ERR_FieldInitializerInStruct" xml:space="preserve">
    <value>'{0}': cannot have instance property or field initializers in structs</value>
  </data>
  <data name="ERR_BadDestructorName" xml:space="preserve">
    <value>Name of destructor must match name of class</value>
  </data>
  <data name="ERR_OnlyClassesCanContainDestructors" xml:space="preserve">
    <value>Only class types can contain destructors</value>
  </data>
  <data name="ERR_ConflictAliasAndMember" xml:space="preserve">
    <value>Namespace '{1}' contains a definition conflicting with alias '{0}'</value>
  </data>
  <data name="ERR_ConflictingAliasAndDefinition" xml:space="preserve">
    <value>Alias '{0}' conflicts with {1} definition</value>
  </data>
  <data name="ERR_ConditionalOnSpecialMethod" xml:space="preserve">
    <value>The Conditional attribute is not valid on '{0}' because it is a constructor, destructor, operator, or explicit interface implementation</value>
  </data>
  <data name="ERR_ConditionalMustReturnVoid" xml:space="preserve">
    <value>The Conditional attribute is not valid on '{0}' because its return type is not void</value>
  </data>
  <data name="ERR_DuplicateAttribute" xml:space="preserve">
    <value>Duplicate '{0}' attribute</value>
  </data>
  <data name="ERR_DuplicateAttributeInNetModule" xml:space="preserve">
    <value>Duplicate '{0}' attribute in '{1}'</value>
  </data>
  <data name="ERR_ConditionalOnInterfaceMethod" xml:space="preserve">
    <value>The Conditional attribute is not valid on interface members</value>
  </data>
  <data name="ERR_OperatorCantReturnVoid" xml:space="preserve">
    <value>User-defined operators cannot return void</value>
  </data>
  <data name="ERR_BadDynamicConversion" xml:space="preserve">
    <value>'{0}': user-defined conversions to or from the dynamic type are not allowed</value>
  </data>
  <data name="ERR_InvalidAttributeArgument" xml:space="preserve">
    <value>Invalid value for argument to '{0}' attribute</value>
  </data>
  <data name="ERR_ParameterNotValidForType" xml:space="preserve">
    <value>Parameter not valid for the specified unmanaged type.</value>
  </data>
  <data name="ERR_AttributeParameterRequired1" xml:space="preserve">
    <value>Attribute parameter '{0}' must be specified.</value>
  </data>
  <data name="ERR_AttributeParameterRequired2" xml:space="preserve">
    <value>Attribute parameter '{0}' or '{1}' must be specified.</value>
  </data>
  <data name="ERR_MarshalUnmanagedTypeNotValidForFields" xml:space="preserve">
    <value>Unmanaged type '{0}' not valid for fields.</value>
  </data>
  <data name="ERR_MarshalUnmanagedTypeOnlyValidForFields" xml:space="preserve">
    <value>Unmanaged type '{0}' is only valid for fields.</value>
  </data>
  <data name="ERR_AttributeOnBadSymbolType" xml:space="preserve">
    <value>Attribute '{0}' is not valid on this declaration type. It is only valid on '{1}' declarations.</value>
  </data>
  <data name="ERR_FloatOverflow" xml:space="preserve">
    <value>Floating-point constant is outside the range of type '{0}'</value>
  </data>
  <data name="ERR_ComImportWithoutUuidAttribute" xml:space="preserve">
    <value>The Guid attribute must be specified with the ComImport attribute</value>
  </data>
  <data name="ERR_InvalidNamedArgument" xml:space="preserve">
    <value>Invalid value for named attribute argument '{0}'</value>
  </data>
  <data name="ERR_DllImportOnInvalidMethod" xml:space="preserve">
    <value>The DllImport attribute must be specified on a method marked 'static' and 'extern'</value>
  </data>
  <data name="ERR_EncUpdateFailedMissingAttribute" xml:space="preserve">
    <value>Cannot update '{0}'; attribute '{1}' is missing.</value>
  </data>
  <data name="ERR_DllImportOnGenericMethod" xml:space="preserve">
    <value>The DllImport attribute cannot be applied to a method that is generic or contained in a generic type.</value>
  </data>
  <data name="ERR_FieldCantBeRefAny" xml:space="preserve">
    <value>Field or property cannot be of type '{0}'</value>
  </data>
  <data name="ERR_FieldAutoPropCantBeByRefLike" xml:space="preserve">
    <value>Field or auto-implemented property cannot be of type '{0}' unless it is an instance member of a ref struct.</value>
  </data>
  <data name="ERR_ArrayElementCantBeRefAny" xml:space="preserve">
    <value>Array elements cannot be of type '{0}'</value>
  </data>
  <data name="WRN_DeprecatedSymbol" xml:space="preserve">
    <value>'{0}' is obsolete</value>
  </data>
  <data name="WRN_DeprecatedSymbol_Title" xml:space="preserve">
    <value>Type or member is obsolete</value>
  </data>
  <data name="ERR_NotAnAttributeClass" xml:space="preserve">
    <value>'{0}' is not an attribute class</value>
  </data>
  <data name="ERR_BadNamedAttributeArgument" xml:space="preserve">
    <value>'{0}' is not a valid named attribute argument. Named attribute arguments must be fields which are not readonly, static, or const, or read-write properties which are public and not static.</value>
  </data>
  <data name="WRN_DeprecatedSymbolStr" xml:space="preserve">
    <value>'{0}' is obsolete: '{1}'</value>
  </data>
  <data name="WRN_DeprecatedSymbolStr_Title" xml:space="preserve">
    <value>Type or member is obsolete</value>
  </data>
  <data name="ERR_DeprecatedSymbolStr" xml:space="preserve">
    <value>'{0}' is obsolete: '{1}'</value>
  </data>
  <data name="ERR_IndexerCantHaveVoidType" xml:space="preserve">
    <value>Indexers cannot have void type</value>
  </data>
  <data name="ERR_VirtualPrivate" xml:space="preserve">
    <value>'{0}': virtual or abstract members cannot be private</value>
  </data>
  <data name="ERR_ArrayInitToNonArrayType" xml:space="preserve">
    <value>Can only use array initializer expressions to assign to array types. Try using a new expression instead.</value>
  </data>
  <data name="ERR_ArrayInitInBadPlace" xml:space="preserve">
    <value>Array initializers can only be used in a variable or field initializer. Try using a new expression instead.</value>
  </data>
  <data name="ERR_MissingStructOffset" xml:space="preserve">
    <value>'{0}': instance field in types marked with StructLayout(LayoutKind.Explicit) must have a FieldOffset attribute</value>
  </data>
  <data name="WRN_ExternMethodNoImplementation" xml:space="preserve">
    <value>Method, operator, or accessor '{0}' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.</value>
  </data>
  <data name="WRN_ExternMethodNoImplementation_Title" xml:space="preserve">
    <value>Method, operator, or accessor is marked external and has no attributes on it</value>
  </data>
  <data name="WRN_ProtectedInSealed" xml:space="preserve">
    <value>'{0}': new protected member declared in sealed class</value>
  </data>
  <data name="WRN_ProtectedInSealed_Title" xml:space="preserve">
    <value>New protected member declared in sealed class</value>
  </data>
  <data name="ERR_InterfaceImplementedByConditional" xml:space="preserve">
    <value>Conditional member '{0}' cannot implement interface member '{1}' in type '{2}'</value>
  </data>
  <data name="ERR_InterfaceImplementedImplicitlyByVariadic" xml:space="preserve">
    <value>'{0}' cannot implement interface member '{1}' in type '{2}' because it has an __arglist parameter</value>
  </data>
  <data name="ERR_IllegalRefParam" xml:space="preserve">
    <value>ref and out are not valid in this context</value>
  </data>
  <data name="ERR_BadArgumentToAttribute" xml:space="preserve">
    <value>The argument to the '{0}' attribute must be a valid identifier</value>
  </data>
  <data name="ERR_StructOffsetOnBadStruct" xml:space="preserve">
    <value>The FieldOffset attribute can only be placed on members of types marked with the StructLayout(LayoutKind.Explicit)</value>
  </data>
  <data name="ERR_StructOffsetOnBadField" xml:space="preserve">
    <value>The FieldOffset attribute is not allowed on static or const fields</value>
  </data>
  <data name="ERR_AttributeUsageOnNonAttributeClass" xml:space="preserve">
    <value>Attribute '{0}' is only valid on classes derived from System.Attribute</value>
  </data>
  <data name="WRN_PossibleMistakenNullStatement" xml:space="preserve">
    <value>Possible mistaken empty statement</value>
  </data>
  <data name="WRN_PossibleMistakenNullStatement_Title" xml:space="preserve">
    <value>Possible mistaken empty statement</value>
  </data>
  <data name="ERR_DuplicateNamedAttributeArgument" xml:space="preserve">
    <value>'{0}' duplicate named attribute argument</value>
  </data>
  <data name="ERR_DeriveFromEnumOrValueType" xml:space="preserve">
    <value>'{0}' cannot derive from special class '{1}'</value>
  </data>
  <data name="ERR_DefaultMemberOnIndexedType" xml:space="preserve">
    <value>Cannot specify the DefaultMember attribute on a type containing an indexer</value>
  </data>
  <data name="ERR_BogusType" xml:space="preserve">
    <value>'{0}' is a type not supported by the language</value>
  </data>
  <data name="WRN_UnassignedInternalField" xml:space="preserve">
    <value>Field '{0}' is never assigned to, and will always have its default value {1}</value>
  </data>
  <data name="WRN_UnassignedInternalField_Title" xml:space="preserve">
    <value>Field is never assigned to, and will always have its default value</value>
  </data>
  <data name="ERR_CStyleArray" xml:space="preserve">
    <value>Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type.</value>
  </data>
  <data name="WRN_VacuousIntegralComp" xml:space="preserve">
    <value>Comparison to integral constant is useless; the constant is outside the range of type '{0}'</value>
  </data>
  <data name="WRN_VacuousIntegralComp_Title" xml:space="preserve">
    <value>Comparison to integral constant is useless; the constant is outside the range of the type</value>
  </data>
  <data name="ERR_AbstractAttributeClass" xml:space="preserve">
    <value>Cannot apply attribute class '{0}' because it is abstract</value>
  </data>
  <data name="ERR_BadNamedAttributeArgumentType" xml:space="preserve">
    <value>'{0}' is not a valid named attribute argument because it is not a valid attribute parameter type</value>
  </data>
  <data name="ERR_MissingPredefinedMember" xml:space="preserve">
    <value>Missing compiler required member '{0}.{1}'</value>
  </data>
  <data name="WRN_AttributeLocationOnBadDeclaration" xml:space="preserve">
    <value>'{0}' is not a valid attribute location for this declaration. Valid attribute locations for this declaration are '{1}'. All attributes in this block will be ignored.</value>
  </data>
  <data name="WRN_AttributeLocationOnBadDeclaration_Title" xml:space="preserve">
    <value>Not a valid attribute location for this declaration</value>
  </data>
  <data name="WRN_InvalidAttributeLocation" xml:space="preserve">
    <value>'{0}' is not a recognized attribute location. Valid attribute locations for this declaration are '{1}'. All attributes in this block will be ignored.</value>
  </data>
  <data name="WRN_InvalidAttributeLocation_Title" xml:space="preserve">
    <value>Not a recognized attribute location</value>
  </data>
  <data name="WRN_EqualsWithoutGetHashCode" xml:space="preserve">
    <value>'{0}' overrides Object.Equals(object o) but does not override Object.GetHashCode()</value>
  </data>
  <data name="WRN_EqualsWithoutGetHashCode_Title" xml:space="preserve">
    <value>Type overrides Object.Equals(object o) but does not override Object.GetHashCode()</value>
  </data>
  <data name="WRN_EqualityOpWithoutEquals" xml:space="preserve">
    <value>'{0}' defines operator == or operator != but does not override Object.Equals(object o)</value>
  </data>
  <data name="WRN_EqualityOpWithoutEquals_Title" xml:space="preserve">
    <value>Type defines operator == or operator != but does not override Object.Equals(object o)</value>
  </data>
  <data name="WRN_EqualityOpWithoutGetHashCode" xml:space="preserve">
    <value>'{0}' defines operator == or operator != but does not override Object.GetHashCode()</value>
  </data>
  <data name="WRN_EqualityOpWithoutGetHashCode_Title" xml:space="preserve">
    <value>Type defines operator == or operator != but does not override Object.GetHashCode()</value>
  </data>
  <data name="ERR_OutAttrOnRefParam" xml:space="preserve">
    <value>Cannot specify the Out attribute on a ref parameter without also specifying the In attribute.</value>
  </data>
  <data name="ERR_OverloadRefKind" xml:space="preserve">
    <value>'{0}' cannot define an overloaded {1} that differs only on parameter modifiers '{2}' and '{3}'</value>
  </data>
  <data name="ERR_LiteralDoubleCast" xml:space="preserve">
    <value>Literal of type double cannot be implicitly converted to type '{1}'; use an '{0}' suffix to create a literal of this type</value>
  </data>
  <data name="WRN_IncorrectBooleanAssg" xml:space="preserve">
    <value>Assignment in conditional expression is always constant; did you mean to use == instead of = ?</value>
  </data>
  <data name="WRN_IncorrectBooleanAssg_Title" xml:space="preserve">
    <value>Assignment in conditional expression is always constant</value>
  </data>
  <data name="ERR_ProtectedInStruct" xml:space="preserve">
    <value>'{0}': new protected member declared in struct</value>
  </data>
  <data name="ERR_InconsistentIndexerNames" xml:space="preserve">
    <value>Two indexers have different names; the IndexerName attribute must be used with the same name on every indexer within a type</value>
  </data>
  <data name="ERR_ComImportWithUserCtor" xml:space="preserve">
    <value>A class with the ComImport attribute cannot have a user-defined constructor</value>
  </data>
  <data name="ERR_FieldCantHaveVoidType" xml:space="preserve">
    <value>Field cannot have void type</value>
  </data>
  <data name="WRN_NonObsoleteOverridingObsolete" xml:space="preserve">
    <value>Member '{0}' overrides obsolete member '{1}'. Add the Obsolete attribute to '{0}'.</value>
  </data>
  <data name="WRN_NonObsoleteOverridingObsolete_Title" xml:space="preserve">
    <value>Member overrides obsolete member</value>
  </data>
  <data name="ERR_SystemVoid" xml:space="preserve">
    <value>System.Void cannot be used from C# -- use typeof(void) to get the void type object</value>
  </data>
  <data name="ERR_ExplicitParamArray" xml:space="preserve">
    <value>Do not use 'System.ParamArrayAttribute'. Use the 'params' keyword instead.</value>
  </data>
  <data name="WRN_BitwiseOrSignExtend" xml:space="preserve">
    <value>Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first</value>
  </data>
  <data name="WRN_BitwiseOrSignExtend_Title" xml:space="preserve">
    <value>Bitwise-or operator used on a sign-extended operand</value>
  </data>
  <data name="WRN_BitwiseOrSignExtend_Description" xml:space="preserve">
    <value>The compiler implicitly widened and sign-extended a variable, and then used the resulting value in a bitwise OR operation. This can result in unexpected behavior.</value>
  </data>
  <data name="ERR_VolatileStruct" xml:space="preserve">
    <value>'{0}': a volatile field cannot be of the type '{1}'</value>
  </data>
  <data name="ERR_VolatileAndReadonly" xml:space="preserve">
    <value>'{0}': a field cannot be both volatile and readonly</value>
  </data>
  <data name="ERR_AbstractField" xml:space="preserve">
    <value>The modifier 'abstract' is not valid on fields. Try using a property instead.</value>
  </data>
  <data name="ERR_BogusExplicitImpl" xml:space="preserve">
    <value>'{0}' cannot implement '{1}' because it is not supported by the language</value>
  </data>
  <data name="ERR_ExplicitMethodImplAccessor" xml:space="preserve">
    <value>'{0}' explicit method implementation cannot implement '{1}' because it is an accessor</value>
  </data>
  <data name="WRN_CoClassWithoutComImport" xml:space="preserve">
    <value>'{0}' interface marked with 'CoClassAttribute' not marked with 'ComImportAttribute'</value>
  </data>
  <data name="WRN_CoClassWithoutComImport_Title" xml:space="preserve">
    <value>Interface marked with 'CoClassAttribute' not marked with 'ComImportAttribute'</value>
  </data>
  <data name="ERR_ConditionalWithOutParam" xml:space="preserve">
    <value>Conditional member '{0}' cannot have an out parameter</value>
  </data>
  <data name="ERR_AccessorImplementingMethod" xml:space="preserve">
    <value>Accessor '{0}' cannot implement interface member '{1}' for type '{2}'. Use an explicit interface implementation.</value>
  </data>
  <data name="ERR_AliasQualAsExpression" xml:space="preserve">
    <value>The namespace alias qualifier '::' always resolves to a type or namespace so is illegal here. Consider using '.' instead.</value>
  </data>
  <data name="ERR_DerivingFromATyVar" xml:space="preserve">
    <value>Cannot derive from '{0}' because it is a type parameter</value>
  </data>
  <data name="ERR_DuplicateTypeParameter" xml:space="preserve">
    <value>Duplicate type parameter '{0}'</value>
  </data>
  <data name="WRN_TypeParameterSameAsOuterTypeParameter" xml:space="preserve">
    <value>Type parameter '{0}' has the same name as the type parameter from outer type '{1}'</value>
  </data>
  <data name="WRN_TypeParameterSameAsOuterTypeParameter_Title" xml:space="preserve">
    <value>Type parameter has the same name as the type parameter from outer type</value>
  </data>
  <data name="ERR_TypeVariableSameAsParent" xml:space="preserve">
    <value>Type parameter '{0}' has the same name as the containing type, or method</value>
  </data>
  <data name="ERR_UnifyingInterfaceInstantiations" xml:space="preserve">
    <value>'{0}' cannot implement both '{1}' and '{2}' because they may unify for some type parameter substitutions</value>
  </data>
  <data name="ERR_GenericDerivingFromAttribute" xml:space="preserve">
    <value>A generic type cannot derive from '{0}' because it is an attribute class</value>
  </data>
  <data name="ERR_TyVarNotFoundInConstraint" xml:space="preserve">
    <value>'{1}' does not define type parameter '{0}'</value>
  </data>
  <data name="ERR_BadBoundType" xml:space="preserve">
    <value>'{0}' is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter.</value>
  </data>
  <data name="ERR_SpecialTypeAsBound" xml:space="preserve">
    <value>Constraint cannot be special class '{0}'</value>
  </data>
  <data name="ERR_BadVisBound" xml:space="preserve">
    <value>Inconsistent accessibility: constraint type '{1}' is less accessible than '{0}'</value>
  </data>
  <data name="ERR_LookupInTypeVariable" xml:space="preserve">
    <value>Cannot do member lookup in '{0}' because it is a type parameter</value>
  </data>
  <data name="ERR_BadConstraintType" xml:space="preserve">
    <value>Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or a type parameter.</value>
  </data>
  <data name="ERR_InstanceMemberInStaticClass" xml:space="preserve">
    <value>'{0}': cannot declare instance members in a static class</value>
  </data>
  <data name="ERR_StaticBaseClass" xml:space="preserve">
    <value>'{1}': cannot derive from static class '{0}'</value>
  </data>
  <data name="ERR_ConstructorInStaticClass" xml:space="preserve">
    <value>Static classes cannot have instance constructors</value>
  </data>
  <data name="ERR_DestructorInStaticClass" xml:space="preserve">
    <value>Static classes cannot contain destructors</value>
  </data>
  <data name="ERR_InstantiatingStaticClass" xml:space="preserve">
    <value>Cannot create an instance of the static class '{0}'</value>
  </data>
  <data name="ERR_StaticDerivedFromNonObject" xml:space="preserve">
    <value>Static class '{0}' cannot derive from type '{1}'. Static classes must derive from object.</value>
  </data>
  <data name="ERR_StaticClassInterfaceImpl" xml:space="preserve">
    <value>'{0}': static classes cannot implement interfaces</value>
  </data>
  <data name="ERR_RefStructInterfaceImpl" xml:space="preserve">
    <value>'{0}': ref structs cannot implement interfaces</value>
  </data>
  <data name="ERR_OperatorInStaticClass" xml:space="preserve">
    <value>'{0}': static classes cannot contain user-defined operators</value>
  </data>
  <data name="ERR_ConvertToStaticClass" xml:space="preserve">
    <value>Cannot convert to static type '{0}'</value>
  </data>
  <data name="ERR_ConstraintIsStaticClass" xml:space="preserve">
    <value>'{0}': static classes cannot be used as constraints</value>
  </data>
  <data name="ERR_GenericArgIsStaticClass" xml:space="preserve">
    <value>'{0}': static types cannot be used as type arguments</value>
  </data>
  <data name="ERR_ArrayOfStaticClass" xml:space="preserve">
    <value>'{0}': array elements cannot be of static type</value>
  </data>
  <data name="ERR_IndexerInStaticClass" xml:space="preserve">
    <value>'{0}': cannot declare indexers in a static class</value>
  </data>
  <data name="ERR_ParameterIsStaticClass" xml:space="preserve">
    <value>'{0}': static types cannot be used as parameters</value>
  </data>
  <data name="ERR_ReturnTypeIsStaticClass" xml:space="preserve">
    <value>'{0}': static types cannot be used as return types</value>
  </data>
  <data name="ERR_VarDeclIsStaticClass" xml:space="preserve">
    <value>Cannot declare a variable of static type '{0}'</value>
  </data>
  <data name="ERR_BadEmptyThrowInFinally" xml:space="preserve">
    <value>A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause</value>
  </data>
  <data name="ERR_InvalidSpecifier" xml:space="preserve">
    <value>'{0}' is not a valid format specifier</value>
  </data>
  <data name="WRN_AssignmentToLockOrDispose" xml:space="preserve">
    <value>Possibly incorrect assignment to local '{0}' which is the argument to a using or lock statement. The Dispose call or unlocking will happen on the original value of the local.</value>
  </data>
  <data name="WRN_AssignmentToLockOrDispose_Title" xml:space="preserve">
    <value>Possibly incorrect assignment to local which is the argument to a using or lock statement</value>
  </data>
  <data name="ERR_ForwardedTypeInThisAssembly" xml:space="preserve">
    <value>Type '{0}' is defined in this assembly, but a type forwarder is specified for it</value>
  </data>
  <data name="ERR_ForwardedTypeIsNested" xml:space="preserve">
    <value>Cannot forward type '{0}' because it is a nested type of '{1}'</value>
  </data>
  <data name="ERR_CycleInTypeForwarder" xml:space="preserve">
    <value>The type forwarder for type '{0}' in assembly '{1}' causes a cycle</value>
  </data>
  <data name="ERR_AssemblyNameOnNonModule" xml:space="preserve">
    <value>The /moduleassemblyname option may only be specified when building a target type of 'module'</value>
  </data>
  <data name="ERR_InvalidAssemblyName" xml:space="preserve">
    <value>Assembly reference '{0}' is invalid and cannot be resolved</value>
  </data>
  <data name="ERR_InvalidFwdType" xml:space="preserve">
    <value>Invalid type specified as an argument for TypeForwardedTo attribute</value>
  </data>
  <data name="ERR_CloseUnimplementedInterfaceMemberStatic" xml:space="preserve">
    <value>'{0}' does not implement interface member '{1}'. '{2}' cannot implement an interface member because it is static.</value>
  </data>
  <data name="ERR_CloseUnimplementedInterfaceMemberNotPublic" xml:space="preserve">
    <value>'{0}' does not implement interface member '{1}'. '{2}' cannot implement an interface member because it is not public.</value>
  </data>
  <data name="ERR_CloseUnimplementedInterfaceMemberWrongReturnType" xml:space="preserve">
    <value>'{0}' does not implement interface member '{1}'. '{2}' cannot implement '{1}' because it does not have the matching return type of '{3}'.</value>
  </data>
  <data name="ERR_DuplicateTypeForwarder" xml:space="preserve">
    <value>'{0}' duplicate TypeForwardedToAttribute</value>
  </data>
  <data name="ERR_ExpectedSelectOrGroup" xml:space="preserve">
    <value>A query body must end with a select clause or a group clause</value>
  </data>
  <data name="ERR_ExpectedContextualKeywordOn" xml:space="preserve">
    <value>Expected contextual keyword 'on'</value>
  </data>
  <data name="ERR_ExpectedContextualKeywordEquals" xml:space="preserve">
    <value>Expected contextual keyword 'equals'</value>
  </data>
  <data name="ERR_ExpectedContextualKeywordBy" xml:space="preserve">
    <value>Expected contextual keyword 'by'</value>
  </data>
  <data name="ERR_InvalidAnonymousTypeMemberDeclarator" xml:space="preserve">
    <value>Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access.</value>
  </data>
  <data name="ERR_InvalidInitializerElementInitializer" xml:space="preserve">
    <value>Invalid initializer member declarator</value>
  </data>
  <data name="ERR_InconsistentLambdaParameterUsage" xml:space="preserve">
    <value>Inconsistent lambda parameter usage; parameter types must be all explicit or all implicit</value>
  </data>
  <data name="ERR_PartialMethodInvalidModifier" xml:space="preserve">
    <value>A partial method cannot have access modifiers or the virtual, abstract, override, new, sealed, or extern modifiers</value>
  </data>
  <data name="ERR_PartialMethodOnlyInPartialClass" xml:space="preserve">
    <value>A partial method must be declared within a partial class or partial struct</value>
  </data>
  <data name="ERR_PartialMethodCannotHaveOutParameters" xml:space="preserve">
    <value>A partial method cannot have out parameters</value>
  </data>
  <data name="ERR_PartialMethodNotExplicit" xml:space="preserve">
    <value>A partial method may not explicitly implement an interface method</value>
  </data>
  <data name="ERR_PartialMethodExtensionDifference" xml:space="preserve">
    <value>Both partial method declarations must be extension methods or neither may be an extension method</value>
  </data>
  <data name="ERR_PartialMethodOnlyOneLatent" xml:space="preserve">
    <value>A partial method may not have multiple defining declarations</value>
  </data>
  <data name="ERR_PartialMethodOnlyOneActual" xml:space="preserve">
    <value>A partial method may not have multiple implementing declarations</value>
  </data>
  <data name="ERR_PartialMethodParamsDifference" xml:space="preserve">
    <value>Both partial method declarations must use a params parameter or neither may use a params parameter</value>
  </data>
  <data name="ERR_PartialMethodMustHaveLatent" xml:space="preserve">
    <value>No defining declaration found for implementing declaration of partial method '{0}'</value>
  </data>
  <data name="ERR_PartialMethodInconsistentTupleNames" xml:space="preserve">
    <value>Both partial method declarations, '{0}' and '{1}', must use the same tuple element names.</value>
  </data>
  <data name="ERR_PartialMethodInconsistentConstraints" xml:space="preserve">
    <value>Partial method declarations of '{0}' have inconsistent type parameter constraints</value>
  </data>
  <data name="ERR_PartialMethodToDelegate" xml:space="preserve">
    <value>Cannot create delegate from method '{0}' because it is a partial method without an implementing declaration</value>
  </data>
  <data name="ERR_PartialMethodStaticDifference" xml:space="preserve">
    <value>Both partial method declarations must be static or neither may be static</value>
  </data>
  <data name="ERR_PartialMethodUnsafeDifference" xml:space="preserve">
    <value>Both partial method declarations must be unsafe or neither may be unsafe</value>
  </data>
  <data name="ERR_PartialMethodInExpressionTree" xml:space="preserve">
    <value>Partial methods with only a defining declaration or removed conditional methods cannot be used in expression trees</value>
  </data>
  <data name="ERR_PartialMethodMustReturnVoid" xml:space="preserve">
    <value>Partial methods must have a void return type</value>
  </data>
  <data name="WRN_ObsoleteOverridingNonObsolete" xml:space="preserve">
    <value>Obsolete member '{0}' overrides non-obsolete member '{1}'</value>
  </data>
  <data name="WRN_ObsoleteOverridingNonObsolete_Title" xml:space="preserve">
    <value>Obsolete member overrides non-obsolete member</value>
  </data>
  <data name="WRN_DebugFullNameTooLong" xml:space="preserve">
    <value>The fully qualified name for '{0}' is too long for debug information. Compile without '/debug' option.</value>
  </data>
  <data name="WRN_DebugFullNameTooLong_Title" xml:space="preserve">
    <value>Fully qualified name is too long for debug information</value>
  </data>
  <data name="ERR_ImplicitlyTypedVariableAssignedBadValue" xml:space="preserve">
    <value>Cannot assign {0} to an implicitly-typed variable</value>
  </data>
  <data name="ERR_ImplicitlyTypedVariableWithNoInitializer" xml:space="preserve">
    <value>Implicitly-typed variables must be initialized</value>
  </data>
  <data name="ERR_ImplicitlyTypedVariableMultipleDeclarator" xml:space="preserve">
    <value>Implicitly-typed variables cannot have multiple declarators</value>
  </data>
  <data name="ERR_ImplicitlyTypedVariableAssignedArrayInitializer" xml:space="preserve">
    <value>Cannot initialize an implicitly-typed variable with an array initializer</value>
  </data>
  <data name="ERR_ImplicitlyTypedLocalCannotBeFixed" xml:space="preserve">
    <value>Implicitly-typed local variables cannot be fixed</value>
  </data>
  <data name="ERR_ImplicitlyTypedVariableCannotBeConst" xml:space="preserve">
    <value>Implicitly-typed variables cannot be constant</value>
  </data>
  <data name="WRN_ExternCtorNoImplementation" xml:space="preserve">
    <value>Constructor '{0}' is marked external</value>
  </data>
  <data name="WRN_ExternCtorNoImplementation_Title" xml:space="preserve">
    <value>Constructor is marked external</value>
  </data>
  <data name="ERR_TypeVarNotFound" xml:space="preserve">
    <value>The contextual keyword 'var' may only appear within a local variable declaration or in script code</value>
  </data>
  <data name="ERR_ImplicitlyTypedArrayNoBestType" xml:space="preserve">
    <value>No best type found for implicitly-typed array</value>
  </data>
  <data name="ERR_AnonymousTypePropertyAssignedBadValue" xml:space="preserve">
    <value>Cannot assign '{0}' to anonymous type property</value>
  </data>
  <data name="ERR_ExpressionTreeContainsBaseAccess" xml:space="preserve">
    <value>An expression tree may not contain a base access</value>
  </data>
  <data name="ERR_ExpressionTreeContainsTupleBinOp" xml:space="preserve">
    <value>An expression tree may not contain a tuple == or != operator</value>
  </data>
  <data name="ERR_ExpressionTreeContainsAssignment" xml:space="preserve">
    <value>An expression tree may not contain an assignment operator</value>
  </data>
  <data name="ERR_AnonymousTypeDuplicatePropertyName" xml:space="preserve">
    <value>An anonymous type cannot have multiple properties with the same name</value>
  </data>
  <data name="ERR_StatementLambdaToExpressionTree" xml:space="preserve">
    <value>A lambda expression with a statement body cannot be converted to an expression tree</value>
  </data>
  <data name="ERR_ExpressionTreeMustHaveDelegate" xml:space="preserve">
    <value>Cannot convert lambda to an expression tree whose type argument '{0}' is not a delegate type</value>
  </data>
  <data name="ERR_AnonymousTypeNotAvailable" xml:space="preserve">
    <value>Cannot use anonymous type in a constant expression</value>
  </data>
  <data name="ERR_LambdaInIsAs" xml:space="preserve">
    <value>The first operand of an 'is' or 'as' operator may not be a lambda expression, anonymous method, or method group.</value>
  </data>
  <data name="ERR_TypelessTupleInAs" xml:space="preserve">
    <value>The first operand of an 'as' operator may not be a tuple literal without a natural type.</value>
  </data>
  <data name="ERR_ExpressionTreeContainsMultiDimensionalArrayInitializer" xml:space="preserve">
    <value>An expression tree may not contain a multidimensional array initializer</value>
  </data>
  <data name="ERR_MissingArgument" xml:space="preserve">
    <value>Argument missing</value>
  </data>
  <data name="ERR_VariableUsedBeforeDeclaration" xml:space="preserve">
    <value>Cannot use local variable '{0}' before it is declared</value>
  </data>
  <data name="ERR_RecursivelyTypedVariable" xml:space="preserve">
    <value>Type of '{0}' cannot be inferred since its initializer directly or indirectly refers to the definition.</value>
  </data>
  <data name="ERR_UnassignedThisAutoProperty" xml:space="preserve">
    <value>Auto-implemented property '{0}' must be fully assigned before control is returned to the caller.</value>
  </data>
  <data name="ERR_VariableUsedBeforeDeclarationAndHidesField" xml:space="preserve">
    <value>Cannot use local variable '{0}' before it is declared. The declaration of the local variable hides the field '{1}'.</value>
  </data>
  <data name="ERR_ExpressionTreeContainsBadCoalesce" xml:space="preserve">
    <value>An expression tree lambda may not contain a coalescing operator with a null or default literal left-hand side</value>
  </data>
  <data name="ERR_IdentifierExpected" xml:space="preserve">
    <value>Identifier expected</value>
  </data>
  <data name="ERR_SemicolonExpected" xml:space="preserve">
    <value>; expected</value>
  </data>
  <data name="ERR_SyntaxError" xml:space="preserve">
    <value>Syntax error, '{0}' expected</value>
  </data>
  <data name="ERR_DuplicateModifier" xml:space="preserve">
    <value>Duplicate '{0}' modifier</value>
  </data>
  <data name="ERR_DuplicateAccessor" xml:space="preserve">
    <value>Property accessor already defined</value>
  </data>
  <data name="ERR_IntegralTypeExpected" xml:space="preserve">
    <value>Type byte, sbyte, short, ushort, int, uint, long, or ulong expected</value>
  </data>
  <data name="ERR_IllegalEscape" xml:space="preserve">
    <value>Unrecognized escape sequence</value>
  </data>
  <data name="ERR_NewlineInConst" xml:space="preserve">
    <value>Newline in constant</value>
  </data>
  <data name="ERR_EmptyCharConst" xml:space="preserve">
    <value>Empty character literal</value>
  </data>
  <data name="ERR_TooManyCharsInConst" xml:space="preserve">
    <value>Too many characters in character literal</value>
  </data>
  <data name="ERR_InvalidNumber" xml:space="preserve">
    <value>Invalid number</value>
  </data>
  <data name="ERR_GetOrSetExpected" xml:space="preserve">
    <value>A get or set accessor expected</value>
  </data>
  <data name="ERR_ClassTypeExpected" xml:space="preserve">
    <value>An object, string, or class type expected</value>
  </data>
  <data name="ERR_NamedArgumentExpected" xml:space="preserve">
    <value>Named attribute argument expected</value>
  </data>
  <data name="ERR_TooManyCatches" xml:space="preserve">
    <value>Catch clauses cannot follow the general catch clause of a try statement</value>
  </data>
  <data name="ERR_ThisOrBaseExpected" xml:space="preserve">
    <value>Keyword 'this' or 'base' expected</value>
  </data>
  <data name="ERR_OvlUnaryOperatorExpected" xml:space="preserve">
    <value>Overloadable unary operator expected</value>
  </data>
  <data name="ERR_OvlBinaryOperatorExpected" xml:space="preserve">
    <value>Overloadable binary operator expected</value>
  </data>
  <data name="ERR_IntOverflow" xml:space="preserve">
    <value>Integral constant is too large</value>
  </data>
  <data name="ERR_EOFExpected" xml:space="preserve">
    <value>Type or namespace definition, or end-of-file expected</value>
  </data>
  <data name="ERR_GlobalDefinitionOrStatementExpected" xml:space="preserve">
    <value>Member definition, statement, or end-of-file expected</value>
  </data>
  <data name="ERR_BadEmbeddedStmt" xml:space="preserve">
    <value>Embedded statement cannot be a declaration or labeled statement</value>
  </data>
  <data name="ERR_PPDirectiveExpected" xml:space="preserve">
    <value>Preprocessor directive expected</value>
  </data>
  <data name="ERR_EndOfPPLineExpected" xml:space="preserve">
    <value>Single-line comment or end-of-line expected</value>
  </data>
  <data name="ERR_CloseParenExpected" xml:space="preserve">
    <value>) expected</value>
  </data>
  <data name="ERR_EndifDirectiveExpected" xml:space="preserve">
    <value>#endif directive expected</value>
  </data>
  <data name="ERR_UnexpectedDirective" xml:space="preserve">
    <value>Unexpected preprocessor directive</value>
  </data>
  <data name="ERR_ErrorDirective" xml:space="preserve">
    <value>#error: '{0}'</value>
  </data>
  <data name="WRN_WarningDirective" xml:space="preserve">
    <value>#warning: '{0}'</value>
  </data>
  <data name="WRN_WarningDirective_Title" xml:space="preserve">
    <value>#warning directive</value>
  </data>
  <data name="ERR_TypeExpected" xml:space="preserve">
    <value>Type expected</value>
  </data>
  <data name="ERR_PPDefFollowsToken" xml:space="preserve">
    <value>Cannot define/undefine preprocessor symbols after first token in file</value>
  </data>
  <data name="ERR_PPReferenceFollowsToken" xml:space="preserve">
    <value>Cannot use #r after first token in file</value>
  </data>
  <data name="ERR_OpenEndedComment" xml:space="preserve">
    <value>End-of-file found, '*/' expected</value>
  </data>
  <data name="ERR_Merge_conflict_marker_encountered" xml:space="preserve">
    <value>Merge conflict marker encountered</value>
  </data>
  <data name="ERR_NoRefOutWhenRefOnly" xml:space="preserve">
    <value>Do not use refout when using refonly.</value>
  </data>
  <data name="ERR_NoNetModuleOutputWhenRefOutOrRefOnly" xml:space="preserve">
    <value>Cannot compile net modules when using /refout or /refonly.</value>
  </data>
  <data name="ERR_OvlOperatorExpected" xml:space="preserve">
    <value>Overloadable operator expected</value>
  </data>
  <data name="ERR_EndRegionDirectiveExpected" xml:space="preserve">
    <value>#endregion directive expected</value>
  </data>
  <data name="ERR_UnterminatedStringLit" xml:space="preserve">
    <value>Unterminated string literal</value>
  </data>
  <data name="ERR_BadDirectivePlacement" xml:space="preserve">
    <value>Preprocessor directives must appear as the first non-whitespace character on a line</value>
  </data>
  <data name="ERR_IdentifierExpectedKW" xml:space="preserve">
    <value>Identifier expected; '{1}' is a keyword</value>
  </data>
  <data name="ERR_SemiOrLBraceExpected" xml:space="preserve">
    <value>{ or ; expected</value>
  </data>
  <data name="ERR_MultiTypeInDeclaration" xml:space="preserve">
    <value>Cannot use more than one type in a for, using, fixed, or declaration statement</value>
  </data>
  <data name="ERR_AddOrRemoveExpected" xml:space="preserve">
    <value>An add or remove accessor expected</value>
  </data>
  <data name="ERR_UnexpectedCharacter" xml:space="preserve">
    <value>Unexpected character '{0}'</value>
  </data>
  <data name="ERR_UnexpectedToken" xml:space="preserve">
    <value>Unexpected token '{0}'</value>
  </data>
  <data name="ERR_ProtectedInStatic" xml:space="preserve">
    <value>'{0}': static classes cannot contain protected members</value>
  </data>
  <data name="WRN_UnreachableGeneralCatch" xml:space="preserve">
    <value>A previous catch clause already catches all exceptions. All non-exceptions thrown will be wrapped in a System.Runtime.CompilerServices.RuntimeWrappedException.</value>
  </data>
  <data name="WRN_UnreachableGeneralCatch_Title" xml:space="preserve">
    <value>A previous catch clause already catches all exceptions</value>
  </data>
  <data name="WRN_UnreachableGeneralCatch_Description" xml:space="preserve">
    <value>This warning is caused when a catch() block has no specified exception type after a catch (System.Exception e) block. The warning advises that the catch() block will not catch any exceptions.

A catch() block after a catch (System.Exception e) block can catch non-CLS exceptions if the RuntimeCompatibilityAttribute is set to false in the AssemblyInfo.cs file: [assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]. If this attribute is not set explicitly to false, all thrown non-CLS exceptions are wrapped as Exceptions and the catch (System.Exception e) block catches them.</value>
  </data>
  <data name="ERR_IncrementLvalueExpected" xml:space="preserve">
    <value>The operand of an increment or decrement operator must be a variable, property or indexer</value>
  </data>
  <data name="ERR_NoSuchMemberOrExtension" xml:space="preserve">
    <value>'{0}' does not contain a definition for '{1}' and no extension method '{1}' accepting a first argument of type '{0}' could be found (are you missing a using directive or an assembly reference?)</value>
  </data>
  <data name="ERR_NoSuchMemberOrExtensionNeedUsing" xml:space="preserve">
    <value>'{0}' does not contain a definition for '{1}' and no extension method '{1}' accepting a first argument of type '{0}' could be found (are you missing a using directive for '{2}'?)</value>
  </data>
  <data name="ERR_BadThisParam" xml:space="preserve">
    <value>Method '{0}' has a parameter modifier 'this' which is not on the first parameter</value>
  </data>
  <data name="ERR_BadParameterModifiers" xml:space="preserve">
    <value> The parameter modifier '{0}' cannot be used with '{1}'</value>
  </data>
  <data name="ERR_BadTypeforThis" xml:space="preserve">
    <value>The first parameter of an extension method cannot be of type '{0}'</value>
  </data>
  <data name="ERR_BadParamModThis" xml:space="preserve">
    <value>A parameter array cannot be used with 'this' modifier on an extension method</value>
  </data>
  <data name="ERR_BadExtensionMeth" xml:space="preserve">
    <value>Extension method must be static</value>
  </data>
  <data name="ERR_BadExtensionAgg" xml:space="preserve">
    <value>Extension method must be defined in a non-generic static class</value>
  </data>
  <data name="ERR_DupParamMod" xml:space="preserve">
    <value>A parameter can only have one '{0}' modifier</value>
  </data>
  <data name="ERR_ExtensionMethodsDecl" xml:space="preserve">
    <value>Extension methods must be defined in a top level static class; {0} is a nested class</value>
  </data>
  <data name="ERR_ExtensionAttrNotFound" xml:space="preserve">
    <value>Cannot define a new extension method because the compiler required type '{0}' cannot be found. Are you missing a reference to System.Core.dll?</value>
  </data>
  <data name="ERR_ExplicitExtension" xml:space="preserve">
    <value>Do not use 'System.Runtime.CompilerServices.ExtensionAttribute'. Use the 'this' keyword instead.</value>
  </data>
  <data name="ERR_ExplicitDynamicAttr" xml:space="preserve">
    <value>Do not use 'System.Runtime.CompilerServices.DynamicAttribute'. Use the 'dynamic' keyword instead.</value>
  </data>
  <data name="ERR_NoDynamicPhantomOnBaseCtor" xml:space="preserve">
    <value>The constructor call needs to be dynamically dispatched, but cannot be because it is part of a constructor initializer. Consider casting the dynamic arguments.</value>
  </data>
  <data name="ERR_ValueTypeExtDelegate" xml:space="preserve">
    <value>Extension method '{0}' defined on value type '{1}' cannot be used to create delegates</value>
  </data>
  <data name="ERR_BadArgCount" xml:space="preserve">
    <value>No overload for method '{0}' takes {1} arguments</value>
  </data>
  <data name="ERR_BadArgType" xml:space="preserve">
    <value>Argument {0}: cannot convert from '{1}' to '{2}'</value>
  </data>
  <data name="ERR_NoSourceFile" xml:space="preserve">
    <value>Source file '{0}' could not be opened -- {1}</value>
  </data>
  <data name="ERR_CantRefResource" xml:space="preserve">
    <value>Cannot link resource files when building a module</value>
  </data>
  <data name="ERR_ResourceNotUnique" xml:space="preserve">
    <value>Resource identifier '{0}' has already been used in this assembly</value>
  </data>
  <data name="ERR_ResourceFileNameNotUnique" xml:space="preserve">
    <value>Each linked resource and module must have a unique filename. Filename '{0}' is specified more than once in this assembly</value>
  </data>
  <data name="ERR_ImportNonAssembly" xml:space="preserve">
    <value>The referenced file '{0}' is not an assembly</value>
  </data>
  <data name="ERR_RefLvalueExpected" xml:space="preserve">
    <value>A ref or out value must be an assignable variable</value>
  </data>
  <data name="ERR_BaseInStaticMeth" xml:space="preserve">
    <value>Keyword 'base' is not available in a static method</value>
  </data>
  <data name="ERR_BaseInBadContext" xml:space="preserve">
    <value>Keyword 'base' is not available in the current context</value>
  </data>
  <data name="ERR_RbraceExpected" xml:space="preserve">
    <value>} expected</value>
  </data>
  <data name="ERR_LbraceExpected" xml:space="preserve">
    <value>{ expected</value>
  </data>
  <data name="ERR_InExpected" xml:space="preserve">
    <value>'in' expected</value>
  </data>
  <data name="ERR_InvalidPreprocExpr" xml:space="preserve">
    <value>Invalid preprocessor expression</value>
  </data>
  <data name="ERR_InvalidMemberDecl" xml:space="preserve">
    <value>Invalid token '{0}' in class, struct, or interface member declaration</value>
  </data>
  <data name="ERR_MemberNeedsType" xml:space="preserve">
    <value>Method must have a return type</value>
  </data>
  <data name="ERR_BadBaseType" xml:space="preserve">
    <value>Invalid base type</value>
  </data>
  <data name="WRN_EmptySwitch" xml:space="preserve">
    <value>Empty switch block</value>
  </data>
  <data name="WRN_EmptySwitch_Title" xml:space="preserve">
    <value>Empty switch block</value>
  </data>
  <data name="ERR_ExpectedEndTry" xml:space="preserve">
    <value>Expected catch or finally</value>
  </data>
  <data name="ERR_InvalidExprTerm" xml:space="preserve">
    <value>Invalid expression term '{0}'</value>
  </data>
  <data name="ERR_BadNewExpr" xml:space="preserve">
    <value>A new expression requires (), [], or {} after type</value>
  </data>
  <data name="ERR_NoNamespacePrivate" xml:space="preserve">
    <value>Elements defined in a namespace cannot be explicitly declared as private, protected, protected internal, or private protected</value>
  </data>
  <data name="ERR_BadVarDecl" xml:space="preserve">
    <value>Expected ; or = (cannot specify constructor arguments in declaration)</value>
  </data>
  <data name="ERR_UsingAfterElements" xml:space="preserve">
    <value>A using clause must precede all other elements defined in the namespace except extern alias declarations</value>
  </data>
  <data name="ERR_BadBinOpArgs" xml:space="preserve">
    <value>Overloaded binary operator '{0}' takes two parameters</value>
  </data>
  <data name="ERR_BadUnOpArgs" xml:space="preserve">
    <value>Overloaded unary operator '{0}' takes one parameter</value>
  </data>
  <data name="ERR_NoVoidParameter" xml:space="preserve">
    <value>Invalid parameter type 'void'</value>
  </data>
  <data name="ERR_DuplicateAlias" xml:space="preserve">
    <value>The using alias '{0}' appeared previously in this namespace</value>
  </data>
  <data name="ERR_BadProtectedAccess" xml:space="preserve">
    <value>Cannot access protected member '{0}' via a qualifier of type '{1}'; the qualifier must be of type '{2}' (or derived from it)</value>
  </data>
  <data name="ERR_AddModuleAssembly" xml:space="preserve">
    <value>'{0}' cannot be added to this assembly because it already is an assembly</value>
  </data>
  <data name="ERR_BindToBogusProp2" xml:space="preserve">
    <value>Property, indexer, or event '{0}' is not supported by the language; try directly calling accessor methods '{1}' or '{2}'</value>
  </data>
  <data name="ERR_BindToBogusProp1" xml:space="preserve">
    <value>Property, indexer, or event '{0}' is not supported by the language; try directly calling accessor method '{1}'</value>
  </data>
  <data name="ERR_NoVoidHere" xml:space="preserve">
    <value>Keyword 'void' cannot be used in this context</value>
  </data>
  <data name="ERR_IndexerNeedsParam" xml:space="preserve">
    <value>Indexers must have at least one parameter</value>
  </data>
  <data name="ERR_BadArraySyntax" xml:space="preserve">
    <value>Array type specifier, [], must appear before parameter name</value>
  </data>
  <data name="ERR_BadOperatorSyntax" xml:space="preserve">
    <value>Declaration is not valid; use '{0} operator &lt;dest-type&gt; (...' instead</value>
  </data>
  <data name="ERR_MainClassNotFound" xml:space="preserve">
    <value>Could not find '{0}' specified for Main method</value>
  </data>
  <data name="ERR_MainClassNotClass" xml:space="preserve">
    <value>'{0}' specified for Main method must be a valid non-generic class or struct</value>
  </data>
  <data name="ERR_NoMainInClass" xml:space="preserve">
    <value>'{0}' does not have a suitable static Main method</value>
  </data>
  <data name="ERR_MainClassIsImport" xml:space="preserve">
    <value>Cannot use '{0}' for Main method because it is imported</value>
  </data>
  <data name="ERR_OutputNeedsName" xml:space="preserve">
    <value>Outputs without source must have the /out option specified</value>
  </data>
  <data name="ERR_CantHaveWin32ResAndManifest" xml:space="preserve">
    <value>Conflicting options specified: Win32 resource file; Win32 manifest</value>
  </data>
  <data name="ERR_CantHaveWin32ResAndIcon" xml:space="preserve">
    <value>Conflicting options specified: Win32 resource file; Win32 icon</value>
  </data>
  <data name="ERR_CantReadResource" xml:space="preserve">
    <value>Error reading resource '{0}' -- '{1}'</value>
  </data>
  <data name="ERR_DocFileGen" xml:space="preserve">
    <value>Error writing to XML documentation file: {0}</value>
  </data>
  <data name="WRN_XMLParseError" xml:space="preserve">
    <value>XML comment has badly formed XML -- '{0}'</value>
  </data>
  <data name="WRN_XMLParseError_Title" xml:space="preserve">
    <value>XML comment has badly formed XML</value>
  </data>
  <data name="WRN_DuplicateParamTag" xml:space="preserve">
    <value>XML comment has a duplicate param tag for '{0}'</value>
  </data>
  <data name="WRN_DuplicateParamTag_Title" xml:space="preserve">
    <value>XML comment has a duplicate param tag</value>
  </data>
  <data name="WRN_UnmatchedParamTag" xml:space="preserve">
    <value>XML comment has a param tag for '{0}', but there is no parameter by that name</value>
  </data>
  <data name="WRN_UnmatchedParamTag_Title" xml:space="preserve">
    <value>XML comment has a param tag, but there is no parameter by that name</value>
  </data>
  <data name="WRN_UnmatchedParamRefTag" xml:space="preserve">
    <value>XML comment on '{1}' has a paramref tag for '{0}', but there is no parameter by that name</value>
  </data>
  <data name="WRN_UnmatchedParamRefTag_Title" xml:space="preserve">
    <value>XML comment has a paramref tag, but there is no parameter by that name</value>
  </data>
  <data name="WRN_MissingParamTag" xml:space="preserve">
    <value>Parameter '{0}' has no matching param tag in the XML comment for '{1}' (but other parameters do)</value>
  </data>
  <data name="WRN_MissingParamTag_Title" xml:space="preserve">
    <value>Parameter has no matching param tag in the XML comment (but other parameters do)</value>
  </data>
  <data name="WRN_BadXMLRef" xml:space="preserve">
    <value>XML comment has cref attribute '{0}' that could not be resolved</value>
  </data>
  <data name="WRN_BadXMLRef_Title" xml:space="preserve">
    <value>XML comment has cref attribute that could not be resolved</value>
  </data>
  <data name="ERR_BadStackAllocExpr" xml:space="preserve">
    <value>A stackalloc expression requires [] after type</value>
  </data>
  <data name="ERR_InvalidLineNumber" xml:space="preserve">
    <value>The line number specified for #line directive is missing or invalid</value>
  </data>
  <data name="ERR_MissingPPFile" xml:space="preserve">
    <value>Quoted file name, single-line comment or end-of-line expected</value>
  </data>
  <data name="ERR_ExpectedPPFile" xml:space="preserve">
    <value>Quoted file name expected</value>
  </data>
  <data name="ERR_ReferenceDirectiveOnlyAllowedInScripts" xml:space="preserve">
    <value>#r is only allowed in scripts</value>
  </data>
  <data name="ERR_ForEachMissingMember" xml:space="preserve">
    <value>foreach statement cannot operate on variables of type '{0}' because '{0}' does not contain a public instance definition for '{1}'</value>
  </data>
  <data name="WRN_BadXMLRefParamType" xml:space="preserve">
    <value>Invalid type for parameter {0} in XML comment cref attribute: '{1}'</value>
  </data>
  <data name="WRN_BadXMLRefParamType_Title" xml:space="preserve">
    <value>Invalid type for parameter in XML comment cref attribute</value>
  </data>
  <data name="WRN_BadXMLRefReturnType" xml:space="preserve">
    <value>Invalid return type in XML comment cref attribute</value>
  </data>
  <data name="WRN_BadXMLRefReturnType_Title" xml:space="preserve">
    <value>Invalid return type in XML comment cref attribute</value>
  </data>
  <data name="ERR_BadWin32Res" xml:space="preserve">
    <value>Error reading Win32 resources -- {0}</value>
  </data>
  <data name="WRN_BadXMLRefSyntax" xml:space="preserve">
    <value>XML comment has syntactically incorrect cref attribute '{0}'</value>
  </data>
  <data name="WRN_BadXMLRefSyntax_Title" xml:space="preserve">
    <value>XML comment has syntactically incorrect cref attribute</value>
  </data>
  <data name="ERR_BadModifierLocation" xml:space="preserve">
    <value>Member modifier '{0}' must precede the member type and name</value>
  </data>
  <data name="ERR_MissingArraySize" xml:space="preserve">
    <value>Array creation must have array size or array initializer</value>
  </data>
  <data name="WRN_UnprocessedXMLComment" xml:space="preserve">
    <value>XML comment is not placed on a valid language element</value>
  </data>
  <data name="WRN_UnprocessedXMLComment_Title" xml:space="preserve">
    <value>XML comment is not placed on a valid language element</value>
  </data>
  <data name="WRN_FailedInclude" xml:space="preserve">
    <value>Unable to include XML fragment '{1}' of file '{0}' -- {2}</value>
  </data>
  <data name="WRN_FailedInclude_Title" xml:space="preserve">
    <value>Unable to include XML fragment</value>
  </data>
  <data name="WRN_InvalidInclude" xml:space="preserve">
    <value>Invalid XML include element -- {0}</value>
  </data>
  <data name="WRN_InvalidInclude_Title" xml:space="preserve">
    <value>Invalid XML include element</value>
  </data>
  <data name="WRN_MissingXMLComment" xml:space="preserve">
    <value>Missing XML comment for publicly visible type or member '{0}'</value>
  </data>
  <data name="WRN_MissingXMLComment_Title" xml:space="preserve">
    <value>Missing XML comment for publicly visible type or member</value>
  </data>
  <data name="WRN_MissingXMLComment_Description" xml:space="preserve">
    <value>The /doc compiler option was specified, but one or more constructs did not have comments.</value>
  </data>
  <data name="WRN_XMLParseIncludeError" xml:space="preserve">
    <value>Badly formed XML in included comments file -- '{0}'</value>
  </data>
  <data name="WRN_XMLParseIncludeError_Title" xml:space="preserve">
    <value>Badly formed XML in included comments file</value>
  </data>
  <data name="ERR_BadDelArgCount" xml:space="preserve">
    <value>Delegate '{0}' does not take {1} arguments</value>
  </data>
  <data name="ERR_UnexpectedSemicolon" xml:space="preserve">
    <value>Semicolon after method or accessor block is not valid</value>
  </data>
  <data name="ERR_MethodReturnCantBeRefAny" xml:space="preserve">
    <value>Method or delegate cannot return type '{0}'</value>
  </data>
  <data name="ERR_CompileCancelled" xml:space="preserve">
    <value>Compilation cancelled by user</value>
  </data>
  <data name="ERR_MethodArgCantBeRefAny" xml:space="preserve">
    <value>Cannot make reference to variable of type '{0}'</value>
  </data>
  <data name="ERR_AssgReadonlyLocal" xml:space="preserve">
    <value>Cannot assign to '{0}' because it is read-only</value>
  </data>
  <data name="ERR_RefReadonlyLocal" xml:space="preserve">
    <value>Cannot use '{0}' as a ref or out value because it is read-only</value>
  </data>
  <data name="ERR_CantUseRequiredAttribute" xml:space="preserve">
    <value>The RequiredAttribute attribute is not permitted on C# types</value>
  </data>
  <data name="ERR_NoModifiersOnAccessor" xml:space="preserve">
    <value>Modifiers cannot be placed on event accessor declarations</value>
  </data>
  <data name="ERR_ParamsCantBeWithModifier" xml:space="preserve">
    <value>The params parameter cannot be declared as {0}</value>
  </data>
  <data name="ERR_ReturnNotLValue" xml:space="preserve">
    <value>Cannot modify the return value of '{0}' because it is not a variable</value>
  </data>
  <data name="ERR_MissingCoClass" xml:space="preserve">
    <value>The managed coclass wrapper class '{0}' for interface '{1}' cannot be found (are you missing an assembly reference?)</value>
  </data>
  <data name="ERR_AmbiguousAttribute" xml:space="preserve">
    <value>'{0}' is ambiguous between '{1}' and '{2}'; use either '@{0}' or '{0}Attribute'</value>
  </data>
  <data name="ERR_BadArgExtraRef" xml:space="preserve">
    <value>Argument {0} may not be passed with the '{1}' keyword</value>
  </data>
  <data name="WRN_CmdOptionConflictsSource" xml:space="preserve">
    <value>Option '{0}' overrides attribute '{1}' given in a source file or added module</value>
  </data>
  <data name="WRN_CmdOptionConflictsSource_Title" xml:space="preserve">
    <value>Option overrides attribute given in a source file or added module</value>
  </data>
  <data name="WRN_CmdOptionConflictsSource_Description" xml:space="preserve">
    <value>This warning occurs if the assembly attributes AssemblyKeyFileAttribute or AssemblyKeyNameAttribute found in source conflict with the /keyfile or /keycontainer command line option or key file name or key container specified in the Project Properties.</value>
  </data>
  <data name="ERR_BadCompatMode" xml:space="preserve">
    <value>Invalid option '{0}' for /langversion. Use '/langversion:?' to list supported values.</value>
  </data>
  <data name="ERR_DelegateOnConditional" xml:space="preserve">
    <value>Cannot create delegate with '{0}' because it or a method it overrides has a Conditional attribute</value>
  </data>
  <data name="ERR_CantMakeTempFile" xml:space="preserve">
    <value>Cannot create temporary file -- {0}</value>
  </data>
  <data name="ERR_BadArgRef" xml:space="preserve">
    <value>Argument {0} must be passed with the '{1}' keyword</value>
  </data>
  <data name="ERR_YieldInAnonMeth" xml:space="preserve">
    <value>The yield statement cannot be used inside an anonymous method or lambda expression</value>
  </data>
  <data name="ERR_ReturnInIterator" xml:space="preserve">
    <value>Cannot return a value from an iterator. Use the yield return statement to return a value, or yield break to end the iteration.</value>
  </data>
  <data name="ERR_BadIteratorArgType" xml:space="preserve">
    <value>Iterators cannot have ref or out parameters</value>
  </data>
  <data name="ERR_BadIteratorReturn" xml:space="preserve">
    <value>The body of '{0}' cannot be an iterator block because '{1}' is not an iterator interface type</value>
  </data>
  <data name="ERR_BadYieldInFinally" xml:space="preserve">
    <value>Cannot yield in the body of a finally clause</value>
  </data>
  <data name="ERR_BadYieldInTryOfCatch" xml:space="preserve">
    <value>Cannot yield a value in the body of a try block with a catch clause</value>
  </data>
  <data name="ERR_EmptyYield" xml:space="preserve">
    <value>Expression expected after yield return</value>
  </data>
  <data name="ERR_AnonDelegateCantUse" xml:space="preserve">
    <value>Cannot use ref, out, or in parameter '{0}' inside an anonymous method, lambda expression, query expression, or local function</value>
  </data>
  <data name="ERR_IllegalInnerUnsafe" xml:space="preserve">
    <value>Unsafe code may not appear in iterators</value>
  </data>
  <data name="ERR_BadYieldInCatch" xml:space="preserve">
    <value>Cannot yield a value in the body of a catch clause</value>
  </data>
  <data name="ERR_BadDelegateLeave" xml:space="preserve">
    <value>Control cannot leave the body of an anonymous method or lambda expression</value>
  </data>
  <data name="WRN_IllegalPragma" xml:space="preserve">
    <value>Unrecognized #pragma directive</value>
  </data>
  <data name="WRN_IllegalPragma_Title" xml:space="preserve">
    <value>Unrecognized #pragma directive</value>
  </data>
  <data name="WRN_IllegalPPWarning" xml:space="preserve">
    <value>Expected disable or restore</value>
  </data>
  <data name="WRN_IllegalPPWarning_Title" xml:space="preserve">
    <value>Expected disable or restore after #pragma warning</value>
  </data>
  <data name="WRN_BadRestoreNumber" xml:space="preserve">
    <value>Cannot restore warning 'CS{0}' because it was disabled globally</value>
  </data>
  <data name="WRN_BadRestoreNumber_Title" xml:space="preserve">
    <value>Cannot restore warning because it was disabled globally</value>
  </data>
  <data name="ERR_VarargsIterator" xml:space="preserve">
    <value>__arglist is not allowed in the parameter list of iterators</value>
  </data>
  <data name="ERR_UnsafeIteratorArgType" xml:space="preserve">
    <value>Iterators cannot have unsafe parameters or yield types</value>
  </data>
  <data name="ERR_BadCoClassSig" xml:space="preserve">
    <value>The managed coclass wrapper class signature '{0}' for interface '{1}' is not a valid class name signature</value>
  </data>
  <data name="ERR_MultipleIEnumOfT" xml:space="preserve">
    <value>foreach statement cannot operate on variables of type '{0}' because it implements multiple instantiations of '{1}'; try casting to a specific interface instantiation</value>
  </data>
  <data name="ERR_FixedDimsRequired" xml:space="preserve">
    <value>A fixed size buffer field must have the array size specifier after the field name</value>
  </data>
  <data name="ERR_FixedNotInStruct" xml:space="preserve">
    <value>Fixed size buffer fields may only be members of structs</value>
  </data>
  <data name="ERR_AnonymousReturnExpected" xml:space="preserve">
    <value>Not all code paths return a value in {0} of type '{1}'</value>
  </data>
  <data name="WRN_NonECMAFeature" xml:space="preserve">
    <value>Feature '{0}' is not part of the standardized ISO C# language specification, and may not be accepted by other compilers</value>
  </data>
  <data name="WRN_NonECMAFeature_Title" xml:space="preserve">
    <value>Feature is not part of the standardized ISO C# language specification, and may not be accepted by other compilers</value>
  </data>
  <data name="ERR_ExpectedVerbatimLiteral" xml:space="preserve">
    <value>Keyword, identifier, or string expected after verbatim specifier: @</value>
  </data>
  <data name="ERR_RefReadonly" xml:space="preserve">
    <value>A readonly field cannot be used as a ref or out value (except in a constructor)</value>
  </data>
  <data name="ERR_RefReadonly2" xml:space="preserve">
    <value>Members of readonly field '{0}' cannot be used as a ref or out value (except in a constructor)</value>
  </data>
  <data name="ERR_AssgReadonly" xml:space="preserve">
    <value>A readonly field cannot be assigned to (except in a constructor or a variable initializer)</value>
  </data>
  <data name="ERR_AssgReadonly2" xml:space="preserve">
    <value>Members of readonly field '{0}' cannot be modified (except in a constructor or a variable initializer)</value>
  </data>
  <data name="ERR_RefReadonlyNotField" xml:space="preserve">
    <value>Cannot use {0} '{1}' as a ref or out value because it is a readonly variable</value>
  </data>
  <data name="ERR_RefReadonlyNotField2" xml:space="preserve">
    <value>Members of {0} '{1}' cannot be used as a ref or out value because it is a readonly variable</value>
  </data>
  <data name="ERR_AssignReadonlyNotField" xml:space="preserve">
    <value>Cannot assign to {0} '{1}' because it is a readonly variable</value>
  </data>
  <data name="ERR_AssignReadonlyNotField2" xml:space="preserve">
    <value>Cannot assign to a member of {0} '{1}' because it is a readonly variable</value>
  </data>
  <data name="ERR_RefReturnReadonlyNotField" xml:space="preserve">
    <value>Cannot return {0} '{1}' by writable reference because it is a readonly variable</value>
  </data>
  <data name="ERR_RefReturnReadonlyNotField2" xml:space="preserve">
    <value>Members of {0} '{1}' cannot be returned by writable reference because it is a readonly variable</value>
  </data>
  <data name="ERR_AssgReadonlyStatic2" xml:space="preserve">
    <value>Fields of static readonly field '{0}' cannot be assigned to (except in a static constructor or a variable initializer)</value>
  </data>
  <data name="ERR_RefReadonlyStatic2" xml:space="preserve">
    <value>Fields of static readonly field '{0}' cannot be used as a ref or out value (except in a static constructor)</value>
  </data>
  <data name="ERR_AssgReadonlyLocal2Cause" xml:space="preserve">
    <value>Cannot modify members of '{0}' because it is a '{1}'</value>
  </data>
  <data name="ERR_RefReadonlyLocal2Cause" xml:space="preserve">
    <value>Cannot use fields of '{0}' as a ref or out value because it is a '{1}'</value>
  </data>
  <data name="ERR_AssgReadonlyLocalCause" xml:space="preserve">
    <value>Cannot assign to '{0}' because it is a '{1}'</value>
  </data>
  <data name="ERR_RefReadonlyLocalCause" xml:space="preserve">
    <value>Cannot use '{0}' as a ref or out value because it is a '{1}'</value>
  </data>
  <data name="WRN_ErrorOverride" xml:space="preserve">
    <value>{0}. See also error CS{1}.</value>
  </data>
  <data name="WRN_ErrorOverride_Title" xml:space="preserve">
    <value>Warning is overriding an error</value>
  </data>
  <data name="WRN_ErrorOverride_Description" xml:space="preserve">
    <value>The compiler emits this warning when it overrides an error with a warning. For information about the problem, search for the error code mentioned.</value>
  </data>
  <data name="ERR_AnonMethToNonDel" xml:space="preserve">
    <value>Cannot convert {0} to type '{1}' because it is not a delegate type</value>
  </data>
  <data name="ERR_CantConvAnonMethParams" xml:space="preserve">
    <value>Cannot convert {0} to delegate type '{1}' because the parameter types do not match the delegate parameter types</value>
  </data>
  <data name="ERR_CantConvAnonMethReturns" xml:space="preserve">
    <value>Cannot convert {0} to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type</value>
  </data>
  <data name="ERR_BadAsyncReturnExpression" xml:space="preserve">
    <value>Since this is an async method, the return expression must be of type '{0}' rather than 'Task&lt;{0}&gt;'</value>
  </data>
  <data name="ERR_CantConvAsyncAnonFuncReturns" xml:space="preserve">
    <value>Cannot convert async {0} to delegate type '{1}'. An async {0} may return void, Task or Task&lt;T&gt;, none of which are convertible to '{1}'.</value>
  </data>
  <data name="ERR_IllegalFixedType" xml:space="preserve">
    <value>Fixed size buffer type must be one of the following: bool, byte, short, int, long, char, sbyte, ushort, uint, ulong, float or double</value>
  </data>
  <data name="ERR_FixedOverflow" xml:space="preserve">
    <value>Fixed size buffer of length {0} and type '{1}' is too big</value>
  </data>
  <data name="ERR_InvalidFixedArraySize" xml:space="preserve">
    <value>Fixed size buffers must have a length greater than zero</value>
  </data>
  <data name="ERR_FixedBufferNotFixed" xml:space="preserve">
    <value>You cannot use fixed size buffers contained in unfixed expressions. Try using the fixed statement.</value>
  </data>
  <data name="ERR_AttributeNotOnAccessor" xml:space="preserve">
    <value>Attribute '{0}' is not valid on property or event accessors. It is only valid on '{1}' declarations.</value>
  </data>
  <data name="WRN_InvalidSearchPathDir" xml:space="preserve">
    <value>Invalid search path '{0}' specified in '{1}' -- '{2}'</value>
  </data>
  <data name="WRN_InvalidSearchPathDir_Title" xml:space="preserve">
    <value>Invalid search path specified</value>
  </data>
  <data name="ERR_IllegalVarArgs" xml:space="preserve">
    <value>__arglist is not valid in this context</value>
  </data>
  <data name="ERR_IllegalParams" xml:space="preserve">
    <value>params is not valid in this context</value>
  </data>
  <data name="ERR_BadModifiersOnNamespace" xml:space="preserve">
    <value>A namespace declaration cannot have modifiers or attributes</value>
  </data>
  <data name="ERR_BadPlatformType" xml:space="preserve">
    <value>Invalid option '{0}' for /platform; must be anycpu, x86, Itanium, arm, arm64 or x64</value>
  </data>
  <data name="ERR_ThisStructNotInAnonMeth" xml:space="preserve">
    <value>Anonymous methods, lambda expressions, and query expressions inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression or query expression and using the local instead.</value>
  </data>
  <data name="ERR_NoConvToIDisp" xml:space="preserve">
    <value>'{0}': type used in a using statement must be implicitly convertible to 'System.IDisposable'</value>
  </data>
  <data name="ERR_BadParamRef" xml:space="preserve">
    <value>Parameter {0} must be declared with the '{1}' keyword</value>
  </data>
  <data name="ERR_BadParamExtraRef" xml:space="preserve">
    <value>Parameter {0} should not be declared with the '{1}' keyword</value>
  </data>
  <data name="ERR_BadParamType" xml:space="preserve">
    <value>Parameter {0} is declared as type '{1}{2}' but should be '{3}{4}'</value>
  </data>
  <data name="ERR_BadExternIdentifier" xml:space="preserve">
    <value>Invalid extern alias for '/reference'; '{0}' is not a valid identifier</value>
  </data>
  <data name="ERR_AliasMissingFile" xml:space="preserve">
    <value>Invalid reference alias option: '{0}=' -- missing filename</value>
  </data>
  <data name="ERR_GlobalExternAlias" xml:space="preserve">
    <value>You cannot redefine the global extern alias</value>
  </data>
  <data name="ERR_MissingTypeInSource" xml:space="preserve">
    <value>Reference to type '{0}' claims it is defined in this assembly, but it is not defined in source or any added modules</value>
  </data>
  <data name="ERR_MissingTypeInAssembly" xml:space="preserve">
    <value>Reference to type '{0}' claims it is defined in '{1}', but it could not be found</value>
  </data>
  <data name="WRN_MultiplePredefTypes" xml:space="preserve">
    <value>The predefined type '{0}' is defined in multiple assemblies in the global alias; using definition from '{1}'</value>
  </data>
  <data name="WRN_MultiplePredefTypes_Title" xml:space="preserve">
    <value>Predefined type is defined in multiple assemblies in the global alias</value>
  </data>
  <data name="WRN_MultiplePredefTypes_Description" xml:space="preserve">
    <value>This error occurs when a predefined system type such as System.Int32 is found in two assemblies. One way this can happen is if you are referencing mscorlib or System.Runtime.dll from two different places, such as trying to run two versions of the .NET Framework side-by-side.</value>
  </data>
  <data name="ERR_LocalCantBeFixedAndHoisted" xml:space="preserve">
    <value>Local '{0}' or its members cannot have their address taken and be used inside an anonymous method or lambda expression</value>
  </data>
  <data name="WRN_TooManyLinesForDebugger" xml:space="preserve">
    <value>Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect</value>
  </data>
  <data name="WRN_TooManyLinesForDebugger_Title" xml:space="preserve">
    <value>Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect</value>
  </data>
  <data name="ERR_CantConvAnonMethNoParams" xml:space="preserve">
    <value>Cannot convert anonymous method block without a parameter list to delegate type '{0}' because it has one or more out parameters</value>
  </data>
  <data name="ERR_ConditionalOnNonAttributeClass" xml:space="preserve">
    <value>Attribute '{0}' is only valid on methods or attribute classes</value>
  </data>
  <data name="WRN_CallOnNonAgileField" xml:space="preserve">
    <value>Accessing a member on '{0}' may cause a runtime exception because it is a field of a marshal-by-reference class</value>
  </data>
  <data name="WRN_CallOnNonAgileField_Title" xml:space="preserve">
    <value>Accessing a member on a field of a marshal-by-reference class may cause a runtime exception</value>
  </data>
  <data name="WRN_CallOnNonAgileField_Description" xml:space="preserve">
    <value>This warning occurs when you try to call a method, property, or indexer on a member of a class that derives from MarshalByRefObject, and the member is a value type. Objects that inherit from MarshalByRefObject are typically intended to be marshaled by reference across an application domain. If any code ever attempts to directly access the value-type member of such an object across an application domain, a runtime exception will occur. To resolve the warning, first copy the member into a local variable and call the method on that variable.</value>
  </data>
  <data name="WRN_BadWarningNumber" xml:space="preserve">
    <value>'{0}' is not a valid warning number</value>
  </data>
  <data name="WRN_BadWarningNumber_Title" xml:space="preserve">
    <value>Not a valid warning number</value>
  </data>
  <data name="WRN_BadWarningNumber_Description" xml:space="preserve">
    <value>A number that was passed to the #pragma warning preprocessor directive was not a valid warning number. Verify that the number represents a warning, not an error.</value>
  </data>
  <data name="WRN_InvalidNumber" xml:space="preserve">
    <value>Invalid number</value>
  </data>
  <data name="WRN_InvalidNumber_Title" xml:space="preserve">
    <value>Invalid number</value>
  </data>
  <data name="WRN_FileNameTooLong" xml:space="preserve">
    <value>Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename.</value>
  </data>
  <data name="WRN_FileNameTooLong_Title" xml:space="preserve">
    <value>Invalid filename specified for preprocessor directive</value>
  </data>
  <data name="WRN_IllegalPPChecksum" xml:space="preserve">
    <value>Invalid #pragma checksum syntax; should be #pragma checksum "filename" "{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}" "XXXX..."</value>
  </data>
  <data name="WRN_IllegalPPChecksum_Title" xml:space="preserve">
    <value>Invalid #pragma checksum syntax</value>
  </data>
  <data name="WRN_EndOfPPLineExpected" xml:space="preserve">
    <value>Single-line comment or end-of-line expected</value>
  </data>
  <data name="WRN_EndOfPPLineExpected_Title" xml:space="preserve">
    <value>Single-line comment or end-of-line expected after #pragma directive</value>
  </data>
  <data name="WRN_ConflictingChecksum" xml:space="preserve">
    <value>Different checksum values given for '{0}'</value>
  </data>
  <data name="WRN_ConflictingChecksum_Title" xml:space="preserve">
    <value>Different #pragma checksum values given</value>
  </data>
  <data name="WRN_InvalidAssemblyName" xml:space="preserve">
    <value>Assembly reference '{0}' is invalid and cannot be resolved</value>
  </data>
  <data name="WRN_InvalidAssemblyName_Title" xml:space="preserve">
    <value>Assembly reference is invalid and cannot be resolved</value>
  </data>
  <data name="WRN_InvalidAssemblyName_Description" xml:space="preserve">
    <value>This warning indicates that an attribute, such as InternalsVisibleToAttribute, was not specified correctly.</value>
  </data>
  <data name="WRN_UnifyReferenceMajMin" xml:space="preserve">
    <value>Assuming assembly reference '{0}' used by '{1}' matches identity '{2}' of '{3}', you may need to supply runtime policy</value>
  </data>
  <data name="WRN_UnifyReferenceMajMin_Title" xml:space="preserve">
    <value>Assuming assembly reference matches identity</value>
  </data>
  <data name="WRN_UnifyReferenceMajMin_Description" xml:space="preserve">
    <value>The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application's .config file, and you must provide the correct strong name of an assembly.</value>
  </data>
  <data name="WRN_UnifyReferenceBldRev" xml:space="preserve">
    <value>Assuming assembly reference '{0}' used by '{1}' matches identity '{2}' of '{3}', you may need to supply runtime policy</value>
  </data>
  <data name="WRN_UnifyReferenceBldRev_Title" xml:space="preserve">
    <value>Assuming assembly reference matches identity</value>
  </data>
  <data name="WRN_UnifyReferenceBldRev_Description" xml:space="preserve">
    <value>The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application's .config file, and you must provide the correct strong name of an assembly.</value>
  </data>
  <data name="ERR_DuplicateImport" xml:space="preserve">
    <value>Multiple assemblies with equivalent identity have been imported: '{0}' and '{1}'. Remove one of the duplicate references.</value>
  </data>
  <data name="ERR_DuplicateImportSimple" xml:space="preserve">
    <value>An assembly with the same simple name '{0}' has already been imported. Try removing one of the references (e.g. '{1}') or sign them to enable side-by-side.</value>
  </data>
  <data name="ERR_AssemblyMatchBadVersion" xml:space="preserve">
    <value>Assembly '{0}' with identity '{1}' uses '{2}' which has a higher version than referenced assembly '{3}' with identity '{4}'</value>
  </data>
  <data name="ERR_FixedNeedsLvalue" xml:space="preserve">
    <value>Fixed size buffers can only be accessed through locals or fields</value>
  </data>
  <data name="WRN_DuplicateTypeParamTag" xml:space="preserve">
    <value>XML comment has a duplicate typeparam tag for '{0}'</value>
  </data>
  <data name="WRN_DuplicateTypeParamTag_Title" xml:space="preserve">
    <value>XML comment has a duplicate typeparam tag</value>
  </data>
  <data name="WRN_UnmatchedTypeParamTag" xml:space="preserve">
    <value>XML comment has a typeparam tag for '{0}', but there is no type parameter by that name</value>
  </data>
  <data name="WRN_UnmatchedTypeParamTag_Title" xml:space="preserve">
    <value>XML comment has a typeparam tag, but there is no type parameter by that name</value>
  </data>
  <data name="WRN_UnmatchedTypeParamRefTag" xml:space="preserve">
    <value>XML comment on '{1}' has a typeparamref tag for '{0}', but there is no type parameter by that name</value>
  </data>
  <data name="WRN_UnmatchedTypeParamRefTag_Title" xml:space="preserve">
    <value>XML comment has a typeparamref tag, but there is no type parameter by that name</value>
  </data>
  <data name="WRN_MissingTypeParamTag" xml:space="preserve">
    <value>Type parameter '{0}' has no matching typeparam tag in the XML comment on '{1}' (but other type parameters do)</value>
  </data>
  <data name="WRN_MissingTypeParamTag_Title" xml:space="preserve">
    <value>Type parameter has no matching typeparam tag in the XML comment (but other type parameters do)</value>
  </data>
  <data name="ERR_CantChangeTypeOnOverride" xml:space="preserve">
    <value>'{0}': type must be '{2}' to match overridden member '{1}'</value>
  </data>
  <data name="ERR_DoNotUseFixedBufferAttr" xml:space="preserve">
    <value>Do not use 'System.Runtime.CompilerServices.FixedBuffer' attribute. Use the 'fixed' field modifier instead.</value>
  </data>
  <data name="ERR_DoNotUseFixedBufferAttrOnProperty" xml:space="preserve">
    <value>Do not use 'System.Runtime.CompilerServices.FixedBuffer' attribute on a property</value>
  </data>
  <data name="WRN_AssignmentToSelf" xml:space="preserve">
    <value>Assignment made to same variable; did you mean to assign something else?</value>
  </data>
  <data name="WRN_AssignmentToSelf_Title" xml:space="preserve">
    <value>Assignment made to same variable</value>
  </data>
  <data name="WRN_ComparisonToSelf" xml:space="preserve">
    <value>Comparison made to same variable; did you mean to compare something else?</value>
  </data>
  <data name="WRN_ComparisonToSelf_Title" xml:space="preserve">
    <value>Comparison made to same variable</value>
  </data>
  <data name="ERR_CantOpenWin32Res" xml:space="preserve">
    <value>Error opening Win32 resource file '{0}' -- '{1}'</value>
  </data>
  <data name="WRN_DotOnDefault" xml:space="preserve">
    <value>Expression will always cause a System.NullReferenceException because the default value of '{0}' is null</value>
  </data>
  <data name="WRN_DotOnDefault_Title" xml:space="preserve">
    <value>Expression will always cause a System.NullReferenceException because the type's default value is null</value>
  </data>
  <data name="ERR_NoMultipleInheritance" xml:space="preserve">
    <value>Class '{0}' cannot have multiple base classes: '{1}' and '{2}'</value>
  </data>
  <data name="ERR_BaseClassMustBeFirst" xml:space="preserve">
    <value>Base class '{0}' must come before any interfaces</value>
  </data>
  <data name="WRN_BadXMLRefTypeVar" xml:space="preserve">
    <value>XML comment has cref attribute '{0}' that refers to a type parameter</value>
  </data>
  <data name="WRN_BadXMLRefTypeVar_Title" xml:space="preserve">
    <value>XML comment has cref attribute that refers to a type parameter</value>
  </data>
  <data name="ERR_FriendAssemblyBadArgs" xml:space="preserve">
    <value>Friend assembly reference '{0}' is invalid. InternalsVisibleTo declarations cannot have a version, culture, public key token, or processor architecture specified.</value>
  </data>
  <data name="ERR_FriendAssemblySNReq" xml:space="preserve">
    <value>Friend assembly reference '{0}' is invalid. Strong-name signed assemblies must specify a public key in their InternalsVisibleTo declarations.</value>
  </data>
  <data name="ERR_DelegateOnNullable" xml:space="preserve">
    <value>Cannot bind delegate to '{0}' because it is a member of 'System.Nullable&lt;T&gt;'</value>
  </data>
  <data name="ERR_BadCtorArgCount" xml:space="preserve">
    <value>'{0}' does not contain a constructor that takes {1} arguments</value>
  </data>
  <data name="ERR_GlobalAttributesNotFirst" xml:space="preserve">
    <value>Assembly and module attributes must precede all other elements defined in a file except using clauses and extern alias declarations</value>
  </data>
  <data name="ERR_ExpressionExpected" xml:space="preserve">
    <value>Expected expression</value>
  </data>
  <data name="ERR_InvalidSubsystemVersion" xml:space="preserve">
    <value>Invalid version {0} for /subsystemversion. The version must be 6.02 or greater for ARM or AppContainerExe, and 4.00 or greater otherwise</value>
  </data>
  <data name="ERR_InteropMethodWithBody" xml:space="preserve">
    <value>Embedded interop method '{0}' contains a body.</value>
  </data>
  <data name="ERR_BadWarningLevel" xml:space="preserve">
    <value>Warning level must be in the range 0-4</value>
  </data>
  <data name="ERR_BadDebugType" xml:space="preserve">
    <value>Invalid option '{0}' for /debug; must be 'portable', 'embedded', 'full' or 'pdbonly'</value>
  </data>
  <data name="ERR_BadResourceVis" xml:space="preserve">
    <value>Invalid option '{0}'; Resource visibility must be either 'public' or 'private'</value>
  </data>
  <data name="ERR_DefaultValueTypeMustMatch" xml:space="preserve">
    <value>The type of the argument to the DefaultParameterValue attribute must match the parameter type</value>
  </data>
  <data name="ERR_DefaultValueBadValueType" xml:space="preserve">
    <value>Argument of type '{0}' is not applicable for the DefaultParameterValue attribute</value>
  </data>
  <data name="ERR_MemberAlreadyInitialized" xml:space="preserve">
    <value>Duplicate initialization of member '{0}'</value>
  </data>
  <data name="ERR_MemberCannotBeInitialized" xml:space="preserve">
    <value>Member '{0}' cannot be initialized. It is not a field or property.</value>
  </data>
  <data name="ERR_StaticMemberInObjectInitializer" xml:space="preserve">
    <value>Static field or property '{0}' cannot be assigned in an object initializer</value>
  </data>
  <data name="ERR_ReadonlyValueTypeInObjectInitializer" xml:space="preserve">
    <value>Members of readonly field '{0}' of type '{1}' cannot be assigned with an object initializer because it is of a value type</value>
  </data>
  <data name="ERR_ValueTypePropertyInObjectInitializer" xml:space="preserve">
    <value>Members of property '{0}' of type '{1}' cannot be assigned with an object initializer because it is of a value type</value>
  </data>
  <data name="ERR_UnsafeTypeInObjectCreation" xml:space="preserve">
    <value>Unsafe type '{0}' cannot be used in object creation</value>
  </data>
  <data name="ERR_EmptyElementInitializer" xml:space="preserve">
    <value>Element initializer cannot be empty</value>
  </data>
  <data name="ERR_InitializerAddHasWrongSignature" xml:space="preserve">
    <value>The best overloaded method match for '{0}' has wrong signature for the initializer element. The initializable Add must be an accessible instance method.</value>
  </data>
  <data name="ERR_CollectionInitRequiresIEnumerable" xml:space="preserve">
    <value>Cannot initialize type '{0}' with a collection initializer because it does not implement 'System.Collections.IEnumerable'</value>
  </data>
  <data name="ERR_CantSetWin32Manifest" xml:space="preserve">
    <value>Error reading Win32 manifest file '{0}' -- '{1}'</value>
  </data>
  <data name="WRN_CantHaveManifestForModule" xml:space="preserve">
    <value>Ignoring /win32manifest for module because it only applies to assemblies</value>
  </data>
  <data name="WRN_CantHaveManifestForModule_Title" xml:space="preserve">
    <value>Ignoring /win32manifest for module because it only applies to assemblies</value>
  </data>
  <data name="ERR_BadInstanceArgType" xml:space="preserve">
    <value>'{0}' does not contain a definition for '{1}' and the best extension method overload '{2}' requires a receiver of type '{3}'</value>
  </data>
  <data name="ERR_QueryDuplicateRangeVariable" xml:space="preserve">
    <value>The range variable '{0}' has already been declared</value>
  </data>
  <data name="ERR_QueryRangeVariableOverrides" xml:space="preserve">
    <value>The range variable '{0}' conflicts with a previous declaration of '{0}'</value>
  </data>
  <data name="ERR_QueryRangeVariableAssignedBadValue" xml:space="preserve">
    <value>Cannot assign {0} to a range variable</value>
  </data>
  <data name="ERR_QueryNoProviderCastable" xml:space="preserve">
    <value>Could not find an implementation of the query pattern for source type '{0}'.  '{1}' not found.  Consider explicitly specifying the type of the range variable '{2}'.</value>
  </data>
  <data name="ERR_QueryNoProviderStandard" xml:space="preserve">
    <value>Could not find an implementation of the query pattern for source type '{0}'.  '{1}' not found.  Are you missing a reference to 'System.Core.dll' or a using directive for 'System.Linq'?</value>
  </data>
  <data name="ERR_QueryNoProvider" xml:space="preserve">
    <value>Could not find an implementation of the query pattern for source type '{0}'.  '{1}' not found.</value>
  </data>
  <data name="ERR_QueryOuterKey" xml:space="preserve">
    <value>The name '{0}' is not in scope on the left side of 'equals'.  Consider swapping the expressions on either side of 'equals'.</value>
  </data>
  <data name="ERR_QueryInnerKey" xml:space="preserve">
    <value>The name '{0}' is not in scope on the right side of 'equals'.  Consider swapping the expressions on either side of 'equals'.</value>
  </data>
  <data name="ERR_QueryOutRefRangeVariable" xml:space="preserve">
    <value>Cannot pass the range variable '{0}' as an out or ref parameter</value>
  </data>
  <data name="ERR_QueryMultipleProviders" xml:space="preserve">
    <value>Multiple implementations of the query pattern were found for source type '{0}'.  Ambiguous call to '{1}'.</value>
  </data>
  <data name="ERR_QueryTypeInferenceFailedMulti" xml:space="preserve">
    <value>The type of one of the expressions in the {0} clause is incorrect.  Type inference failed in the call to '{1}'.</value>
  </data>
  <data name="ERR_QueryTypeInferenceFailed" xml:space="preserve">
    <value>The type of the expression in the {0} clause is incorrect.  Type inference failed in the call to '{1}'.</value>
  </data>
  <data name="ERR_QueryTypeInferenceFailedSelectMany" xml:space="preserve">
    <value>An expression of type '{0}' is not allowed in a subsequent from clause in a query expression with source type '{1}'.  Type inference failed in the call to '{2}'.</value>
  </data>
  <data name="ERR_ExpressionTreeContainsPointerOp" xml:space="preserve">
    <value>An expression tree may not contain an unsafe pointer operation</value>
  </data>
  <data name="ERR_ExpressionTreeContainsAnonymousMethod" xml:space="preserve">
    <value>An expression tree may not contain an anonymous method expression</value>
  </data>
  <data name="ERR_AnonymousMethodToExpressionTree" xml:space="preserve">
    <value>An anonymous method expression cannot be converted to an expression tree</value>
  </data>
  <data name="ERR_QueryRangeVariableReadOnly" xml:space="preserve">
    <value>Range variable '{0}' cannot be assigned to -- it is read only</value>
  </data>
  <data name="ERR_QueryRangeVariableSameAsTypeParam" xml:space="preserve">
    <value>The range variable '{0}' cannot have the same name as a method type parameter</value>
  </data>
  <data name="ERR_TypeVarNotFoundRangeVariable" xml:space="preserve">
    <value>The contextual keyword 'var' cannot be used in a range variable declaration</value>
  </data>
  <data name="ERR_BadArgTypesForCollectionAdd" xml:space="preserve">
    <value>The best overloaded Add method '{0}' for the collection initializer has some invalid arguments</value>
  </data>
  <data name="ERR_ByRefParameterInExpressionTree" xml:space="preserve">
    <value>An expression tree lambda may not contain an out or ref parameter</value>
  </data>
  <data name="ERR_VarArgsInExpressionTree" xml:space="preserve">
    <value>An expression tree lambda may not contain a method with variable arguments</value>
  </data>
  <data name="ERR_MemGroupInExpressionTree" xml:space="preserve">
    <value>An expression tree lambda may not contain a method group</value>
  </data>
  <data name="ERR_InitializerAddHasParamModifiers" xml:space="preserve">
    <value>The best overloaded method match '{0}' for the collection initializer element cannot be used. Collection initializer 'Add' methods cannot have ref or out parameters.</value>
  </data>
  <data name="ERR_NonInvocableMemberCalled" xml:space="preserve">
    <value>Non-invocable member '{0}' cannot be used like a method.</value>
  </data>
  <data name="WRN_MultipleRuntimeImplementationMatches" xml:space="preserve">
    <value>Member '{0}' implements interface member '{1}' in type '{2}'. There are multiple matches for the interface member at run-time. It is implementation dependent which method will be called.</value>
  </data>
  <data name="WRN_MultipleRuntimeImplementationMatches_Title" xml:space="preserve">
    <value>Member implements interface member with multiple matches at run-time</value>
  </data>
  <data name="WRN_MultipleRuntimeImplementationMatches_Description" xml:space="preserve">
    <value>This warning can be generated when two interface methods are differentiated only by whether a particular parameter is marked with ref or with out. It is best to change your code to avoid this warning because it is not obvious or guaranteed which method is called at runtime.

Although C# distinguishes between out and ref, the CLR sees them as the same. When deciding which method implements the interface, the CLR just picks one.

Give the compiler some way to differentiate the methods. For example, you can give them different names or provide an additional parameter on one of them.</value>
  </data>
  <data name="WRN_MultipleRuntimeOverrideMatches" xml:space="preserve">
    <value>Member '{1}' overrides '{0}'. There are multiple override candidates at run-time. It is implementation dependent which method will be called.</value>
  </data>
  <data name="WRN_MultipleRuntimeOverrideMatches_Title" xml:space="preserve">
    <value>Member overrides base member with multiple override candidates at run-time</value>
  </data>
  <data name="ERR_ObjectOrCollectionInitializerWithDelegateCreation" xml:space="preserve">
    <value>Object and collection initializer expressions may not be applied to a delegate creation expression</value>
  </data>
  <data name="ERR_InvalidConstantDeclarationType" xml:space="preserve">
    <value>'{0}' is of type '{1}'. The type specified in a constant declaration must be sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool, string, an enum-type, or a reference-type.</value>
  </data>
  <data name="ERR_FileNotFound" xml:space="preserve">
    <value>Source file '{0}' could not be found.</value>
  </data>
  <data name="WRN_FileAlreadyIncluded" xml:space="preserve">
    <value>Source file '{0}' specified multiple times</value>
  </data>
  <data name="WRN_FileAlreadyIncluded_Title" xml:space="preserve">
    <value>Source file specified multiple times</value>
  </data>
  <data name="ERR_NoFileSpec" xml:space="preserve">
    <value>Missing file specification for '{0}' option</value>
  </data>
  <data name="ERR_SwitchNeedsString" xml:space="preserve">
    <value>Command-line syntax error: Missing '{0}' for '{1}' option</value>
  </data>
  <data name="ERR_BadSwitch" xml:space="preserve">
    <value>Unrecognized option: '{0}'</value>
  </data>
  <data name="WRN_NoSources" xml:space="preserve">
    <value>No source files specified.</value>
  </data>
  <data name="WRN_NoSources_Title" xml:space="preserve">
    <value>No source files specified</value>
  </data>
  <data name="ERR_ExpectedSingleScript" xml:space="preserve">
    <value>Expected a script (.csx file) but none specified</value>
  </data>
  <data name="ERR_OpenResponseFile" xml:space="preserve">
    <value>Error opening response file '{0}'</value>
  </data>
  <data name="ERR_CantOpenFileWrite" xml:space="preserve">
    <value>Cannot open '{0}' for writing -- '{1}'</value>
  </data>
  <data name="ERR_BadBaseNumber" xml:space="preserve">
    <value>Invalid image base number '{0}'</value>
  </data>
  <data name="ERR_BinaryFile" xml:space="preserve">
    <value>'{0}' is a binary file instead of a text file</value>
  </data>
  <data name="FTL_BadCodepage" xml:space="preserve">
    <value>Code page '{0}' is invalid or not installed</value>
  </data>
  <data name="FTL_BadChecksumAlgorithm" xml:space="preserve">
    <value>Algorithm '{0}' is not supported</value>
  </data>
  <data name="ERR_NoMainOnDLL" xml:space="preserve">
    <value>Cannot specify /main if building a module or library</value>
  </data>
  <data name="FTL_InvalidTarget" xml:space="preserve">
    <value>Invalid target type for /target: must specify 'exe', 'winexe', 'library', or 'module'</value>
  </data>
  <data name="FTL_InputFileNameTooLong" xml:space="preserve">
    <value>File name '{0}' is empty, contains invalid characters, has a drive specification without an absolute path, or is too long</value>
  </data>
  <data name="WRN_NoConfigNotOnCommandLine" xml:space="preserve">
    <value>Ignoring /noconfig option because it was specified in a response file</value>
  </data>
  <data name="WRN_NoConfigNotOnCommandLine_Title" xml:space="preserve">
    <value>Ignoring /noconfig option because it was specified in a response file</value>
  </data>
  <data name="ERR_InvalidFileAlignment" xml:space="preserve">
    <value>Invalid file section alignment '{0}'</value>
  </data>
  <data name="ERR_InvalidOutputName" xml:space="preserve">
    <value>Invalid output name: {0}</value>
  </data>
  <data name="ERR_InvalidDebugInformationFormat" xml:space="preserve">
    <value>Invalid debug information format: {0}</value>
  </data>
  <data name="ERR_LegacyObjectIdSyntax" xml:space="preserve">
    <value>'id#' syntax is no longer supported. Use '$id' instead.</value>
  </data>
  <data name="WRN_DefineIdentifierRequired" xml:space="preserve">
    <value>Invalid name for a preprocessing symbol; '{0}' is not a valid identifier</value>
  </data>
  <data name="WRN_DefineIdentifierRequired_Title" xml:space="preserve">
    <value>Invalid name for a preprocessing symbol; not a valid identifier</value>
  </data>
  <data name="FTL_OutputFileExists" xml:space="preserve">
    <value>Cannot create short filename '{0}' when a long filename with the same short filename already exists</value>
  </data>
  <data name="ERR_OneAliasPerReference" xml:space="preserve">
    <value>A /reference option that declares an extern alias can only have one filename. To specify multiple aliases or filenames, use multiple /reference options.</value>
  </data>
  <data name="ERR_SwitchNeedsNumber" xml:space="preserve">
    <value>Command-line syntax error: Missing ':&lt;number&gt;' for '{0}' option</value>
  </data>
  <data name="ERR_MissingDebugSwitch" xml:space="preserve">
    <value>The /pdb option requires that the /debug option also be used</value>
  </data>
  <data name="ERR_ComRefCallInExpressionTree" xml:space="preserve">
    <value>An expression tree lambda may not contain a COM call with ref omitted on arguments</value>
  </data>
  <data name="ERR_InvalidFormatForGuidForOption" xml:space="preserve">
    <value>Command-line syntax error: Invalid Guid format '{0}' for option '{1}'</value>
  </data>
  <data name="ERR_MissingGuidForOption" xml:space="preserve">
    <value>Command-line syntax error: Missing Guid for option '{1}'</value>
  </data>
  <data name="WRN_CLS_NoVarArgs" xml:space="preserve">
    <value>Methods with variable arguments are not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_NoVarArgs_Title" xml:space="preserve">
    <value>Methods with variable arguments are not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadArgType" xml:space="preserve">
    <value>Argument type '{0}' is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadArgType_Title" xml:space="preserve">
    <value>Argument type is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadReturnType" xml:space="preserve">
    <value>Return type of '{0}' is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadReturnType_Title" xml:space="preserve">
    <value>Return type is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadFieldPropType" xml:space="preserve">
    <value>Type of '{0}' is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadFieldPropType_Title" xml:space="preserve">
    <value>Type is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadFieldPropType_Description" xml:space="preserve">
    <value>A public, protected, or protected internal variable must be of a type that is compliant with the Common Language Specification (CLS).</value>
  </data>
  <data name="WRN_CLS_BadIdentifierCase" xml:space="preserve">
    <value>Identifier '{0}' differing only in case is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadIdentifierCase_Title" xml:space="preserve">
    <value>Identifier differing only in case is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_OverloadRefOut" xml:space="preserve">
    <value>Overloaded method '{0}' differing only in ref or out, or in array rank, is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_OverloadRefOut_Title" xml:space="preserve">
    <value>Overloaded method differing only in ref or out, or in array rank, is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_OverloadUnnamed" xml:space="preserve">
    <value>Overloaded method '{0}' differing only by unnamed array types is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_OverloadUnnamed_Title" xml:space="preserve">
    <value>Overloaded method differing only by unnamed array types is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_OverloadUnnamed_Description" xml:space="preserve">
    <value>This error occurs if you have an overloaded method that takes a jagged array and the only difference between the method signatures is the element type of the array. To avoid this error, consider using a rectangular array rather than a jagged array; use an additional parameter to disambiguate the function call; rename one or more of the overloaded methods; or, if CLS Compliance is not needed, remove the CLSCompliantAttribute attribute.</value>
  </data>
  <data name="WRN_CLS_BadIdentifier" xml:space="preserve">
    <value>Identifier '{0}' is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadIdentifier_Title" xml:space="preserve">
    <value>Identifier is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadBase" xml:space="preserve">
    <value>'{0}': base type '{1}' is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadBase_Title" xml:space="preserve">
    <value>Base type is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadBase_Description" xml:space="preserve">
    <value>A base type was marked as not having to be compliant with the Common Language Specification (CLS) in an assembly that was marked as being CLS compliant. Either remove the attribute that specifies the assembly is CLS compliant or remove the attribute that indicates the type is not CLS compliant.</value>
  </data>
  <data name="WRN_CLS_BadInterfaceMember" xml:space="preserve">
    <value>'{0}': CLS-compliant interfaces must have only CLS-compliant members</value>
  </data>
  <data name="WRN_CLS_BadInterfaceMember_Title" xml:space="preserve">
    <value>CLS-compliant interfaces must have only CLS-compliant members</value>
  </data>
  <data name="WRN_CLS_NoAbstractMembers" xml:space="preserve">
    <value>'{0}': only CLS-compliant members can be abstract</value>
  </data>
  <data name="WRN_CLS_NoAbstractMembers_Title" xml:space="preserve">
    <value>Only CLS-compliant members can be abstract</value>
  </data>
  <data name="WRN_CLS_NotOnModules" xml:space="preserve">
    <value>You must specify the CLSCompliant attribute on the assembly, not the module, to enable CLS compliance checking</value>
  </data>
  <data name="WRN_CLS_NotOnModules_Title" xml:space="preserve">
    <value>You must specify the CLSCompliant attribute on the assembly, not the module, to enable CLS compliance checking</value>
  </data>
  <data name="WRN_CLS_ModuleMissingCLS" xml:space="preserve">
    <value>Added modules must be marked with the CLSCompliant attribute to match the assembly</value>
  </data>
  <data name="WRN_CLS_ModuleMissingCLS_Title" xml:space="preserve">
    <value>Added modules must be marked with the CLSCompliant attribute to match the assembly</value>
  </data>
  <data name="WRN_CLS_AssemblyNotCLS" xml:space="preserve">
    <value>'{0}' cannot be marked as CLS-compliant because the assembly does not have a CLSCompliant attribute</value>
  </data>
  <data name="WRN_CLS_AssemblyNotCLS_Title" xml:space="preserve">
    <value>Type or member cannot be marked as CLS-compliant because the assembly does not have a CLSCompliant attribute</value>
  </data>
  <data name="WRN_CLS_BadAttributeType" xml:space="preserve">
    <value>'{0}' has no accessible constructors which use only CLS-compliant types</value>
  </data>
  <data name="WRN_CLS_BadAttributeType_Title" xml:space="preserve">
    <value>Type has no accessible constructors which use only CLS-compliant types</value>
  </data>
  <data name="WRN_CLS_ArrayArgumentToAttribute" xml:space="preserve">
    <value>Arrays as attribute arguments is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_ArrayArgumentToAttribute_Title" xml:space="preserve">
    <value>Arrays as attribute arguments is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_NotOnModules2" xml:space="preserve">
    <value>You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly</value>
  </data>
  <data name="WRN_CLS_NotOnModules2_Title" xml:space="preserve">
    <value>You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly</value>
  </data>
  <data name="WRN_CLS_IllegalTrueInFalse" xml:space="preserve">
    <value>'{0}' cannot be marked as CLS-compliant because it is a member of non-CLS-compliant type '{1}'</value>
  </data>
  <data name="WRN_CLS_IllegalTrueInFalse_Title" xml:space="preserve">
    <value>Type cannot be marked as CLS-compliant because it is a member of non-CLS-compliant type</value>
  </data>
  <data name="WRN_CLS_MeaninglessOnPrivateType" xml:space="preserve">
    <value>CLS compliance checking will not be performed on '{0}' because it is not visible from outside this assembly</value>
  </data>
  <data name="WRN_CLS_MeaninglessOnPrivateType_Title" xml:space="preserve">
    <value>CLS compliance checking will not be performed because it is not visible from outside this assembly</value>
  </data>
  <data name="WRN_CLS_AssemblyNotCLS2" xml:space="preserve">
    <value>'{0}' does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute</value>
  </data>
  <data name="WRN_CLS_AssemblyNotCLS2_Title" xml:space="preserve">
    <value>Type or member does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute</value>
  </data>
  <data name="WRN_CLS_MeaninglessOnParam" xml:space="preserve">
    <value>CLSCompliant attribute has no meaning when applied to parameters. Try putting it on the method instead.</value>
  </data>
  <data name="WRN_CLS_MeaninglessOnParam_Title" xml:space="preserve">
    <value>CLSCompliant attribute has no meaning when applied to parameters</value>
  </data>
  <data name="WRN_CLS_MeaninglessOnReturn" xml:space="preserve">
    <value>CLSCompliant attribute has no meaning when applied to return types. Try putting it on the method instead.</value>
  </data>
  <data name="WRN_CLS_MeaninglessOnReturn_Title" xml:space="preserve">
    <value>CLSCompliant attribute has no meaning when applied to return types</value>
  </data>
  <data name="WRN_CLS_BadTypeVar" xml:space="preserve">
    <value>Constraint type '{0}' is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadTypeVar_Title" xml:space="preserve">
    <value>Constraint type is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_VolatileField" xml:space="preserve">
    <value>CLS-compliant field '{0}' cannot be volatile</value>
  </data>
  <data name="WRN_CLS_VolatileField_Title" xml:space="preserve">
    <value>CLS-compliant field cannot be volatile</value>
  </data>
  <data name="WRN_CLS_BadInterface" xml:space="preserve">
    <value>'{0}' is not CLS-compliant because base interface '{1}' is not CLS-compliant</value>
  </data>
  <data name="WRN_CLS_BadInterface_Title" xml:space="preserve">
    <value>Type is not CLS-compliant because base interface is not CLS-compliant</value>
  </data>
  <data name="ERR_BadAwaitArg" xml:space="preserve">
    <value>'await' requires that the type {0} have a suitable GetAwaiter method</value>
  </data>
  <data name="ERR_BadAwaitArgIntrinsic" xml:space="preserve">
    <value>Cannot await '{0}'</value>
  </data>
  <data name="ERR_BadAwaiterPattern" xml:space="preserve">
    <value>'await' requires that the return type '{0}' of '{1}.GetAwaiter()' have suitable IsCompleted, OnCompleted, and GetResult members, and implement INotifyCompletion or ICriticalNotifyCompletion</value>
  </data>
  <data name="ERR_BadAwaitArg_NeedSystem" xml:space="preserve">
    <value>'await' requires that the type '{0}' have a suitable GetAwaiter method. Are you missing a using directive for 'System'?</value>
  </data>
  <data name="ERR_BadAwaitArgVoidCall" xml:space="preserve">
    <value>Cannot await 'void'</value>
  </data>
  <data name="ERR_BadAwaitAsIdentifier" xml:space="preserve">
    <value>'await' cannot be used as an identifier within an async method or lambda expression</value>
  </data>
  <data name="ERR_DoesntImplementAwaitInterface" xml:space="preserve">
    <value>'{0}' does not implement '{1}'</value>
  </data>
  <data name="ERR_TaskRetNoObjectRequired" xml:space="preserve">
    <value>Since '{0}' is an async method that returns 'Task', a return keyword must not be followed by an object expression. Did you intend to return 'Task&lt;T&gt;'?</value>
  </data>
  <data name="ERR_BadAsyncReturn" xml:space="preserve">
    <value>The return type of an async method must be void, Task or Task&lt;T&gt;</value>
  </data>
  <data name="ERR_CantReturnVoid" xml:space="preserve">
    <value>Cannot return an expression of type 'void'</value>
  </data>
  <data name="ERR_VarargsAsync" xml:space="preserve">
    <value>__arglist is not allowed in the parameter list of async methods</value>
  </data>
  <data name="ERR_ByRefTypeAndAwait" xml:space="preserve">
    <value>'await' cannot be used in an expression containing the type '{0}'</value>
  </data>
  <data name="ERR_UnsafeAsyncArgType" xml:space="preserve">
    <value>Async methods cannot have unsafe parameters or return types</value>
  </data>
  <data name="ERR_BadAsyncArgType" xml:space="preserve">
    <value>Async methods cannot have ref or out parameters</value>
  </data>
  <data name="ERR_BadAwaitWithoutAsync" xml:space="preserve">
    <value>The 'await' operator can only be used when contained within a method or lambda expression marked with the 'async' modifier</value>
  </data>
  <data name="ERR_BadAwaitWithoutAsyncLambda" xml:space="preserve">
    <value>The 'await' operator can only be used within an async {0}. Consider marking this {0} with the 'async' modifier.</value>
  </data>
  <data name="ERR_BadAwaitWithoutAsyncMethod" xml:space="preserve">
    <value>The 'await' operator can only be used within an async method. Consider marking this method with the 'async' modifier and changing its return type to 'Task&lt;{0}&gt;'.</value>
  </data>
  <data name="ERR_BadAwaitWithoutVoidAsyncMethod" xml:space="preserve">
    <value>The 'await' operator can only be used within an async method. Consider marking this method with the 'async' modifier and changing its return type to 'Task'.</value>
  </data>
  <data name="ERR_BadAwaitInFinally" xml:space="preserve">
    <value>Cannot await in the body of a finally clause</value>
  </data>
  <data name="ERR_BadAwaitInCatch" xml:space="preserve">
    <value>Cannot await in a catch clause</value>
  </data>
  <data name="ERR_BadAwaitInCatchFilter" xml:space="preserve">
    <value>Cannot await in the filter expression of a catch clause</value>
  </data>
  <data name="ERR_BadAwaitInLock" xml:space="preserve">
    <value>Cannot await in the body of a lock statement</value>
  </data>
  <data name="ERR_BadAwaitInStaticVariableInitializer" xml:space="preserve">
    <value>The 'await' operator cannot be used in a static script variable initializer.</value>
  </data>
  <data name="ERR_AwaitInUnsafeContext" xml:space="preserve">
    <value>Cannot await in an unsafe context</value>
  </data>
  <data name="ERR_BadAsyncLacksBody" xml:space="preserve">
    <value>The 'async' modifier can only be used in methods that have a body.</value>
  </data>
  <data name="ERR_BadSpecialByRefLocal" xml:space="preserve">
    <value>Parameters or locals of type '{0}' cannot be declared in async methods or lambda expressions.</value>
  </data>
  <data name="ERR_BadSpecialByRefIterator" xml:space="preserve">
    <value>foreach statement cannot operate on enumerators of type '{0}' in async or iterator methods because '{0}' is a ref struct.</value>
  </data>
  <data name="ERR_SecurityCriticalOrSecuritySafeCriticalOnAsync" xml:space="preserve">
    <value>Security attribute '{0}' cannot be applied to an Async method.</value>
  </data>
  <data name="ERR_SecurityCriticalOrSecuritySafeCriticalOnAsyncInClassOrStruct" xml:space="preserve">
    <value>Async methods are not allowed in an Interface, Class, or Structure which has the 'SecurityCritical' or 'SecuritySafeCritical' attribute.</value>
  </data>
  <data name="ERR_BadAwaitInQuery" xml:space="preserve">
    <value>The 'await' operator may only be used in a query expression within the first collection expression of the initial 'from' clause or within the collection expression of a 'join' clause</value>
  </data>
  <data name="WRN_AsyncLacksAwaits" xml:space="preserve">
    <value>This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.</value>
  </data>
  <data name="WRN_AsyncLacksAwaits_Title" xml:space="preserve">
    <value>Async method lacks 'await' operators and will run synchronously</value>
  </data>
  <data name="WRN_UnobservedAwaitableExpression" xml:space="preserve">
    <value>Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'await' operator to the result of the call.</value>
  </data>
  <data name="WRN_UnobservedAwaitableExpression_Title" xml:space="preserve">
    <value>Because this call is not awaited, execution of the current method continues before the call is completed</value>
  </data>
  <data name="WRN_UnobservedAwaitableExpression_Description" xml:space="preserve">
    <value>The current method calls an async method that returns a Task or a Task&lt;TResult&gt; and doesn't apply the await operator to the result. The call to the async method starts an asynchronous task. However, because no await operator is applied, the program continues without waiting for the task to complete. In most cases, that behavior isn't what you expect. Usually other aspects of the calling method depend on the results of the call or, minimally, the called method is expected to complete before you return from the method that contains the call.

An equally important issue is what happens to exceptions that are raised in the called async method. An exception that's raised in a method that returns a Task or Task&lt;TResult&gt; is stored in the returned task. If you don't await the task or explicitly check for exceptions, the exception is lost. If you await the task, its exception is rethrown.

As a best practice, you should always await the call.

You should consider suppressing the warning only if you're sure that you don't want to wait for the asynchronous call to complete and that the called method won't raise any exceptions. In that case, you can suppress the warning by assigning the task result of the call to a variable.</value>
  </data>
  <data name="ERR_SynchronizedAsyncMethod" xml:space="preserve">
    <value>'MethodImplOptions.Synchronized' cannot be applied to an async method</value>
  </data>
  <data name="ERR_NoConversionForCallerLineNumberParam" xml:space="preserve">
    <value>CallerLineNumberAttribute cannot be applied because there are no standard conversions from type '{0}' to type '{1}'</value>
  </data>
  <data name="ERR_NoConversionForCallerFilePathParam" xml:space="preserve">
    <value>CallerFilePathAttribute cannot be applied because there are no standard conversions from type '{0}' to type '{1}'</value>
  </data>
  <data name="ERR_NoConversionForCallerMemberNameParam" xml:space="preserve">
    <value>CallerMemberNameAttribute cannot be applied because there are no standard conversions from type '{0}' to type '{1}'</value>
  </data>
  <data name="ERR_BadCallerLineNumberParamWithoutDefaultValue" xml:space="preserve">
    <value>The CallerLineNumberAttribute may only be applied to parameters with default values</value>
  </data>
  <data name="ERR_BadCallerFilePathParamWithoutDefaultValue" xml:space="preserve">
    <value>The CallerFilePathAttribute may only be applied to parameters with default values</value>
  </data>
  <data name="ERR_BadCallerMemberNameParamWithoutDefaultValue" xml:space="preserve">
    <value>The CallerMemberNameAttribute may only be applied to parameters with default values</value>
  </data>
  <data name="WRN_CallerLineNumberParamForUnconsumedLocation" xml:space="preserve">
    <value>The CallerLineNumberAttribute applied to parameter '{0}' will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</value>
  </data>
  <data name="WRN_CallerLineNumberParamForUnconsumedLocation_Title" xml:space="preserve">
    <value>The CallerLineNumberAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</value>
  </data>
  <data name="WRN_CallerFilePathParamForUnconsumedLocation" xml:space="preserve">
    <value>The CallerFilePathAttribute applied to parameter '{0}' will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</value>
  </data>
  <data name="WRN_CallerFilePathParamForUnconsumedLocation_Title" xml:space="preserve">
    <value>The CallerFilePathAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</value>
  </data>
  <data name="WRN_CallerMemberNameParamForUnconsumedLocation" xml:space="preserve">
    <value>The CallerMemberNameAttribute applied to parameter '{0}' will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</value>
  </data>
  <data name="WRN_CallerMemberNameParamForUnconsumedLocation_Title" xml:space="preserve">
    <value>The CallerMemberNameAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</value>
  </data>
  <data name="ERR_NoEntryPoint" xml:space="preserve">
    <value>Program does not contain a static 'Main' method suitable for an entry point</value>
  </data>
  <data name="ERR_ArrayInitializerIncorrectLength" xml:space="preserve">
    <value>An array initializer of length '{0}' is expected</value>
  </data>
  <data name="ERR_ArrayInitializerExpected" xml:space="preserve">
    <value>A nested array initializer is expected</value>
  </data>
  <data name="ERR_IllegalVarianceSyntax" xml:space="preserve">
    <value>Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.</value>
  </data>
  <data name="ERR_UnexpectedAliasedName" xml:space="preserve">
    <value>Unexpected use of an aliased name</value>
  </data>
  <data name="ERR_UnexpectedGenericName" xml:space="preserve">
    <value>Unexpected use of a generic name</value>
  </data>
  <data name="ERR_UnexpectedUnboundGenericName" xml:space="preserve">
    <value>Unexpected use of an unbound generic name</value>
  </data>
  <data name="ERR_GlobalStatement" xml:space="preserve">
    <value>Expressions and statements can only occur in a method body</value>
  </data>
  <data name="ERR_NamedArgumentForArray" xml:space="preserve">
    <value>An array access may not have a named argument specifier</value>
  </data>
  <data name="ERR_NotYetImplementedInRoslyn" xml:space="preserve">
    <value>This language feature ('{0}') is not yet implemented.</value>
  </data>
  <data name="ERR_DefaultValueNotAllowed" xml:space="preserve">
    <value>Default values are not valid in this context.</value>
  </data>
  <data name="ERR_CantOpenIcon" xml:space="preserve">
    <value>Error opening icon file {0} -- {1}</value>
  </data>
  <data name="ERR_CantOpenWin32Manifest" xml:space="preserve">
    <value>Error opening Win32 manifest file {0} -- {1}</value>
  </data>
  <data name="ERR_ErrorBuildingWin32Resources" xml:space="preserve">
    <value>Error building Win32 resources -- {0}</value>
  </data>
  <data name="ERR_DefaultValueBeforeRequiredValue" xml:space="preserve">
    <value>Optional parameters must appear after all required parameters</value>
  </data>
  <data name="ERR_ExplicitImplCollisionOnRefOut" xml:space="preserve">
    <value>Cannot inherit interface '{0}' with the specified type parameters because it causes method '{1}' to contain overloads which differ only on ref and out</value>
  </data>
  <data name="ERR_PartialWrongTypeParamsVariance" xml:space="preserve">
    <value>Partial declarations of '{0}' must have the same type parameter names and variance modifiers in the same order</value>
  </data>
  <data name="ERR_UnexpectedVariance" xml:space="preserve">
    <value>Invalid variance: The type parameter '{1}' must be {3} valid on '{0}'. '{1}' is {2}.</value>
  </data>
  <data name="ERR_DeriveFromDynamic" xml:space="preserve">
    <value>'{0}': cannot derive from the dynamic type</value>
  </data>
  <data name="ERR_DeriveFromConstructedDynamic" xml:space="preserve">
    <value>'{0}': cannot implement a dynamic interface '{1}'</value>
  </data>
  <data name="ERR_DynamicTypeAsBound" xml:space="preserve">
    <value>Constraint cannot be the dynamic type</value>
  </data>
  <data name="ERR_ConstructedDynamicTypeAsBound" xml:space="preserve">
    <value>Constraint cannot be a dynamic type '{0}'</value>
  </data>
  <data name="ERR_DynamicRequiredTypesMissing" xml:space="preserve">
    <value>One or more types required to compile a dynamic expression cannot be found. Are you missing a reference?</value>
  </data>
  <data name="ERR_MetadataNameTooLong" xml:space="preserve">
    <value>Name '{0}' exceeds the maximum length allowed in metadata.</value>
  </data>
  <data name="ERR_AttributesNotAllowed" xml:space="preserve">
    <value>Attributes are not valid in this context.</value>
  </data>
  <data name="ERR_ExternAliasNotAllowed" xml:space="preserve">
    <value>'extern alias' is not valid in this context</value>
  </data>
  <data name="WRN_IsDynamicIsConfusing" xml:space="preserve">
    <value>Using '{0}' to test compatibility with '{1}' is essentially identical to testing compatibility with '{2}' and will succeed for all non-null values</value>
  </data>
  <data name="WRN_IsDynamicIsConfusing_Title" xml:space="preserve">
    <value>Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object'</value>
  </data>
  <data name="ERR_YieldNotAllowedInScript" xml:space="preserve">
    <value>Cannot use 'yield' in top-level script code</value>
  </data>
  <data name="ERR_NamespaceNotAllowedInScript" xml:space="preserve">
    <value>Cannot declare namespace in script code</value>
  </data>
  <data name="ERR_GlobalAttributesNotAllowed" xml:space="preserve">
    <value>Assembly and module attributes are not allowed in this context</value>
  </data>
  <data name="ERR_InvalidDelegateType" xml:space="preserve">
    <value>Delegate '{0}' has no invoke method or an invoke method with a return type or parameter types that are not supported.</value>
  </data>
  <data name="WRN_MainIgnored" xml:space="preserve">
    <value>The entry point of the program is global script code; ignoring '{0}' entry point.</value>
  </data>
  <data name="WRN_MainIgnored_Title" xml:space="preserve">
    <value>The entry point of the program is global script code; ignoring entry point</value>
  </data>
  <data name="ERR_StaticInAsOrIs" xml:space="preserve">
    <value>The second operand of an 'is' or 'as' operator may not be static type '{0}'</value>
  </data>
  <data name="ERR_BadVisEventType" xml:space="preserve">
    <value>Inconsistent accessibility: event type '{1}' is less accessible than event '{0}'</value>
  </data>
  <data name="ERR_NamedArgumentSpecificationBeforeFixedArgument" xml:space="preserve">
    <value>Named argument specifications must appear after all fixed arguments have been specified. Please use language version {0} or greater to allow non-trailing named arguments.</value>
  </data>
  <data name="ERR_NamedArgumentSpecificationBeforeFixedArgumentInDynamicInvocation" xml:space="preserve">
    <value>Named argument specifications must appear after all fixed arguments have been specified in a dynamic invocation.</value>
  </data>
  <data name="ERR_BadNamedArgument" xml:space="preserve">
    <value>The best overload for '{0}' does not have a parameter named '{1}'</value>
  </data>
  <data name="ERR_BadNamedArgumentForDelegateInvoke" xml:space="preserve">
    <value>The delegate '{0}' does not have a parameter named '{1}'</value>
  </data>
  <data name="ERR_DuplicateNamedArgument" xml:space="preserve">
    <value>Named argument '{0}' cannot be specified multiple times</value>
  </data>
  <data name="ERR_NamedArgumentUsedInPositional" xml:space="preserve">
    <value>Named argument '{0}' specifies a parameter for which a positional argument has already been given</value>
  </data>
  <data name="ERR_BadNonTrailingNamedArgument" xml:space="preserve">
    <value>Named argument '{0}' is used out-of-position but is followed by an unnamed argument</value>
  </data>
  <data name="ERR_DefaultValueUsedWithAttributes" xml:space="preserve">
    <value>Cannot specify default parameter value in conjunction with DefaultParameterAttribute or OptionalAttribute</value>
  </data>
  <data name="ERR_DefaultValueMustBeConstant" xml:space="preserve">
    <value>Default parameter value for '{0}' must be a compile-time constant</value>
  </data>
  <data name="ERR_RefOutDefaultValue" xml:space="preserve">
    <value>A ref or out parameter cannot have a default value</value>
  </data>
  <data name="ERR_DefaultValueForExtensionParameter" xml:space="preserve">
    <value>Cannot specify a default value for the 'this' parameter</value>
  </data>
  <data name="ERR_DefaultValueForParamsParameter" xml:space="preserve">
    <value>Cannot specify a default value for a parameter array</value>
  </data>
  <data name="ERR_NoConversionForDefaultParam" xml:space="preserve">
    <value>A value of type '{0}' cannot be used as a default parameter because there are no standard conversions to type '{1}'</value>
  </data>
  <data name="ERR_NoConversionForNubDefaultParam" xml:space="preserve">
    <value>A value of type '{0}' cannot be used as default parameter for nullable parameter '{1}' because '{0}' is not a simple type</value>
  </data>
  <data name="ERR_NotNullRefDefaultParameter" xml:space="preserve">
    <value>'{0}' is of type '{1}'. A default parameter value of a reference type other than string can only be initialized with null</value>
  </data>
  <data name="WRN_DefaultValueForUnconsumedLocation" xml:space="preserve">
    <value>The default value specified for parameter '{0}' will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</value>
  </data>
  <data name="WRN_DefaultValueForUnconsumedLocation_Title" xml:space="preserve">
    <value>The default value specified will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</value>
  </data>
  <data name="ERR_PublicKeyFileFailure" xml:space="preserve">
    <value>Error signing output with public key from file '{0}' -- {1}</value>
  </data>
  <data name="ERR_PublicKeyContainerFailure" xml:space="preserve">
    <value>Error signing output with public key from container '{0}' -- {1}</value>
  </data>
  <data name="ERR_BadDynamicTypeof" xml:space="preserve">
    <value>The typeof operator cannot be used on the dynamic type</value>
  </data>
  <data name="ERR_ExpressionTreeContainsDynamicOperation" xml:space="preserve">
    <value>An expression tree may not contain a dynamic operation</value>
  </data>
  <data name="ERR_BadAsyncExpressionTree" xml:space="preserve">
    <value>Async lambda expressions cannot be converted to expression trees</value>
  </data>
  <data name="ERR_DynamicAttributeMissing" xml:space="preserve">
    <value>Cannot define a class or member that utilizes 'dynamic' because the compiler required type '{0}' cannot be found. Are you missing a reference?</value>
  </data>
  <data name="ERR_CannotPassNullForFriendAssembly" xml:space="preserve">
    <value>Cannot pass null for friend assembly name</value>
  </data>
  <data name="ERR_SignButNoPrivateKey" xml:space="preserve">
    <value>Key file '{0}' is missing the private key needed for signing</value>
  </data>
  <data name="ERR_PublicSignButNoKey" xml:space="preserve">
    <value>Public signing was specified and requires a public key, but no public key was specified.</value>
  </data>
  <data name="ERR_PublicSignNetModule" xml:space="preserve">
    <value>Public signing is not supported for netmodules.</value>
  </data>
  <data name="WRN_DelaySignButNoKey" xml:space="preserve">
    <value>Delay signing was specified and requires a public key, but no public key was specified</value>
  </data>
  <data name="WRN_DelaySignButNoKey_Title" xml:space="preserve">
    <value>Delay signing was specified and requires a public key, but no public key was specified</value>
  </data>
  <data name="ERR_InvalidVersionFormat" xml:space="preserve">
    <value>The specified version string does not conform to the required format - major[.minor[.build[.revision]]]</value>
  </data>
  <data name="ERR_InvalidVersionFormatDeterministic" xml:space="preserve">
    <value>The specified version string contains wildcards, which are not compatible with determinism. Either remove wildcards from the version string, or disable determinism for this compilation</value>
  </data>
  <data name="ERR_InvalidVersionFormat2" xml:space="preserve">
    <value>The specified version string does not conform to the required format - major.minor.build.revision (without wildcards)</value>
  </data>
  <data name="WRN_InvalidVersionFormat" xml:space="preserve">
    <value>The specified version string does not conform to the recommended format - major.minor.build.revision</value>
  </data>
  <data name="WRN_InvalidVersionFormat_Title" xml:space="preserve">
    <value>The specified version string does not conform to the recommended format - major.minor.build.revision</value>
  </data>
  <data name="ERR_InvalidAssemblyCultureForExe" xml:space="preserve">
    <value>Executables cannot be satellite assemblies; culture should always be empty</value>
  </data>
  <data name="ERR_NoCorrespondingArgument" xml:space="preserve">
    <value>There is no argument given that corresponds to the required formal parameter '{0}' of '{1}'</value>
  </data>
  <data name="WRN_UnimplementedCommandLineSwitch" xml:space="preserve">
    <value>The command line switch '{0}' is not yet implemented and was ignored.</value>
  </data>
  <data name="WRN_UnimplementedCommandLineSwitch_Title" xml:space="preserve">
    <value>Command line switch is not yet implemented</value>
  </data>
  <data name="ERR_ModuleEmitFailure" xml:space="preserve">
    <value>Failed to emit module '{0}'.</value>
  </data>
  <data name="ERR_FixedLocalInLambda" xml:space="preserve">
    <value>Cannot use fixed local '{0}' inside an anonymous method, lambda expression, or query expression</value>
  </data>
  <data name="ERR_ExpressionTreeContainsNamedArgument" xml:space="preserve">
    <value>An expression tree may not contain a named argument specification</value>
  </data>
  <data name="ERR_ExpressionTreeContainsOptionalArgument" xml:space="preserve">
    <value>An expression tree may not contain a call or invocation that uses optional arguments</value>
  </data>
  <data name="ERR_ExpressionTreeContainsIndexedProperty" xml:space="preserve">
    <value>An expression tree may not contain an indexed property</value>
  </data>
  <data name="ERR_IndexedPropertyRequiresParams" xml:space="preserve">
    <value>Indexed property '{0}' has non-optional arguments which must be provided</value>
  </data>
  <data name="ERR_IndexedPropertyMustHaveAllOptionalParams" xml:space="preserve">
    <value>Indexed property '{0}' must have all arguments optional</value>
  </data>
  <data name="ERR_SpecialByRefInLambda" xml:space="preserve">
    <value>Instance of type '{0}' cannot be used inside a nested function, query expression, iterator block or async method</value>
  </data>
  <data name="ERR_SecurityAttributeMissingAction" xml:space="preserve">
    <value>First argument to a security attribute must be a valid SecurityAction</value>
  </data>
  <data name="ERR_SecurityAttributeInvalidAction" xml:space="preserve">
    <value>Security attribute '{0}' has an invalid SecurityAction value '{1}'</value>
  </data>
  <data name="ERR_SecurityAttributeInvalidActionAssembly" xml:space="preserve">
    <value>SecurityAction value '{0}' is invalid for security attributes applied to an assembly</value>
  </data>
  <data name="ERR_SecurityAttributeInvalidActionTypeOrMethod" xml:space="preserve">
    <value>SecurityAction value '{0}' is invalid for security attributes applied to a type or a method</value>
  </data>
  <data name="ERR_PrincipalPermissionInvalidAction" xml:space="preserve">
    <value>SecurityAction value '{0}' is invalid for PrincipalPermission attribute</value>
  </data>
  <data name="ERR_FeatureNotValidInExpressionTree" xml:space="preserve">
    <value>An expression tree may not contain '{0}'</value>
  </data>
  <data name="ERR_PermissionSetAttributeInvalidFile" xml:space="preserve">
    <value>Unable to resolve file path '{0}' specified for the named argument '{1}' for PermissionSet attribute</value>
  </data>
  <data name="ERR_PermissionSetAttributeFileReadError" xml:space="preserve">
    <value>Error reading file '{0}' specified for the named argument '{1}' for PermissionSet attribute: '{2}'</value>
  </data>
  <data name="ERR_GlobalSingleTypeNameNotFoundFwd" xml:space="preserve">
    <value>The type name '{0}' could not be found in the global namespace. This type has been forwarded to assembly '{1}' Consider adding a reference to that assembly.</value>
  </data>
  <data name="ERR_DottedTypeNameNotFoundInNSFwd" xml:space="preserve">
    <value>The type name '{0}' could not be found in the namespace '{1}'. This type has been forwarded to assembly '{2}' Consider adding a reference to that assembly.</value>
  </data>
  <data name="ERR_SingleTypeNameNotFoundFwd" xml:space="preserve">
    <value>The type name '{0}' could not be found. This type has been forwarded to assembly '{1}'. Consider adding a reference to that assembly.</value>
  </data>
  <data name="ERR_AssemblySpecifiedForLinkAndRef" xml:space="preserve">
    <value>Assemblies '{0}' and '{1}' refer to the same metadata but only one is a linked reference (specified using /link option); consider removing one of the references.</value>
  </data>
  <data name="WRN_DeprecatedCollectionInitAdd" xml:space="preserve">
    <value>The best overloaded Add method '{0}' for the collection initializer element is obsolete.</value>
  </data>
  <data name="WRN_DeprecatedCollectionInitAdd_Title" xml:space="preserve">
    <value>The best overloaded Add method for the collection initializer element is obsolete</value>
  </data>
  <data name="WRN_DeprecatedCollectionInitAddStr" xml:space="preserve">
    <value>The best overloaded Add method '{0}' for the collection initializer element is obsolete. {1}</value>
  </data>
  <data name="WRN_DeprecatedCollectionInitAddStr_Title" xml:space="preserve">
    <value>The best overloaded Add method for the collection initializer element is obsolete</value>
  </data>
  <data name="ERR_DeprecatedCollectionInitAddStr" xml:space="preserve">
    <value>The best overloaded Add method '{0}' for the collection initializer element is obsolete. {1}</value>
  </data>
  <data name="ERR_IteratorInInteractive" xml:space="preserve">
    <value>Yield statements may not appear at the top level in interactive code.</value>
  </data>
  <data name="ERR_SecurityAttributeInvalidTarget" xml:space="preserve">
    <value>Security attribute '{0}' is not valid on this declaration type. Security attributes are only valid on assembly, type and method declarations.</value>
  </data>
  <data name="ERR_BadDynamicMethodArg" xml:space="preserve">
    <value>Cannot use an expression of type '{0}' as an argument to a dynamically dispatched operation.</value>
  </data>
  <data name="ERR_BadDynamicMethodArgLambda" xml:space="preserve">
    <value>Cannot use a lambda expression as an argument to a dynamically dispatched operation without first casting it to a delegate or expression tree type.</value>
  </data>
  <data name="ERR_BadDynamicMethodArgMemgrp" xml:space="preserve">
    <value>Cannot use a method group as an argument to a dynamically dispatched operation. Did you intend to invoke the method?</value>
  </data>
  <data name="ERR_NoDynamicPhantomOnBase" xml:space="preserve">
    <value>The call to method '{0}' needs to be dynamically dispatched, but cannot be because it is part of a base access expression. Consider casting the dynamic arguments or eliminating the base access.</value>
  </data>
  <data name="ERR_BadDynamicQuery" xml:space="preserve">
    <value>Query expressions over source type 'dynamic' or with a join sequence of type 'dynamic' are not allowed</value>
  </data>
  <data name="ERR_NoDynamicPhantomOnBaseIndexer" xml:space="preserve">
    <value>The indexer access needs to be dynamically dispatched, but cannot be because it is part of a base access expression. Consider casting the dynamic arguments or eliminating the base access.</value>
  </data>
  <data name="WRN_DynamicDispatchToConditionalMethod" xml:space="preserve">
    <value>The dynamically dispatched call to method '{0}' may fail at runtime because one or more applicable overloads are conditional methods.</value>
  </data>
  <data name="WRN_DynamicDispatchToConditionalMethod_Title" xml:space="preserve">
    <value>Dynamically dispatched call may fail at runtime because one or more applicable overloads are conditional methods</value>
  </data>
  <data name="ERR_BadArgTypeDynamicExtension" xml:space="preserve">
    <value>'{0}' has no applicable method named '{1}' but appears to have an extension method by that name. Extension methods cannot be dynamically dispatched. Consider casting the dynamic arguments or calling the extension method without the extension method syntax.</value>
  </data>
  <data name="WRN_CallerFilePathPreferredOverCallerMemberName" xml:space="preserve">
    <value>The CallerMemberNameAttribute applied to parameter '{0}' will have no effect. It is overridden by the CallerFilePathAttribute.</value>
  </data>
  <data name="WRN_CallerFilePathPreferredOverCallerMemberName_Title" xml:space="preserve">
    <value>The CallerMemberNameAttribute will have no effect; it is overridden by the CallerFilePathAttribute</value>
  </data>
  <data name="WRN_CallerLineNumberPreferredOverCallerMemberName" xml:space="preserve">
    <value>The CallerMemberNameAttribute applied to parameter '{0}' will have no effect. It is overridden by the CallerLineNumberAttribute.</value>
  </data>
  <data name="WRN_CallerLineNumberPreferredOverCallerMemberName_Title" xml:space="preserve">
    <value>The CallerMemberNameAttribute will have no effect; it is overridden by the CallerLineNumberAttribute</value>
  </data>
  <data name="WRN_CallerLineNumberPreferredOverCallerFilePath" xml:space="preserve">
    <value>The CallerFilePathAttribute applied to parameter '{0}' will have no effect. It is overridden by the CallerLineNumberAttribute.</value>
  </data>
  <data name="WRN_CallerLineNumberPreferredOverCallerFilePath_Title" xml:space="preserve">
    <value>The CallerFilePathAttribute will have no effect; it is overridden by the CallerLineNumberAttribute</value>
  </data>
  <data name="ERR_InvalidDynamicCondition" xml:space="preserve">
    <value>Expression must be implicitly convertible to Boolean or its type '{0}' must define operator '{1}'.</value>
  </data>
  <data name="ERR_MixingWinRTEventWithRegular" xml:space="preserve">
    <value>'{0}' cannot implement '{1}' because '{2}' is a Windows Runtime event and '{3}' is a regular .NET event.</value>
  </data>
  <data name="WRN_CA2000_DisposeObjectsBeforeLosingScope1" xml:space="preserve">
    <value>Call System.IDisposable.Dispose() on allocated instance of {0} before all references to it are out of scope.</value>
  </data>
  <data name="WRN_CA2000_DisposeObjectsBeforeLosingScope1_Title" xml:space="preserve">
    <value>Call System.IDisposable.Dispose() on allocated instance before all references to it are out of scope</value>
  </data>
  <data name="WRN_CA2000_DisposeObjectsBeforeLosingScope2" xml:space="preserve">
    <value>Allocated instance of {0} is not disposed along all exception paths.  Call System.IDisposable.Dispose() before all references to it are out of scope.</value>
  </data>
  <data name="WRN_CA2000_DisposeObjectsBeforeLosingScope2_Title" xml:space="preserve">
    <value>Allocated instance is not disposed along all exception paths</value>
  </data>
  <data name="WRN_CA2202_DoNotDisposeObjectsMultipleTimes" xml:space="preserve">
    <value>Object '{0}' can be disposed more than once.</value>
  </data>
  <data name="WRN_CA2202_DoNotDisposeObjectsMultipleTimes_Title" xml:space="preserve">
    <value>Object can be disposed more than once</value>
  </data>
  <data name="ERR_NewCoClassOnLink" xml:space="preserve">
    <value>Interop type '{0}' cannot be embedded. Use the applicable interface instead.</value>
  </data>
  <data name="ERR_NoPIANestedType" xml:space="preserve">
    <value>Type '{0}' cannot be embedded because it is a nested type. Consider setting the 'Embed Interop Types' property to false.</value>
  </data>
  <data name="ERR_GenericsUsedInNoPIAType" xml:space="preserve">
    <value>Type '{0}' cannot be embedded because it has a generic argument. Consider setting the 'Embed Interop Types' property to false.</value>
  </data>
  <data name="ERR_InteropStructContainsMethods" xml:space="preserve">
    <value>Embedded interop struct '{0}' can contain only public instance fields.</value>
  </data>
  <data name="ERR_WinRtEventPassedByRef" xml:space="preserve">
    <value>A Windows Runtime event may not be passed as an out or ref parameter.</value>
  </data>
  <data name="ERR_MissingMethodOnSourceInterface" xml:space="preserve">
    <value>Source interface '{0}' is missing method '{1}' which is required to embed event '{2}'.</value>
  </data>
  <data name="ERR_MissingSourceInterface" xml:space="preserve">
    <value>Interface '{0}' has an invalid source interface which is required to embed event '{1}'.</value>
  </data>
  <data name="ERR_InteropTypeMissingAttribute" xml:space="preserve">
    <value>Interop type '{0}' cannot be embedded because it is missing the required '{1}' attribute.</value>
  </data>
  <data name="ERR_NoPIAAssemblyMissingAttribute" xml:space="preserve">
    <value>Cannot embed interop types from assembly '{0}' because it is missing the '{1}' attribute.</value>
  </data>
  <data name="ERR_NoPIAAssemblyMissingAttributes" xml:space="preserve">
    <value>Cannot embed interop types from assembly '{0}' because it is missing either the '{1}' attribute or the '{2}' attribute.</value>
  </data>
  <data name="ERR_InteropTypesWithSameNameAndGuid" xml:space="preserve">
    <value>Cannot embed interop type '{0}' found in both assembly '{1}' and '{2}'. Consider setting the 'Embed Interop Types' property to false.</value>
  </data>
  <data name="ERR_LocalTypeNameClash" xml:space="preserve">
    <value>Embedding the interop type '{0}' from assembly '{1}' causes a name clash in the current assembly. Consider setting the 'Embed Interop Types' property to false.</value>
  </data>
  <data name="WRN_ReferencedAssemblyReferencesLinkedPIA" xml:space="preserve">
    <value>A reference was created to embedded interop assembly '{0}' because of an indirect reference to that assembly created by assembly '{1}'. Consider changing the 'Embed Interop Types' property on either assembly.</value>
  </data>
  <data name="WRN_ReferencedAssemblyReferencesLinkedPIA_Title" xml:space="preserve">
    <value>A reference was created to embedded interop assembly because of an indirect assembly reference</value>
  </data>
  <data name="WRN_ReferencedAssemblyReferencesLinkedPIA_Description" xml:space="preserve">
    <value>You have added a reference to an assembly using /link (Embed Interop Types property set to True). This instructs the compiler to embed interop type information from that assembly. However, the compiler cannot embed interop type information from that assembly because another assembly that you have referenced also references that assembly using /reference (Embed Interop Types property set to False).

To embed interop type information for both assemblies, use /link for references to each assembly (set the Embed Interop Types property to True).

To remove the warning, you can use /reference instead (set the Embed Interop Types property to False). In this case, a primary interop assembly (PIA) provides interop type information.</value>
  </data>
  <data name="ERR_GenericsUsedAcrossAssemblies" xml:space="preserve">
    <value>Type '{0}' from assembly '{1}' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.</value>
  </data>
  <data name="ERR_NoCanonicalView" xml:space="preserve">
    <value>Cannot find the interop type that matches the embedded interop type '{0}'. Are you missing an assembly reference?</value>
  </data>
  <data name="ERR_ByRefReturnUnsupported" xml:space="preserve">
    <value>By-reference return type 'ref {0}' is not supported.</value>
  </data>
  <data name="ERR_NetModuleNameMismatch" xml:space="preserve">
    <value>Module name '{0}' stored in '{1}' must match its filename.</value>
  </data>
  <data name="ERR_BadModuleName" xml:space="preserve">
    <value>Invalid module name: {0}</value>
  </data>
  <data name="ERR_BadCompilationOptionValue" xml:space="preserve">
    <value>Invalid '{0}' value: '{1}'.</value>
  </data>
  <data name="ERR_BadAppConfigPath" xml:space="preserve">
    <value>AppConfigPath must be absolute.</value>
  </data>
  <data name="WRN_AssemblyAttributeFromModuleIsOverridden" xml:space="preserve">
    <value>Attribute '{0}' from module '{1}' will be ignored in favor of the instance appearing in source</value>
  </data>
  <data name="WRN_AssemblyAttributeFromModuleIsOverridden_Title" xml:space="preserve">
    <value>Attribute will be ignored in favor of the instance appearing in source</value>
  </data>
  <data name="ERR_CmdOptionConflictsSource" xml:space="preserve">
    <value>Attribute '{0}' given in a source file conflicts with option '{1}'.</value>
  </data>
  <data name="ERR_FixedBufferTooManyDimensions" xml:space="preserve">
    <value>A fixed buffer may only have one dimension.</value>
  </data>
  <data name="WRN_ReferencedAssemblyDoesNotHaveStrongName" xml:space="preserve">
    <value>Referenced assembly '{0}' does not have a strong name.</value>
  </data>
  <data name="WRN_ReferencedAssemblyDoesNotHaveStrongName_Title" xml:space="preserve">
    <value>Referenced assembly does not have a strong name</value>
  </data>
  <data name="ERR_InvalidSignaturePublicKey" xml:space="preserve">
    <value>Invalid signature public key specified in AssemblySignatureKeyAttribute.</value>
  </data>
  <data name="ERR_ExportedTypeConflictsWithDeclaration" xml:space="preserve">
    <value>Type '{0}' exported from module '{1}' conflicts with type declared in primary module of this assembly.</value>
  </data>
  <data name="ERR_ExportedTypesConflict" xml:space="preserve">
    <value>Type '{0}' exported from module '{1}' conflicts with type '{2}' exported from module '{3}'.</value>
  </data>
  <data name="ERR_ForwardedTypeConflictsWithDeclaration" xml:space="preserve">
    <value>Forwarded type '{0}' conflicts with type declared in primary module of this assembly.</value>
  </data>
  <data name="ERR_ForwardedTypesConflict" xml:space="preserve">
    <value>Type '{0}' forwarded to assembly '{1}' conflicts with type '{2}' forwarded to assembly '{3}'.</value>
  </data>
  <data name="ERR_ForwardedTypeConflictsWithExportedType" xml:space="preserve">
    <value>Type '{0}' forwarded to assembly '{1}' conflicts with type '{2}' exported from module '{3}'.</value>
  </data>
  <data name="WRN_RefCultureMismatch" xml:space="preserve">
    <value>Referenced assembly '{0}' has different culture setting of '{1}'.</value>
  </data>
  <data name="WRN_RefCultureMismatch_Title" xml:space="preserve">
    <value>Referenced assembly has different culture setting</value>
  </data>
  <data name="ERR_AgnosticToMachineModule" xml:space="preserve">
    <value>Agnostic assembly cannot have a processor specific module '{0}'.</value>
  </data>
  <data name="ERR_ConflictingMachineModule" xml:space="preserve">
    <value>Assembly and module '{0}' cannot target different processors.</value>
  </data>
  <data name="WRN_ConflictingMachineAssembly" xml:space="preserve">
    <value>Referenced assembly '{0}' targets a different processor.</value>
  </data>
  <data name="WRN_ConflictingMachineAssembly_Title" xml:space="preserve">
    <value>Referenced assembly targets a different processor</value>
  </data>
  <data name="ERR_CryptoHashFailed" xml:space="preserve">
    <value>Cryptographic failure while creating hashes.</value>
  </data>
  <data name="ERR_MissingNetModuleReference" xml:space="preserve">
    <value>Reference to '{0}' netmodule missing.</value>
  </data>
  <data name="ERR_NetModuleNameMustBeUnique" xml:space="preserve">
    <value>Module '{0}' is already defined in this assembly. Each module must have a unique filename.</value>
  </data>
  <data name="ERR_CantReadConfigFile" xml:space="preserve">
    <value>Cannot read config file '{0}' -- '{1}'</value>
  </data>
  <data name="ERR_EncNoPIAReference" xml:space="preserve">
    <value>Cannot continue since the edit includes a reference to an embedded type: '{0}'.</value>
  </data>
  <data name="ERR_EncReferenceToAddedMember" xml:space="preserve">
    <value>Member '{0}' added during the current debug session can only be accessed from within its declaring assembly '{1}'.</value>
  </data>
  <data name="ERR_MutuallyExclusiveOptions" xml:space="preserve">
    <value>Compilation options '{0}' and '{1}' can't both be specified at the same time.</value>
  </data>
  <data name="ERR_LinkedNetmoduleMetadataMustProvideFullPEImage" xml:space="preserve">
    <value>Linked netmodule metadata must provide a full PE image: '{0}'.</value>
  </data>
  <data name="ERR_BadPrefer32OnLib" xml:space="preserve">
    <value>/platform:anycpu32bitpreferred can only be used with /t:exe, /t:winexe and /t:appcontainerexe</value>
  </data>
  <data name="IDS_PathList" xml:space="preserve">
    <value>&lt;path list&gt;</value>
  </data>
  <data name="IDS_Text" xml:space="preserve">
    <value>&lt;text&gt;</value>
  </data>
  <data name="IDS_FeatureNullPropagatingOperator" xml:space="preserve">
    <value>null propagating operator</value>
  </data>
  <data name="IDS_FeatureExpressionBodiedMethod" xml:space="preserve">
    <value>expression-bodied method</value>
  </data>
  <data name="IDS_FeatureExpressionBodiedProperty" xml:space="preserve">
    <value>expression-bodied property</value>
  </data>
  <data name="IDS_FeatureExpressionBodiedIndexer" xml:space="preserve">
    <value>expression-bodied indexer</value>
  </data>
  <data name="IDS_FeatureAutoPropertyInitializer" xml:space="preserve">
    <value>auto property initializer</value>
  </data>
  <data name="IDS_Namespace1" xml:space="preserve">
    <value>&lt;namespace&gt;</value>
  </data>
  <data name="IDS_FeatureRefLocalsReturns" xml:space="preserve">
    <value>byref locals and returns</value>
  </data>
  <data name="IDS_FeatureReadOnlyReferences" xml:space="preserve">
    <value>readonly references</value>
  </data>
  <data name="IDS_FeatureRefStructs" xml:space="preserve">
    <value>ref structs</value>
  </data>
  <data name="IDS_FeatureRefConditional" xml:space="preserve">
    <value>ref conditional expression</value>
  </data>
  <data name="IDS_FeatureRefReassignment" xml:space="preserve">
    <value>ref reassignment</value>
  </data>
  <data name="IDS_FeatureRefFor" xml:space="preserve">
    <value>ref for-loop variables</value>
  </data>
  <data name="IDS_FeatureRefForEach" xml:space="preserve">
    <value>ref foreach iteration variables</value>
  </data>
  <data name="IDS_FeatureExtensibleFixedStatement" xml:space="preserve">
    <value>extensible fixed statement</value>
  </data>
  <data name="CompilationC" xml:space="preserve">
    <value>Compilation (C#): </value>
  </data>
  <data name="SyntaxNodeIsNotWithinSynt" xml:space="preserve">
    <value>Syntax node is not within syntax tree</value>
  </data>
  <data name="LocationMustBeProvided" xml:space="preserve">
    <value>Location must be provided in order to provide minimal type qualification.</value>
  </data>
  <data name="SyntaxTreeSemanticModelMust" xml:space="preserve">
    <value>SyntaxTreeSemanticModel must be provided in order to provide minimal type qualification.</value>
  </data>
  <data name="CantReferenceCompilationOf" xml:space="preserve">
    <value>Can't reference compilation of type '{0}' from {1} compilation.</value>
  </data>
  <data name="SyntaxTreeAlreadyPresent" xml:space="preserve">
    <value>Syntax tree already present</value>
  </data>
  <data name="SubmissionCanOnlyInclude" xml:space="preserve">
    <value>Submission can only include script code.</value>
  </data>
  <data name="SubmissionCanHaveAtMostOne" xml:space="preserve">
    <value>Submission can have at most one syntax tree.</value>
  </data>
  <data name="SyntaxTreeNotFoundTo" xml:space="preserve">
    <value>SyntaxTree '{0}' not found to remove</value>
  </data>
  <data name="TreeMustHaveARootNodeWith" xml:space="preserve">
    <value>tree must have a root node with SyntaxKind.CompilationUnit</value>
  </data>
  <data name="TypeArgumentCannotBeNull" xml:space="preserve">
    <value>Type argument cannot be null</value>
  </data>
  <data name="WrongNumberOfTypeArguments" xml:space="preserve">
    <value>Wrong number of type arguments</value>
  </data>
  <data name="NameConflictForName" xml:space="preserve">
    <value>Name conflict for name {0}</value>
  </data>
  <data name="LookupOptionsHasInvalidCombo" xml:space="preserve">
    <value>LookupOptions has an invalid combination of options</value>
  </data>
  <data name="ItemsMustBeNonEmpty" xml:space="preserve">
    <value>items: must be non-empty</value>
  </data>
  <data name="UseVerbatimIdentifier" xml:space="preserve">
    <value>Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier or Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier to create identifier tokens.</value>
  </data>
  <data name="UseLiteralForTokens" xml:space="preserve">
    <value>Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal to create character literal tokens.</value>
  </data>
  <data name="UseLiteralForNumeric" xml:space="preserve">
    <value>Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal to create numeric literal tokens.</value>
  </data>
  <data name="ThisMethodCanOnlyBeUsedToCreateTokens" xml:space="preserve">
    <value>This method can only be used to create tokens - {0} is not a token kind.</value>
  </data>
  <data name="GenericParameterDefinition" xml:space="preserve">
    <value>Generic parameter is definition when expected to be reference {0}</value>
  </data>
  <data name="InvalidGetDeclarationNameMultipleDeclarators" xml:space="preserve">
    <value>Called GetDeclarationName for a declaration node that can possibly contain multiple variable declarators.</value>
  </data>
  <data name="TreeNotPartOfCompilation" xml:space="preserve">
    <value>tree not part of compilation</value>
  </data>
  <data name="PositionIsNotWithinSyntax" xml:space="preserve">
    <value>Position is not within syntax tree with full span {0}</value>
  </data>
  <data name="WRN_BadUILang" xml:space="preserve">
    <value>The language name '{0}' is invalid.</value>
  </data>
  <data name="WRN_BadUILang_Title" xml:space="preserve">
    <value>The language name is invalid</value>
  </data>
  <data name="ERR_UnsupportedTransparentIdentifierAccess" xml:space="preserve">
    <value>Transparent identifier member access failed for field '{0}' of '{1}'.  Does the data being queried implement the query pattern?</value>
  </data>
  <data name="ERR_ParamDefaultValueDiffersFromAttribute" xml:space="preserve">
    <value>The parameter has multiple distinct default values.</value>
  </data>
  <data name="ERR_FieldHasMultipleDistinctConstantValues" xml:space="preserve">
    <value>The field has multiple distinct constant values.</value>
  </data>
  <data name="WRN_UnqualifiedNestedTypeInCref" xml:space="preserve">
    <value>Within cref attributes, nested types of generic types should be qualified.</value>
  </data>
  <data name="WRN_UnqualifiedNestedTypeInCref_Title" xml:space="preserve">
    <value>Within cref attributes, nested types of generic types should be qualified</value>
  </data>
  <data name="NotACSharpSymbol" xml:space="preserve">
    <value>Not a C# symbol.</value>
  </data>
  <data name="HDN_UnusedUsingDirective" xml:space="preserve">
    <value>Unnecessary using directive.</value>
  </data>
  <data name="HDN_UnusedExternAlias" xml:space="preserve">
    <value>Unused extern alias.</value>
  </data>
  <data name="ElementsCannotBeNull" xml:space="preserve">
    <value>Elements cannot be null.</value>
  </data>
  <data name="IDS_LIB_ENV" xml:space="preserve">
    <value>LIB environment variable</value>
  </data>
  <data name="IDS_LIB_OPTION" xml:space="preserve">
    <value>/LIB option</value>
  </data>
  <data name="IDS_REFERENCEPATH_OPTION" xml:space="preserve">
    <value>/REFERENCEPATH option</value>
  </data>
  <data name="IDS_DirectoryDoesNotExist" xml:space="preserve">
    <value>directory does not exist</value>
  </data>
  <data name="IDS_DirectoryHasInvalidPath" xml:space="preserve">
    <value>path is too long or invalid</value>
  </data>
  <data name="WRN_NoRuntimeMetadataVersion" xml:space="preserve">
    <value>No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.</value>
  </data>
  <data name="WRN_NoRuntimeMetadataVersion_Title" xml:space="preserve">
    <value>No value for RuntimeMetadataVersion found</value>
  </data>
  <data name="WrongSemanticModelType" xml:space="preserve">
    <value>Expected a {0} SemanticModel.</value>
  </data>
  <data name="IDS_FeatureLambda" xml:space="preserve">
    <value>lambda expression</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion1" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 1. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion2" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 2. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion3" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 3. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion4" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 4. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion5" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 5. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion6" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 6. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion7" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 7.0. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_FeatureIsUnimplemented" xml:space="preserve">
    <value>Feature '{0}' is not implemented in this compiler.</value>
  </data>
  <data name="IDS_VersionExperimental" xml:space="preserve">
    <value>'experimental'</value>
  </data>
  <data name="PositionNotWithinTree" xml:space="preserve">
    <value>Position must be within span of the syntax tree.</value>
  </data>
  <data name="SpeculatedSyntaxNodeCannotBelongToCurrentCompilation" xml:space="preserve">
    <value>Syntax node to be speculated cannot belong to a syntax tree from the current compilation.</value>
  </data>
  <data name="ChainingSpeculativeModelIsNotSupported" xml:space="preserve">
    <value>Chaining speculative semantic model is not supported. You should create a speculative model from the non-speculative ParentModel.</value>
  </data>
  <data name="IDS_ToolName" xml:space="preserve">
    <value>Microsoft (R) Visual C# Compiler</value>
  </data>
  <data name="IDS_LogoLine1" xml:space="preserve">
    <value>{0} version {1}</value>
  </data>
  <data name="IDS_LogoLine2" xml:space="preserve">
    <value>Copyright (C) Microsoft Corporation. All rights reserved.</value>
  </data>
  <data name="IDS_LangVersions" xml:space="preserve">
    <value>Supported language versions:</value>
  </data>
  <data name="IDS_CSCHelp" xml:space="preserve">
    <value>
                              Visual C# Compiler Options

                        - OUTPUT FILES -
 /out:&lt;file&gt;                   Specify output file name (default: base name of
                               file with main class or first file)
 /target:exe                   Build a console executable (default) (Short
                               form: /t:exe)
 /target:winexe                Build a Windows executable (Short form:
                               /t:winexe)
 /target:library               Build a library (Short form: /t:library)
 /target:module                Build a module that can be added to another
                               assembly (Short form: /t:module)
 /target:appcontainerexe       Build an Appcontainer executable (Short form:
                               /t:appcontainerexe)
 /target:winmdobj              Build a Windows Runtime intermediate file that
                               is consumed by WinMDExp (Short form: /t:winmdobj)
 /doc:&lt;file&gt;                   XML Documentation file to generate
 /refout:&lt;file&gt;                Reference assembly output to generate
 /platform:&lt;string&gt;            Limit which platforms this code can run on: x86,
                               Itanium, x64, arm, arm64, anycpu32bitpreferred, or
                               anycpu. The default is anycpu.

                        - INPUT FILES -
 /recurse:&lt;wildcard&gt;           Include all files in the current directory and
                               subdirectories according to the wildcard
                               specifications
 /reference:&lt;alias&gt;=&lt;file&gt;     Reference metadata from the specified assembly
                               file using the given alias (Short form: /r)
 /reference:&lt;file list&gt;        Reference metadata from the specified assembly
                               files (Short form: /r)
 /addmodule:&lt;file list&gt;        Link the specified modules into this assembly
 /link:&lt;file list&gt;             Embed metadata from the specified interop
                               assembly files (Short form: /l)
 /analyzer:&lt;file list&gt;         Run the analyzers from this assembly
                               (Short form: /a)
 /additionalfile:&lt;file list&gt;   Additional files that don't directly affect code
                               generation but may be used by analyzers for producing
                               errors or warnings.
 /embed                        Embed all source files in the PDB.
 /embed:&lt;file list&gt;            Embed specific files in the PDB

                        - RESOURCES -
 /win32res:&lt;file&gt;              Specify a Win32 resource file (.res)
 /win32icon:&lt;file&gt;             Use this icon for the output
 /win32manifest:&lt;file&gt;         Specify a Win32 manifest file (.xml)
 /nowin32manifest              Do not include the default Win32 manifest
 /resource:&lt;resinfo&gt;           Embed the specified resource (Short form: /res)
 /linkresource:&lt;resinfo&gt;       Link the specified resource to this assembly
                               (Short form: /linkres) Where the resinfo format
                               is &lt;file&gt;[,&lt;string name&gt;[,public|private]]

                        - CODE GENERATION -
 /debug[+|-]                   Emit debugging information
 /debug:{full|pdbonly|portable|embedded}
                               Specify debugging type ('full' is default,
                               'portable' is a cross-platform format,
                               'embedded' is a cross-platform format embedded into
                               the target .dll or .exe)
 /optimize[+|-]                Enable optimizations (Short form: /o)
 /deterministic                Produce a deterministic assembly
                               (including module version GUID and timestamp)
 /refonly                      Produce a reference assembly in place of the main output
 /instrument:TestCoverage      Produce an assembly instrumented to collect
                               coverage information
 /sourcelink:&lt;file&gt;            Source link info to embed into PDB.

                        - ERRORS AND WARNINGS -
 /warnaserror[+|-]             Report all warnings as errors
 /warnaserror[+|-]:&lt;warn list&gt; Report specific warnings as errors
 /warn:&lt;n&gt;                     Set warning level (0-4) (Short form: /w)
 /nowarn:&lt;warn list&gt;           Disable specific warning messages
 /ruleset:&lt;file&gt;               Specify a ruleset file that disables specific
                               diagnostics.
 /errorlog:&lt;file&gt;              Specify a file to log all compiler and analyzer
                               diagnostics.
 /reportanalyzer               Report additional analyzer information, such as
                               execution time.

                        - LANGUAGE -
 /checked[+|-]                 Generate overflow checks
 /unsafe[+|-]                  Allow 'unsafe' code
 /define:&lt;symbol list&gt;         Define conditional compilation symbol(s) (Short
                               form: /d)
 /langversion:?                Display the allowed values for language version
 /langversion:&lt;string&gt;         Specify language version such as
                               `default` (latest major version), or
                               `latest` (latest version, including minor versions),
                               or specific versions like `6` or `7.1`

                        - SECURITY -
 /delaysign[+|-]               Delay-sign the assembly using only the public
                               portion of the strong name key
 /publicsign[+|-]              Public-sign the assembly using only the public
                               portion of the strong name key
 /keyfile:&lt;file&gt;               Specify a strong name key file
 /keycontainer:&lt;string&gt;        Specify a strong name key container
 /highentropyva[+|-]           Enable high-entropy ASLR

                        - MISCELLANEOUS -
 @&lt;file&gt;                       Read response file for more options
 /help                         Display this usage message (Short form: /?)
 /nologo                       Suppress compiler copyright message
 /noconfig                     Do not auto include CSC.RSP file
 /parallel[+|-]                Concurrent build.
 /version                      Display the compiler version number and exit.

                        - ADVANCED -
 /baseaddress:&lt;address&gt;        Base address for the library to be built
 /checksumalgorithm:&lt;alg&gt;      Specify algorithm for calculating source file
                               checksum stored in PDB. Supported values are:
                               SHA1 (default) or SHA256.
 /codepage:&lt;n&gt;                 Specify the codepage to use when opening source
                               files
 /utf8output                   Output compiler messages in UTF-8 encoding
 /main:&lt;type&gt;                  Specify the type that contains the entry point
                               (ignore all other possible entry points) (Short
                               form: /m)
 /fullpaths                    Compiler generates fully qualified paths
 /filealign:&lt;n&gt;                Specify the alignment used for output file
                               sections
 /pathmap:&lt;K1&gt;=&lt;V1&gt;,&lt;K2&gt;=&lt;V2&gt;,...
                               Specify a mapping for source path names output by
                               the compiler.
 /pdb:&lt;file&gt;                   Specify debug information file name (default:
                               output file name with .pdb extension)
 /errorendlocation             Output line and column of the end location of
                               each error
 /preferreduilang              Specify the preferred output language name.
 /nostdlib[+|-]                Do not reference standard library (mscorlib.dll)
 /subsystemversion:&lt;string&gt;    Specify subsystem version of this assembly
 /lib:&lt;file list&gt;              Specify additional directories to search in for
                               references
 /errorreport:&lt;string&gt;         Specify how to handle internal compiler errors:
                               prompt, send, queue, or none. The default is
                               queue.
 /appconfig:&lt;file&gt;             Specify an application configuration file
                               containing assembly binding settings
 /moduleassemblyname:&lt;string&gt;  Name of the assembly which this module will be
                               a part of
 /modulename:&lt;string&gt;          Specify the name of the source module
</value>
    <comment>Visual C# Compiler Options</comment>
  </data>
  <data name="ERR_ComImportWithInitializers" xml:space="preserve">
    <value>'{0}': a class with the ComImport attribute cannot specify field initializers.</value>
  </data>
  <data name="WRN_PdbLocalNameTooLong" xml:space="preserve">
    <value>Local name '{0}' is too long for PDB.  Consider shortening or compiling without /debug.</value>
  </data>
  <data name="WRN_PdbLocalNameTooLong_Title" xml:space="preserve">
    <value>Local name is too long for PDB</value>
  </data>
  <data name="ERR_RetNoObjectRequiredLambda" xml:space="preserve">
    <value>Anonymous function converted to a void returning delegate cannot return a value</value>
  </data>
  <data name="ERR_TaskRetNoObjectRequiredLambda" xml:space="preserve">
    <value>Async lambda expression converted to a 'Task' returning delegate cannot return a value. Did you intend to return 'Task&lt;T&gt;'?</value>
  </data>
  <data name="WRN_AnalyzerCannotBeCreated" xml:space="preserve">
    <value>An instance of analyzer {0} cannot be created from {1} : {2}.</value>
  </data>
  <data name="WRN_AnalyzerCannotBeCreated_Title" xml:space="preserve">
    <value>An analyzer instance cannot be created</value>
  </data>
  <data name="WRN_NoAnalyzerInAssembly" xml:space="preserve">
    <value>The assembly {0} does not contain any analyzers.</value>
  </data>
  <data name="WRN_NoAnalyzerInAssembly_Title" xml:space="preserve">
    <value>Assembly does not contain any analyzers</value>
  </data>
  <data name="WRN_UnableToLoadAnalyzer" xml:space="preserve">
    <value>Unable to load Analyzer assembly {0} : {1}</value>
  </data>
  <data name="WRN_UnableToLoadAnalyzer_Title" xml:space="preserve">
    <value>Unable to load Analyzer assembly</value>
  </data>
  <data name="INF_UnableToLoadSomeTypesInAnalyzer" xml:space="preserve">
    <value>Skipping some types in analyzer assembly {0} due to a ReflectionTypeLoadException : {1}.</value>
  </data>
  <data name="ERR_CantReadRulesetFile" xml:space="preserve">
    <value>Error reading ruleset file {0} - {1}</value>
  </data>
  <data name="ERR_BadPdbData" xml:space="preserve">
    <value>Error reading debug information for '{0}'</value>
  </data>
  <data name="IDS_OperationCausedStackOverflow" xml:space="preserve">
    <value>Operation caused a stack overflow.</value>
  </data>
  <data name="WRN_IdentifierOrNumericLiteralExpected" xml:space="preserve">
    <value>Expected identifier or numeric literal.</value>
  </data>
  <data name="WRN_IdentifierOrNumericLiteralExpected_Title" xml:space="preserve">
    <value>Expected identifier or numeric literal</value>
  </data>
  <data name="ERR_InitializerOnNonAutoProperty" xml:space="preserve">
    <value>Only auto-implemented properties can have initializers.</value>
  </data>
  <data name="ERR_AutoPropertyMustHaveGetAccessor" xml:space="preserve">
    <value>Auto-implemented properties must have get accessors.</value>
  </data>
  <data name="ERR_AutoPropertyMustOverrideSet" xml:space="preserve">
    <value>Auto-implemented properties must override all accessors of the overridden property.</value>
  </data>
  <data name="ERR_AutoPropertyInitializerInInterface" xml:space="preserve">
    <value>Auto-implemented properties inside interfaces cannot have initializers.</value>
  </data>
  <data name="ERR_InitializerInStructWithoutExplicitConstructor" xml:space="preserve">
    <value>Structs without explicit constructors cannot contain members with initializers.</value>
  </data>
  <data name="ERR_EncodinglessSyntaxTree" xml:space="preserve">
    <value>Cannot emit debug information for a source text without encoding.</value>
  </data>
  <data name="ERR_BlockBodyAndExpressionBody" xml:space="preserve">
    <value>Block bodies and expression bodies cannot both be provided.</value>
  </data>
  <data name="ERR_SwitchFallOut" xml:space="preserve">
    <value>Control cannot fall out of switch from final case label ('{0}')</value>
  </data>
  <data name="ERR_UnexpectedBoundGenericName" xml:space="preserve">
    <value>Type arguments are not allowed in the nameof operator.</value>
  </data>
  <data name="ERR_NullPropagatingOpInExpressionTree" xml:space="preserve">
    <value>An expression tree lambda may not contain a null propagating operator.</value>
  </data>
  <data name="ERR_DictionaryInitializerInExpressionTree" xml:space="preserve">
    <value>An expression tree lambda may not contain a dictionary initializer.</value>
  </data>
  <data name="ERR_ExtensionCollectionElementInitializerInExpressionTree" xml:space="preserve">
    <value>An extension Add method is not supported for a collection initializer in an expression lambda.</value>
  </data>
  <data name="IDS_FeatureNameof" xml:space="preserve">
    <value>nameof operator</value>
  </data>
  <data name="IDS_FeatureDictionaryInitializer" xml:space="preserve">
    <value>dictionary initializer</value>
  </data>
  <data name="ERR_UnclosedExpressionHole" xml:space="preserve">
    <value>Missing close delimiter '}' for interpolated expression started with '{'.</value>
  </data>
  <data name="ERR_SingleLineCommentInExpressionHole" xml:space="preserve">
    <value>A single-line comment may not be used in an interpolated string.</value>
  </data>
  <data name="ERR_InsufficientStack" xml:space="preserve">
    <value>An expression is too long or complex to compile</value>
  </data>
  <data name="ERR_ExpressionHasNoName" xml:space="preserve">
    <value>Expression does not have a name.</value>
  </data>
  <data name="ERR_SubexpressionNotInNameof" xml:space="preserve">
    <value>Sub-expression cannot be used in an argument to nameof.</value>
  </data>
  <data name="ERR_AliasQualifiedNameNotAnExpression" xml:space="preserve">
    <value>An alias-qualified name is not an expression.</value>
  </data>
  <data name="ERR_NameofMethodGroupWithTypeParameters" xml:space="preserve">
    <value>Type parameters are not allowed on a method group as an argument to 'nameof'.</value>
  </data>
  <data name="NoNoneSearchCriteria" xml:space="preserve">
    <value>SearchCriteria is expected.</value>
  </data>
  <data name="ERR_InvalidAssemblyCulture" xml:space="preserve">
    <value>Assembly culture strings may not contain embedded NUL characters.</value>
  </data>
  <data name="IDS_FeatureUsingStatic" xml:space="preserve">
    <value>using static</value>
  </data>
  <data name="IDS_FeatureInterpolatedStrings" xml:space="preserve">
    <value>interpolated strings</value>
  </data>
  <data name="IDS_AwaitInCatchAndFinally" xml:space="preserve">
    <value>await in catch blocks and finally blocks</value>
  </data>
  <data name="IDS_FeatureBinaryLiteral" xml:space="preserve">
    <value>binary literals</value>
  </data>
  <data name="IDS_FeatureDigitSeparator" xml:space="preserve">
    <value>digit separators</value>
  </data>
  <data name="IDS_FeatureLocalFunctions" xml:space="preserve">
    <value>local functions</value>
  </data>
  <data name="ERR_UnescapedCurly" xml:space="preserve">
    <value>A '{0}' character must be escaped (by doubling) in an interpolated string.</value>
  </data>
  <data name="ERR_EscapedCurly" xml:space="preserve">
    <value>A '{0}' character may only be escaped by doubling '{0}{0}' in an interpolated string.</value>
  </data>
  <data name="ERR_TrailingWhitespaceInFormatSpecifier" xml:space="preserve">
    <value>A format specifier may not contain trailing whitespace.</value>
  </data>
  <data name="ERR_EmptyFormatSpecifier" xml:space="preserve">
    <value>Empty format specifier.</value>
  </data>
  <data name="ERR_ErrorInReferencedAssembly" xml:space="preserve">
    <value>There is an error in a referenced assembly '{0}'.</value>
  </data>
  <data name="ERR_ExpressionOrDeclarationExpected" xml:space="preserve">
    <value>Expression or declaration statement expected.</value>
  </data>
  <data name="ERR_NameofExtensionMethod" xml:space="preserve">
    <value>Extension method groups are not allowed as an argument to 'nameof'.</value>
  </data>
  <data name="WRN_AlignmentMagnitude" xml:space="preserve">
    <value>Alignment value {0} has a magnitude greater than {1} and may result in a large formatted string.</value>
  </data>
  <data name="HDN_UnusedExternAlias_Title" xml:space="preserve">
    <value>Unused extern alias</value>
  </data>
  <data name="HDN_UnusedUsingDirective_Title" xml:space="preserve">
    <value>Unnecessary using directive</value>
  </data>
  <data name="INF_UnableToLoadSomeTypesInAnalyzer_Title" xml:space="preserve">
    <value>Skip loading types in analyzer assembly that fail due to a ReflectionTypeLoadException</value>
  </data>
  <data name="WRN_AlignmentMagnitude_Title" xml:space="preserve">
    <value>Alignment value has a magnitude that may result in a large formatted string</value>
  </data>
  <data name="ERR_ConstantStringTooLong" xml:space="preserve">
    <value>Length of String constant exceeds current memory limit.  Try splitting the string into multiple constants.</value>
  </data>
  <data name="ERR_TupleTooFewElements" xml:space="preserve">
    <value>Tuple must contain at least two elements.</value>
  </data>
  <data name="ERR_DebugEntryPointNotSourceMethodDefinition" xml:space="preserve">
    <value>Debug entry point must be a definition of a method declared in the current compilation.</value>
  </data>
  <data name="ERR_LoadDirectiveOnlyAllowedInScripts" xml:space="preserve">
    <value>#load is only allowed in scripts</value>
  </data>
  <data name="ERR_PPLoadFollowsToken" xml:space="preserve">
    <value>Cannot use #load after first token in file</value>
  </data>
  <data name="CouldNotFindFile" xml:space="preserve">
    <value>Could not find file.</value>
    <comment>File path referenced in source (#load) could not be resolved.</comment>
  </data>
  <data name="SyntaxTreeFromLoadNoRemoveReplace" xml:space="preserve">
    <value>SyntaxTree '{0}' resulted from a #load directive and cannot be removed or replaced directly.</value>
  </data>
  <data name="ERR_SourceFileReferencesNotSupported" xml:space="preserve">
    <value>Source file references are not supported.</value>
  </data>
  <data name="ERR_InvalidPathMap" xml:space="preserve">
    <value>The pathmap option was incorrectly formatted.</value>
  </data>
  <data name="ERR_InvalidReal" xml:space="preserve">
    <value>Invalid real literal.</value>
  </data>
  <data name="ERR_AutoPropertyCannotBeRefReturning" xml:space="preserve">
    <value>Auto-implemented properties cannot return by reference</value>
  </data>
  <data name="ERR_RefPropertyMustHaveGetAccessor" xml:space="preserve">
    <value>Properties which return by reference must have a get accessor</value>
  </data>
  <data name="ERR_RefPropertyCannotHaveSetAccessor" xml:space="preserve">
    <value>Properties which return by reference cannot have set accessors</value>
  </data>
  <data name="ERR_CantChangeRefReturnOnOverride" xml:space="preserve">
    <value>'{0}' must match by reference return of overridden member '{1}'</value>
  </data>
  <data name="ERR_MustNotHaveRefReturn" xml:space="preserve">
    <value>By-reference returns may only be used in methods that return by reference</value>
  </data>
  <data name="ERR_MustHaveRefReturn" xml:space="preserve">
    <value>By-value returns may only be used in methods that return by value</value>
  </data>
  <data name="ERR_RefReturnMustHaveIdentityConversion" xml:space="preserve">
    <value>The return expression must be of type '{0}' because this method returns by reference</value>
  </data>
  <data name="ERR_CloseUnimplementedInterfaceMemberWrongRefReturn" xml:space="preserve">
    <value>'{0}' does not implement interface member '{1}'. '{2}' cannot implement '{1}' because it does not have matching return by reference.</value>
  </data>
  <data name="ERR_BadIteratorReturnRef" xml:space="preserve">
    <value>The body of '{0}' cannot be an iterator block because '{0}' returns by reference</value>
  </data>
  <data name="ERR_BadRefReturnExpressionTree" xml:space="preserve">
    <value>Lambda expressions that return by reference cannot be converted to expression trees</value>
  </data>
  <data name="ERR_RefReturningCallInExpressionTree" xml:space="preserve">
    <value>An expression tree lambda may not contain a call to a method, property, or indexer that returns by reference</value>
  </data>
  <data name="ERR_RefReturnLvalueExpected" xml:space="preserve">
    <value>An expression cannot be used in this context because it may not be passed or returned by reference</value>
  </data>
  <data name="ERR_RefReturnNonreturnableLocal" xml:space="preserve">
    <value>Cannot return '{0}' by reference because it was initialized to a value that cannot be returned by reference</value>
  </data>
  <data name="ERR_RefReturnNonreturnableLocal2" xml:space="preserve">
    <value>Cannot return by reference a member of '{0}' because it was initialized to a value that cannot be returned by reference</value>
  </data>
  <data name="ERR_RefReturnReadonlyLocal" xml:space="preserve">
    <value>Cannot return '{0}' by reference because it is read-only</value>
  </data>
  <data name="ERR_RefReturnRangeVariable" xml:space="preserve">
    <value>Cannot return the range variable '{0}' by reference</value>
  </data>
  <data name="ERR_RefReturnReadonlyLocalCause" xml:space="preserve">
    <value>Cannot return '{0}' by reference because it is a '{1}'</value>
  </data>
  <data name="ERR_RefReturnReadonlyLocal2Cause" xml:space="preserve">
    <value>Cannot return fields of '{0}' by reference because it is a '{1}'</value>
  </data>
  <data name="ERR_RefReturnReadonly" xml:space="preserve">
    <value>A readonly field cannot be returned by writable reference</value>
  </data>
  <data name="ERR_RefReturnReadonlyStatic" xml:space="preserve">
    <value>A static readonly field cannot be returned by writable reference</value>
  </data>
  <data name="ERR_RefReturnReadonly2" xml:space="preserve">
    <value>Members of readonly field '{0}' cannot be returned by writable reference</value>
  </data>
  <data name="ERR_RefReturnReadonlyStatic2" xml:space="preserve">
    <value>Fields of static readonly field '{0}' cannot be returned by writable reference</value>
  </data>
  <data name="ERR_RefReturnParameter" xml:space="preserve">
    <value>Cannot return a parameter by reference '{0}' because it is not a ref or out parameter</value>
  </data>
  <data name="ERR_RefReturnParameter2" xml:space="preserve">
    <value>Cannot return by reference a member of parameter '{0}' because it is not a ref or out parameter</value>
  </data>
  <data name="ERR_RefReturnLocal" xml:space="preserve">
    <value>Cannot return local '{0}' by reference because it is not a ref local</value>
  </data>
  <data name="ERR_RefReturnLocal2" xml:space="preserve">
    <value>Cannot return a member of local '{0}' by reference because it is not a ref local</value>
  </data>
  <data name="ERR_RefReturnStructThis" xml:space="preserve">
    <value>Struct members cannot return 'this' or other instance members by reference</value>
  </data>
  <data name="ERR_EscapeOther" xml:space="preserve">
    <value>Expression cannot be used in this context because it may indirectly expose variables outside of their declaration scope</value>
  </data>
  <data name="ERR_EscapeLocal" xml:space="preserve">
    <value>Cannot use local '{0}' in this context because it may expose referenced variables outside of their declaration scope</value>
  </data>
  <data name="ERR_EscapeCall" xml:space="preserve">
    <value>Cannot use a result of '{0}' in this context because it may expose variables referenced by parameter '{1}' outside of their declaration scope</value>
  </data>
  <data name="ERR_EscapeCall2" xml:space="preserve">
    <value>Cannot use a member of result of '{0}' in this context because it may expose variables referenced by parameter '{1}' outside of their declaration scope</value>
  </data>
  <data name="ERR_CallArgMixing" xml:space="preserve">
    <value>This combination of arguments to '{0}' is disallowed because it may expose variables referenced by parameter '{1}' outside of their declaration scope</value>
  </data>
  <data name="ERR_MismatchedRefEscapeInTernary" xml:space="preserve">
    <value>Branches of a ref ternary operator cannot refer to variables with incompatible declaration scopes</value>
  </data>
  <data name="ERR_EscapeStackAlloc" xml:space="preserve">
    <value>A result of a stackalloc expression of type '{0}' cannot be used in this context because it may be exposed outside of the containing method</value>
  </data>
  <data name="ERR_InitializeByValueVariableWithReference" xml:space="preserve">
    <value>Cannot initialize a by-value variable with a reference</value>
  </data>
  <data name="ERR_InitializeByReferenceVariableWithValue" xml:space="preserve">
    <value>Cannot initialize a by-reference variable with a value</value>
  </data>
  <data name="ERR_RefAssignmentMustHaveIdentityConversion" xml:space="preserve">
    <value>The expression must be of type '{0}' because it is being assigned by reference</value>
  </data>
  <data name="ERR_ByReferenceVariableMustBeInitialized" xml:space="preserve">
    <value>A declaration of a by-reference variable must have an initializer</value>
  </data>
  <data name="ERR_AnonDelegateCantUseLocal" xml:space="preserve">
    <value>Cannot use ref local '{0}' inside an anonymous method, lambda expression, or query expression</value>
  </data>
  <data name="ERR_BadIteratorLocalType" xml:space="preserve">
    <value>Iterators cannot have by reference locals</value>
  </data>
  <data name="ERR_BadAsyncLocalType" xml:space="preserve">
    <value>Async methods cannot have by reference locals</value>
  </data>
  <data name="ERR_RefReturningCallAndAwait" xml:space="preserve">
    <value>'await' cannot be used in an expression containing a call to '{0}' because it returns by reference</value>
  </data>
  <data name="ERR_RefConditionalAndAwait" xml:space="preserve">
    <value>'await' cannot be used in an expression containing a ref conditional operator</value>
  </data>
  <data name="ERR_RefConditionalNeedsTwoRefs" xml:space="preserve">
    <value>Both conditional operator values must be ref values or neither may be a ref value</value>
  </data>
  <data name="ERR_RefConditionalDifferentTypes" xml:space="preserve">
    <value>The expression must be of type '{0}' to match the alternative ref value</value>
  </data>
  <data name="ERR_ExpressionTreeContainsLocalFunction" xml:space="preserve">
    <value>An expression tree may not contain a reference to a local function</value>
  </data>
  <data name="ERR_DynamicLocalFunctionParamsParameter" xml:space="preserve">
    <value>Cannot pass argument with dynamic type to params parameter '{0}' of local function '{1}'.</value>
  </data>
  <data name="SyntaxTreeIsNotASubmission" xml:space="preserve">
    <value>Syntax tree should be created from a submission.</value>
  </data>
  <data name="ERR_TooManyUserStrings" xml:space="preserve">
    <value>Combined length of user strings used by the program exceeds allowed limit. Try to decrease use of string literals.</value>
  </data>
  <data name="ERR_PatternNullableType" xml:space="preserve">
    <value>It is not legal to use nullable type '{0}' in a pattern; use the underlying type '{1}' instead.</value>
  </data>
  <data name="ERR_BadIsPatternExpression" xml:space="preserve">
    <value>Invalid operand for pattern match; value required, but found '{0}'.</value>
  </data>
  <data name="ERR_PeWritingFailure" xml:space="preserve">
    <value>An error occurred while writing the output file: {0}.</value>
  </data>
  <data name="ERR_TupleDuplicateElementName" xml:space="preserve">
    <value>Tuple element names must be unique.</value>
  </data>
  <data name="ERR_TupleReservedElementName" xml:space="preserve">
    <value>Tuple element name '{0}' is only allowed at position {1}.</value>
  </data>
  <data name="ERR_TupleReservedElementNameAnyPosition" xml:space="preserve">
    <value>Tuple element name '{0}' is disallowed at any position.</value>
  </data>
  <data name="ERR_PredefinedTypeMemberNotFoundInAssembly" xml:space="preserve">
    <value>Member '{0}' was not found on type '{1}' from assembly '{2}'.</value>
  </data>
  <data name="IDS_FeatureTuples" xml:space="preserve">
    <value>tuples</value>
  </data>
  <data name="ERR_MissingDeconstruct" xml:space="preserve">
    <value>No suitable Deconstruct instance or extension method was found for type '{0}', with {1} out parameters and a void return type.</value>
  </data>
  <data name="ERR_DeconstructRequiresExpression" xml:space="preserve">
    <value>Deconstruct assignment requires an expression with a type on the right-hand-side.</value>
  </data>
  <data name="ERR_SwitchExpressionValueExpected" xml:space="preserve">
    <value>The switch expression must be a value; found '{0}'.</value>
  </data>
  <data name="ERR_PatternIsSubsumed" xml:space="preserve">
    <value>The switch case has already been handled by a previous case.</value>
  </data>
  <data name="ERR_PatternWrongType" xml:space="preserve">
    <value>An expression of type '{0}' cannot be handled by a pattern of type '{1}'.</value>
  </data>
  <data name="WRN_AttributeIgnoredWhenPublicSigning" xml:space="preserve">
    <value>Attribute '{0}' is ignored when public signing is specified.</value>
  </data>
  <data name="WRN_AttributeIgnoredWhenPublicSigning_Title" xml:space="preserve">
    <value>Attribute is ignored when public signing is specified.</value>
  </data>
  <data name="ERR_OptionMustBeAbsolutePath" xml:space="preserve">
    <value>Option '{0}' must be an absolute path.</value>
  </data>
  <data name="ERR_ConversionNotTupleCompatible" xml:space="preserve">
    <value>Tuple with {0} elements cannot be converted to type '{1}'.</value>
  </data>
  <data name="IDS_FeatureOutVar" xml:space="preserve">
    <value>out variable declaration</value>
  </data>
  <data name="ERR_ImplicitlyTypedOutVariableUsedInTheSameArgumentList" xml:space="preserve">
    <value>Reference to an implicitly-typed out variable '{0}' is not permitted in the same argument list.</value>
  </data>
  <data name="ERR_TypeInferenceFailedForImplicitlyTypedOutVariable" xml:space="preserve">
    <value>Cannot infer the type of implicitly-typed out variable '{0}'.</value>
  </data>
  <data name="ERR_TypeInferenceFailedForImplicitlyTypedDeconstructionVariable" xml:space="preserve">
    <value>Cannot infer the type of implicitly-typed deconstruction variable '{0}'.</value>
  </data>
  <data name="ERR_DiscardTypeInferenceFailed" xml:space="preserve">
    <value>Cannot infer the type of implicitly-typed discard.</value>
  </data>
  <data name="ERR_DeconstructWrongCardinality" xml:space="preserve">
    <value>Cannot deconstruct a tuple of '{0}' elements into '{1}' variables.</value>
  </data>
  <data name="ERR_CannotDeconstructDynamic" xml:space="preserve">
    <value>Cannot deconstruct dynamic objects.</value>
  </data>
  <data name="ERR_DeconstructTooFewElements" xml:space="preserve">
    <value>Deconstruction must contain at least two variables.</value>
  </data>
  <data name="TypeMustBeVar" xml:space="preserve">
    <value>The type must be 'var'.</value>
  </data>
  <data name="WRN_TupleLiteralNameMismatch" xml:space="preserve">
    <value>The tuple element name '{0}' is ignored because a different name or no name is specified by the target type '{1}'.</value>
  </data>
  <data name="WRN_TupleLiteralNameMismatch_Title" xml:space="preserve">
    <value>The tuple element name is ignored because a different name or no name is specified by the assignment target.</value>
  </data>
  <data name="WRN_TupleBinopLiteralNameMismatch" xml:space="preserve">
    <value>The tuple element name '{0}' is ignored because a different name or no name is specified on the other side of the tuple == or != operator.</value>
  </data>
  <data name="WRN_TupleBinopLiteralNameMismatch_Title" xml:space="preserve">
    <value>The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator.</value>
  </data>
  <data name="ERR_PredefinedValueTupleTypeMustBeStruct" xml:space="preserve">
    <value>Predefined type '{0}' must be a struct.</value>
  </data>
  <data name="ERR_NewWithTupleTypeSyntax" xml:space="preserve">
    <value>'new' cannot be used with tuple type. Use a tuple literal expression instead.</value>
  </data>
  <data name="ERR_DeconstructionVarFormDisallowsSpecificType" xml:space="preserve">
    <value>Deconstruction 'var (...)' form disallows a specific type for 'var'.</value>
  </data>
  <data name="ERR_TupleElementNamesAttributeMissing" xml:space="preserve">
    <value>Cannot define a class or member that utilizes tuples because the compiler required type '{0}' cannot be found. Are you missing a reference?</value>
  </data>
  <data name="ERR_ExplicitTupleElementNamesAttribute" xml:space="preserve">
    <value>Cannot reference 'System.Runtime.CompilerServices.TupleElementNamesAttribute' explicitly. Use the tuple syntax to define tuple names.</value>
  </data>
  <data name="ERR_ExpressionTreeContainsOutVariable" xml:space="preserve">
    <value>An expression tree may not contain an out argument variable declaration.</value>
  </data>
  <data name="ERR_ExpressionTreeContainsDiscard" xml:space="preserve">
    <value>An expression tree may not contain a discard.</value>
  </data>
  <data name="ERR_ExpressionTreeContainsIsMatch" xml:space="preserve">
    <value>An expression tree may not contain an 'is' pattern-matching operator.</value>
  </data>
  <data name="ERR_ExpressionTreeContainsTupleLiteral" xml:space="preserve">
    <value>An expression tree may not contain a tuple literal.</value>
  </data>
  <data name="ERR_ExpressionTreeContainsTupleConversion" xml:space="preserve">
    <value>An expression tree may not contain a tuple conversion.</value>
  </data>
  <data name="ERR_SourceLinkRequiresPdb" xml:space="preserve">
    <value>/sourcelink switch is only supported when emitting PDB.</value>
  </data>
  <data name="ERR_CannotEmbedWithoutPdb" xml:space="preserve">
    <value>/embed switch is only supported when emitting a PDB.</value>
  </data>
  <data name="ERR_InvalidInstrumentationKind" xml:space="preserve">
    <value>Invalid instrumentation kind: {0}</value>
  </data>
  <data name="ERR_InvalidHashAlgorithmName" xml:space="preserve">
    <value>Invalid hash algorithm name: '{0}'</value>
  </data>
  <data name="ERR_VarInvocationLvalueReserved" xml:space="preserve">
    <value>The syntax 'var (...)' as an lvalue is reserved.</value>
  </data>
  <data name="ERR_SemiOrLBraceOrArrowExpected" xml:space="preserve">
    <value>{ or ; or =&gt; expected</value>
  </data>
  <data name="ERR_ThrowMisplaced" xml:space="preserve">
    <value>A throw expression is not allowed in this context.</value>
  </data>
  <data name="ERR_MixedDeconstructionUnsupported" xml:space="preserve">
    <value>A deconstruction cannot mix declarations and expressions on the left-hand-side.</value>
  </data>
  <data name="ERR_DeclarationExpressionNotPermitted" xml:space="preserve">
    <value>A declaration is not allowed in this context.</value>
  </data>
  <data name="ERR_MustDeclareForeachIteration" xml:space="preserve">
    <value>A foreach loop must declare its iteration variables.</value>
  </data>
  <data name="ERR_TupleElementNamesInDeconstruction" xml:space="preserve">
    <value>Tuple element names are not permitted on the left of a deconstruction.</value>
  </data>
  <data name="ERR_PossibleBadNegCast" xml:space="preserve">
    <value>To cast a negative value, you must enclose the value in parentheses.</value>
  </data>
  <data name="ERR_ExpressionTreeContainsThrowExpression" xml:space="preserve">
    <value>An expression tree may not contain a throw-expression.</value>
  </data>
  <data name="ERR_BadAssemblyName" xml:space="preserve">
    <value>Invalid assembly name: {0}</value>
  </data>
  <data name="ERR_BadAsyncMethodBuilderTaskProperty" xml:space="preserve">
    <value>For type '{0}' to be used as an AsyncMethodBuilder for type '{1}', its Task property should return type '{1}' instead of type '{2}'.</value>
  </data>
  <data name="ERR_AttributesInLocalFuncDecl" xml:space="preserve">
    <value>Attributes are not allowed on local function parameters or type parameters</value>
  </data>
  <data name="ERR_TypeForwardedToMultipleAssemblies" xml:space="preserve">
    <value>Module '{0}' in assembly '{1}' is forwarding the type '{2}' to multiple assemblies: '{3}' and '{4}'.</value>
  </data>
  <data name="ERR_PatternDynamicType" xml:space="preserve">
    <value>It is not legal to use the type 'dynamic' in a pattern.</value>
  </data>
  <data name="ERR_BadDynamicMethodArgDefaultLiteral" xml:space="preserve">
    <value>Cannot use a default literal as an argument to a dynamically dispatched operation.</value>
  </data>
  <data name="ERR_BadDocumentationMode" xml:space="preserve">
    <value>Provided documentation mode is unsupported or invalid: '{0}'.</value>
  </data>
  <data name="ERR_BadSourceCodeKind" xml:space="preserve">
    <value>Provided source code kind is unsupported or invalid: '{0}'</value>
  </data>
  <data name="ERR_BadLanguageVersion" xml:space="preserve">
    <value>Provided language version is unsupported or invalid: '{0}'.</value>
  </data>
  <data name="ERR_InvalidPreprocessingSymbol" xml:space="preserve">
    <value>Invalid name for a preprocessing symbol; '{0}' is not a valid identifier</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion7_1" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 7.1. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion7_2" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 7.2. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_FeatureNotAvailableInVersion7_3" xml:space="preserve">
    <value>Feature '{0}' is not available in C# 7.3. Please use language version {1} or greater.</value>
  </data>
  <data name="ERR_LanguageVersionCannotHaveLeadingZeroes" xml:space="preserve">
    <value>Specified language version '{0}' cannot have leading zeroes</value>
  </data>
  <data name="ERR_VoidAssignment" xml:space="preserve">
    <value>A value of type 'void' may not be assigned.</value>
  </data>
  <data name="WRN_Experimental" xml:space="preserve">
    <value>'{0}' is for evaluation purposes only and is subject to change or removal in future updates.</value>
  </data>
  <data name="WRN_Experimental_Title" xml:space="preserve">
    <value>Type is for evaluation purposes only and is subject to change or removal in future updates.</value>
  </data>
  <data name="ERR_CompilerAndLanguageVersion" xml:space="preserve">
    <value>Compiler version: '{0}'. Language version: {1}.</value>
  </data>
  <data name="IDS_FeatureAsyncMain" xml:space="preserve">
    <value>async main</value>
  </data>
  <data name="ERR_TupleInferredNamesNotAvailable" xml:space="preserve">
    <value>Tuple element name '{0}' is inferred. Please use language version {1} or greater to access an element by its inferred name.</value>
  </data>
  <data name="WRN_AttributesOnBackingFieldsNotAvailable" xml:space="preserve">
    <value>Field-targeted attributes on auto-properties are not supported in language version {0}. Please use language version {1} or greater.</value>
  </data>
  <data name="WRN_AttributesOnBackingFieldsNotAvailable_Title" xml:space="preserve">
    <value>Field-targeted attributes on auto-properties are not supported in this version of the language.</value>
  </data>
  <data name="ERR_DefaultInSwitch" xml:space="preserve">
    <value>A default literal 'default' is not valid as a case constant. Use another literal (e.g. '0' or 'null') as appropriate. If you intended to write the default label, use 'default:' without 'case'.</value>
  </data>
  <data name="ERR_VoidInTuple" xml:space="preserve">
    <value>A tuple may not contain a value of type 'void'.</value>
  </data>
  <data name="ERR_NonTaskMainCantBeAsync" xml:space="preserve">
    <value>A void or int returning entry point cannot be async</value>
  </data>
  <data name="ERR_PatternWrongGenericTypeInVersion" xml:space="preserve">
    <value>An expression of type '{0}' cannot be handled by a pattern of type '{1}' in C# {2}. Please use language version {3} or greater.</value>
  </data>
  <data name="WRN_UnreferencedLocalFunction" xml:space="preserve">
    <value>The local function '{0}' is declared but never used</value>
  </data>
  <data name="WRN_UnreferencedLocalFunction_Title" xml:space="preserve">
    <value>Local function is declared but never used</value>
  </data>
  <data name="ERR_LocalFunctionMissingBody" xml:space="preserve">
    <value>'{0}' is a local function and must therefore always have a body.</value>
  </data>
  <data name="ERR_InvalidDebugInfo" xml:space="preserve">
    <value>Unable to read debug information of method '{0}' (token 0x{1:X8}) from assembly '{2}'</value>
  </data>
  <data name="IConversionExpressionIsNotCSharpConversion" xml:space="preserve">
    <value>{0} is not a valid C# conversion expression</value>
  </data>
  <data name="ERR_DynamicLocalFunctionTypeParameter" xml:space="preserve">
    <value>Cannot pass argument with dynamic type to generic local function '{0}' with inferred type arguments.</value>
  </data>
  <data name="IDS_FeatureLeadingDigitSeparator" xml:space="preserve">
    <value>leading digit separator</value>
  </data>
  <data name="ERR_ExplicitReservedAttr" xml:space="preserve">
    <value>Do not use '{0}'. This is reserved for compiler usage.</value>
  </data>
  <data name="ERR_TypeReserved" xml:space="preserve">
    <value>The type name '{0}' is reserved to be used by the compiler.</value>
  </data>
  <data name="ERR_InExtensionMustBeValueType" xml:space="preserve">
    <value>The first parameter of an 'in' extension method '{0}' must be a value type.</value>
  </data>
  <data name="ERR_FieldsInRoStruct" xml:space="preserve">
    <value>Instance fields of readonly structs must be readonly.</value>
  </data>
  <data name="ERR_AutoPropsInRoStruct" xml:space="preserve">
    <value>Auto-implemented instance properties in readonly structs must be readonly.</value>
  </data>
  <data name="ERR_FieldlikeEventsInRoStruct" xml:space="preserve">
    <value>Field-like events are not allowed in readonly structs.</value>
  </data>
  <data name="IDS_FeatureRefExtensionMethods" xml:space="preserve">
    <value>ref extension methods</value>
  </data>
  <data name="ERR_StackAllocConversionNotPossible" xml:space="preserve">
    <value>Conversion of a stackalloc expression of type '{0}' to type '{1}' is not possible.</value>
  </data>
  <data name="ERR_RefExtensionMustBeValueTypeOrConstrainedToOne" xml:space="preserve">
    <value>The first parameter of a 'ref' extension method '{0}' must be a value type or a generic type constrained to struct.</value>
  </data>
  <data name="ERR_OutAttrOnInParam" xml:space="preserve">
    <value>An in parameter cannot have the Out attribute.</value>
  </data>
  <data name="ICompoundAssignmentOperationIsNotCSharpCompoundAssignment" xml:space="preserve">
    <value>{0} is not a valid C# compound assignment operation</value>
  </data>
  <data name="WRN_FilterIsConstantFalse" xml:space="preserve">
    <value>Filter expression is a constant 'false', consider removing the catch clause</value>
  </data>
  <data name="WRN_FilterIsConstantFalse_Title" xml:space="preserve">
    <value>Filter expression is a constant 'false'</value>
  </data>
  <data name="WRN_FilterIsConstantFalseRedundantTryCatch" xml:space="preserve">
    <value>Filter expression is a constant 'false', consider removing the try-catch block</value>
  </data>
  <data name="WRN_FilterIsConstantFalseRedundantTryCatch_Title" xml:space="preserve">
    <value>Filter expression is a constant 'false'. </value>
  </data>
  <data name="ERR_ConditionalInInterpolation" xml:space="preserve">
    <value>A conditional expression cannot be used directly in a string interpolation because the ':' ends the interpolation. Parenthesize the conditional expression.</value>
  </data>
  <data name="ERR_DefaultInPattern" xml:space="preserve">
    <value>A default literal 'default' is not valid as a pattern. Use another literal (e.g. '0' or 'null') as appropriate. To match everything, use a discard pattern 'var _'.</value>
  </data>
  <data name="ERR_InDynamicMethodArg" xml:space="preserve">
    <value>Arguments with 'in' modifier cannot be used in dynamically dispatched expessions.</value>
  </data>
  <data name="ERR_TupleSizesMismatchForBinOps" xml:space="preserve">
    <value>Tuple types used as operands of an == or != operator must have matching cardinalities. But this operator has tuple types of cardinality {0} on the left and {1} on the right.</value>
  </data>
  <data name="ERR_RefLocalOrParamExpected" xml:space="preserve">
    <value>The left-hand side of a ref assignment must be a ref local or parameter.</value>
  </data>
  <data name="ERR_RefAssignNarrower" xml:space="preserve">
    <value>Cannot ref-assign '{1}' to '{0}' because '{1}' has a narrower escape scope than '{0}'.</value>
  </data>
  <data name="IDS_FeatureEnumGenericTypeConstraint" xml:space="preserve">
    <value>enum generic type constraints</value>
  </data>
  <data name="IDS_FeatureDelegateGenericTypeConstraint" xml:space="preserve">
    <value>delegate generic type constraints</value>
  </data>
  <data name="IDS_FeatureUnmanagedGenericTypeConstraint" xml:space="preserve">
    <value>unmanaged generic type constraints</value>
  </data>
  <data name="ERR_NewBoundWithUnmanaged" xml:space="preserve">
    <value>The 'new()' constraint cannot be used with the 'unmanaged' constraint</value>
  </data>
  <data name="ERR_UnmanagedConstraintMustBeFirst" xml:space="preserve">
    <value>The 'unmanaged' constraint must come before any other constraints</value>
  </data>
  <data name="ERR_UnmanagedConstraintNotSatisfied" xml:space="preserve">
    <value>The type '{2}' must be a non-nullable value type, along with all fields at any level of nesting, in order to use it as parameter '{1}' in the generic type or method '{0}'</value>
  </data>
  <data name="ERR_ConWithUnmanagedCon" xml:space="preserve">
    <value>Type parameter '{1}' has the 'unmanaged' constraint so '{1}' cannot be used as a constraint for '{0}'</value>
  </data>
  <data name="ERR_InvalidObjectCreation" xml:space="preserve">
    <value>Invalid object creation</value>
  </data>
  <data name="IDS_FeatureStackAllocInitializer" xml:space="preserve">
    <value>stackalloc initializer</value>
  </data>
  <data name="ERR_InvalidStackAllocArray" xml:space="preserve">
    <value>"Invalid rank specifier: expected ']'</value>
  </data>
  <data name="IDS_FeatureExpressionVariablesInQueriesAndInitializers" xml:space="preserve">
    <value>declaration of expression variables in member initializers and queries</value>
  </data>
  <data name="IDS_FeatureIndexingMovableFixedBuffers" xml:space="preserve">
    <value>indexing movable fixed buffers</value>
  </data>
</root>
