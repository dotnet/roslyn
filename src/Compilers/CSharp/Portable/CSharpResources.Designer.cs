//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.CodeAnalysis.CSharp {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CSharpResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CSharpResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.CodeAnalysis.CSharp.CSharpResources", typeof(CSharpResources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t reference compilation of type &apos;{0}&apos; from {1} compilation..
        /// </summary>
        internal static string CantReferenceCompilationOf {
            get {
                return ResourceManager.GetString("CantReferenceCompilationOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chaining speculative semantic model is not supported. You should create a speculative model from the non-speculative ParentModel..
        /// </summary>
        internal static string ChainingSpeculativeModelIsNotSupported {
            get {
                return ResourceManager.GetString("ChainingSpeculativeModelIsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compilation (C#): .
        /// </summary>
        internal static string CompilationC {
            get {
                return ResourceManager.GetString("CompilationC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find file..
        /// </summary>
        internal static string CouldNotFindFile {
            get {
                return ResourceManager.GetString("CouldNotFindFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; cannot be applied to operands of type &apos;{1}&apos; and &apos;{2}&apos;.
        /// </summary>
        internal static string ERR_BadBinaryOps {
            get {
                return ResourceManager.GetString("ERR_BadBinaryOps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid expression term &apos;{0}&apos;.
        /// </summary>
        internal static string ERR_InvalidExprTerm {
            get {
                return ResourceManager.GetString("ERR_InvalidExprTerm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid token &apos;{0}&apos; in class, struct, or interface member declaration.
        /// </summary>
        internal static string ERR_InvalidMemberDecl {
            get {
                return ResourceManager.GetString("ERR_InvalidMemberDecl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot implicitly convert type &apos;{0}&apos; to &apos;{1}&apos;.
        /// </summary>
        internal static string ERR_NoImplicitConv {
            get {
                return ResourceManager.GetString("ERR_NoImplicitConv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; expected.
        /// </summary>
        internal static string ERR_SemicolonExpected {
            get {
                return ResourceManager.GetString("ERR_SemicolonExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic parameter is definition when expected to be reference {0}.
        /// </summary>
        internal static string GenericParameterDefinition {
            get {
                return ResourceManager.GetString("GenericParameterDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Called GetDeclarationName for a declaration node that can possibly contain multiple variable declarators..
        /// </summary>
        internal static string InvalidGetDeclarationNameMultipleDeclarators {
            get {
                return ResourceManager.GetString("InvalidGetDeclarationNameMultipleDeclarators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LookupOptions has an invalid combination of options.
        /// </summary>
        internal static string LookupOptionsHasInvalidCombo {
            get {
                return ResourceManager.GetString("LookupOptionsHasInvalidCombo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SearchCriteria is expected..
        /// </summary>
        internal static string NoNoneSearchCriteria {
            get {
                return ResourceManager.GetString("NoNoneSearchCriteria", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not a C# symbol..
        /// </summary>
        internal static string NotACSharpSymbol {
            get {
                return ResourceManager.GetString("NotACSharpSymbol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Position is not within syntax tree with full span {0}.
        /// </summary>
        internal static string PositionIsNotWithinSyntax {
            get {
                return ResourceManager.GetString("PositionIsNotWithinSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Position must be within span of the syntax tree..
        /// </summary>
        internal static string PositionNotWithinTree {
            get {
                return ResourceManager.GetString("PositionNotWithinTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax node to be speculated cannot belong to a syntax tree from the current compilation..
        /// </summary>
        internal static string SpeculatedSyntaxNodeCannotBelongToCurrentCompilation {
            get {
                return ResourceManager.GetString("SpeculatedSyntaxNodeCannotBelongToCurrentCompilation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Submission can have at most one syntax tree..
        /// </summary>
        internal static string SubmissionCanHaveAtMostOne {
            get {
                return ResourceManager.GetString("SubmissionCanHaveAtMostOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Submission can only include script code..
        /// </summary>
        internal static string SubmissionCanOnlyInclude {
            get {
                return ResourceManager.GetString("SubmissionCanOnlyInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax node is not within syntax tree.
        /// </summary>
        internal static string SyntaxNodeIsNotWithinSynt {
            get {
                return ResourceManager.GetString("SyntaxNodeIsNotWithinSynt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax tree already present.
        /// </summary>
        internal static string SyntaxTreeAlreadyPresent {
            get {
                return ResourceManager.GetString("SyntaxTreeAlreadyPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SyntaxTree &apos;{0}&apos; resulted from a #load directive and cannot be removed or replaced directly..
        /// </summary>
        internal static string SyntaxTreeFromLoadNoRemoveReplace {
            get {
                return ResourceManager.GetString("SyntaxTreeFromLoadNoRemoveReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax tree should be created from a submission..
        /// </summary>
        internal static string SyntaxTreeIsNotASubmission {
            get {
                return ResourceManager.GetString("SyntaxTreeIsNotASubmission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SyntaxTree &apos;{0}&apos; not found to remove.
        /// </summary>
        internal static string SyntaxTreeNotFoundTo {
            get {
                return ResourceManager.GetString("SyntaxTreeNotFoundTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SyntaxTreeSemanticModel must be provided in order to provide minimal type qualification..
        /// </summary>
        internal static string SyntaxTreeSemanticModelMust {
            get {
                return ResourceManager.GetString("SyntaxTreeSemanticModelMust", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method can only be used to create tokens - {0} is not a token kind..
        /// </summary>
        internal static string ThisMethodCanOnlyBeUsedToCreateTokens {
            get {
                return ResourceManager.GetString("ThisMethodCanOnlyBeUsedToCreateTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tree must have a root node with SyntaxKind.CompilationUnit.
        /// </summary>
        internal static string TreeMustHaveARootNodeWith {
            get {
                return ResourceManager.GetString("TreeMustHaveARootNodeWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tree not part of compilation.
        /// </summary>
        internal static string TreeNotPartOfCompilation {
            get {
                return ResourceManager.GetString("TreeNotPartOfCompilation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type argument cannot be null.
        /// </summary>
        internal static string TypeArgumentCannotBeNull {
            get {
                return ResourceManager.GetString("TypeArgumentCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal to create numeric literal tokens..
        /// </summary>
        internal static string UseLiteralForNumeric {
            get {
                return ResourceManager.GetString("UseLiteralForNumeric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal to create character literal tokens..
        /// </summary>
        internal static string UseLiteralForTokens {
            get {
                return ResourceManager.GetString("UseLiteralForTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier or Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier to create identifier tokens..
        /// </summary>
        internal static string UseVerbatimIdentifier {
            get {
                return ResourceManager.GetString("UseVerbatimIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type or member is obsolete.
        /// </summary>
        internal static string WRN_DeprecatedSymbol_Title {
            get {
                return ResourceManager.GetString("WRN_DeprecatedSymbol_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized #pragma directive.
        /// </summary>
        internal static string WRN_IllegalPragma {
            get {
                return ResourceManager.GetString("WRN_IllegalPragma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized #pragma directive.
        /// </summary>
        internal static string WRN_IllegalPragma_Title {
            get {
                return ResourceManager.GetString("WRN_IllegalPragma_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;l&apos; suffix is easily confused with the digit &apos;1&apos; -- use &apos;L&apos; for clarity.
        /// </summary>
        internal static string WRN_LowercaseEllSuffix {
            get {
                return ResourceManager.GetString("WRN_LowercaseEllSuffix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unreachable code detected.
        /// </summary>
        internal static string WRN_UnreachableCode_Title {
            get {
                return ResourceManager.GetString("WRN_UnreachableCode_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable &apos;{0}&apos; is assigned but its value is never used.
        /// </summary>
        internal static string WRN_UnreferencedVarAssg {
            get {
                return ResourceManager.GetString("WRN_UnreferencedVarAssg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable is assigned but its value is never used.
        /// </summary>
        internal static string WRN_UnreferencedVarAssg_Title {
            get {
                return ResourceManager.GetString("WRN_UnreferencedVarAssg_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrong number of type arguments.
        /// </summary>
        internal static string WrongNumberOfTypeArguments {
            get {
                return ResourceManager.GetString("WrongNumberOfTypeArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected a {0} SemanticModel..
        /// </summary>
        internal static string WrongSemanticModelType {
            get {
                return ResourceManager.GetString("WrongSemanticModelType", resourceCulture);
            }
        }
        
    }
}
