// <auto-generated />

using Microsoft.CodeAnalysis.CSharp.Syntax;
using Roslyn.Utilities;
using Xunit;
using InternalSyntaxFactory = Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxFactory;

namespace Microsoft.CodeAnalysis.CSharp.UnitTests
{
    public partial class GreenNodeTests
    {
        #region Green Generators
        private static Syntax.InternalSyntax.IdentifierNameSyntax GenerateIdentifierName()
            => InternalSyntaxFactory.IdentifierName(InternalSyntaxFactory.Identifier("Identifier"));

        private static Syntax.InternalSyntax.QualifiedNameSyntax GenerateQualifiedName()
            => InternalSyntaxFactory.QualifiedName(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.DotToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.GenericNameSyntax GenerateGenericName()
            => InternalSyntaxFactory.GenericName(InternalSyntaxFactory.Identifier("Identifier"), GenerateTypeArgumentList());

        private static Syntax.InternalSyntax.TypeArgumentListSyntax GenerateTypeArgumentList()
            => InternalSyntaxFactory.TypeArgumentList(InternalSyntaxFactory.Token(SyntaxKind.LessThanToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.TypeSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static Syntax.InternalSyntax.AliasQualifiedNameSyntax GenerateAliasQualifiedName()
            => InternalSyntaxFactory.AliasQualifiedName(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.ColonColonToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.PredefinedTypeSyntax GeneratePredefinedType()
            => InternalSyntaxFactory.PredefinedType(InternalSyntaxFactory.Token(SyntaxKind.BoolKeyword));

        private static Syntax.InternalSyntax.ArrayTypeSyntax GenerateArrayType()
            => InternalSyntaxFactory.ArrayType(GenerateIdentifierName(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.ArrayRankSpecifierSyntax>());

        private static Syntax.InternalSyntax.ArrayRankSpecifierSyntax GenerateArrayRankSpecifier()
            => InternalSyntaxFactory.ArrayRankSpecifier(InternalSyntaxFactory.Token(SyntaxKind.OpenBracketToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ExpressionSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static Syntax.InternalSyntax.PointerTypeSyntax GeneratePointerType()
            => InternalSyntaxFactory.PointerType(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.AsteriskToken));

        private static Syntax.InternalSyntax.FunctionPointerTypeSyntax GenerateFunctionPointerType()
            => InternalSyntaxFactory.FunctionPointerType(InternalSyntaxFactory.Token(SyntaxKind.DelegateKeyword), InternalSyntaxFactory.Token(SyntaxKind.AsteriskToken), null, GenerateFunctionPointerParameterList());

        private static Syntax.InternalSyntax.FunctionPointerParameterListSyntax GenerateFunctionPointerParameterList()
            => InternalSyntaxFactory.FunctionPointerParameterList(InternalSyntaxFactory.Token(SyntaxKind.LessThanToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.FunctionPointerParameterSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static Syntax.InternalSyntax.FunctionPointerCallingConventionSyntax GenerateFunctionPointerCallingConvention()
            => InternalSyntaxFactory.FunctionPointerCallingConvention(InternalSyntaxFactory.Token(SyntaxKind.ManagedKeyword), null);

        private static Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionListSyntax GenerateFunctionPointerUnmanagedCallingConventionList()
            => InternalSyntaxFactory.FunctionPointerUnmanagedCallingConventionList(InternalSyntaxFactory.Token(SyntaxKind.OpenBracketToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionSyntax GenerateFunctionPointerUnmanagedCallingConvention()
            => InternalSyntaxFactory.FunctionPointerUnmanagedCallingConvention(InternalSyntaxFactory.Identifier("Name"));

        private static Syntax.InternalSyntax.NullableTypeSyntax GenerateNullableType()
            => InternalSyntaxFactory.NullableType(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.QuestionToken));

        private static Syntax.InternalSyntax.TupleTypeSyntax GenerateTupleType()
            => InternalSyntaxFactory.TupleType(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.TupleElementSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.TupleElementSyntax GenerateTupleElement()
            => InternalSyntaxFactory.TupleElement(GenerateIdentifierName(), null);

        private static Syntax.InternalSyntax.OmittedTypeArgumentSyntax GenerateOmittedTypeArgument()
            => InternalSyntaxFactory.OmittedTypeArgument(InternalSyntaxFactory.Token(SyntaxKind.OmittedTypeArgumentToken));

        private static Syntax.InternalSyntax.RefTypeSyntax GenerateRefType()
            => InternalSyntaxFactory.RefType(InternalSyntaxFactory.Token(SyntaxKind.RefKeyword), null, null, GenerateIdentifierName());

        private static Syntax.InternalSyntax.ParenthesizedExpressionSyntax GenerateParenthesizedExpression()
            => InternalSyntaxFactory.ParenthesizedExpression(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.TupleExpressionSyntax GenerateTupleExpression()
            => InternalSyntaxFactory.TupleExpression(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ArgumentSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.PrefixUnaryExpressionSyntax GeneratePrefixUnaryExpression()
            => InternalSyntaxFactory.PrefixUnaryExpression(SyntaxKind.UnaryPlusExpression, InternalSyntaxFactory.Token(SyntaxKind.PlusToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.AwaitExpressionSyntax GenerateAwaitExpression()
            => InternalSyntaxFactory.AwaitExpression(InternalSyntaxFactory.Token(SyntaxKind.AwaitKeyword), GenerateIdentifierName());

        private static Syntax.InternalSyntax.PostfixUnaryExpressionSyntax GeneratePostfixUnaryExpression()
            => InternalSyntaxFactory.PostfixUnaryExpression(SyntaxKind.PostIncrementExpression, GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.PlusPlusToken));

        private static Syntax.InternalSyntax.MemberAccessExpressionSyntax GenerateMemberAccessExpression()
            => InternalSyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.DotToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.ConditionalAccessExpressionSyntax GenerateConditionalAccessExpression()
            => InternalSyntaxFactory.ConditionalAccessExpression(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.QuestionToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.MemberBindingExpressionSyntax GenerateMemberBindingExpression()
            => InternalSyntaxFactory.MemberBindingExpression(InternalSyntaxFactory.Token(SyntaxKind.DotToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.ElementBindingExpressionSyntax GenerateElementBindingExpression()
            => InternalSyntaxFactory.ElementBindingExpression(GenerateBracketedArgumentList());

        private static Syntax.InternalSyntax.RangeExpressionSyntax GenerateRangeExpression()
            => InternalSyntaxFactory.RangeExpression(null, InternalSyntaxFactory.Token(SyntaxKind.DotDotToken), null);

        private static Syntax.InternalSyntax.ImplicitElementAccessSyntax GenerateImplicitElementAccess()
            => InternalSyntaxFactory.ImplicitElementAccess(GenerateBracketedArgumentList());

        private static Syntax.InternalSyntax.BinaryExpressionSyntax GenerateBinaryExpression()
            => InternalSyntaxFactory.BinaryExpression(SyntaxKind.AddExpression, GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.PlusToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.AssignmentExpressionSyntax GenerateAssignmentExpression()
            => InternalSyntaxFactory.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression, GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.EqualsToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.ConditionalExpressionSyntax GenerateConditionalExpression()
            => InternalSyntaxFactory.ConditionalExpression(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.QuestionToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.ColonToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.ThisExpressionSyntax GenerateThisExpression()
            => InternalSyntaxFactory.ThisExpression(InternalSyntaxFactory.Token(SyntaxKind.ThisKeyword));

        private static Syntax.InternalSyntax.BaseExpressionSyntax GenerateBaseExpression()
            => InternalSyntaxFactory.BaseExpression(InternalSyntaxFactory.Token(SyntaxKind.BaseKeyword));

        private static Syntax.InternalSyntax.LiteralExpressionSyntax GenerateLiteralExpression()
            => InternalSyntaxFactory.LiteralExpression(SyntaxKind.ArgListExpression, InternalSyntaxFactory.Token(SyntaxKind.ArgListKeyword));

        private static Syntax.InternalSyntax.MakeRefExpressionSyntax GenerateMakeRefExpression()
            => InternalSyntaxFactory.MakeRefExpression(InternalSyntaxFactory.Token(SyntaxKind.MakeRefKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.RefTypeExpressionSyntax GenerateRefTypeExpression()
            => InternalSyntaxFactory.RefTypeExpression(InternalSyntaxFactory.Token(SyntaxKind.RefTypeKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.RefValueExpressionSyntax GenerateRefValueExpression()
            => InternalSyntaxFactory.RefValueExpression(InternalSyntaxFactory.Token(SyntaxKind.RefValueKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CommaToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.CheckedExpressionSyntax GenerateCheckedExpression()
            => InternalSyntaxFactory.CheckedExpression(SyntaxKind.CheckedExpression, InternalSyntaxFactory.Token(SyntaxKind.CheckedKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.DefaultExpressionSyntax GenerateDefaultExpression()
            => InternalSyntaxFactory.DefaultExpression(InternalSyntaxFactory.Token(SyntaxKind.DefaultKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.TypeOfExpressionSyntax GenerateTypeOfExpression()
            => InternalSyntaxFactory.TypeOfExpression(InternalSyntaxFactory.Token(SyntaxKind.TypeOfKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.SizeOfExpressionSyntax GenerateSizeOfExpression()
            => InternalSyntaxFactory.SizeOfExpression(InternalSyntaxFactory.Token(SyntaxKind.SizeOfKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.InvocationExpressionSyntax GenerateInvocationExpression()
            => InternalSyntaxFactory.InvocationExpression(GenerateIdentifierName(), GenerateArgumentList());

        private static Syntax.InternalSyntax.ElementAccessExpressionSyntax GenerateElementAccessExpression()
            => InternalSyntaxFactory.ElementAccessExpression(GenerateIdentifierName(), GenerateBracketedArgumentList());

        private static Syntax.InternalSyntax.ArgumentListSyntax GenerateArgumentList()
            => InternalSyntaxFactory.ArgumentList(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ArgumentSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.BracketedArgumentListSyntax GenerateBracketedArgumentList()
            => InternalSyntaxFactory.BracketedArgumentList(InternalSyntaxFactory.Token(SyntaxKind.OpenBracketToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ArgumentSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static Syntax.InternalSyntax.ArgumentSyntax GenerateArgument()
            => InternalSyntaxFactory.Argument(null, null, GenerateIdentifierName());

        private static Syntax.InternalSyntax.ExpressionColonSyntax GenerateExpressionColon()
            => InternalSyntaxFactory.ExpressionColon(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.ColonToken));

        private static Syntax.InternalSyntax.NameColonSyntax GenerateNameColon()
            => InternalSyntaxFactory.NameColon(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.ColonToken));

        private static Syntax.InternalSyntax.DeclarationExpressionSyntax GenerateDeclarationExpression()
            => InternalSyntaxFactory.DeclarationExpression(GenerateIdentifierName(), GenerateSingleVariableDesignation());

        private static Syntax.InternalSyntax.CastExpressionSyntax GenerateCastExpression()
            => InternalSyntaxFactory.CastExpression(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.AnonymousMethodExpressionSyntax GenerateAnonymousMethodExpression()
            => InternalSyntaxFactory.AnonymousMethodExpression(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.DelegateKeyword), null, GenerateBlock(), null);

        private static Syntax.InternalSyntax.SimpleLambdaExpressionSyntax GenerateSimpleLambdaExpression()
            => InternalSyntaxFactory.SimpleLambdaExpression(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateParameter(), InternalSyntaxFactory.Token(SyntaxKind.EqualsGreaterThanToken), null, null);

        private static Syntax.InternalSyntax.RefExpressionSyntax GenerateRefExpression()
            => InternalSyntaxFactory.RefExpression(InternalSyntaxFactory.Token(SyntaxKind.RefKeyword), GenerateIdentifierName());

        private static Syntax.InternalSyntax.ParenthesizedLambdaExpressionSyntax GenerateParenthesizedLambdaExpression()
            => InternalSyntaxFactory.ParenthesizedLambdaExpression(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), null, GenerateParameterList(), InternalSyntaxFactory.Token(SyntaxKind.EqualsGreaterThanToken), null, null);

        private static Syntax.InternalSyntax.InitializerExpressionSyntax GenerateInitializerExpression()
            => InternalSyntaxFactory.InitializerExpression(SyntaxKind.ObjectInitializerExpression, InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ExpressionSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static Syntax.InternalSyntax.ImplicitObjectCreationExpressionSyntax GenerateImplicitObjectCreationExpression()
            => InternalSyntaxFactory.ImplicitObjectCreationExpression(InternalSyntaxFactory.Token(SyntaxKind.NewKeyword), GenerateArgumentList(), null);

        private static Syntax.InternalSyntax.ObjectCreationExpressionSyntax GenerateObjectCreationExpression()
            => InternalSyntaxFactory.ObjectCreationExpression(InternalSyntaxFactory.Token(SyntaxKind.NewKeyword), GenerateIdentifierName(), null, null);

        private static Syntax.InternalSyntax.WithExpressionSyntax GenerateWithExpression()
            => InternalSyntaxFactory.WithExpression(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.WithKeyword), GenerateInitializerExpression());

        private static Syntax.InternalSyntax.AnonymousObjectMemberDeclaratorSyntax GenerateAnonymousObjectMemberDeclarator()
            => InternalSyntaxFactory.AnonymousObjectMemberDeclarator(null, GenerateIdentifierName());

        private static Syntax.InternalSyntax.AnonymousObjectCreationExpressionSyntax GenerateAnonymousObjectCreationExpression()
            => InternalSyntaxFactory.AnonymousObjectCreationExpression(InternalSyntaxFactory.Token(SyntaxKind.NewKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.AnonymousObjectMemberDeclaratorSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static Syntax.InternalSyntax.ArrayCreationExpressionSyntax GenerateArrayCreationExpression()
            => InternalSyntaxFactory.ArrayCreationExpression(InternalSyntaxFactory.Token(SyntaxKind.NewKeyword), GenerateArrayType(), null);

        private static Syntax.InternalSyntax.ImplicitArrayCreationExpressionSyntax GenerateImplicitArrayCreationExpression()
            => InternalSyntaxFactory.ImplicitArrayCreationExpression(InternalSyntaxFactory.Token(SyntaxKind.NewKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenBracketToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBracketToken), GenerateInitializerExpression());

        private static Syntax.InternalSyntax.StackAllocArrayCreationExpressionSyntax GenerateStackAllocArrayCreationExpression()
            => InternalSyntaxFactory.StackAllocArrayCreationExpression(InternalSyntaxFactory.Token(SyntaxKind.StackAllocKeyword), GenerateIdentifierName(), null);

        private static Syntax.InternalSyntax.ImplicitStackAllocArrayCreationExpressionSyntax GenerateImplicitStackAllocArrayCreationExpression()
            => InternalSyntaxFactory.ImplicitStackAllocArrayCreationExpression(InternalSyntaxFactory.Token(SyntaxKind.StackAllocKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenBracketToken), InternalSyntaxFactory.Token(SyntaxKind.CloseBracketToken), GenerateInitializerExpression());

        private static Syntax.InternalSyntax.QueryExpressionSyntax GenerateQueryExpression()
            => InternalSyntaxFactory.QueryExpression(GenerateFromClause(), GenerateQueryBody());

        private static Syntax.InternalSyntax.QueryBodySyntax GenerateQueryBody()
            => InternalSyntaxFactory.QueryBody(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.QueryClauseSyntax>(), GenerateSelectClause(), null);

        private static Syntax.InternalSyntax.FromClauseSyntax GenerateFromClause()
            => InternalSyntaxFactory.FromClause(InternalSyntaxFactory.Token(SyntaxKind.FromKeyword), null, InternalSyntaxFactory.Identifier("Identifier"), InternalSyntaxFactory.Token(SyntaxKind.InKeyword), GenerateIdentifierName());

        private static Syntax.InternalSyntax.LetClauseSyntax GenerateLetClause()
            => InternalSyntaxFactory.LetClause(InternalSyntaxFactory.Token(SyntaxKind.LetKeyword), InternalSyntaxFactory.Identifier("Identifier"), InternalSyntaxFactory.Token(SyntaxKind.EqualsToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.JoinClauseSyntax GenerateJoinClause()
            => InternalSyntaxFactory.JoinClause(InternalSyntaxFactory.Token(SyntaxKind.JoinKeyword), null, InternalSyntaxFactory.Identifier("Identifier"), InternalSyntaxFactory.Token(SyntaxKind.InKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.OnKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.EqualsKeyword), GenerateIdentifierName(), null);

        private static Syntax.InternalSyntax.JoinIntoClauseSyntax GenerateJoinIntoClause()
            => InternalSyntaxFactory.JoinIntoClause(InternalSyntaxFactory.Token(SyntaxKind.IntoKeyword), InternalSyntaxFactory.Identifier("Identifier"));

        private static Syntax.InternalSyntax.WhereClauseSyntax GenerateWhereClause()
            => InternalSyntaxFactory.WhereClause(InternalSyntaxFactory.Token(SyntaxKind.WhereKeyword), GenerateIdentifierName());

        private static Syntax.InternalSyntax.OrderByClauseSyntax GenerateOrderByClause()
            => InternalSyntaxFactory.OrderByClause(InternalSyntaxFactory.Token(SyntaxKind.OrderByKeyword), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.OrderingSyntax>());

        private static Syntax.InternalSyntax.OrderingSyntax GenerateOrdering()
            => InternalSyntaxFactory.Ordering(SyntaxKind.AscendingOrdering, GenerateIdentifierName(), null);

        private static Syntax.InternalSyntax.SelectClauseSyntax GenerateSelectClause()
            => InternalSyntaxFactory.SelectClause(InternalSyntaxFactory.Token(SyntaxKind.SelectKeyword), GenerateIdentifierName());

        private static Syntax.InternalSyntax.GroupClauseSyntax GenerateGroupClause()
            => InternalSyntaxFactory.GroupClause(InternalSyntaxFactory.Token(SyntaxKind.GroupKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.ByKeyword), GenerateIdentifierName());

        private static Syntax.InternalSyntax.QueryContinuationSyntax GenerateQueryContinuation()
            => InternalSyntaxFactory.QueryContinuation(InternalSyntaxFactory.Token(SyntaxKind.IntoKeyword), InternalSyntaxFactory.Identifier("Identifier"), GenerateQueryBody());

        private static Syntax.InternalSyntax.OmittedArraySizeExpressionSyntax GenerateOmittedArraySizeExpression()
            => InternalSyntaxFactory.OmittedArraySizeExpression(InternalSyntaxFactory.Token(SyntaxKind.OmittedArraySizeExpressionToken));

        private static Syntax.InternalSyntax.InterpolatedStringExpressionSyntax GenerateInterpolatedStringExpression()
            => InternalSyntaxFactory.InterpolatedStringExpression(InternalSyntaxFactory.Token(SyntaxKind.InterpolatedStringStartToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.InterpolatedStringContentSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.InterpolatedStringEndToken));

        private static Syntax.InternalSyntax.IsPatternExpressionSyntax GenerateIsPatternExpression()
            => InternalSyntaxFactory.IsPatternExpression(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.IsKeyword), GenerateDiscardPattern());

        private static Syntax.InternalSyntax.ThrowExpressionSyntax GenerateThrowExpression()
            => InternalSyntaxFactory.ThrowExpression(InternalSyntaxFactory.Token(SyntaxKind.ThrowKeyword), GenerateIdentifierName());

        private static Syntax.InternalSyntax.WhenClauseSyntax GenerateWhenClause()
            => InternalSyntaxFactory.WhenClause(InternalSyntaxFactory.Token(SyntaxKind.WhenKeyword), GenerateIdentifierName());

        private static Syntax.InternalSyntax.DiscardPatternSyntax GenerateDiscardPattern()
            => InternalSyntaxFactory.DiscardPattern(InternalSyntaxFactory.Token(SyntaxKind.UnderscoreToken));

        private static Syntax.InternalSyntax.DeclarationPatternSyntax GenerateDeclarationPattern()
            => InternalSyntaxFactory.DeclarationPattern(GenerateIdentifierName(), GenerateSingleVariableDesignation());

        private static Syntax.InternalSyntax.VarPatternSyntax GenerateVarPattern()
            => InternalSyntaxFactory.VarPattern(InternalSyntaxFactory.Token(SyntaxKind.VarKeyword), GenerateSingleVariableDesignation());

        private static Syntax.InternalSyntax.RecursivePatternSyntax GenerateRecursivePattern()
            => InternalSyntaxFactory.RecursivePattern(null, null, null, null);

        private static Syntax.InternalSyntax.PositionalPatternClauseSyntax GeneratePositionalPatternClause()
            => InternalSyntaxFactory.PositionalPatternClause(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.SubpatternSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.PropertyPatternClauseSyntax GeneratePropertyPatternClause()
            => InternalSyntaxFactory.PropertyPatternClause(InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.SubpatternSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static Syntax.InternalSyntax.SubpatternSyntax GenerateSubpattern()
            => InternalSyntaxFactory.Subpattern(null, GenerateDiscardPattern());

        private static Syntax.InternalSyntax.ConstantPatternSyntax GenerateConstantPattern()
            => InternalSyntaxFactory.ConstantPattern(GenerateIdentifierName());

        private static Syntax.InternalSyntax.ParenthesizedPatternSyntax GenerateParenthesizedPattern()
            => InternalSyntaxFactory.ParenthesizedPattern(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateDiscardPattern(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.RelationalPatternSyntax GenerateRelationalPattern()
            => InternalSyntaxFactory.RelationalPattern(InternalSyntaxFactory.Token(SyntaxKind.EqualsEqualsToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.TypePatternSyntax GenerateTypePattern()
            => InternalSyntaxFactory.TypePattern(GenerateIdentifierName());

        private static Syntax.InternalSyntax.BinaryPatternSyntax GenerateBinaryPattern()
            => InternalSyntaxFactory.BinaryPattern(SyntaxKind.OrPattern, GenerateDiscardPattern(), InternalSyntaxFactory.Token(SyntaxKind.OrKeyword), GenerateDiscardPattern());

        private static Syntax.InternalSyntax.UnaryPatternSyntax GenerateUnaryPattern()
            => InternalSyntaxFactory.UnaryPattern(InternalSyntaxFactory.Token(SyntaxKind.NotKeyword), GenerateDiscardPattern());

        private static Syntax.InternalSyntax.ListPatternSyntax GenerateListPattern()
            => InternalSyntaxFactory.ListPattern(InternalSyntaxFactory.Token(SyntaxKind.OpenBracketToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.PatternSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBracketToken), null);

        private static Syntax.InternalSyntax.SlicePatternSyntax GenerateSlicePattern()
            => InternalSyntaxFactory.SlicePattern(InternalSyntaxFactory.Token(SyntaxKind.DotDotToken), null);

        private static Syntax.InternalSyntax.InterpolatedStringTextSyntax GenerateInterpolatedStringText()
            => InternalSyntaxFactory.InterpolatedStringText(InternalSyntaxFactory.Token(SyntaxKind.InterpolatedStringTextToken));

        private static Syntax.InternalSyntax.InterpolationSyntax GenerateInterpolation()
            => InternalSyntaxFactory.Interpolation(InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), GenerateIdentifierName(), null, null, InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static Syntax.InternalSyntax.InterpolationAlignmentClauseSyntax GenerateInterpolationAlignmentClause()
            => InternalSyntaxFactory.InterpolationAlignmentClause(InternalSyntaxFactory.Identifier("CommaToken"), GenerateIdentifierName());

        private static Syntax.InternalSyntax.InterpolationFormatClauseSyntax GenerateInterpolationFormatClause()
            => InternalSyntaxFactory.InterpolationFormatClause(InternalSyntaxFactory.Identifier("ColonToken"), InternalSyntaxFactory.Token(SyntaxKind.InterpolatedStringTextToken));

        private static Syntax.InternalSyntax.GlobalStatementSyntax GenerateGlobalStatement()
            => InternalSyntaxFactory.GlobalStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateBlock());

        private static Syntax.InternalSyntax.BlockSyntax GenerateBlock()
            => InternalSyntaxFactory.Block(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.StatementSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static Syntax.InternalSyntax.LocalFunctionStatementSyntax GenerateLocalFunctionStatement()
            => InternalSyntaxFactory.LocalFunctionStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateIdentifierName(), InternalSyntaxFactory.Identifier("Identifier"), null, GenerateParameterList(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax>(), null, null, null);

        private static Syntax.InternalSyntax.LocalDeclarationStatementSyntax GenerateLocalDeclarationStatement()
            => InternalSyntaxFactory.LocalDeclarationStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), null, null, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateVariableDeclaration(), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.VariableDeclarationSyntax GenerateVariableDeclaration()
            => InternalSyntaxFactory.VariableDeclaration(GenerateIdentifierName(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.VariableDeclaratorSyntax>());

        private static Syntax.InternalSyntax.VariableDeclaratorSyntax GenerateVariableDeclarator()
            => InternalSyntaxFactory.VariableDeclarator(InternalSyntaxFactory.Identifier("Identifier"), null, null);

        private static Syntax.InternalSyntax.EqualsValueClauseSyntax GenerateEqualsValueClause()
            => InternalSyntaxFactory.EqualsValueClause(InternalSyntaxFactory.Token(SyntaxKind.EqualsToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.SingleVariableDesignationSyntax GenerateSingleVariableDesignation()
            => InternalSyntaxFactory.SingleVariableDesignation(InternalSyntaxFactory.Identifier("Identifier"));

        private static Syntax.InternalSyntax.DiscardDesignationSyntax GenerateDiscardDesignation()
            => InternalSyntaxFactory.DiscardDesignation(InternalSyntaxFactory.Token(SyntaxKind.UnderscoreToken));

        private static Syntax.InternalSyntax.ParenthesizedVariableDesignationSyntax GenerateParenthesizedVariableDesignation()
            => InternalSyntaxFactory.ParenthesizedVariableDesignation(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.VariableDesignationSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.ExpressionStatementSyntax GenerateExpressionStatement()
            => InternalSyntaxFactory.ExpressionStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.EmptyStatementSyntax GenerateEmptyStatement()
            => InternalSyntaxFactory.EmptyStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.LabeledStatementSyntax GenerateLabeledStatement()
            => InternalSyntaxFactory.LabeledStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Identifier("Identifier"), InternalSyntaxFactory.Token(SyntaxKind.ColonToken), GenerateBlock());

        private static Syntax.InternalSyntax.GotoStatementSyntax GenerateGotoStatement()
            => InternalSyntaxFactory.GotoStatement(SyntaxKind.GotoStatement, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.GotoKeyword), null, null, InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.BreakStatementSyntax GenerateBreakStatement()
            => InternalSyntaxFactory.BreakStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.BreakKeyword), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.ContinueStatementSyntax GenerateContinueStatement()
            => InternalSyntaxFactory.ContinueStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.ContinueKeyword), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.ReturnStatementSyntax GenerateReturnStatement()
            => InternalSyntaxFactory.ReturnStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.ReturnKeyword), null, InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.ThrowStatementSyntax GenerateThrowStatement()
            => InternalSyntaxFactory.ThrowStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.ThrowKeyword), null, InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.YieldStatementSyntax GenerateYieldStatement()
            => InternalSyntaxFactory.YieldStatement(SyntaxKind.YieldReturnStatement, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.YieldKeyword), InternalSyntaxFactory.Token(SyntaxKind.ReturnKeyword), null, InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.WhileStatementSyntax GenerateWhileStatement()
            => InternalSyntaxFactory.WhileStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.WhileKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static Syntax.InternalSyntax.DoStatementSyntax GenerateDoStatement()
            => InternalSyntaxFactory.DoStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.DoKeyword), GenerateBlock(), InternalSyntaxFactory.Token(SyntaxKind.WhileKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.ForStatementSyntax GenerateForStatement()
            => InternalSyntaxFactory.ForStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.ForKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), null, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ExpressionSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken), null, InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ExpressionSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static Syntax.InternalSyntax.ForEachStatementSyntax GenerateForEachStatement()
            => InternalSyntaxFactory.ForEachStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), null, InternalSyntaxFactory.Token(SyntaxKind.ForEachKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Identifier("Identifier"), InternalSyntaxFactory.Token(SyntaxKind.InKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static Syntax.InternalSyntax.ForEachVariableStatementSyntax GenerateForEachVariableStatement()
            => InternalSyntaxFactory.ForEachVariableStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), null, InternalSyntaxFactory.Token(SyntaxKind.ForEachKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.InKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static Syntax.InternalSyntax.UsingStatementSyntax GenerateUsingStatement()
            => InternalSyntaxFactory.UsingStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), null, InternalSyntaxFactory.Token(SyntaxKind.UsingKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), null, null, InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static Syntax.InternalSyntax.FixedStatementSyntax GenerateFixedStatement()
            => InternalSyntaxFactory.FixedStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.FixedKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateVariableDeclaration(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static Syntax.InternalSyntax.CheckedStatementSyntax GenerateCheckedStatement()
            => InternalSyntaxFactory.CheckedStatement(SyntaxKind.CheckedStatement, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CheckedKeyword), GenerateBlock());

        private static Syntax.InternalSyntax.UnsafeStatementSyntax GenerateUnsafeStatement()
            => InternalSyntaxFactory.UnsafeStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.UnsafeKeyword), GenerateBlock());

        private static Syntax.InternalSyntax.LockStatementSyntax GenerateLockStatement()
            => InternalSyntaxFactory.LockStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.LockKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static Syntax.InternalSyntax.IfStatementSyntax GenerateIfStatement()
            => InternalSyntaxFactory.IfStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.IfKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock(), null);

        private static Syntax.InternalSyntax.ElseClauseSyntax GenerateElseClause()
            => InternalSyntaxFactory.ElseClause(InternalSyntaxFactory.Token(SyntaxKind.ElseKeyword), GenerateBlock());

        private static Syntax.InternalSyntax.SwitchStatementSyntax GenerateSwitchStatement()
            => InternalSyntaxFactory.SwitchStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.SwitchKeyword), null, GenerateIdentifierName(), null, InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SwitchSectionSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static Syntax.InternalSyntax.SwitchSectionSyntax GenerateSwitchSection()
            => InternalSyntaxFactory.SwitchSection(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SwitchLabelSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.StatementSyntax>());

        private static Syntax.InternalSyntax.CasePatternSwitchLabelSyntax GenerateCasePatternSwitchLabel()
            => InternalSyntaxFactory.CasePatternSwitchLabel(InternalSyntaxFactory.Token(SyntaxKind.CaseKeyword), GenerateDiscardPattern(), null, InternalSyntaxFactory.Token(SyntaxKind.ColonToken));

        private static Syntax.InternalSyntax.CaseSwitchLabelSyntax GenerateCaseSwitchLabel()
            => InternalSyntaxFactory.CaseSwitchLabel(InternalSyntaxFactory.Token(SyntaxKind.CaseKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.ColonToken));

        private static Syntax.InternalSyntax.DefaultSwitchLabelSyntax GenerateDefaultSwitchLabel()
            => InternalSyntaxFactory.DefaultSwitchLabel(InternalSyntaxFactory.Token(SyntaxKind.DefaultKeyword), InternalSyntaxFactory.Token(SyntaxKind.ColonToken));

        private static Syntax.InternalSyntax.SwitchExpressionSyntax GenerateSwitchExpression()
            => InternalSyntaxFactory.SwitchExpression(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.SwitchKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.SwitchExpressionArmSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static Syntax.InternalSyntax.SwitchExpressionArmSyntax GenerateSwitchExpressionArm()
            => InternalSyntaxFactory.SwitchExpressionArm(GenerateDiscardPattern(), null, InternalSyntaxFactory.Token(SyntaxKind.EqualsGreaterThanToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.TryStatementSyntax GenerateTryStatement()
            => InternalSyntaxFactory.TryStatement(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.TryKeyword), GenerateBlock(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.CatchClauseSyntax>(), null);

        private static Syntax.InternalSyntax.CatchClauseSyntax GenerateCatchClause()
            => InternalSyntaxFactory.CatchClause(InternalSyntaxFactory.Token(SyntaxKind.CatchKeyword), null, null, GenerateBlock());

        private static Syntax.InternalSyntax.CatchDeclarationSyntax GenerateCatchDeclaration()
            => InternalSyntaxFactory.CatchDeclaration(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), null, InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.CatchFilterClauseSyntax GenerateCatchFilterClause()
            => InternalSyntaxFactory.CatchFilterClause(InternalSyntaxFactory.Token(SyntaxKind.WhenKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.FinallyClauseSyntax GenerateFinallyClause()
            => InternalSyntaxFactory.FinallyClause(InternalSyntaxFactory.Token(SyntaxKind.FinallyKeyword), GenerateBlock());

        private static Syntax.InternalSyntax.CompilationUnitSyntax GenerateCompilationUnit()
            => InternalSyntaxFactory.CompilationUnit(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.ExternAliasDirectiveSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.UsingDirectiveSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.EndOfFileToken));

        private static Syntax.InternalSyntax.ExternAliasDirectiveSyntax GenerateExternAliasDirective()
            => InternalSyntaxFactory.ExternAliasDirective(InternalSyntaxFactory.Token(SyntaxKind.ExternKeyword), InternalSyntaxFactory.Token(SyntaxKind.AliasKeyword), InternalSyntaxFactory.Identifier("Identifier"), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.UsingDirectiveSyntax GenerateUsingDirective()
            => InternalSyntaxFactory.UsingDirective(null, InternalSyntaxFactory.Token(SyntaxKind.UsingKeyword), null, null, GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.NamespaceDeclarationSyntax GenerateNamespaceDeclaration()
            => InternalSyntaxFactory.NamespaceDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.NamespaceKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.ExternAliasDirectiveSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.UsingDirectiveSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken), null);

        private static Syntax.InternalSyntax.FileScopedNamespaceDeclarationSyntax GenerateFileScopedNamespaceDeclaration()
            => InternalSyntaxFactory.FileScopedNamespaceDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.NamespaceKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.ExternAliasDirectiveSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.UsingDirectiveSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax>());

        private static Syntax.InternalSyntax.AttributeListSyntax GenerateAttributeList()
            => InternalSyntaxFactory.AttributeList(InternalSyntaxFactory.Token(SyntaxKind.OpenBracketToken), null, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.AttributeSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static Syntax.InternalSyntax.AttributeTargetSpecifierSyntax GenerateAttributeTargetSpecifier()
            => InternalSyntaxFactory.AttributeTargetSpecifier(InternalSyntaxFactory.Identifier("Identifier"), InternalSyntaxFactory.Token(SyntaxKind.ColonToken));

        private static Syntax.InternalSyntax.AttributeSyntax GenerateAttribute()
            => InternalSyntaxFactory.Attribute(GenerateIdentifierName(), null);

        private static Syntax.InternalSyntax.AttributeArgumentListSyntax GenerateAttributeArgumentList()
            => InternalSyntaxFactory.AttributeArgumentList(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.AttributeArgumentSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.AttributeArgumentSyntax GenerateAttributeArgument()
            => InternalSyntaxFactory.AttributeArgument(null, null, GenerateIdentifierName());

        private static Syntax.InternalSyntax.NameEqualsSyntax GenerateNameEquals()
            => InternalSyntaxFactory.NameEquals(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.EqualsToken));

        private static Syntax.InternalSyntax.TypeParameterListSyntax GenerateTypeParameterList()
            => InternalSyntaxFactory.TypeParameterList(InternalSyntaxFactory.Token(SyntaxKind.LessThanToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.TypeParameterSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static Syntax.InternalSyntax.TypeParameterSyntax GenerateTypeParameter()
            => InternalSyntaxFactory.TypeParameter(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), null, InternalSyntaxFactory.Identifier("Identifier"));

        private static Syntax.InternalSyntax.ClassDeclarationSyntax GenerateClassDeclaration()
            => InternalSyntaxFactory.ClassDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.ClassKeyword), InternalSyntaxFactory.Identifier("Identifier"), null, null, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken), null);

        private static Syntax.InternalSyntax.StructDeclarationSyntax GenerateStructDeclaration()
            => InternalSyntaxFactory.StructDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.StructKeyword), InternalSyntaxFactory.Identifier("Identifier"), null, null, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken), null);

        private static Syntax.InternalSyntax.InterfaceDeclarationSyntax GenerateInterfaceDeclaration()
            => InternalSyntaxFactory.InterfaceDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.InterfaceKeyword), InternalSyntaxFactory.Identifier("Identifier"), null, null, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken), null);

        private static Syntax.InternalSyntax.RecordDeclarationSyntax GenerateRecordDeclaration()
            => InternalSyntaxFactory.RecordDeclaration(SyntaxKind.RecordDeclaration, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Identifier("Keyword"), null, InternalSyntaxFactory.Identifier("Identifier"), null, null, null, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax>(), null, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax>(), null, null);

        private static Syntax.InternalSyntax.EnumDeclarationSyntax GenerateEnumDeclaration()
            => InternalSyntaxFactory.EnumDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.EnumKeyword), InternalSyntaxFactory.Identifier("Identifier"), null, InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.EnumMemberDeclarationSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken), null);

        private static Syntax.InternalSyntax.DelegateDeclarationSyntax GenerateDelegateDeclaration()
            => InternalSyntaxFactory.DelegateDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.DelegateKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Identifier("Identifier"), null, GenerateParameterList(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.EnumMemberDeclarationSyntax GenerateEnumMemberDeclaration()
            => InternalSyntaxFactory.EnumMemberDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Identifier("Identifier"), null);

        private static Syntax.InternalSyntax.BaseListSyntax GenerateBaseList()
            => InternalSyntaxFactory.BaseList(InternalSyntaxFactory.Token(SyntaxKind.ColonToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.BaseTypeSyntax>());

        private static Syntax.InternalSyntax.SimpleBaseTypeSyntax GenerateSimpleBaseType()
            => InternalSyntaxFactory.SimpleBaseType(GenerateIdentifierName());

        private static Syntax.InternalSyntax.PrimaryConstructorBaseTypeSyntax GeneratePrimaryConstructorBaseType()
            => InternalSyntaxFactory.PrimaryConstructorBaseType(GenerateIdentifierName(), GenerateArgumentList());

        private static Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax GenerateTypeParameterConstraintClause()
            => InternalSyntaxFactory.TypeParameterConstraintClause(InternalSyntaxFactory.Token(SyntaxKind.WhereKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.ColonToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.TypeParameterConstraintSyntax>());

        private static Syntax.InternalSyntax.ConstructorConstraintSyntax GenerateConstructorConstraint()
            => InternalSyntaxFactory.ConstructorConstraint(InternalSyntaxFactory.Token(SyntaxKind.NewKeyword), InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.ClassOrStructConstraintSyntax GenerateClassOrStructConstraint()
            => InternalSyntaxFactory.ClassOrStructConstraint(SyntaxKind.ClassConstraint, InternalSyntaxFactory.Token(SyntaxKind.ClassKeyword), null);

        private static Syntax.InternalSyntax.TypeConstraintSyntax GenerateTypeConstraint()
            => InternalSyntaxFactory.TypeConstraint(GenerateIdentifierName());

        private static Syntax.InternalSyntax.DefaultConstraintSyntax GenerateDefaultConstraint()
            => InternalSyntaxFactory.DefaultConstraint(InternalSyntaxFactory.Token(SyntaxKind.DefaultKeyword));

        private static Syntax.InternalSyntax.FieldDeclarationSyntax GenerateFieldDeclaration()
            => InternalSyntaxFactory.FieldDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateVariableDeclaration(), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.EventFieldDeclarationSyntax GenerateEventFieldDeclaration()
            => InternalSyntaxFactory.EventFieldDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.EventKeyword), GenerateVariableDeclaration(), InternalSyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static Syntax.InternalSyntax.ExplicitInterfaceSpecifierSyntax GenerateExplicitInterfaceSpecifier()
            => InternalSyntaxFactory.ExplicitInterfaceSpecifier(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.DotToken));

        private static Syntax.InternalSyntax.MethodDeclarationSyntax GenerateMethodDeclaration()
            => InternalSyntaxFactory.MethodDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateIdentifierName(), null, InternalSyntaxFactory.Identifier("Identifier"), null, GenerateParameterList(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax>(), null, null, null);

        private static Syntax.InternalSyntax.OperatorDeclarationSyntax GenerateOperatorDeclaration()
            => InternalSyntaxFactory.OperatorDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateIdentifierName(), null, InternalSyntaxFactory.Token(SyntaxKind.OperatorKeyword), null, InternalSyntaxFactory.Token(SyntaxKind.PlusToken), GenerateParameterList(), null, null, null);

        private static Syntax.InternalSyntax.ConversionOperatorDeclarationSyntax GenerateConversionOperatorDeclaration()
            => InternalSyntaxFactory.ConversionOperatorDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.ImplicitKeyword), null, InternalSyntaxFactory.Token(SyntaxKind.OperatorKeyword), null, GenerateIdentifierName(), GenerateParameterList(), null, null, null);

        private static Syntax.InternalSyntax.ConstructorDeclarationSyntax GenerateConstructorDeclaration()
            => InternalSyntaxFactory.ConstructorDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Identifier("Identifier"), GenerateParameterList(), null, null, null, null);

        private static Syntax.InternalSyntax.ConstructorInitializerSyntax GenerateConstructorInitializer()
            => InternalSyntaxFactory.ConstructorInitializer(SyntaxKind.BaseConstructorInitializer, InternalSyntaxFactory.Token(SyntaxKind.ColonToken), InternalSyntaxFactory.Token(SyntaxKind.BaseKeyword), GenerateArgumentList());

        private static Syntax.InternalSyntax.DestructorDeclarationSyntax GenerateDestructorDeclaration()
            => InternalSyntaxFactory.DestructorDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.TildeToken), InternalSyntaxFactory.Identifier("Identifier"), GenerateParameterList(), null, null, null);

        private static Syntax.InternalSyntax.PropertyDeclarationSyntax GeneratePropertyDeclaration()
            => InternalSyntaxFactory.PropertyDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateIdentifierName(), null, InternalSyntaxFactory.Identifier("Identifier"), null, null, null, null);

        private static Syntax.InternalSyntax.ArrowExpressionClauseSyntax GenerateArrowExpressionClause()
            => InternalSyntaxFactory.ArrowExpressionClause(InternalSyntaxFactory.Token(SyntaxKind.EqualsGreaterThanToken), GenerateIdentifierName());

        private static Syntax.InternalSyntax.EventDeclarationSyntax GenerateEventDeclaration()
            => InternalSyntaxFactory.EventDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.EventKeyword), GenerateIdentifierName(), null, InternalSyntaxFactory.Identifier("Identifier"), null, null);

        private static Syntax.InternalSyntax.IndexerDeclarationSyntax GenerateIndexerDeclaration()
            => InternalSyntaxFactory.IndexerDeclaration(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateIdentifierName(), null, InternalSyntaxFactory.Token(SyntaxKind.ThisKeyword), GenerateBracketedParameterList(), null, null, null);

        private static Syntax.InternalSyntax.AccessorListSyntax GenerateAccessorList()
            => InternalSyntaxFactory.AccessorList(InternalSyntaxFactory.Token(SyntaxKind.OpenBraceToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AccessorDeclarationSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static Syntax.InternalSyntax.AccessorDeclarationSyntax GenerateAccessorDeclaration()
            => InternalSyntaxFactory.AccessorDeclaration(SyntaxKind.GetAccessorDeclaration, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.GetKeyword), null, null, null);

        private static Syntax.InternalSyntax.ParameterListSyntax GenerateParameterList()
            => InternalSyntaxFactory.ParameterList(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ParameterSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.BracketedParameterListSyntax GenerateBracketedParameterList()
            => InternalSyntaxFactory.BracketedParameterList(InternalSyntaxFactory.Token(SyntaxKind.OpenBracketToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ParameterSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static Syntax.InternalSyntax.ParameterSyntax GenerateParameter()
            => InternalSyntaxFactory.Parameter(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), null, InternalSyntaxFactory.Identifier("Identifier"), null);

        private static Syntax.InternalSyntax.FunctionPointerParameterSyntax GenerateFunctionPointerParameter()
            => InternalSyntaxFactory.FunctionPointerParameter(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), GenerateIdentifierName());

        private static Syntax.InternalSyntax.IncompleteMemberSyntax GenerateIncompleteMember()
            => InternalSyntaxFactory.IncompleteMember(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.AttributeListSyntax>(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), null);

        private static Syntax.InternalSyntax.SkippedTokensTriviaSyntax GenerateSkippedTokensTrivia()
            => InternalSyntaxFactory.SkippedTokensTrivia(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>());

        private static Syntax.InternalSyntax.DocumentationCommentTriviaSyntax GenerateDocumentationCommentTrivia()
            => InternalSyntaxFactory.DocumentationCommentTrivia(SyntaxKind.SingleLineDocumentationCommentTrivia, new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.XmlNodeSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.EndOfDocumentationCommentToken));

        private static Syntax.InternalSyntax.TypeCrefSyntax GenerateTypeCref()
            => InternalSyntaxFactory.TypeCref(GenerateIdentifierName());

        private static Syntax.InternalSyntax.QualifiedCrefSyntax GenerateQualifiedCref()
            => InternalSyntaxFactory.QualifiedCref(GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.DotToken), GenerateNameMemberCref());

        private static Syntax.InternalSyntax.NameMemberCrefSyntax GenerateNameMemberCref()
            => InternalSyntaxFactory.NameMemberCref(GenerateIdentifierName(), null);

        private static Syntax.InternalSyntax.IndexerMemberCrefSyntax GenerateIndexerMemberCref()
            => InternalSyntaxFactory.IndexerMemberCref(InternalSyntaxFactory.Token(SyntaxKind.ThisKeyword), null);

        private static Syntax.InternalSyntax.OperatorMemberCrefSyntax GenerateOperatorMemberCref()
            => InternalSyntaxFactory.OperatorMemberCref(InternalSyntaxFactory.Token(SyntaxKind.OperatorKeyword), null, InternalSyntaxFactory.Token(SyntaxKind.PlusToken), null);

        private static Syntax.InternalSyntax.ConversionOperatorMemberCrefSyntax GenerateConversionOperatorMemberCref()
            => InternalSyntaxFactory.ConversionOperatorMemberCref(InternalSyntaxFactory.Token(SyntaxKind.ImplicitKeyword), InternalSyntaxFactory.Token(SyntaxKind.OperatorKeyword), null, GenerateIdentifierName(), null);

        private static Syntax.InternalSyntax.CrefParameterListSyntax GenerateCrefParameterList()
            => InternalSyntaxFactory.CrefParameterList(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.CrefParameterSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.CrefBracketedParameterListSyntax GenerateCrefBracketedParameterList()
            => InternalSyntaxFactory.CrefBracketedParameterList(InternalSyntaxFactory.Token(SyntaxKind.OpenBracketToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.CrefParameterSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static Syntax.InternalSyntax.CrefParameterSyntax GenerateCrefParameter()
            => InternalSyntaxFactory.CrefParameter(null, GenerateIdentifierName());

        private static Syntax.InternalSyntax.XmlElementSyntax GenerateXmlElement()
            => InternalSyntaxFactory.XmlElement(GenerateXmlElementStartTag(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.XmlNodeSyntax>(), GenerateXmlElementEndTag());

        private static Syntax.InternalSyntax.XmlElementStartTagSyntax GenerateXmlElementStartTag()
            => InternalSyntaxFactory.XmlElementStartTag(InternalSyntaxFactory.Token(SyntaxKind.LessThanToken), GenerateXmlName(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.XmlAttributeSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static Syntax.InternalSyntax.XmlElementEndTagSyntax GenerateXmlElementEndTag()
            => InternalSyntaxFactory.XmlElementEndTag(InternalSyntaxFactory.Token(SyntaxKind.LessThanSlashToken), GenerateXmlName(), InternalSyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static Syntax.InternalSyntax.XmlEmptyElementSyntax GenerateXmlEmptyElement()
            => InternalSyntaxFactory.XmlEmptyElement(InternalSyntaxFactory.Token(SyntaxKind.LessThanToken), GenerateXmlName(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.XmlAttributeSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.SlashGreaterThanToken));

        private static Syntax.InternalSyntax.XmlNameSyntax GenerateXmlName()
            => InternalSyntaxFactory.XmlName(null, InternalSyntaxFactory.Identifier("LocalName"));

        private static Syntax.InternalSyntax.XmlPrefixSyntax GenerateXmlPrefix()
            => InternalSyntaxFactory.XmlPrefix(InternalSyntaxFactory.Identifier("Prefix"), InternalSyntaxFactory.Token(SyntaxKind.ColonToken));

        private static Syntax.InternalSyntax.XmlTextAttributeSyntax GenerateXmlTextAttribute()
            => InternalSyntaxFactory.XmlTextAttribute(GenerateXmlName(), InternalSyntaxFactory.Token(SyntaxKind.EqualsToken), InternalSyntaxFactory.Token(SyntaxKind.SingleQuoteToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.SingleQuoteToken));

        private static Syntax.InternalSyntax.XmlCrefAttributeSyntax GenerateXmlCrefAttribute()
            => InternalSyntaxFactory.XmlCrefAttribute(GenerateXmlName(), InternalSyntaxFactory.Token(SyntaxKind.EqualsToken), InternalSyntaxFactory.Token(SyntaxKind.SingleQuoteToken), GenerateTypeCref(), InternalSyntaxFactory.Token(SyntaxKind.SingleQuoteToken));

        private static Syntax.InternalSyntax.XmlNameAttributeSyntax GenerateXmlNameAttribute()
            => InternalSyntaxFactory.XmlNameAttribute(GenerateXmlName(), InternalSyntaxFactory.Token(SyntaxKind.EqualsToken), InternalSyntaxFactory.Token(SyntaxKind.SingleQuoteToken), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.SingleQuoteToken));

        private static Syntax.InternalSyntax.XmlTextSyntax GenerateXmlText()
            => InternalSyntaxFactory.XmlText(new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>());

        private static Syntax.InternalSyntax.XmlCDataSectionSyntax GenerateXmlCDataSection()
            => InternalSyntaxFactory.XmlCDataSection(InternalSyntaxFactory.Token(SyntaxKind.XmlCDataStartToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.XmlCDataEndToken));

        private static Syntax.InternalSyntax.XmlProcessingInstructionSyntax GenerateXmlProcessingInstruction()
            => InternalSyntaxFactory.XmlProcessingInstruction(InternalSyntaxFactory.Token(SyntaxKind.XmlProcessingInstructionStartToken), GenerateXmlName(), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.XmlProcessingInstructionEndToken));

        private static Syntax.InternalSyntax.XmlCommentSyntax GenerateXmlComment()
            => InternalSyntaxFactory.XmlComment(InternalSyntaxFactory.Token(SyntaxKind.XmlCommentStartToken), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList<Syntax.InternalSyntax.SyntaxToken>(), InternalSyntaxFactory.Token(SyntaxKind.XmlCommentEndToken));

        private static Syntax.InternalSyntax.IfDirectiveTriviaSyntax GenerateIfDirectiveTrivia()
            => InternalSyntaxFactory.IfDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.IfKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool(), new bool(), new bool());

        private static Syntax.InternalSyntax.ElifDirectiveTriviaSyntax GenerateElifDirectiveTrivia()
            => InternalSyntaxFactory.ElifDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.ElifKeyword), GenerateIdentifierName(), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool(), new bool(), new bool());

        private static Syntax.InternalSyntax.ElseDirectiveTriviaSyntax GenerateElseDirectiveTrivia()
            => InternalSyntaxFactory.ElseDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.ElseKeyword), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool(), new bool());

        private static Syntax.InternalSyntax.EndIfDirectiveTriviaSyntax GenerateEndIfDirectiveTrivia()
            => InternalSyntaxFactory.EndIfDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.EndIfKeyword), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.RegionDirectiveTriviaSyntax GenerateRegionDirectiveTrivia()
            => InternalSyntaxFactory.RegionDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.RegionKeyword), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.EndRegionDirectiveTriviaSyntax GenerateEndRegionDirectiveTrivia()
            => InternalSyntaxFactory.EndRegionDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.EndRegionKeyword), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.ErrorDirectiveTriviaSyntax GenerateErrorDirectiveTrivia()
            => InternalSyntaxFactory.ErrorDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.ErrorKeyword), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.WarningDirectiveTriviaSyntax GenerateWarningDirectiveTrivia()
            => InternalSyntaxFactory.WarningDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.WarningKeyword), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.BadDirectiveTriviaSyntax GenerateBadDirectiveTrivia()
            => InternalSyntaxFactory.BadDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Identifier("Identifier"), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.DefineDirectiveTriviaSyntax GenerateDefineDirectiveTrivia()
            => InternalSyntaxFactory.DefineDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.DefineKeyword), InternalSyntaxFactory.Identifier("Name"), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.UndefDirectiveTriviaSyntax GenerateUndefDirectiveTrivia()
            => InternalSyntaxFactory.UndefDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.UndefKeyword), InternalSyntaxFactory.Identifier("Name"), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.LineDirectiveTriviaSyntax GenerateLineDirectiveTrivia()
            => InternalSyntaxFactory.LineDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.LineKeyword), InternalSyntaxFactory.Literal(null, "1", 1, null), null, InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.LineDirectivePositionSyntax GenerateLineDirectivePosition()
            => InternalSyntaxFactory.LineDirectivePosition(InternalSyntaxFactory.Token(SyntaxKind.OpenParenToken), InternalSyntaxFactory.Literal(null, "1", 1, null), InternalSyntaxFactory.Token(SyntaxKind.CommaToken), InternalSyntaxFactory.Literal(null, "1", 1, null), InternalSyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static Syntax.InternalSyntax.LineSpanDirectiveTriviaSyntax GenerateLineSpanDirectiveTrivia()
            => InternalSyntaxFactory.LineSpanDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.LineKeyword), GenerateLineDirectivePosition(), InternalSyntaxFactory.Token(SyntaxKind.MinusToken), GenerateLineDirectivePosition(), null, InternalSyntaxFactory.Literal(null, "string", "string", null), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.PragmaWarningDirectiveTriviaSyntax GeneratePragmaWarningDirectiveTrivia()
            => InternalSyntaxFactory.PragmaWarningDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.PragmaKeyword), InternalSyntaxFactory.Token(SyntaxKind.WarningKeyword), InternalSyntaxFactory.Token(SyntaxKind.DisableKeyword), new Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList<Syntax.InternalSyntax.ExpressionSyntax>(), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.PragmaChecksumDirectiveTriviaSyntax GeneratePragmaChecksumDirectiveTrivia()
            => InternalSyntaxFactory.PragmaChecksumDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.PragmaKeyword), InternalSyntaxFactory.Token(SyntaxKind.ChecksumKeyword), InternalSyntaxFactory.Literal(null, "string", "string", null), InternalSyntaxFactory.Literal(null, "string", "string", null), InternalSyntaxFactory.Literal(null, "string", "string", null), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.ReferenceDirectiveTriviaSyntax GenerateReferenceDirectiveTrivia()
            => InternalSyntaxFactory.ReferenceDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.ReferenceKeyword), InternalSyntaxFactory.Literal(null, "string", "string", null), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.LoadDirectiveTriviaSyntax GenerateLoadDirectiveTrivia()
            => InternalSyntaxFactory.LoadDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.LoadKeyword), InternalSyntaxFactory.Literal(null, "string", "string", null), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.ShebangDirectiveTriviaSyntax GenerateShebangDirectiveTrivia()
            => InternalSyntaxFactory.ShebangDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.ExclamationToken), InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static Syntax.InternalSyntax.NullableDirectiveTriviaSyntax GenerateNullableDirectiveTrivia()
            => InternalSyntaxFactory.NullableDirectiveTrivia(InternalSyntaxFactory.Token(SyntaxKind.HashToken), InternalSyntaxFactory.Token(SyntaxKind.NullableKeyword), InternalSyntaxFactory.Token(SyntaxKind.EnableKeyword), null, InternalSyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());
        #endregion Green Generators

        #region Green Factory and Property Tests
        [Fact]
        public void TestIdentifierNameFactoryAndProperties()
        {
            var node = GenerateIdentifierName();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestQualifiedNameFactoryAndProperties()
        {
            var node = GenerateQualifiedName();

            Assert.NotNull(node.Left);
            Assert.Equal(SyntaxKind.DotToken, node.DotToken.Kind);
            Assert.NotNull(node.Right);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestGenericNameFactoryAndProperties()
        {
            var node = GenerateGenericName();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.NotNull(node.TypeArgumentList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTypeArgumentListFactoryAndProperties()
        {
            var node = GenerateTypeArgumentList();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind);
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAliasQualifiedNameFactoryAndProperties()
        {
            var node = GenerateAliasQualifiedName();

            Assert.NotNull(node.Alias);
            Assert.Equal(SyntaxKind.ColonColonToken, node.ColonColonToken.Kind);
            Assert.NotNull(node.Name);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPredefinedTypeFactoryAndProperties()
        {
            var node = GeneratePredefinedType();

            Assert.Equal(SyntaxKind.BoolKeyword, node.Keyword.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestArrayTypeFactoryAndProperties()
        {
            var node = GenerateArrayType();

            Assert.NotNull(node.ElementType);
            Assert.Equal(default, node.RankSpecifiers);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestArrayRankSpecifierFactoryAndProperties()
        {
            var node = GenerateArrayRankSpecifier();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind);
            Assert.Equal(default, node.Sizes);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPointerTypeFactoryAndProperties()
        {
            var node = GeneratePointerType();

            Assert.NotNull(node.ElementType);
            Assert.Equal(SyntaxKind.AsteriskToken, node.AsteriskToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFunctionPointerTypeFactoryAndProperties()
        {
            var node = GenerateFunctionPointerType();

            Assert.Equal(SyntaxKind.DelegateKeyword, node.DelegateKeyword.Kind);
            Assert.Equal(SyntaxKind.AsteriskToken, node.AsteriskToken.Kind);
            Assert.Null(node.CallingConvention);
            Assert.NotNull(node.ParameterList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFunctionPointerParameterListFactoryAndProperties()
        {
            var node = GenerateFunctionPointerParameterList();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind);
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFunctionPointerCallingConventionFactoryAndProperties()
        {
            var node = GenerateFunctionPointerCallingConvention();

            Assert.Equal(SyntaxKind.ManagedKeyword, node.ManagedOrUnmanagedKeyword.Kind);
            Assert.Null(node.UnmanagedCallingConventionList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListFactoryAndProperties()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind);
            Assert.Equal(default, node.CallingConventions);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionFactoryAndProperties()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Name.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestNullableTypeFactoryAndProperties()
        {
            var node = GenerateNullableType();

            Assert.NotNull(node.ElementType);
            Assert.Equal(SyntaxKind.QuestionToken, node.QuestionToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTupleTypeFactoryAndProperties()
        {
            var node = GenerateTupleType();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(default, node.Elements);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTupleElementFactoryAndProperties()
        {
            var node = GenerateTupleElement();

            Assert.NotNull(node.Type);
            Assert.Null(node.Identifier);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestOmittedTypeArgumentFactoryAndProperties()
        {
            var node = GenerateOmittedTypeArgument();

            Assert.Equal(SyntaxKind.OmittedTypeArgumentToken, node.OmittedTypeArgumentToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestRefTypeFactoryAndProperties()
        {
            var node = GenerateRefType();

            Assert.Equal(SyntaxKind.RefKeyword, node.RefKeyword.Kind);
            Assert.Null(node.ReadOnlyKeyword);
            Assert.Null(node.ScopedKeyword);
            Assert.NotNull(node.Type);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestParenthesizedExpressionFactoryAndProperties()
        {
            var node = GenerateParenthesizedExpression();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTupleExpressionFactoryAndProperties()
        {
            var node = GenerateTupleExpression();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPrefixUnaryExpressionFactoryAndProperties()
        {
            var node = GeneratePrefixUnaryExpression();

            Assert.Equal(SyntaxKind.PlusToken, node.OperatorToken.Kind);
            Assert.NotNull(node.Operand);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAwaitExpressionFactoryAndProperties()
        {
            var node = GenerateAwaitExpression();

            Assert.Equal(SyntaxKind.AwaitKeyword, node.AwaitKeyword.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPostfixUnaryExpressionFactoryAndProperties()
        {
            var node = GeneratePostfixUnaryExpression();

            Assert.NotNull(node.Operand);
            Assert.Equal(SyntaxKind.PlusPlusToken, node.OperatorToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestMemberAccessExpressionFactoryAndProperties()
        {
            var node = GenerateMemberAccessExpression();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.DotToken, node.OperatorToken.Kind);
            Assert.NotNull(node.Name);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestConditionalAccessExpressionFactoryAndProperties()
        {
            var node = GenerateConditionalAccessExpression();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.QuestionToken, node.OperatorToken.Kind);
            Assert.NotNull(node.WhenNotNull);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestMemberBindingExpressionFactoryAndProperties()
        {
            var node = GenerateMemberBindingExpression();

            Assert.Equal(SyntaxKind.DotToken, node.OperatorToken.Kind);
            Assert.NotNull(node.Name);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestElementBindingExpressionFactoryAndProperties()
        {
            var node = GenerateElementBindingExpression();

            Assert.NotNull(node.ArgumentList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestRangeExpressionFactoryAndProperties()
        {
            var node = GenerateRangeExpression();

            Assert.Null(node.LeftOperand);
            Assert.Equal(SyntaxKind.DotDotToken, node.OperatorToken.Kind);
            Assert.Null(node.RightOperand);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestImplicitElementAccessFactoryAndProperties()
        {
            var node = GenerateImplicitElementAccess();

            Assert.NotNull(node.ArgumentList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestBinaryExpressionFactoryAndProperties()
        {
            var node = GenerateBinaryExpression();

            Assert.NotNull(node.Left);
            Assert.Equal(SyntaxKind.PlusToken, node.OperatorToken.Kind);
            Assert.NotNull(node.Right);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAssignmentExpressionFactoryAndProperties()
        {
            var node = GenerateAssignmentExpression();

            Assert.NotNull(node.Left);
            Assert.Equal(SyntaxKind.EqualsToken, node.OperatorToken.Kind);
            Assert.NotNull(node.Right);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestConditionalExpressionFactoryAndProperties()
        {
            var node = GenerateConditionalExpression();

            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.QuestionToken, node.QuestionToken.Kind);
            Assert.NotNull(node.WhenTrue);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);
            Assert.NotNull(node.WhenFalse);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestThisExpressionFactoryAndProperties()
        {
            var node = GenerateThisExpression();

            Assert.Equal(SyntaxKind.ThisKeyword, node.Token.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestBaseExpressionFactoryAndProperties()
        {
            var node = GenerateBaseExpression();

            Assert.Equal(SyntaxKind.BaseKeyword, node.Token.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLiteralExpressionFactoryAndProperties()
        {
            var node = GenerateLiteralExpression();

            Assert.Equal(SyntaxKind.ArgListKeyword, node.Token.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestMakeRefExpressionFactoryAndProperties()
        {
            var node = GenerateMakeRefExpression();

            Assert.Equal(SyntaxKind.MakeRefKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestRefTypeExpressionFactoryAndProperties()
        {
            var node = GenerateRefTypeExpression();

            Assert.Equal(SyntaxKind.RefTypeKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestRefValueExpressionFactoryAndProperties()
        {
            var node = GenerateRefValueExpression();

            Assert.Equal(SyntaxKind.RefValueKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CommaToken, node.Comma.Kind);
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCheckedExpressionFactoryAndProperties()
        {
            var node = GenerateCheckedExpression();

            Assert.Equal(SyntaxKind.CheckedKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDefaultExpressionFactoryAndProperties()
        {
            var node = GenerateDefaultExpression();

            Assert.Equal(SyntaxKind.DefaultKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTypeOfExpressionFactoryAndProperties()
        {
            var node = GenerateTypeOfExpression();

            Assert.Equal(SyntaxKind.TypeOfKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSizeOfExpressionFactoryAndProperties()
        {
            var node = GenerateSizeOfExpression();

            Assert.Equal(SyntaxKind.SizeOfKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestInvocationExpressionFactoryAndProperties()
        {
            var node = GenerateInvocationExpression();

            Assert.NotNull(node.Expression);
            Assert.NotNull(node.ArgumentList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestElementAccessExpressionFactoryAndProperties()
        {
            var node = GenerateElementAccessExpression();

            Assert.NotNull(node.Expression);
            Assert.NotNull(node.ArgumentList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestArgumentListFactoryAndProperties()
        {
            var node = GenerateArgumentList();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestBracketedArgumentListFactoryAndProperties()
        {
            var node = GenerateBracketedArgumentList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind);
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestArgumentFactoryAndProperties()
        {
            var node = GenerateArgument();

            Assert.Null(node.NameColon);
            Assert.Null(node.RefKindKeyword);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestExpressionColonFactoryAndProperties()
        {
            var node = GenerateExpressionColon();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestNameColonFactoryAndProperties()
        {
            var node = GenerateNameColon();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDeclarationExpressionFactoryAndProperties()
        {
            var node = GenerateDeclarationExpression();

            Assert.NotNull(node.Type);
            Assert.NotNull(node.Designation);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCastExpressionFactoryAndProperties()
        {
            var node = GenerateCastExpression();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAnonymousMethodExpressionFactoryAndProperties()
        {
            var node = GenerateAnonymousMethodExpression();

            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.DelegateKeyword, node.DelegateKeyword.Kind);
            Assert.Null(node.ParameterList);
            Assert.NotNull(node.Block);
            Assert.Null(node.ExpressionBody);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSimpleLambdaExpressionFactoryAndProperties()
        {
            var node = GenerateSimpleLambdaExpression();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Parameter);
            Assert.Equal(SyntaxKind.EqualsGreaterThanToken, node.ArrowToken.Kind);
            Assert.Null(node.Block);
            Assert.Null(node.ExpressionBody);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestRefExpressionFactoryAndProperties()
        {
            var node = GenerateRefExpression();

            Assert.Equal(SyntaxKind.RefKeyword, node.RefKeyword.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionFactoryAndProperties()
        {
            var node = GenerateParenthesizedLambdaExpression();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Null(node.ReturnType);
            Assert.NotNull(node.ParameterList);
            Assert.Equal(SyntaxKind.EqualsGreaterThanToken, node.ArrowToken.Kind);
            Assert.Null(node.Block);
            Assert.Null(node.ExpressionBody);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestInitializerExpressionFactoryAndProperties()
        {
            var node = GenerateInitializerExpression();

            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Expressions);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionFactoryAndProperties()
        {
            var node = GenerateImplicitObjectCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind);
            Assert.NotNull(node.ArgumentList);
            Assert.Null(node.Initializer);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestObjectCreationExpressionFactoryAndProperties()
        {
            var node = GenerateObjectCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind);
            Assert.NotNull(node.Type);
            Assert.Null(node.ArgumentList);
            Assert.Null(node.Initializer);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestWithExpressionFactoryAndProperties()
        {
            var node = GenerateWithExpression();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.WithKeyword, node.WithKeyword.Kind);
            Assert.NotNull(node.Initializer);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorFactoryAndProperties()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();

            Assert.Null(node.NameEquals);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionFactoryAndProperties()
        {
            var node = GenerateAnonymousObjectCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Initializers);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestArrayCreationExpressionFactoryAndProperties()
        {
            var node = GenerateArrayCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind);
            Assert.NotNull(node.Type);
            Assert.Null(node.Initializer);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionFactoryAndProperties()
        {
            var node = GenerateImplicitArrayCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind);
            Assert.Equal(default, node.Commas);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind);
            Assert.NotNull(node.Initializer);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionFactoryAndProperties()
        {
            var node = GenerateStackAllocArrayCreationExpression();

            Assert.Equal(SyntaxKind.StackAllocKeyword, node.StackAllocKeyword.Kind);
            Assert.NotNull(node.Type);
            Assert.Null(node.Initializer);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionFactoryAndProperties()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();

            Assert.Equal(SyntaxKind.StackAllocKeyword, node.StackAllocKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind);
            Assert.NotNull(node.Initializer);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestQueryExpressionFactoryAndProperties()
        {
            var node = GenerateQueryExpression();

            Assert.NotNull(node.FromClause);
            Assert.NotNull(node.Body);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestQueryBodyFactoryAndProperties()
        {
            var node = GenerateQueryBody();

            Assert.Equal(default, node.Clauses);
            Assert.NotNull(node.SelectOrGroup);
            Assert.Null(node.Continuation);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFromClauseFactoryAndProperties()
        {
            var node = GenerateFromClause();

            Assert.Equal(SyntaxKind.FromKeyword, node.FromKeyword.Kind);
            Assert.Null(node.Type);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Equal(SyntaxKind.InKeyword, node.InKeyword.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLetClauseFactoryAndProperties()
        {
            var node = GenerateLetClause();

            Assert.Equal(SyntaxKind.LetKeyword, node.LetKeyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestJoinClauseFactoryAndProperties()
        {
            var node = GenerateJoinClause();

            Assert.Equal(SyntaxKind.JoinKeyword, node.JoinKeyword.Kind);
            Assert.Null(node.Type);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Equal(SyntaxKind.InKeyword, node.InKeyword.Kind);
            Assert.NotNull(node.InExpression);
            Assert.Equal(SyntaxKind.OnKeyword, node.OnKeyword.Kind);
            Assert.NotNull(node.LeftExpression);
            Assert.Equal(SyntaxKind.EqualsKeyword, node.EqualsKeyword.Kind);
            Assert.NotNull(node.RightExpression);
            Assert.Null(node.Into);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestJoinIntoClauseFactoryAndProperties()
        {
            var node = GenerateJoinIntoClause();

            Assert.Equal(SyntaxKind.IntoKeyword, node.IntoKeyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestWhereClauseFactoryAndProperties()
        {
            var node = GenerateWhereClause();

            Assert.Equal(SyntaxKind.WhereKeyword, node.WhereKeyword.Kind);
            Assert.NotNull(node.Condition);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestOrderByClauseFactoryAndProperties()
        {
            var node = GenerateOrderByClause();

            Assert.Equal(SyntaxKind.OrderByKeyword, node.OrderByKeyword.Kind);
            Assert.Equal(default, node.Orderings);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestOrderingFactoryAndProperties()
        {
            var node = GenerateOrdering();

            Assert.NotNull(node.Expression);
            Assert.Null(node.AscendingOrDescendingKeyword);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSelectClauseFactoryAndProperties()
        {
            var node = GenerateSelectClause();

            Assert.Equal(SyntaxKind.SelectKeyword, node.SelectKeyword.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestGroupClauseFactoryAndProperties()
        {
            var node = GenerateGroupClause();

            Assert.Equal(SyntaxKind.GroupKeyword, node.GroupKeyword.Kind);
            Assert.NotNull(node.GroupExpression);
            Assert.Equal(SyntaxKind.ByKeyword, node.ByKeyword.Kind);
            Assert.NotNull(node.ByExpression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestQueryContinuationFactoryAndProperties()
        {
            var node = GenerateQueryContinuation();

            Assert.Equal(SyntaxKind.IntoKeyword, node.IntoKeyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.NotNull(node.Body);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestOmittedArraySizeExpressionFactoryAndProperties()
        {
            var node = GenerateOmittedArraySizeExpression();

            Assert.Equal(SyntaxKind.OmittedArraySizeExpressionToken, node.OmittedArraySizeExpressionToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestInterpolatedStringExpressionFactoryAndProperties()
        {
            var node = GenerateInterpolatedStringExpression();

            Assert.Equal(SyntaxKind.InterpolatedStringStartToken, node.StringStartToken.Kind);
            Assert.Equal(default, node.Contents);
            Assert.Equal(SyntaxKind.InterpolatedStringEndToken, node.StringEndToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestIsPatternExpressionFactoryAndProperties()
        {
            var node = GenerateIsPatternExpression();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.IsKeyword, node.IsKeyword.Kind);
            Assert.NotNull(node.Pattern);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestThrowExpressionFactoryAndProperties()
        {
            var node = GenerateThrowExpression();

            Assert.Equal(SyntaxKind.ThrowKeyword, node.ThrowKeyword.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestWhenClauseFactoryAndProperties()
        {
            var node = GenerateWhenClause();

            Assert.Equal(SyntaxKind.WhenKeyword, node.WhenKeyword.Kind);
            Assert.NotNull(node.Condition);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDiscardPatternFactoryAndProperties()
        {
            var node = GenerateDiscardPattern();

            Assert.Equal(SyntaxKind.UnderscoreToken, node.UnderscoreToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDeclarationPatternFactoryAndProperties()
        {
            var node = GenerateDeclarationPattern();

            Assert.NotNull(node.Type);
            Assert.NotNull(node.Designation);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestVarPatternFactoryAndProperties()
        {
            var node = GenerateVarPattern();

            Assert.Equal(SyntaxKind.VarKeyword, node.VarKeyword.Kind);
            Assert.NotNull(node.Designation);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestRecursivePatternFactoryAndProperties()
        {
            var node = GenerateRecursivePattern();

            Assert.Null(node.Type);
            Assert.Null(node.PositionalPatternClause);
            Assert.Null(node.PropertyPatternClause);
            Assert.Null(node.Designation);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPositionalPatternClauseFactoryAndProperties()
        {
            var node = GeneratePositionalPatternClause();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(default, node.Subpatterns);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPropertyPatternClauseFactoryAndProperties()
        {
            var node = GeneratePropertyPatternClause();

            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Subpatterns);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSubpatternFactoryAndProperties()
        {
            var node = GenerateSubpattern();

            Assert.Null(node.ExpressionColon);
            Assert.NotNull(node.Pattern);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestConstantPatternFactoryAndProperties()
        {
            var node = GenerateConstantPattern();

            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestParenthesizedPatternFactoryAndProperties()
        {
            var node = GenerateParenthesizedPattern();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Pattern);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestRelationalPatternFactoryAndProperties()
        {
            var node = GenerateRelationalPattern();

            Assert.Equal(SyntaxKind.EqualsEqualsToken, node.OperatorToken.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTypePatternFactoryAndProperties()
        {
            var node = GenerateTypePattern();

            Assert.NotNull(node.Type);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestBinaryPatternFactoryAndProperties()
        {
            var node = GenerateBinaryPattern();

            Assert.NotNull(node.Left);
            Assert.Equal(SyntaxKind.OrKeyword, node.OperatorToken.Kind);
            Assert.NotNull(node.Right);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestUnaryPatternFactoryAndProperties()
        {
            var node = GenerateUnaryPattern();

            Assert.Equal(SyntaxKind.NotKeyword, node.OperatorToken.Kind);
            Assert.NotNull(node.Pattern);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestListPatternFactoryAndProperties()
        {
            var node = GenerateListPattern();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind);
            Assert.Equal(default, node.Patterns);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind);
            Assert.Null(node.Designation);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSlicePatternFactoryAndProperties()
        {
            var node = GenerateSlicePattern();

            Assert.Equal(SyntaxKind.DotDotToken, node.DotDotToken.Kind);
            Assert.Null(node.Pattern);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestInterpolatedStringTextFactoryAndProperties()
        {
            var node = GenerateInterpolatedStringText();

            Assert.Equal(SyntaxKind.InterpolatedStringTextToken, node.TextToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestInterpolationFactoryAndProperties()
        {
            var node = GenerateInterpolation();

            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.NotNull(node.Expression);
            Assert.Null(node.AlignmentClause);
            Assert.Null(node.FormatClause);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestInterpolationAlignmentClauseFactoryAndProperties()
        {
            var node = GenerateInterpolationAlignmentClause();

            Assert.Equal(SyntaxKind.IdentifierToken, node.CommaToken.Kind);
            Assert.NotNull(node.Value);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestInterpolationFormatClauseFactoryAndProperties()
        {
            var node = GenerateInterpolationFormatClause();

            Assert.Equal(SyntaxKind.IdentifierToken, node.ColonToken.Kind);
            Assert.Equal(SyntaxKind.InterpolatedStringTextToken, node.FormatStringToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestGlobalStatementFactoryAndProperties()
        {
            var node = GenerateGlobalStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestBlockFactoryAndProperties()
        {
            var node = GenerateBlock();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Statements);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLocalFunctionStatementFactoryAndProperties()
        {
            var node = GenerateLocalFunctionStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.ReturnType);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.TypeParameterList);
            Assert.NotNull(node.ParameterList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLocalDeclarationStatementFactoryAndProperties()
        {
            var node = GenerateLocalDeclarationStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Null(node.AwaitKeyword);
            Assert.Null(node.UsingKeyword);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Declaration);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestVariableDeclarationFactoryAndProperties()
        {
            var node = GenerateVariableDeclaration();

            Assert.NotNull(node.Type);
            Assert.Equal(default, node.Variables);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestVariableDeclaratorFactoryAndProperties()
        {
            var node = GenerateVariableDeclarator();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.ArgumentList);
            Assert.Null(node.Initializer);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestEqualsValueClauseFactoryAndProperties()
        {
            var node = GenerateEqualsValueClause();

            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind);
            Assert.NotNull(node.Value);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSingleVariableDesignationFactoryAndProperties()
        {
            var node = GenerateSingleVariableDesignation();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDiscardDesignationFactoryAndProperties()
        {
            var node = GenerateDiscardDesignation();

            Assert.Equal(SyntaxKind.UnderscoreToken, node.UnderscoreToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestParenthesizedVariableDesignationFactoryAndProperties()
        {
            var node = GenerateParenthesizedVariableDesignation();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(default, node.Variables);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestExpressionStatementFactoryAndProperties()
        {
            var node = GenerateExpressionStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestEmptyStatementFactoryAndProperties()
        {
            var node = GenerateEmptyStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLabeledStatementFactoryAndProperties()
        {
            var node = GenerateLabeledStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestGotoStatementFactoryAndProperties()
        {
            var node = GenerateGotoStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.GotoKeyword, node.GotoKeyword.Kind);
            Assert.Null(node.CaseOrDefaultKeyword);
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestBreakStatementFactoryAndProperties()
        {
            var node = GenerateBreakStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.BreakKeyword, node.BreakKeyword.Kind);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestContinueStatementFactoryAndProperties()
        {
            var node = GenerateContinueStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.ContinueKeyword, node.ContinueKeyword.Kind);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestReturnStatementFactoryAndProperties()
        {
            var node = GenerateReturnStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.ReturnKeyword, node.ReturnKeyword.Kind);
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestThrowStatementFactoryAndProperties()
        {
            var node = GenerateThrowStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.ThrowKeyword, node.ThrowKeyword.Kind);
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestYieldStatementFactoryAndProperties()
        {
            var node = GenerateYieldStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.YieldKeyword, node.YieldKeyword.Kind);
            Assert.Equal(SyntaxKind.ReturnKeyword, node.ReturnOrBreakKeyword.Kind);
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestWhileStatementFactoryAndProperties()
        {
            var node = GenerateWhileStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.WhileKeyword, node.WhileKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDoStatementFactoryAndProperties()
        {
            var node = GenerateDoStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.DoKeyword, node.DoKeyword.Kind);
            Assert.NotNull(node.Statement);
            Assert.Equal(SyntaxKind.WhileKeyword, node.WhileKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestForStatementFactoryAndProperties()
        {
            var node = GenerateForStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.ForKeyword, node.ForKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Null(node.Declaration);
            Assert.Equal(default, node.Initializers);
            Assert.Equal(SyntaxKind.SemicolonToken, node.FirstSemicolonToken.Kind);
            Assert.Null(node.Condition);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SecondSemicolonToken.Kind);
            Assert.Equal(default, node.Incrementors);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestForEachStatementFactoryAndProperties()
        {
            var node = GenerateForEachStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Null(node.AwaitKeyword);
            Assert.Equal(SyntaxKind.ForEachKeyword, node.ForEachKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Equal(SyntaxKind.InKeyword, node.InKeyword.Kind);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestForEachVariableStatementFactoryAndProperties()
        {
            var node = GenerateForEachVariableStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Null(node.AwaitKeyword);
            Assert.Equal(SyntaxKind.ForEachKeyword, node.ForEachKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Variable);
            Assert.Equal(SyntaxKind.InKeyword, node.InKeyword.Kind);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestUsingStatementFactoryAndProperties()
        {
            var node = GenerateUsingStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Null(node.AwaitKeyword);
            Assert.Equal(SyntaxKind.UsingKeyword, node.UsingKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Null(node.Declaration);
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFixedStatementFactoryAndProperties()
        {
            var node = GenerateFixedStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.FixedKeyword, node.FixedKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Declaration);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCheckedStatementFactoryAndProperties()
        {
            var node = GenerateCheckedStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.CheckedKeyword, node.Keyword.Kind);
            Assert.NotNull(node.Block);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestUnsafeStatementFactoryAndProperties()
        {
            var node = GenerateUnsafeStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.UnsafeKeyword, node.UnsafeKeyword.Kind);
            Assert.NotNull(node.Block);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLockStatementFactoryAndProperties()
        {
            var node = GenerateLockStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.LockKeyword, node.LockKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestIfStatementFactoryAndProperties()
        {
            var node = GenerateIfStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.IfKeyword, node.IfKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);
            Assert.NotNull(node.Statement);
            Assert.Null(node.Else);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestElseClauseFactoryAndProperties()
        {
            var node = GenerateElseClause();

            Assert.Equal(SyntaxKind.ElseKeyword, node.ElseKeyword.Kind);
            Assert.NotNull(node.Statement);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSwitchStatementFactoryAndProperties()
        {
            var node = GenerateSwitchStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.SwitchKeyword, node.SwitchKeyword.Kind);
            Assert.Null(node.OpenParenToken);
            Assert.NotNull(node.Expression);
            Assert.Null(node.CloseParenToken);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Sections);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSwitchSectionFactoryAndProperties()
        {
            var node = GenerateSwitchSection();

            Assert.Equal(default, node.Labels);
            Assert.Equal(default, node.Statements);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCasePatternSwitchLabelFactoryAndProperties()
        {
            var node = GenerateCasePatternSwitchLabel();

            Assert.Equal(SyntaxKind.CaseKeyword, node.Keyword.Kind);
            Assert.NotNull(node.Pattern);
            Assert.Null(node.WhenClause);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCaseSwitchLabelFactoryAndProperties()
        {
            var node = GenerateCaseSwitchLabel();

            Assert.Equal(SyntaxKind.CaseKeyword, node.Keyword.Kind);
            Assert.NotNull(node.Value);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDefaultSwitchLabelFactoryAndProperties()
        {
            var node = GenerateDefaultSwitchLabel();

            Assert.Equal(SyntaxKind.DefaultKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSwitchExpressionFactoryAndProperties()
        {
            var node = GenerateSwitchExpression();

            Assert.NotNull(node.GoverningExpression);
            Assert.Equal(SyntaxKind.SwitchKeyword, node.SwitchKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Arms);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSwitchExpressionArmFactoryAndProperties()
        {
            var node = GenerateSwitchExpressionArm();

            Assert.NotNull(node.Pattern);
            Assert.Null(node.WhenClause);
            Assert.Equal(SyntaxKind.EqualsGreaterThanToken, node.EqualsGreaterThanToken.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTryStatementFactoryAndProperties()
        {
            var node = GenerateTryStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.TryKeyword, node.TryKeyword.Kind);
            Assert.NotNull(node.Block);
            Assert.Equal(default, node.Catches);
            Assert.Null(node.Finally);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCatchClauseFactoryAndProperties()
        {
            var node = GenerateCatchClause();

            Assert.Equal(SyntaxKind.CatchKeyword, node.CatchKeyword.Kind);
            Assert.Null(node.Declaration);
            Assert.Null(node.Filter);
            Assert.NotNull(node.Block);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCatchDeclarationFactoryAndProperties()
        {
            var node = GenerateCatchDeclaration();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.Type);
            Assert.Null(node.Identifier);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCatchFilterClauseFactoryAndProperties()
        {
            var node = GenerateCatchFilterClause();

            Assert.Equal(SyntaxKind.WhenKeyword, node.WhenKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.NotNull(node.FilterExpression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFinallyClauseFactoryAndProperties()
        {
            var node = GenerateFinallyClause();

            Assert.Equal(SyntaxKind.FinallyKeyword, node.FinallyKeyword.Kind);
            Assert.NotNull(node.Block);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCompilationUnitFactoryAndProperties()
        {
            var node = GenerateCompilationUnit();

            Assert.Equal(default, node.Externs);
            Assert.Equal(default, node.Usings);
            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.EndOfFileToken, node.EndOfFileToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestExternAliasDirectiveFactoryAndProperties()
        {
            var node = GenerateExternAliasDirective();

            Assert.Equal(SyntaxKind.ExternKeyword, node.ExternKeyword.Kind);
            Assert.Equal(SyntaxKind.AliasKeyword, node.AliasKeyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestUsingDirectiveFactoryAndProperties()
        {
            var node = GenerateUsingDirective();

            Assert.Null(node.GlobalKeyword);
            Assert.Equal(SyntaxKind.UsingKeyword, node.UsingKeyword.Kind);
            Assert.Null(node.StaticKeyword);
            Assert.Null(node.Alias);
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestNamespaceDeclarationFactoryAndProperties()
        {
            var node = GenerateNamespaceDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.NamespaceKeyword, node.NamespaceKeyword.Kind);
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Externs);
            Assert.Equal(default, node.Usings);
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationFactoryAndProperties()
        {
            var node = GenerateFileScopedNamespaceDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.NamespaceKeyword, node.NamespaceKeyword.Kind);
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);
            Assert.Equal(default, node.Externs);
            Assert.Equal(default, node.Usings);
            Assert.Equal(default, node.Members);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAttributeListFactoryAndProperties()
        {
            var node = GenerateAttributeList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind);
            Assert.Null(node.Target);
            Assert.Equal(default, node.Attributes);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAttributeTargetSpecifierFactoryAndProperties()
        {
            var node = GenerateAttributeTargetSpecifier();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAttributeFactoryAndProperties()
        {
            var node = GenerateAttribute();

            Assert.NotNull(node.Name);
            Assert.Null(node.ArgumentList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAttributeArgumentListFactoryAndProperties()
        {
            var node = GenerateAttributeArgumentList();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAttributeArgumentFactoryAndProperties()
        {
            var node = GenerateAttributeArgument();

            Assert.Null(node.NameEquals);
            Assert.Null(node.NameColon);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestNameEqualsFactoryAndProperties()
        {
            var node = GenerateNameEquals();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTypeParameterListFactoryAndProperties()
        {
            var node = GenerateTypeParameterList();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind);
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTypeParameterFactoryAndProperties()
        {
            var node = GenerateTypeParameter();

            Assert.Equal(default, node.AttributeLists);
            Assert.Null(node.VarianceKeyword);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestClassDeclarationFactoryAndProperties()
        {
            var node = GenerateClassDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.ClassKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.TypeParameterList);
            Assert.Null(node.BaseList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestStructDeclarationFactoryAndProperties()
        {
            var node = GenerateStructDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.StructKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.TypeParameterList);
            Assert.Null(node.BaseList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestInterfaceDeclarationFactoryAndProperties()
        {
            var node = GenerateInterfaceDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.InterfaceKeyword, node.Keyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.TypeParameterList);
            Assert.Null(node.BaseList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestRecordDeclarationFactoryAndProperties()
        {
            var node = GenerateRecordDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Keyword.Kind);
            Assert.Null(node.ClassOrStructKeyword);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.TypeParameterList);
            Assert.Null(node.ParameterList);
            Assert.Null(node.BaseList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Null(node.OpenBraceToken);
            Assert.Equal(default, node.Members);
            Assert.Null(node.CloseBraceToken);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestEnumDeclarationFactoryAndProperties()
        {
            var node = GenerateEnumDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.EnumKeyword, node.EnumKeyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.BaseList);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDelegateDeclarationFactoryAndProperties()
        {
            var node = GenerateDelegateDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.DelegateKeyword, node.DelegateKeyword.Kind);
            Assert.NotNull(node.ReturnType);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.TypeParameterList);
            Assert.NotNull(node.ParameterList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestEnumMemberDeclarationFactoryAndProperties()
        {
            var node = GenerateEnumMemberDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.EqualsValue);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestBaseListFactoryAndProperties()
        {
            var node = GenerateBaseList();

            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);
            Assert.Equal(default, node.Types);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSimpleBaseTypeFactoryAndProperties()
        {
            var node = GenerateSimpleBaseType();

            Assert.NotNull(node.Type);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeFactoryAndProperties()
        {
            var node = GeneratePrimaryConstructorBaseType();

            Assert.NotNull(node.Type);
            Assert.NotNull(node.ArgumentList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTypeParameterConstraintClauseFactoryAndProperties()
        {
            var node = GenerateTypeParameterConstraintClause();

            Assert.Equal(SyntaxKind.WhereKeyword, node.WhereKeyword.Kind);
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);
            Assert.Equal(default, node.Constraints);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestConstructorConstraintFactoryAndProperties()
        {
            var node = GenerateConstructorConstraint();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind);
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestClassOrStructConstraintFactoryAndProperties()
        {
            var node = GenerateClassOrStructConstraint();

            Assert.Equal(SyntaxKind.ClassKeyword, node.ClassOrStructKeyword.Kind);
            Assert.Null(node.QuestionToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTypeConstraintFactoryAndProperties()
        {
            var node = GenerateTypeConstraint();

            Assert.NotNull(node.Type);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDefaultConstraintFactoryAndProperties()
        {
            var node = GenerateDefaultConstraint();

            Assert.Equal(SyntaxKind.DefaultKeyword, node.DefaultKeyword.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFieldDeclarationFactoryAndProperties()
        {
            var node = GenerateFieldDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Declaration);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestEventFieldDeclarationFactoryAndProperties()
        {
            var node = GenerateEventFieldDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.EventKeyword, node.EventKeyword.Kind);
            Assert.NotNull(node.Declaration);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierFactoryAndProperties()
        {
            var node = GenerateExplicitInterfaceSpecifier();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.DotToken, node.DotToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestMethodDeclarationFactoryAndProperties()
        {
            var node = GenerateMethodDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.ReturnType);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.TypeParameterList);
            Assert.NotNull(node.ParameterList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestOperatorDeclarationFactoryAndProperties()
        {
            var node = GenerateOperatorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.ReturnType);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.OperatorKeyword, node.OperatorKeyword.Kind);
            Assert.Null(node.CheckedKeyword);
            Assert.Equal(SyntaxKind.PlusToken, node.OperatorToken.Kind);
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestConversionOperatorDeclarationFactoryAndProperties()
        {
            var node = GenerateConversionOperatorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.ImplicitKeyword, node.ImplicitOrExplicitKeyword.Kind);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.OperatorKeyword, node.OperatorKeyword.Kind);
            Assert.Null(node.CheckedKeyword);
            Assert.NotNull(node.Type);
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestConstructorDeclarationFactoryAndProperties()
        {
            var node = GenerateConstructorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.Initializer);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestConstructorInitializerFactoryAndProperties()
        {
            var node = GenerateConstructorInitializer();

            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);
            Assert.Equal(SyntaxKind.BaseKeyword, node.ThisOrBaseKeyword.Kind);
            Assert.NotNull(node.ArgumentList);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDestructorDeclarationFactoryAndProperties()
        {
            var node = GenerateDestructorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.TildeToken, node.TildeToken.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPropertyDeclarationFactoryAndProperties()
        {
            var node = GeneratePropertyDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Type);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.AccessorList);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.Initializer);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestArrowExpressionClauseFactoryAndProperties()
        {
            var node = GenerateArrowExpressionClause();

            Assert.Equal(SyntaxKind.EqualsGreaterThanToken, node.ArrowToken.Kind);
            Assert.NotNull(node.Expression);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestEventDeclarationFactoryAndProperties()
        {
            var node = GenerateEventDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.EventKeyword, node.EventKeyword.Kind);
            Assert.NotNull(node.Type);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.AccessorList);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestIndexerDeclarationFactoryAndProperties()
        {
            var node = GenerateIndexerDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Type);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.ThisKeyword, node.ThisKeyword.Kind);
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.AccessorList);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAccessorListFactoryAndProperties()
        {
            var node = GenerateAccessorList();

            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind);
            Assert.Equal(default, node.Accessors);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestAccessorDeclarationFactoryAndProperties()
        {
            var node = GenerateAccessorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.GetKeyword, node.Keyword.Kind);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.SemicolonToken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestParameterListFactoryAndProperties()
        {
            var node = GenerateParameterList();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestBracketedParameterListFactoryAndProperties()
        {
            var node = GenerateBracketedParameterList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind);
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestParameterFactoryAndProperties()
        {
            var node = GenerateParameter();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Null(node.Type);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Null(node.Default);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestFunctionPointerParameterFactoryAndProperties()
        {
            var node = GenerateFunctionPointerParameter();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Type);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestIncompleteMemberFactoryAndProperties()
        {
            var node = GenerateIncompleteMember();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Null(node.Type);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestSkippedTokensTriviaFactoryAndProperties()
        {
            var node = GenerateSkippedTokensTrivia();

            Assert.Equal(default, node.Tokens);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDocumentationCommentTriviaFactoryAndProperties()
        {
            var node = GenerateDocumentationCommentTrivia();

            Assert.Equal(default, node.Content);
            Assert.Equal(SyntaxKind.EndOfDocumentationCommentToken, node.EndOfComment.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestTypeCrefFactoryAndProperties()
        {
            var node = GenerateTypeCref();

            Assert.NotNull(node.Type);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestQualifiedCrefFactoryAndProperties()
        {
            var node = GenerateQualifiedCref();

            Assert.NotNull(node.Container);
            Assert.Equal(SyntaxKind.DotToken, node.DotToken.Kind);
            Assert.NotNull(node.Member);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestNameMemberCrefFactoryAndProperties()
        {
            var node = GenerateNameMemberCref();

            Assert.NotNull(node.Name);
            Assert.Null(node.Parameters);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestIndexerMemberCrefFactoryAndProperties()
        {
            var node = GenerateIndexerMemberCref();

            Assert.Equal(SyntaxKind.ThisKeyword, node.ThisKeyword.Kind);
            Assert.Null(node.Parameters);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestOperatorMemberCrefFactoryAndProperties()
        {
            var node = GenerateOperatorMemberCref();

            Assert.Equal(SyntaxKind.OperatorKeyword, node.OperatorKeyword.Kind);
            Assert.Null(node.CheckedKeyword);
            Assert.Equal(SyntaxKind.PlusToken, node.OperatorToken.Kind);
            Assert.Null(node.Parameters);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestConversionOperatorMemberCrefFactoryAndProperties()
        {
            var node = GenerateConversionOperatorMemberCref();

            Assert.Equal(SyntaxKind.ImplicitKeyword, node.ImplicitOrExplicitKeyword.Kind);
            Assert.Equal(SyntaxKind.OperatorKeyword, node.OperatorKeyword.Kind);
            Assert.Null(node.CheckedKeyword);
            Assert.NotNull(node.Type);
            Assert.Null(node.Parameters);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCrefParameterListFactoryAndProperties()
        {
            var node = GenerateCrefParameterList();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCrefBracketedParameterListFactoryAndProperties()
        {
            var node = GenerateCrefBracketedParameterList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind);
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestCrefParameterFactoryAndProperties()
        {
            var node = GenerateCrefParameter();

            Assert.Null(node.RefKindKeyword);
            Assert.NotNull(node.Type);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlElementFactoryAndProperties()
        {
            var node = GenerateXmlElement();

            Assert.NotNull(node.StartTag);
            Assert.Equal(default, node.Content);
            Assert.NotNull(node.EndTag);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlElementStartTagFactoryAndProperties()
        {
            var node = GenerateXmlElementStartTag();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind);
            Assert.NotNull(node.Name);
            Assert.Equal(default, node.Attributes);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlElementEndTagFactoryAndProperties()
        {
            var node = GenerateXmlElementEndTag();

            Assert.Equal(SyntaxKind.LessThanSlashToken, node.LessThanSlashToken.Kind);
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlEmptyElementFactoryAndProperties()
        {
            var node = GenerateXmlEmptyElement();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind);
            Assert.NotNull(node.Name);
            Assert.Equal(default, node.Attributes);
            Assert.Equal(SyntaxKind.SlashGreaterThanToken, node.SlashGreaterThanToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlNameFactoryAndProperties()
        {
            var node = GenerateXmlName();

            Assert.Null(node.Prefix);
            Assert.Equal(SyntaxKind.IdentifierToken, node.LocalName.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlPrefixFactoryAndProperties()
        {
            var node = GenerateXmlPrefix();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Prefix.Kind);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlTextAttributeFactoryAndProperties()
        {
            var node = GenerateXmlTextAttribute();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind);
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.StartQuoteToken.Kind);
            Assert.Equal(default, node.TextTokens);
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.EndQuoteToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlCrefAttributeFactoryAndProperties()
        {
            var node = GenerateXmlCrefAttribute();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind);
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.StartQuoteToken.Kind);
            Assert.NotNull(node.Cref);
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.EndQuoteToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlNameAttributeFactoryAndProperties()
        {
            var node = GenerateXmlNameAttribute();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind);
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.StartQuoteToken.Kind);
            Assert.NotNull(node.Identifier);
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.EndQuoteToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlTextFactoryAndProperties()
        {
            var node = GenerateXmlText();

            Assert.Equal(default, node.TextTokens);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlCDataSectionFactoryAndProperties()
        {
            var node = GenerateXmlCDataSection();

            Assert.Equal(SyntaxKind.XmlCDataStartToken, node.StartCDataToken.Kind);
            Assert.Equal(default, node.TextTokens);
            Assert.Equal(SyntaxKind.XmlCDataEndToken, node.EndCDataToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlProcessingInstructionFactoryAndProperties()
        {
            var node = GenerateXmlProcessingInstruction();

            Assert.Equal(SyntaxKind.XmlProcessingInstructionStartToken, node.StartProcessingInstructionToken.Kind);
            Assert.NotNull(node.Name);
            Assert.Equal(default, node.TextTokens);
            Assert.Equal(SyntaxKind.XmlProcessingInstructionEndToken, node.EndProcessingInstructionToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestXmlCommentFactoryAndProperties()
        {
            var node = GenerateXmlComment();

            Assert.Equal(SyntaxKind.XmlCommentStartToken, node.LessThanExclamationMinusMinusToken.Kind);
            Assert.Equal(default, node.TextTokens);
            Assert.Equal(SyntaxKind.XmlCommentEndToken, node.MinusMinusGreaterThanToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestIfDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateIfDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.IfKeyword, node.IfKeyword.Kind);
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);
            Assert.Equal(new bool(), node.BranchTaken);
            Assert.Equal(new bool(), node.ConditionValue);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestElifDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateElifDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.ElifKeyword, node.ElifKeyword.Kind);
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);
            Assert.Equal(new bool(), node.BranchTaken);
            Assert.Equal(new bool(), node.ConditionValue);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestElseDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateElseDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.ElseKeyword, node.ElseKeyword.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);
            Assert.Equal(new bool(), node.BranchTaken);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestEndIfDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateEndIfDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.EndIfKeyword, node.EndIfKeyword.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestRegionDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateRegionDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.RegionKeyword, node.RegionKeyword.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateEndRegionDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.EndRegionKeyword, node.EndRegionKeyword.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestErrorDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateErrorDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.ErrorKeyword, node.ErrorKeyword.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestWarningDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateWarningDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.WarningKeyword, node.WarningKeyword.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestBadDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateBadDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestDefineDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateDefineDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.DefineKeyword, node.DefineKeyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Name.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestUndefDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateUndefDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.UndefKeyword, node.UndefKeyword.Kind);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Name.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLineDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateLineDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.LineKeyword, node.LineKeyword.Kind);
            Assert.Equal(SyntaxKind.NumericLiteralToken, node.Line.Kind);
            Assert.Null(node.File);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLineDirectivePositionFactoryAndProperties()
        {
            var node = GenerateLineDirectivePosition();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind);
            Assert.Equal(SyntaxKind.NumericLiteralToken, node.Line.Kind);
            Assert.Equal(SyntaxKind.CommaToken, node.CommaToken.Kind);
            Assert.Equal(SyntaxKind.NumericLiteralToken, node.Character.Kind);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateLineSpanDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.LineKeyword, node.LineKeyword.Kind);
            Assert.NotNull(node.Start);
            Assert.Equal(SyntaxKind.MinusToken, node.MinusToken.Kind);
            Assert.NotNull(node.End);
            Assert.Null(node.CharacterOffset);
            Assert.Equal(SyntaxKind.StringLiteralToken, node.File.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaFactoryAndProperties()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.PragmaKeyword, node.PragmaKeyword.Kind);
            Assert.Equal(SyntaxKind.WarningKeyword, node.WarningKeyword.Kind);
            Assert.Equal(SyntaxKind.DisableKeyword, node.DisableOrRestoreKeyword.Kind);
            Assert.Equal(default, node.ErrorCodes);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaFactoryAndProperties()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.PragmaKeyword, node.PragmaKeyword.Kind);
            Assert.Equal(SyntaxKind.ChecksumKeyword, node.ChecksumKeyword.Kind);
            Assert.Equal(SyntaxKind.StringLiteralToken, node.File.Kind);
            Assert.Equal(SyntaxKind.StringLiteralToken, node.Guid.Kind);
            Assert.Equal(SyntaxKind.StringLiteralToken, node.Bytes.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestReferenceDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateReferenceDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.ReferenceKeyword, node.ReferenceKeyword.Kind);
            Assert.Equal(SyntaxKind.StringLiteralToken, node.File.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestLoadDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateLoadDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.LoadKeyword, node.LoadKeyword.Kind);
            Assert.Equal(SyntaxKind.StringLiteralToken, node.File.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestShebangDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateShebangDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.ExclamationToken, node.ExclamationToken.Kind);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }

        [Fact]
        public void TestNullableDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateNullableDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind);
            Assert.Equal(SyntaxKind.NullableKeyword, node.NullableKeyword.Kind);
            Assert.Equal(SyntaxKind.EnableKeyword, node.SettingToken.Kind);
            Assert.Null(node.TargetToken);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind);
            Assert.Equal(new bool(), node.IsActive);

            AttachAndCheckDiagnostics(node);
        }
        #endregion Green Factory and Property Tests

        #region Green Rewriters
        [Fact]
        public void TestIdentifierNameTokenDeleteRewriter()
        {
            var oldNode = GenerateIdentifierName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIdentifierNameIdentityRewriter()
        {
            var oldNode = GenerateIdentifierName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQualifiedNameTokenDeleteRewriter()
        {
            var oldNode = GenerateQualifiedName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQualifiedNameIdentityRewriter()
        {
            var oldNode = GenerateQualifiedName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestGenericNameTokenDeleteRewriter()
        {
            var oldNode = GenerateGenericName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGenericNameIdentityRewriter()
        {
            var oldNode = GenerateGenericName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeArgumentListTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeArgumentList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeArgumentListIdentityRewriter()
        {
            var oldNode = GenerateTypeArgumentList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAliasQualifiedNameTokenDeleteRewriter()
        {
            var oldNode = GenerateAliasQualifiedName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAliasQualifiedNameIdentityRewriter()
        {
            var oldNode = GenerateAliasQualifiedName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPredefinedTypeTokenDeleteRewriter()
        {
            var oldNode = GeneratePredefinedType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPredefinedTypeIdentityRewriter()
        {
            var oldNode = GeneratePredefinedType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArrayTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateArrayType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrayTypeIdentityRewriter()
        {
            var oldNode = GenerateArrayType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArrayRankSpecifierTokenDeleteRewriter()
        {
            var oldNode = GenerateArrayRankSpecifier();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrayRankSpecifierIdentityRewriter()
        {
            var oldNode = GenerateArrayRankSpecifier();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPointerTypeTokenDeleteRewriter()
        {
            var oldNode = GeneratePointerType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPointerTypeIdentityRewriter()
        {
            var oldNode = GeneratePointerType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerTypeIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerParameterListIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerCallingConventionTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerCallingConvention();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerCallingConventionIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerCallingConvention();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConventionList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConventionList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConvention();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConvention();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNullableTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateNullableType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNullableTypeIdentityRewriter()
        {
            var oldNode = GenerateNullableType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTupleTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateTupleType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTupleTypeIdentityRewriter()
        {
            var oldNode = GenerateTupleType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTupleElementTokenDeleteRewriter()
        {
            var oldNode = GenerateTupleElement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTupleElementIdentityRewriter()
        {
            var oldNode = GenerateTupleElement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOmittedTypeArgumentTokenDeleteRewriter()
        {
            var oldNode = GenerateOmittedTypeArgument();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOmittedTypeArgumentIdentityRewriter()
        {
            var oldNode = GenerateOmittedTypeArgument();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRefTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateRefType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefTypeIdentityRewriter()
        {
            var oldNode = GenerateRefType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParenthesizedExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateParenthesizedExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedExpressionIdentityRewriter()
        {
            var oldNode = GenerateParenthesizedExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTupleExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateTupleExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTupleExpressionIdentityRewriter()
        {
            var oldNode = GenerateTupleExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPrefixUnaryExpressionTokenDeleteRewriter()
        {
            var oldNode = GeneratePrefixUnaryExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPrefixUnaryExpressionIdentityRewriter()
        {
            var oldNode = GeneratePrefixUnaryExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAwaitExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateAwaitExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAwaitExpressionIdentityRewriter()
        {
            var oldNode = GenerateAwaitExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPostfixUnaryExpressionTokenDeleteRewriter()
        {
            var oldNode = GeneratePostfixUnaryExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPostfixUnaryExpressionIdentityRewriter()
        {
            var oldNode = GeneratePostfixUnaryExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestMemberAccessExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateMemberAccessExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMemberAccessExpressionIdentityRewriter()
        {
            var oldNode = GenerateMemberAccessExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConditionalAccessExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateConditionalAccessExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConditionalAccessExpressionIdentityRewriter()
        {
            var oldNode = GenerateConditionalAccessExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestMemberBindingExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateMemberBindingExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMemberBindingExpressionIdentityRewriter()
        {
            var oldNode = GenerateMemberBindingExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElementBindingExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateElementBindingExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElementBindingExpressionIdentityRewriter()
        {
            var oldNode = GenerateElementBindingExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRangeExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateRangeExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRangeExpressionIdentityRewriter()
        {
            var oldNode = GenerateRangeExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestImplicitElementAccessTokenDeleteRewriter()
        {
            var oldNode = GenerateImplicitElementAccess();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitElementAccessIdentityRewriter()
        {
            var oldNode = GenerateImplicitElementAccess();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBinaryExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateBinaryExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBinaryExpressionIdentityRewriter()
        {
            var oldNode = GenerateBinaryExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAssignmentExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateAssignmentExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAssignmentExpressionIdentityRewriter()
        {
            var oldNode = GenerateAssignmentExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConditionalExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateConditionalExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConditionalExpressionIdentityRewriter()
        {
            var oldNode = GenerateConditionalExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestThisExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateThisExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestThisExpressionIdentityRewriter()
        {
            var oldNode = GenerateThisExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBaseExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateBaseExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBaseExpressionIdentityRewriter()
        {
            var oldNode = GenerateBaseExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLiteralExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateLiteralExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLiteralExpressionIdentityRewriter()
        {
            var oldNode = GenerateLiteralExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestMakeRefExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateMakeRefExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMakeRefExpressionIdentityRewriter()
        {
            var oldNode = GenerateMakeRefExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRefTypeExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateRefTypeExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefTypeExpressionIdentityRewriter()
        {
            var oldNode = GenerateRefTypeExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRefValueExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateRefValueExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefValueExpressionIdentityRewriter()
        {
            var oldNode = GenerateRefValueExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCheckedExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateCheckedExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCheckedExpressionIdentityRewriter()
        {
            var oldNode = GenerateCheckedExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDefaultExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateDefaultExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefaultExpressionIdentityRewriter()
        {
            var oldNode = GenerateDefaultExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeOfExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeOfExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeOfExpressionIdentityRewriter()
        {
            var oldNode = GenerateTypeOfExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSizeOfExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateSizeOfExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSizeOfExpressionIdentityRewriter()
        {
            var oldNode = GenerateSizeOfExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInvocationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateInvocationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInvocationExpressionIdentityRewriter()
        {
            var oldNode = GenerateInvocationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElementAccessExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateElementAccessExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElementAccessExpressionIdentityRewriter()
        {
            var oldNode = GenerateElementAccessExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArgumentListTokenDeleteRewriter()
        {
            var oldNode = GenerateArgumentList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArgumentListIdentityRewriter()
        {
            var oldNode = GenerateArgumentList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBracketedArgumentListTokenDeleteRewriter()
        {
            var oldNode = GenerateBracketedArgumentList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBracketedArgumentListIdentityRewriter()
        {
            var oldNode = GenerateBracketedArgumentList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArgumentTokenDeleteRewriter()
        {
            var oldNode = GenerateArgument();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArgumentIdentityRewriter()
        {
            var oldNode = GenerateArgument();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestExpressionColonTokenDeleteRewriter()
        {
            var oldNode = GenerateExpressionColon();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExpressionColonIdentityRewriter()
        {
            var oldNode = GenerateExpressionColon();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNameColonTokenDeleteRewriter()
        {
            var oldNode = GenerateNameColon();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNameColonIdentityRewriter()
        {
            var oldNode = GenerateNameColon();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDeclarationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateDeclarationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDeclarationExpressionIdentityRewriter()
        {
            var oldNode = GenerateDeclarationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCastExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateCastExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCastExpressionIdentityRewriter()
        {
            var oldNode = GenerateCastExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAnonymousMethodExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateAnonymousMethodExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAnonymousMethodExpressionIdentityRewriter()
        {
            var oldNode = GenerateAnonymousMethodExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSimpleLambdaExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateSimpleLambdaExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSimpleLambdaExpressionIdentityRewriter()
        {
            var oldNode = GenerateSimpleLambdaExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRefExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateRefExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefExpressionIdentityRewriter()
        {
            var oldNode = GenerateRefExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateParenthesizedLambdaExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionIdentityRewriter()
        {
            var oldNode = GenerateParenthesizedLambdaExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInitializerExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateInitializerExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInitializerExpressionIdentityRewriter()
        {
            var oldNode = GenerateInitializerExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateImplicitObjectCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateImplicitObjectCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestObjectCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateObjectCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestObjectCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateObjectCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWithExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateWithExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWithExpressionIdentityRewriter()
        {
            var oldNode = GenerateWithExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorTokenDeleteRewriter()
        {
            var oldNode = GenerateAnonymousObjectMemberDeclarator();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorIdentityRewriter()
        {
            var oldNode = GenerateAnonymousObjectMemberDeclarator();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateAnonymousObjectCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateAnonymousObjectCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArrayCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateArrayCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrayCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateArrayCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateImplicitArrayCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateImplicitArrayCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateStackAllocArrayCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateStackAllocArrayCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateImplicitStackAllocArrayCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateImplicitStackAllocArrayCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQueryExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateQueryExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQueryExpressionIdentityRewriter()
        {
            var oldNode = GenerateQueryExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQueryBodyTokenDeleteRewriter()
        {
            var oldNode = GenerateQueryBody();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQueryBodyIdentityRewriter()
        {
            var oldNode = GenerateQueryBody();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFromClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateFromClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFromClauseIdentityRewriter()
        {
            var oldNode = GenerateFromClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLetClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateLetClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLetClauseIdentityRewriter()
        {
            var oldNode = GenerateLetClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestJoinClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateJoinClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestJoinClauseIdentityRewriter()
        {
            var oldNode = GenerateJoinClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestJoinIntoClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateJoinIntoClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestJoinIntoClauseIdentityRewriter()
        {
            var oldNode = GenerateJoinIntoClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWhereClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateWhereClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWhereClauseIdentityRewriter()
        {
            var oldNode = GenerateWhereClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOrderByClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateOrderByClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOrderByClauseIdentityRewriter()
        {
            var oldNode = GenerateOrderByClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOrderingTokenDeleteRewriter()
        {
            var oldNode = GenerateOrdering();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOrderingIdentityRewriter()
        {
            var oldNode = GenerateOrdering();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSelectClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateSelectClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSelectClauseIdentityRewriter()
        {
            var oldNode = GenerateSelectClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestGroupClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateGroupClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGroupClauseIdentityRewriter()
        {
            var oldNode = GenerateGroupClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQueryContinuationTokenDeleteRewriter()
        {
            var oldNode = GenerateQueryContinuation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQueryContinuationIdentityRewriter()
        {
            var oldNode = GenerateQueryContinuation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOmittedArraySizeExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateOmittedArraySizeExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOmittedArraySizeExpressionIdentityRewriter()
        {
            var oldNode = GenerateOmittedArraySizeExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolatedStringExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolatedStringExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolatedStringExpressionIdentityRewriter()
        {
            var oldNode = GenerateInterpolatedStringExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIsPatternExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateIsPatternExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIsPatternExpressionIdentityRewriter()
        {
            var oldNode = GenerateIsPatternExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestThrowExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateThrowExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestThrowExpressionIdentityRewriter()
        {
            var oldNode = GenerateThrowExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWhenClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateWhenClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWhenClauseIdentityRewriter()
        {
            var oldNode = GenerateWhenClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDiscardPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateDiscardPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDiscardPatternIdentityRewriter()
        {
            var oldNode = GenerateDiscardPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDeclarationPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateDeclarationPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDeclarationPatternIdentityRewriter()
        {
            var oldNode = GenerateDeclarationPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestVarPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateVarPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestVarPatternIdentityRewriter()
        {
            var oldNode = GenerateVarPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRecursivePatternTokenDeleteRewriter()
        {
            var oldNode = GenerateRecursivePattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRecursivePatternIdentityRewriter()
        {
            var oldNode = GenerateRecursivePattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPositionalPatternClauseTokenDeleteRewriter()
        {
            var oldNode = GeneratePositionalPatternClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPositionalPatternClauseIdentityRewriter()
        {
            var oldNode = GeneratePositionalPatternClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPropertyPatternClauseTokenDeleteRewriter()
        {
            var oldNode = GeneratePropertyPatternClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPropertyPatternClauseIdentityRewriter()
        {
            var oldNode = GeneratePropertyPatternClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSubpatternTokenDeleteRewriter()
        {
            var oldNode = GenerateSubpattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSubpatternIdentityRewriter()
        {
            var oldNode = GenerateSubpattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConstantPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateConstantPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstantPatternIdentityRewriter()
        {
            var oldNode = GenerateConstantPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParenthesizedPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateParenthesizedPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedPatternIdentityRewriter()
        {
            var oldNode = GenerateParenthesizedPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRelationalPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateRelationalPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRelationalPatternIdentityRewriter()
        {
            var oldNode = GenerateRelationalPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypePatternTokenDeleteRewriter()
        {
            var oldNode = GenerateTypePattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypePatternIdentityRewriter()
        {
            var oldNode = GenerateTypePattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBinaryPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateBinaryPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBinaryPatternIdentityRewriter()
        {
            var oldNode = GenerateBinaryPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUnaryPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateUnaryPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUnaryPatternIdentityRewriter()
        {
            var oldNode = GenerateUnaryPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestListPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateListPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestListPatternIdentityRewriter()
        {
            var oldNode = GenerateListPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSlicePatternTokenDeleteRewriter()
        {
            var oldNode = GenerateSlicePattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSlicePatternIdentityRewriter()
        {
            var oldNode = GenerateSlicePattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolatedStringTextTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolatedStringText();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolatedStringTextIdentityRewriter()
        {
            var oldNode = GenerateInterpolatedStringText();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolationTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolationIdentityRewriter()
        {
            var oldNode = GenerateInterpolation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolationAlignmentClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolationAlignmentClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolationAlignmentClauseIdentityRewriter()
        {
            var oldNode = GenerateInterpolationAlignmentClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolationFormatClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolationFormatClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolationFormatClauseIdentityRewriter()
        {
            var oldNode = GenerateInterpolationFormatClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestGlobalStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateGlobalStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGlobalStatementIdentityRewriter()
        {
            var oldNode = GenerateGlobalStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBlockTokenDeleteRewriter()
        {
            var oldNode = GenerateBlock();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBlockIdentityRewriter()
        {
            var oldNode = GenerateBlock();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLocalFunctionStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateLocalFunctionStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLocalFunctionStatementIdentityRewriter()
        {
            var oldNode = GenerateLocalFunctionStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLocalDeclarationStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateLocalDeclarationStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLocalDeclarationStatementIdentityRewriter()
        {
            var oldNode = GenerateLocalDeclarationStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestVariableDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateVariableDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestVariableDeclarationIdentityRewriter()
        {
            var oldNode = GenerateVariableDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestVariableDeclaratorTokenDeleteRewriter()
        {
            var oldNode = GenerateVariableDeclarator();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestVariableDeclaratorIdentityRewriter()
        {
            var oldNode = GenerateVariableDeclarator();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEqualsValueClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateEqualsValueClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEqualsValueClauseIdentityRewriter()
        {
            var oldNode = GenerateEqualsValueClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSingleVariableDesignationTokenDeleteRewriter()
        {
            var oldNode = GenerateSingleVariableDesignation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSingleVariableDesignationIdentityRewriter()
        {
            var oldNode = GenerateSingleVariableDesignation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDiscardDesignationTokenDeleteRewriter()
        {
            var oldNode = GenerateDiscardDesignation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDiscardDesignationIdentityRewriter()
        {
            var oldNode = GenerateDiscardDesignation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParenthesizedVariableDesignationTokenDeleteRewriter()
        {
            var oldNode = GenerateParenthesizedVariableDesignation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedVariableDesignationIdentityRewriter()
        {
            var oldNode = GenerateParenthesizedVariableDesignation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestExpressionStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateExpressionStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExpressionStatementIdentityRewriter()
        {
            var oldNode = GenerateExpressionStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEmptyStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateEmptyStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEmptyStatementIdentityRewriter()
        {
            var oldNode = GenerateEmptyStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLabeledStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateLabeledStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLabeledStatementIdentityRewriter()
        {
            var oldNode = GenerateLabeledStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestGotoStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateGotoStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGotoStatementIdentityRewriter()
        {
            var oldNode = GenerateGotoStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBreakStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateBreakStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBreakStatementIdentityRewriter()
        {
            var oldNode = GenerateBreakStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestContinueStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateContinueStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestContinueStatementIdentityRewriter()
        {
            var oldNode = GenerateContinueStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestReturnStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateReturnStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestReturnStatementIdentityRewriter()
        {
            var oldNode = GenerateReturnStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestThrowStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateThrowStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestThrowStatementIdentityRewriter()
        {
            var oldNode = GenerateThrowStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestYieldStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateYieldStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestYieldStatementIdentityRewriter()
        {
            var oldNode = GenerateYieldStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWhileStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateWhileStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWhileStatementIdentityRewriter()
        {
            var oldNode = GenerateWhileStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDoStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateDoStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDoStatementIdentityRewriter()
        {
            var oldNode = GenerateDoStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestForStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateForStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestForStatementIdentityRewriter()
        {
            var oldNode = GenerateForStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestForEachStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateForEachStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestForEachStatementIdentityRewriter()
        {
            var oldNode = GenerateForEachStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestForEachVariableStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateForEachVariableStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestForEachVariableStatementIdentityRewriter()
        {
            var oldNode = GenerateForEachVariableStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUsingStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateUsingStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUsingStatementIdentityRewriter()
        {
            var oldNode = GenerateUsingStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFixedStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateFixedStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFixedStatementIdentityRewriter()
        {
            var oldNode = GenerateFixedStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCheckedStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateCheckedStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCheckedStatementIdentityRewriter()
        {
            var oldNode = GenerateCheckedStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUnsafeStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateUnsafeStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUnsafeStatementIdentityRewriter()
        {
            var oldNode = GenerateUnsafeStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLockStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateLockStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLockStatementIdentityRewriter()
        {
            var oldNode = GenerateLockStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIfStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateIfStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIfStatementIdentityRewriter()
        {
            var oldNode = GenerateIfStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElseClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateElseClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElseClauseIdentityRewriter()
        {
            var oldNode = GenerateElseClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSwitchStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateSwitchStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchStatementIdentityRewriter()
        {
            var oldNode = GenerateSwitchStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSwitchSectionTokenDeleteRewriter()
        {
            var oldNode = GenerateSwitchSection();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchSectionIdentityRewriter()
        {
            var oldNode = GenerateSwitchSection();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCasePatternSwitchLabelTokenDeleteRewriter()
        {
            var oldNode = GenerateCasePatternSwitchLabel();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCasePatternSwitchLabelIdentityRewriter()
        {
            var oldNode = GenerateCasePatternSwitchLabel();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCaseSwitchLabelTokenDeleteRewriter()
        {
            var oldNode = GenerateCaseSwitchLabel();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCaseSwitchLabelIdentityRewriter()
        {
            var oldNode = GenerateCaseSwitchLabel();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDefaultSwitchLabelTokenDeleteRewriter()
        {
            var oldNode = GenerateDefaultSwitchLabel();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefaultSwitchLabelIdentityRewriter()
        {
            var oldNode = GenerateDefaultSwitchLabel();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSwitchExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateSwitchExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchExpressionIdentityRewriter()
        {
            var oldNode = GenerateSwitchExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSwitchExpressionArmTokenDeleteRewriter()
        {
            var oldNode = GenerateSwitchExpressionArm();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchExpressionArmIdentityRewriter()
        {
            var oldNode = GenerateSwitchExpressionArm();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTryStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateTryStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTryStatementIdentityRewriter()
        {
            var oldNode = GenerateTryStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCatchClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateCatchClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCatchClauseIdentityRewriter()
        {
            var oldNode = GenerateCatchClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCatchDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateCatchDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCatchDeclarationIdentityRewriter()
        {
            var oldNode = GenerateCatchDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCatchFilterClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateCatchFilterClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCatchFilterClauseIdentityRewriter()
        {
            var oldNode = GenerateCatchFilterClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFinallyClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateFinallyClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFinallyClauseIdentityRewriter()
        {
            var oldNode = GenerateFinallyClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCompilationUnitTokenDeleteRewriter()
        {
            var oldNode = GenerateCompilationUnit();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCompilationUnitIdentityRewriter()
        {
            var oldNode = GenerateCompilationUnit();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestExternAliasDirectiveTokenDeleteRewriter()
        {
            var oldNode = GenerateExternAliasDirective();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExternAliasDirectiveIdentityRewriter()
        {
            var oldNode = GenerateExternAliasDirective();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUsingDirectiveTokenDeleteRewriter()
        {
            var oldNode = GenerateUsingDirective();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUsingDirectiveIdentityRewriter()
        {
            var oldNode = GenerateUsingDirective();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNamespaceDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateNamespaceDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNamespaceDeclarationIdentityRewriter()
        {
            var oldNode = GenerateNamespaceDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateFileScopedNamespaceDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationIdentityRewriter()
        {
            var oldNode = GenerateFileScopedNamespaceDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeListTokenDeleteRewriter()
        {
            var oldNode = GenerateAttributeList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeListIdentityRewriter()
        {
            var oldNode = GenerateAttributeList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeTargetSpecifierTokenDeleteRewriter()
        {
            var oldNode = GenerateAttributeTargetSpecifier();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeTargetSpecifierIdentityRewriter()
        {
            var oldNode = GenerateAttributeTargetSpecifier();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeTokenDeleteRewriter()
        {
            var oldNode = GenerateAttribute();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeIdentityRewriter()
        {
            var oldNode = GenerateAttribute();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeArgumentListTokenDeleteRewriter()
        {
            var oldNode = GenerateAttributeArgumentList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeArgumentListIdentityRewriter()
        {
            var oldNode = GenerateAttributeArgumentList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeArgumentTokenDeleteRewriter()
        {
            var oldNode = GenerateAttributeArgument();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeArgumentIdentityRewriter()
        {
            var oldNode = GenerateAttributeArgument();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNameEqualsTokenDeleteRewriter()
        {
            var oldNode = GenerateNameEquals();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNameEqualsIdentityRewriter()
        {
            var oldNode = GenerateNameEquals();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeParameterListIdentityRewriter()
        {
            var oldNode = GenerateTypeParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeParameterTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeParameter();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeParameterIdentityRewriter()
        {
            var oldNode = GenerateTypeParameter();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestClassDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateClassDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestClassDeclarationIdentityRewriter()
        {
            var oldNode = GenerateClassDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestStructDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateStructDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestStructDeclarationIdentityRewriter()
        {
            var oldNode = GenerateStructDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterfaceDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateInterfaceDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterfaceDeclarationIdentityRewriter()
        {
            var oldNode = GenerateInterfaceDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRecordDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateRecordDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRecordDeclarationIdentityRewriter()
        {
            var oldNode = GenerateRecordDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEnumDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateEnumDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEnumDeclarationIdentityRewriter()
        {
            var oldNode = GenerateEnumDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDelegateDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateDelegateDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDelegateDeclarationIdentityRewriter()
        {
            var oldNode = GenerateDelegateDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEnumMemberDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateEnumMemberDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEnumMemberDeclarationIdentityRewriter()
        {
            var oldNode = GenerateEnumMemberDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBaseListTokenDeleteRewriter()
        {
            var oldNode = GenerateBaseList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBaseListIdentityRewriter()
        {
            var oldNode = GenerateBaseList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSimpleBaseTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateSimpleBaseType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSimpleBaseTypeIdentityRewriter()
        {
            var oldNode = GenerateSimpleBaseType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeTokenDeleteRewriter()
        {
            var oldNode = GeneratePrimaryConstructorBaseType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeIdentityRewriter()
        {
            var oldNode = GeneratePrimaryConstructorBaseType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeParameterConstraintClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeParameterConstraintClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeParameterConstraintClauseIdentityRewriter()
        {
            var oldNode = GenerateTypeParameterConstraintClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConstructorConstraintTokenDeleteRewriter()
        {
            var oldNode = GenerateConstructorConstraint();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstructorConstraintIdentityRewriter()
        {
            var oldNode = GenerateConstructorConstraint();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestClassOrStructConstraintTokenDeleteRewriter()
        {
            var oldNode = GenerateClassOrStructConstraint();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestClassOrStructConstraintIdentityRewriter()
        {
            var oldNode = GenerateClassOrStructConstraint();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeConstraintTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeConstraint();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeConstraintIdentityRewriter()
        {
            var oldNode = GenerateTypeConstraint();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDefaultConstraintTokenDeleteRewriter()
        {
            var oldNode = GenerateDefaultConstraint();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefaultConstraintIdentityRewriter()
        {
            var oldNode = GenerateDefaultConstraint();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFieldDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateFieldDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFieldDeclarationIdentityRewriter()
        {
            var oldNode = GenerateFieldDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEventFieldDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateEventFieldDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEventFieldDeclarationIdentityRewriter()
        {
            var oldNode = GenerateEventFieldDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierTokenDeleteRewriter()
        {
            var oldNode = GenerateExplicitInterfaceSpecifier();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierIdentityRewriter()
        {
            var oldNode = GenerateExplicitInterfaceSpecifier();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestMethodDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateMethodDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMethodDeclarationIdentityRewriter()
        {
            var oldNode = GenerateMethodDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOperatorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateOperatorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOperatorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateOperatorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConversionOperatorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateConversionOperatorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConversionOperatorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateConversionOperatorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConstructorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateConstructorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstructorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateConstructorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConstructorInitializerTokenDeleteRewriter()
        {
            var oldNode = GenerateConstructorInitializer();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstructorInitializerIdentityRewriter()
        {
            var oldNode = GenerateConstructorInitializer();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDestructorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateDestructorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDestructorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateDestructorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPropertyDeclarationTokenDeleteRewriter()
        {
            var oldNode = GeneratePropertyDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPropertyDeclarationIdentityRewriter()
        {
            var oldNode = GeneratePropertyDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArrowExpressionClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateArrowExpressionClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrowExpressionClauseIdentityRewriter()
        {
            var oldNode = GenerateArrowExpressionClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEventDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateEventDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEventDeclarationIdentityRewriter()
        {
            var oldNode = GenerateEventDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIndexerDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateIndexerDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIndexerDeclarationIdentityRewriter()
        {
            var oldNode = GenerateIndexerDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAccessorListTokenDeleteRewriter()
        {
            var oldNode = GenerateAccessorList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAccessorListIdentityRewriter()
        {
            var oldNode = GenerateAccessorList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAccessorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateAccessorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAccessorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateAccessorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParameterListIdentityRewriter()
        {
            var oldNode = GenerateParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBracketedParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateBracketedParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBracketedParameterListIdentityRewriter()
        {
            var oldNode = GenerateBracketedParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParameterTokenDeleteRewriter()
        {
            var oldNode = GenerateParameter();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParameterIdentityRewriter()
        {
            var oldNode = GenerateParameter();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerParameterTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerParameter();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerParameterIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerParameter();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIncompleteMemberTokenDeleteRewriter()
        {
            var oldNode = GenerateIncompleteMember();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIncompleteMemberIdentityRewriter()
        {
            var oldNode = GenerateIncompleteMember();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSkippedTokensTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateSkippedTokensTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSkippedTokensTriviaIdentityRewriter()
        {
            var oldNode = GenerateSkippedTokensTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDocumentationCommentTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateDocumentationCommentTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDocumentationCommentTriviaIdentityRewriter()
        {
            var oldNode = GenerateDocumentationCommentTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeCrefIdentityRewriter()
        {
            var oldNode = GenerateTypeCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQualifiedCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateQualifiedCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQualifiedCrefIdentityRewriter()
        {
            var oldNode = GenerateQualifiedCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNameMemberCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateNameMemberCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNameMemberCrefIdentityRewriter()
        {
            var oldNode = GenerateNameMemberCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIndexerMemberCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateIndexerMemberCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIndexerMemberCrefIdentityRewriter()
        {
            var oldNode = GenerateIndexerMemberCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOperatorMemberCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateOperatorMemberCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOperatorMemberCrefIdentityRewriter()
        {
            var oldNode = GenerateOperatorMemberCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConversionOperatorMemberCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateConversionOperatorMemberCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConversionOperatorMemberCrefIdentityRewriter()
        {
            var oldNode = GenerateConversionOperatorMemberCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCrefParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateCrefParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCrefParameterListIdentityRewriter()
        {
            var oldNode = GenerateCrefParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCrefBracketedParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateCrefBracketedParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCrefBracketedParameterListIdentityRewriter()
        {
            var oldNode = GenerateCrefBracketedParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCrefParameterTokenDeleteRewriter()
        {
            var oldNode = GenerateCrefParameter();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCrefParameterIdentityRewriter()
        {
            var oldNode = GenerateCrefParameter();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlElementTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlElement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlElementIdentityRewriter()
        {
            var oldNode = GenerateXmlElement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlElementStartTagTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlElementStartTag();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlElementStartTagIdentityRewriter()
        {
            var oldNode = GenerateXmlElementStartTag();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlElementEndTagTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlElementEndTag();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlElementEndTagIdentityRewriter()
        {
            var oldNode = GenerateXmlElementEndTag();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlEmptyElementTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlEmptyElement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlEmptyElementIdentityRewriter()
        {
            var oldNode = GenerateXmlEmptyElement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlNameTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlNameIdentityRewriter()
        {
            var oldNode = GenerateXmlName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlPrefixTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlPrefix();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlPrefixIdentityRewriter()
        {
            var oldNode = GenerateXmlPrefix();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlTextAttributeTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlTextAttribute();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlTextAttributeIdentityRewriter()
        {
            var oldNode = GenerateXmlTextAttribute();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlCrefAttributeTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlCrefAttribute();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlCrefAttributeIdentityRewriter()
        {
            var oldNode = GenerateXmlCrefAttribute();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlNameAttributeTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlNameAttribute();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlNameAttributeIdentityRewriter()
        {
            var oldNode = GenerateXmlNameAttribute();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlTextTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlText();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlTextIdentityRewriter()
        {
            var oldNode = GenerateXmlText();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlCDataSectionTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlCDataSection();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlCDataSectionIdentityRewriter()
        {
            var oldNode = GenerateXmlCDataSection();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlProcessingInstructionTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlProcessingInstruction();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlProcessingInstructionIdentityRewriter()
        {
            var oldNode = GenerateXmlProcessingInstruction();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlCommentTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlComment();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlCommentIdentityRewriter()
        {
            var oldNode = GenerateXmlComment();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIfDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateIfDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIfDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateIfDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElifDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateElifDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElifDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateElifDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElseDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateElseDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElseDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateElseDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEndIfDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateEndIfDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEndIfDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateEndIfDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRegionDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateRegionDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRegionDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateRegionDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateEndRegionDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateEndRegionDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestErrorDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateErrorDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestErrorDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateErrorDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWarningDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateWarningDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWarningDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateWarningDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBadDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateBadDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBadDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateBadDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDefineDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateDefineDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefineDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateDefineDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUndefDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateUndefDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUndefDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateUndefDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLineDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateLineDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLineDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateLineDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLineDirectivePositionTokenDeleteRewriter()
        {
            var oldNode = GenerateLineDirectivePosition();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLineDirectivePositionIdentityRewriter()
        {
            var oldNode = GenerateLineDirectivePosition();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateLineSpanDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateLineSpanDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GeneratePragmaWarningDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GeneratePragmaWarningDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GeneratePragmaChecksumDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GeneratePragmaChecksumDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestReferenceDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateReferenceDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestReferenceDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateReferenceDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLoadDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateLoadDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLoadDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateLoadDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestShebangDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateShebangDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestShebangDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateShebangDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNullableDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateNullableDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNullableDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateNullableDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }
        #endregion Green Rewriters
        #region Green Visitors

        internal partial class AssertOnVisitVisitor<TResult> : Syntax.InternalSyntax.CSharpSyntaxVisitor<TResult>
        {
            public override TResult VisitIdentifierName(Syntax.InternalSyntax.IdentifierNameSyntax node)
            {
                Assert.True(false, "VisitIdentifierName should not have been called.");
                return default;
            }

            public override TResult VisitQualifiedName(Syntax.InternalSyntax.QualifiedNameSyntax node)
            {
                Assert.True(false, "VisitQualifiedName should not have been called.");
                return default;
            }

            public override TResult VisitGenericName(Syntax.InternalSyntax.GenericNameSyntax node)
            {
                Assert.True(false, "VisitGenericName should not have been called.");
                return default;
            }

            public override TResult VisitTypeArgumentList(Syntax.InternalSyntax.TypeArgumentListSyntax node)
            {
                Assert.True(false, "VisitTypeArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitAliasQualifiedName(Syntax.InternalSyntax.AliasQualifiedNameSyntax node)
            {
                Assert.True(false, "VisitAliasQualifiedName should not have been called.");
                return default;
            }

            public override TResult VisitPredefinedType(Syntax.InternalSyntax.PredefinedTypeSyntax node)
            {
                Assert.True(false, "VisitPredefinedType should not have been called.");
                return default;
            }

            public override TResult VisitArrayType(Syntax.InternalSyntax.ArrayTypeSyntax node)
            {
                Assert.True(false, "VisitArrayType should not have been called.");
                return default;
            }

            public override TResult VisitArrayRankSpecifier(Syntax.InternalSyntax.ArrayRankSpecifierSyntax node)
            {
                Assert.True(false, "VisitArrayRankSpecifier should not have been called.");
                return default;
            }

            public override TResult VisitPointerType(Syntax.InternalSyntax.PointerTypeSyntax node)
            {
                Assert.True(false, "VisitPointerType should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerType(Syntax.InternalSyntax.FunctionPointerTypeSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerType should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerParameterList(Syntax.InternalSyntax.FunctionPointerParameterListSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerParameterList should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerCallingConvention(Syntax.InternalSyntax.FunctionPointerCallingConventionSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerCallingConvention should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerUnmanagedCallingConventionList(Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionListSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConventionList should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerUnmanagedCallingConvention(Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConvention should not have been called.");
                return default;
            }

            public override TResult VisitNullableType(Syntax.InternalSyntax.NullableTypeSyntax node)
            {
                Assert.True(false, "VisitNullableType should not have been called.");
                return default;
            }

            public override TResult VisitTupleType(Syntax.InternalSyntax.TupleTypeSyntax node)
            {
                Assert.True(false, "VisitTupleType should not have been called.");
                return default;
            }

            public override TResult VisitTupleElement(Syntax.InternalSyntax.TupleElementSyntax node)
            {
                Assert.True(false, "VisitTupleElement should not have been called.");
                return default;
            }

            public override TResult VisitOmittedTypeArgument(Syntax.InternalSyntax.OmittedTypeArgumentSyntax node)
            {
                Assert.True(false, "VisitOmittedTypeArgument should not have been called.");
                return default;
            }

            public override TResult VisitRefType(Syntax.InternalSyntax.RefTypeSyntax node)
            {
                Assert.True(false, "VisitRefType should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedExpression(Syntax.InternalSyntax.ParenthesizedExpressionSyntax node)
            {
                Assert.True(false, "VisitParenthesizedExpression should not have been called.");
                return default;
            }

            public override TResult VisitTupleExpression(Syntax.InternalSyntax.TupleExpressionSyntax node)
            {
                Assert.True(false, "VisitTupleExpression should not have been called.");
                return default;
            }

            public override TResult VisitPrefixUnaryExpression(Syntax.InternalSyntax.PrefixUnaryExpressionSyntax node)
            {
                Assert.True(false, "VisitPrefixUnaryExpression should not have been called.");
                return default;
            }

            public override TResult VisitAwaitExpression(Syntax.InternalSyntax.AwaitExpressionSyntax node)
            {
                Assert.True(false, "VisitAwaitExpression should not have been called.");
                return default;
            }

            public override TResult VisitPostfixUnaryExpression(Syntax.InternalSyntax.PostfixUnaryExpressionSyntax node)
            {
                Assert.True(false, "VisitPostfixUnaryExpression should not have been called.");
                return default;
            }

            public override TResult VisitMemberAccessExpression(Syntax.InternalSyntax.MemberAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitMemberAccessExpression should not have been called.");
                return default;
            }

            public override TResult VisitConditionalAccessExpression(Syntax.InternalSyntax.ConditionalAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitConditionalAccessExpression should not have been called.");
                return default;
            }

            public override TResult VisitMemberBindingExpression(Syntax.InternalSyntax.MemberBindingExpressionSyntax node)
            {
                Assert.True(false, "VisitMemberBindingExpression should not have been called.");
                return default;
            }

            public override TResult VisitElementBindingExpression(Syntax.InternalSyntax.ElementBindingExpressionSyntax node)
            {
                Assert.True(false, "VisitElementBindingExpression should not have been called.");
                return default;
            }

            public override TResult VisitRangeExpression(Syntax.InternalSyntax.RangeExpressionSyntax node)
            {
                Assert.True(false, "VisitRangeExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitElementAccess(Syntax.InternalSyntax.ImplicitElementAccessSyntax node)
            {
                Assert.True(false, "VisitImplicitElementAccess should not have been called.");
                return default;
            }

            public override TResult VisitBinaryExpression(Syntax.InternalSyntax.BinaryExpressionSyntax node)
            {
                Assert.True(false, "VisitBinaryExpression should not have been called.");
                return default;
            }

            public override TResult VisitAssignmentExpression(Syntax.InternalSyntax.AssignmentExpressionSyntax node)
            {
                Assert.True(false, "VisitAssignmentExpression should not have been called.");
                return default;
            }

            public override TResult VisitConditionalExpression(Syntax.InternalSyntax.ConditionalExpressionSyntax node)
            {
                Assert.True(false, "VisitConditionalExpression should not have been called.");
                return default;
            }

            public override TResult VisitThisExpression(Syntax.InternalSyntax.ThisExpressionSyntax node)
            {
                Assert.True(false, "VisitThisExpression should not have been called.");
                return default;
            }

            public override TResult VisitBaseExpression(Syntax.InternalSyntax.BaseExpressionSyntax node)
            {
                Assert.True(false, "VisitBaseExpression should not have been called.");
                return default;
            }

            public override TResult VisitLiteralExpression(Syntax.InternalSyntax.LiteralExpressionSyntax node)
            {
                Assert.True(false, "VisitLiteralExpression should not have been called.");
                return default;
            }

            public override TResult VisitMakeRefExpression(Syntax.InternalSyntax.MakeRefExpressionSyntax node)
            {
                Assert.True(false, "VisitMakeRefExpression should not have been called.");
                return default;
            }

            public override TResult VisitRefTypeExpression(Syntax.InternalSyntax.RefTypeExpressionSyntax node)
            {
                Assert.True(false, "VisitRefTypeExpression should not have been called.");
                return default;
            }

            public override TResult VisitRefValueExpression(Syntax.InternalSyntax.RefValueExpressionSyntax node)
            {
                Assert.True(false, "VisitRefValueExpression should not have been called.");
                return default;
            }

            public override TResult VisitCheckedExpression(Syntax.InternalSyntax.CheckedExpressionSyntax node)
            {
                Assert.True(false, "VisitCheckedExpression should not have been called.");
                return default;
            }

            public override TResult VisitDefaultExpression(Syntax.InternalSyntax.DefaultExpressionSyntax node)
            {
                Assert.True(false, "VisitDefaultExpression should not have been called.");
                return default;
            }

            public override TResult VisitTypeOfExpression(Syntax.InternalSyntax.TypeOfExpressionSyntax node)
            {
                Assert.True(false, "VisitTypeOfExpression should not have been called.");
                return default;
            }

            public override TResult VisitSizeOfExpression(Syntax.InternalSyntax.SizeOfExpressionSyntax node)
            {
                Assert.True(false, "VisitSizeOfExpression should not have been called.");
                return default;
            }

            public override TResult VisitInvocationExpression(Syntax.InternalSyntax.InvocationExpressionSyntax node)
            {
                Assert.True(false, "VisitInvocationExpression should not have been called.");
                return default;
            }

            public override TResult VisitElementAccessExpression(Syntax.InternalSyntax.ElementAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitElementAccessExpression should not have been called.");
                return default;
            }

            public override TResult VisitArgumentList(Syntax.InternalSyntax.ArgumentListSyntax node)
            {
                Assert.True(false, "VisitArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitBracketedArgumentList(Syntax.InternalSyntax.BracketedArgumentListSyntax node)
            {
                Assert.True(false, "VisitBracketedArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitArgument(Syntax.InternalSyntax.ArgumentSyntax node)
            {
                Assert.True(false, "VisitArgument should not have been called.");
                return default;
            }

            public override TResult VisitExpressionColon(Syntax.InternalSyntax.ExpressionColonSyntax node)
            {
                Assert.True(false, "VisitExpressionColon should not have been called.");
                return default;
            }

            public override TResult VisitNameColon(Syntax.InternalSyntax.NameColonSyntax node)
            {
                Assert.True(false, "VisitNameColon should not have been called.");
                return default;
            }

            public override TResult VisitDeclarationExpression(Syntax.InternalSyntax.DeclarationExpressionSyntax node)
            {
                Assert.True(false, "VisitDeclarationExpression should not have been called.");
                return default;
            }

            public override TResult VisitCastExpression(Syntax.InternalSyntax.CastExpressionSyntax node)
            {
                Assert.True(false, "VisitCastExpression should not have been called.");
                return default;
            }

            public override TResult VisitAnonymousMethodExpression(Syntax.InternalSyntax.AnonymousMethodExpressionSyntax node)
            {
                Assert.True(false, "VisitAnonymousMethodExpression should not have been called.");
                return default;
            }

            public override TResult VisitSimpleLambdaExpression(Syntax.InternalSyntax.SimpleLambdaExpressionSyntax node)
            {
                Assert.True(false, "VisitSimpleLambdaExpression should not have been called.");
                return default;
            }

            public override TResult VisitRefExpression(Syntax.InternalSyntax.RefExpressionSyntax node)
            {
                Assert.True(false, "VisitRefExpression should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedLambdaExpression(Syntax.InternalSyntax.ParenthesizedLambdaExpressionSyntax node)
            {
                Assert.True(false, "VisitParenthesizedLambdaExpression should not have been called.");
                return default;
            }

            public override TResult VisitInitializerExpression(Syntax.InternalSyntax.InitializerExpressionSyntax node)
            {
                Assert.True(false, "VisitInitializerExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitObjectCreationExpression(Syntax.InternalSyntax.ImplicitObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitObjectCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitObjectCreationExpression(Syntax.InternalSyntax.ObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitObjectCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitWithExpression(Syntax.InternalSyntax.WithExpressionSyntax node)
            {
                Assert.True(false, "VisitWithExpression should not have been called.");
                return default;
            }

            public override TResult VisitAnonymousObjectMemberDeclarator(Syntax.InternalSyntax.AnonymousObjectMemberDeclaratorSyntax node)
            {
                Assert.True(false, "VisitAnonymousObjectMemberDeclarator should not have been called.");
                return default;
            }

            public override TResult VisitAnonymousObjectCreationExpression(Syntax.InternalSyntax.AnonymousObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitAnonymousObjectCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitArrayCreationExpression(Syntax.InternalSyntax.ArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitArrayCreationExpression(Syntax.InternalSyntax.ImplicitArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitStackAllocArrayCreationExpression(Syntax.InternalSyntax.StackAllocArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitStackAllocArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitStackAllocArrayCreationExpression(Syntax.InternalSyntax.ImplicitStackAllocArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitStackAllocArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitQueryExpression(Syntax.InternalSyntax.QueryExpressionSyntax node)
            {
                Assert.True(false, "VisitQueryExpression should not have been called.");
                return default;
            }

            public override TResult VisitQueryBody(Syntax.InternalSyntax.QueryBodySyntax node)
            {
                Assert.True(false, "VisitQueryBody should not have been called.");
                return default;
            }

            public override TResult VisitFromClause(Syntax.InternalSyntax.FromClauseSyntax node)
            {
                Assert.True(false, "VisitFromClause should not have been called.");
                return default;
            }

            public override TResult VisitLetClause(Syntax.InternalSyntax.LetClauseSyntax node)
            {
                Assert.True(false, "VisitLetClause should not have been called.");
                return default;
            }

            public override TResult VisitJoinClause(Syntax.InternalSyntax.JoinClauseSyntax node)
            {
                Assert.True(false, "VisitJoinClause should not have been called.");
                return default;
            }

            public override TResult VisitJoinIntoClause(Syntax.InternalSyntax.JoinIntoClauseSyntax node)
            {
                Assert.True(false, "VisitJoinIntoClause should not have been called.");
                return default;
            }

            public override TResult VisitWhereClause(Syntax.InternalSyntax.WhereClauseSyntax node)
            {
                Assert.True(false, "VisitWhereClause should not have been called.");
                return default;
            }

            public override TResult VisitOrderByClause(Syntax.InternalSyntax.OrderByClauseSyntax node)
            {
                Assert.True(false, "VisitOrderByClause should not have been called.");
                return default;
            }

            public override TResult VisitOrdering(Syntax.InternalSyntax.OrderingSyntax node)
            {
                Assert.True(false, "VisitOrdering should not have been called.");
                return default;
            }

            public override TResult VisitSelectClause(Syntax.InternalSyntax.SelectClauseSyntax node)
            {
                Assert.True(false, "VisitSelectClause should not have been called.");
                return default;
            }

            public override TResult VisitGroupClause(Syntax.InternalSyntax.GroupClauseSyntax node)
            {
                Assert.True(false, "VisitGroupClause should not have been called.");
                return default;
            }

            public override TResult VisitQueryContinuation(Syntax.InternalSyntax.QueryContinuationSyntax node)
            {
                Assert.True(false, "VisitQueryContinuation should not have been called.");
                return default;
            }

            public override TResult VisitOmittedArraySizeExpression(Syntax.InternalSyntax.OmittedArraySizeExpressionSyntax node)
            {
                Assert.True(false, "VisitOmittedArraySizeExpression should not have been called.");
                return default;
            }

            public override TResult VisitInterpolatedStringExpression(Syntax.InternalSyntax.InterpolatedStringExpressionSyntax node)
            {
                Assert.True(false, "VisitInterpolatedStringExpression should not have been called.");
                return default;
            }

            public override TResult VisitIsPatternExpression(Syntax.InternalSyntax.IsPatternExpressionSyntax node)
            {
                Assert.True(false, "VisitIsPatternExpression should not have been called.");
                return default;
            }

            public override TResult VisitThrowExpression(Syntax.InternalSyntax.ThrowExpressionSyntax node)
            {
                Assert.True(false, "VisitThrowExpression should not have been called.");
                return default;
            }

            public override TResult VisitWhenClause(Syntax.InternalSyntax.WhenClauseSyntax node)
            {
                Assert.True(false, "VisitWhenClause should not have been called.");
                return default;
            }

            public override TResult VisitDiscardPattern(Syntax.InternalSyntax.DiscardPatternSyntax node)
            {
                Assert.True(false, "VisitDiscardPattern should not have been called.");
                return default;
            }

            public override TResult VisitDeclarationPattern(Syntax.InternalSyntax.DeclarationPatternSyntax node)
            {
                Assert.True(false, "VisitDeclarationPattern should not have been called.");
                return default;
            }

            public override TResult VisitVarPattern(Syntax.InternalSyntax.VarPatternSyntax node)
            {
                Assert.True(false, "VisitVarPattern should not have been called.");
                return default;
            }

            public override TResult VisitRecursivePattern(Syntax.InternalSyntax.RecursivePatternSyntax node)
            {
                Assert.True(false, "VisitRecursivePattern should not have been called.");
                return default;
            }

            public override TResult VisitPositionalPatternClause(Syntax.InternalSyntax.PositionalPatternClauseSyntax node)
            {
                Assert.True(false, "VisitPositionalPatternClause should not have been called.");
                return default;
            }

            public override TResult VisitPropertyPatternClause(Syntax.InternalSyntax.PropertyPatternClauseSyntax node)
            {
                Assert.True(false, "VisitPropertyPatternClause should not have been called.");
                return default;
            }

            public override TResult VisitSubpattern(Syntax.InternalSyntax.SubpatternSyntax node)
            {
                Assert.True(false, "VisitSubpattern should not have been called.");
                return default;
            }

            public override TResult VisitConstantPattern(Syntax.InternalSyntax.ConstantPatternSyntax node)
            {
                Assert.True(false, "VisitConstantPattern should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedPattern(Syntax.InternalSyntax.ParenthesizedPatternSyntax node)
            {
                Assert.True(false, "VisitParenthesizedPattern should not have been called.");
                return default;
            }

            public override TResult VisitRelationalPattern(Syntax.InternalSyntax.RelationalPatternSyntax node)
            {
                Assert.True(false, "VisitRelationalPattern should not have been called.");
                return default;
            }

            public override TResult VisitTypePattern(Syntax.InternalSyntax.TypePatternSyntax node)
            {
                Assert.True(false, "VisitTypePattern should not have been called.");
                return default;
            }

            public override TResult VisitBinaryPattern(Syntax.InternalSyntax.BinaryPatternSyntax node)
            {
                Assert.True(false, "VisitBinaryPattern should not have been called.");
                return default;
            }

            public override TResult VisitUnaryPattern(Syntax.InternalSyntax.UnaryPatternSyntax node)
            {
                Assert.True(false, "VisitUnaryPattern should not have been called.");
                return default;
            }

            public override TResult VisitListPattern(Syntax.InternalSyntax.ListPatternSyntax node)
            {
                Assert.True(false, "VisitListPattern should not have been called.");
                return default;
            }

            public override TResult VisitSlicePattern(Syntax.InternalSyntax.SlicePatternSyntax node)
            {
                Assert.True(false, "VisitSlicePattern should not have been called.");
                return default;
            }

            public override TResult VisitInterpolatedStringText(Syntax.InternalSyntax.InterpolatedStringTextSyntax node)
            {
                Assert.True(false, "VisitInterpolatedStringText should not have been called.");
                return default;
            }

            public override TResult VisitInterpolation(Syntax.InternalSyntax.InterpolationSyntax node)
            {
                Assert.True(false, "VisitInterpolation should not have been called.");
                return default;
            }

            public override TResult VisitInterpolationAlignmentClause(Syntax.InternalSyntax.InterpolationAlignmentClauseSyntax node)
            {
                Assert.True(false, "VisitInterpolationAlignmentClause should not have been called.");
                return default;
            }

            public override TResult VisitInterpolationFormatClause(Syntax.InternalSyntax.InterpolationFormatClauseSyntax node)
            {
                Assert.True(false, "VisitInterpolationFormatClause should not have been called.");
                return default;
            }

            public override TResult VisitGlobalStatement(Syntax.InternalSyntax.GlobalStatementSyntax node)
            {
                Assert.True(false, "VisitGlobalStatement should not have been called.");
                return default;
            }

            public override TResult VisitBlock(Syntax.InternalSyntax.BlockSyntax node)
            {
                Assert.True(false, "VisitBlock should not have been called.");
                return default;
            }

            public override TResult VisitLocalFunctionStatement(Syntax.InternalSyntax.LocalFunctionStatementSyntax node)
            {
                Assert.True(false, "VisitLocalFunctionStatement should not have been called.");
                return default;
            }

            public override TResult VisitLocalDeclarationStatement(Syntax.InternalSyntax.LocalDeclarationStatementSyntax node)
            {
                Assert.True(false, "VisitLocalDeclarationStatement should not have been called.");
                return default;
            }

            public override TResult VisitVariableDeclaration(Syntax.InternalSyntax.VariableDeclarationSyntax node)
            {
                Assert.True(false, "VisitVariableDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitVariableDeclarator(Syntax.InternalSyntax.VariableDeclaratorSyntax node)
            {
                Assert.True(false, "VisitVariableDeclarator should not have been called.");
                return default;
            }

            public override TResult VisitEqualsValueClause(Syntax.InternalSyntax.EqualsValueClauseSyntax node)
            {
                Assert.True(false, "VisitEqualsValueClause should not have been called.");
                return default;
            }

            public override TResult VisitSingleVariableDesignation(Syntax.InternalSyntax.SingleVariableDesignationSyntax node)
            {
                Assert.True(false, "VisitSingleVariableDesignation should not have been called.");
                return default;
            }

            public override TResult VisitDiscardDesignation(Syntax.InternalSyntax.DiscardDesignationSyntax node)
            {
                Assert.True(false, "VisitDiscardDesignation should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedVariableDesignation(Syntax.InternalSyntax.ParenthesizedVariableDesignationSyntax node)
            {
                Assert.True(false, "VisitParenthesizedVariableDesignation should not have been called.");
                return default;
            }

            public override TResult VisitExpressionStatement(Syntax.InternalSyntax.ExpressionStatementSyntax node)
            {
                Assert.True(false, "VisitExpressionStatement should not have been called.");
                return default;
            }

            public override TResult VisitEmptyStatement(Syntax.InternalSyntax.EmptyStatementSyntax node)
            {
                Assert.True(false, "VisitEmptyStatement should not have been called.");
                return default;
            }

            public override TResult VisitLabeledStatement(Syntax.InternalSyntax.LabeledStatementSyntax node)
            {
                Assert.True(false, "VisitLabeledStatement should not have been called.");
                return default;
            }

            public override TResult VisitGotoStatement(Syntax.InternalSyntax.GotoStatementSyntax node)
            {
                Assert.True(false, "VisitGotoStatement should not have been called.");
                return default;
            }

            public override TResult VisitBreakStatement(Syntax.InternalSyntax.BreakStatementSyntax node)
            {
                Assert.True(false, "VisitBreakStatement should not have been called.");
                return default;
            }

            public override TResult VisitContinueStatement(Syntax.InternalSyntax.ContinueStatementSyntax node)
            {
                Assert.True(false, "VisitContinueStatement should not have been called.");
                return default;
            }

            public override TResult VisitReturnStatement(Syntax.InternalSyntax.ReturnStatementSyntax node)
            {
                Assert.True(false, "VisitReturnStatement should not have been called.");
                return default;
            }

            public override TResult VisitThrowStatement(Syntax.InternalSyntax.ThrowStatementSyntax node)
            {
                Assert.True(false, "VisitThrowStatement should not have been called.");
                return default;
            }

            public override TResult VisitYieldStatement(Syntax.InternalSyntax.YieldStatementSyntax node)
            {
                Assert.True(false, "VisitYieldStatement should not have been called.");
                return default;
            }

            public override TResult VisitWhileStatement(Syntax.InternalSyntax.WhileStatementSyntax node)
            {
                Assert.True(false, "VisitWhileStatement should not have been called.");
                return default;
            }

            public override TResult VisitDoStatement(Syntax.InternalSyntax.DoStatementSyntax node)
            {
                Assert.True(false, "VisitDoStatement should not have been called.");
                return default;
            }

            public override TResult VisitForStatement(Syntax.InternalSyntax.ForStatementSyntax node)
            {
                Assert.True(false, "VisitForStatement should not have been called.");
                return default;
            }

            public override TResult VisitForEachStatement(Syntax.InternalSyntax.ForEachStatementSyntax node)
            {
                Assert.True(false, "VisitForEachStatement should not have been called.");
                return default;
            }

            public override TResult VisitForEachVariableStatement(Syntax.InternalSyntax.ForEachVariableStatementSyntax node)
            {
                Assert.True(false, "VisitForEachVariableStatement should not have been called.");
                return default;
            }

            public override TResult VisitUsingStatement(Syntax.InternalSyntax.UsingStatementSyntax node)
            {
                Assert.True(false, "VisitUsingStatement should not have been called.");
                return default;
            }

            public override TResult VisitFixedStatement(Syntax.InternalSyntax.FixedStatementSyntax node)
            {
                Assert.True(false, "VisitFixedStatement should not have been called.");
                return default;
            }

            public override TResult VisitCheckedStatement(Syntax.InternalSyntax.CheckedStatementSyntax node)
            {
                Assert.True(false, "VisitCheckedStatement should not have been called.");
                return default;
            }

            public override TResult VisitUnsafeStatement(Syntax.InternalSyntax.UnsafeStatementSyntax node)
            {
                Assert.True(false, "VisitUnsafeStatement should not have been called.");
                return default;
            }

            public override TResult VisitLockStatement(Syntax.InternalSyntax.LockStatementSyntax node)
            {
                Assert.True(false, "VisitLockStatement should not have been called.");
                return default;
            }

            public override TResult VisitIfStatement(Syntax.InternalSyntax.IfStatementSyntax node)
            {
                Assert.True(false, "VisitIfStatement should not have been called.");
                return default;
            }

            public override TResult VisitElseClause(Syntax.InternalSyntax.ElseClauseSyntax node)
            {
                Assert.True(false, "VisitElseClause should not have been called.");
                return default;
            }

            public override TResult VisitSwitchStatement(Syntax.InternalSyntax.SwitchStatementSyntax node)
            {
                Assert.True(false, "VisitSwitchStatement should not have been called.");
                return default;
            }

            public override TResult VisitSwitchSection(Syntax.InternalSyntax.SwitchSectionSyntax node)
            {
                Assert.True(false, "VisitSwitchSection should not have been called.");
                return default;
            }

            public override TResult VisitCasePatternSwitchLabel(Syntax.InternalSyntax.CasePatternSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitCasePatternSwitchLabel should not have been called.");
                return default;
            }

            public override TResult VisitCaseSwitchLabel(Syntax.InternalSyntax.CaseSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitCaseSwitchLabel should not have been called.");
                return default;
            }

            public override TResult VisitDefaultSwitchLabel(Syntax.InternalSyntax.DefaultSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitDefaultSwitchLabel should not have been called.");
                return default;
            }

            public override TResult VisitSwitchExpression(Syntax.InternalSyntax.SwitchExpressionSyntax node)
            {
                Assert.True(false, "VisitSwitchExpression should not have been called.");
                return default;
            }

            public override TResult VisitSwitchExpressionArm(Syntax.InternalSyntax.SwitchExpressionArmSyntax node)
            {
                Assert.True(false, "VisitSwitchExpressionArm should not have been called.");
                return default;
            }

            public override TResult VisitTryStatement(Syntax.InternalSyntax.TryStatementSyntax node)
            {
                Assert.True(false, "VisitTryStatement should not have been called.");
                return default;
            }

            public override TResult VisitCatchClause(Syntax.InternalSyntax.CatchClauseSyntax node)
            {
                Assert.True(false, "VisitCatchClause should not have been called.");
                return default;
            }

            public override TResult VisitCatchDeclaration(Syntax.InternalSyntax.CatchDeclarationSyntax node)
            {
                Assert.True(false, "VisitCatchDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitCatchFilterClause(Syntax.InternalSyntax.CatchFilterClauseSyntax node)
            {
                Assert.True(false, "VisitCatchFilterClause should not have been called.");
                return default;
            }

            public override TResult VisitFinallyClause(Syntax.InternalSyntax.FinallyClauseSyntax node)
            {
                Assert.True(false, "VisitFinallyClause should not have been called.");
                return default;
            }

            public override TResult VisitCompilationUnit(Syntax.InternalSyntax.CompilationUnitSyntax node)
            {
                Assert.True(false, "VisitCompilationUnit should not have been called.");
                return default;
            }

            public override TResult VisitExternAliasDirective(Syntax.InternalSyntax.ExternAliasDirectiveSyntax node)
            {
                Assert.True(false, "VisitExternAliasDirective should not have been called.");
                return default;
            }

            public override TResult VisitUsingDirective(Syntax.InternalSyntax.UsingDirectiveSyntax node)
            {
                Assert.True(false, "VisitUsingDirective should not have been called.");
                return default;
            }

            public override TResult VisitNamespaceDeclaration(Syntax.InternalSyntax.NamespaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitNamespaceDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitFileScopedNamespaceDeclaration(Syntax.InternalSyntax.FileScopedNamespaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitFileScopedNamespaceDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitAttributeList(Syntax.InternalSyntax.AttributeListSyntax node)
            {
                Assert.True(false, "VisitAttributeList should not have been called.");
                return default;
            }

            public override TResult VisitAttributeTargetSpecifier(Syntax.InternalSyntax.AttributeTargetSpecifierSyntax node)
            {
                Assert.True(false, "VisitAttributeTargetSpecifier should not have been called.");
                return default;
            }

            public override TResult VisitAttribute(Syntax.InternalSyntax.AttributeSyntax node)
            {
                Assert.True(false, "VisitAttribute should not have been called.");
                return default;
            }

            public override TResult VisitAttributeArgumentList(Syntax.InternalSyntax.AttributeArgumentListSyntax node)
            {
                Assert.True(false, "VisitAttributeArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitAttributeArgument(Syntax.InternalSyntax.AttributeArgumentSyntax node)
            {
                Assert.True(false, "VisitAttributeArgument should not have been called.");
                return default;
            }

            public override TResult VisitNameEquals(Syntax.InternalSyntax.NameEqualsSyntax node)
            {
                Assert.True(false, "VisitNameEquals should not have been called.");
                return default;
            }

            public override TResult VisitTypeParameterList(Syntax.InternalSyntax.TypeParameterListSyntax node)
            {
                Assert.True(false, "VisitTypeParameterList should not have been called.");
                return default;
            }

            public override TResult VisitTypeParameter(Syntax.InternalSyntax.TypeParameterSyntax node)
            {
                Assert.True(false, "VisitTypeParameter should not have been called.");
                return default;
            }

            public override TResult VisitClassDeclaration(Syntax.InternalSyntax.ClassDeclarationSyntax node)
            {
                Assert.True(false, "VisitClassDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitStructDeclaration(Syntax.InternalSyntax.StructDeclarationSyntax node)
            {
                Assert.True(false, "VisitStructDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitInterfaceDeclaration(Syntax.InternalSyntax.InterfaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitInterfaceDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitRecordDeclaration(Syntax.InternalSyntax.RecordDeclarationSyntax node)
            {
                Assert.True(false, "VisitRecordDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitEnumDeclaration(Syntax.InternalSyntax.EnumDeclarationSyntax node)
            {
                Assert.True(false, "VisitEnumDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitDelegateDeclaration(Syntax.InternalSyntax.DelegateDeclarationSyntax node)
            {
                Assert.True(false, "VisitDelegateDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitEnumMemberDeclaration(Syntax.InternalSyntax.EnumMemberDeclarationSyntax node)
            {
                Assert.True(false, "VisitEnumMemberDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitBaseList(Syntax.InternalSyntax.BaseListSyntax node)
            {
                Assert.True(false, "VisitBaseList should not have been called.");
                return default;
            }

            public override TResult VisitSimpleBaseType(Syntax.InternalSyntax.SimpleBaseTypeSyntax node)
            {
                Assert.True(false, "VisitSimpleBaseType should not have been called.");
                return default;
            }

            public override TResult VisitPrimaryConstructorBaseType(Syntax.InternalSyntax.PrimaryConstructorBaseTypeSyntax node)
            {
                Assert.True(false, "VisitPrimaryConstructorBaseType should not have been called.");
                return default;
            }

            public override TResult VisitTypeParameterConstraintClause(Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax node)
            {
                Assert.True(false, "VisitTypeParameterConstraintClause should not have been called.");
                return default;
            }

            public override TResult VisitConstructorConstraint(Syntax.InternalSyntax.ConstructorConstraintSyntax node)
            {
                Assert.True(false, "VisitConstructorConstraint should not have been called.");
                return default;
            }

            public override TResult VisitClassOrStructConstraint(Syntax.InternalSyntax.ClassOrStructConstraintSyntax node)
            {
                Assert.True(false, "VisitClassOrStructConstraint should not have been called.");
                return default;
            }

            public override TResult VisitTypeConstraint(Syntax.InternalSyntax.TypeConstraintSyntax node)
            {
                Assert.True(false, "VisitTypeConstraint should not have been called.");
                return default;
            }

            public override TResult VisitDefaultConstraint(Syntax.InternalSyntax.DefaultConstraintSyntax node)
            {
                Assert.True(false, "VisitDefaultConstraint should not have been called.");
                return default;
            }

            public override TResult VisitFieldDeclaration(Syntax.InternalSyntax.FieldDeclarationSyntax node)
            {
                Assert.True(false, "VisitFieldDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitEventFieldDeclaration(Syntax.InternalSyntax.EventFieldDeclarationSyntax node)
            {
                Assert.True(false, "VisitEventFieldDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitExplicitInterfaceSpecifier(Syntax.InternalSyntax.ExplicitInterfaceSpecifierSyntax node)
            {
                Assert.True(false, "VisitExplicitInterfaceSpecifier should not have been called.");
                return default;
            }

            public override TResult VisitMethodDeclaration(Syntax.InternalSyntax.MethodDeclarationSyntax node)
            {
                Assert.True(false, "VisitMethodDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitOperatorDeclaration(Syntax.InternalSyntax.OperatorDeclarationSyntax node)
            {
                Assert.True(false, "VisitOperatorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitConversionOperatorDeclaration(Syntax.InternalSyntax.ConversionOperatorDeclarationSyntax node)
            {
                Assert.True(false, "VisitConversionOperatorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitConstructorDeclaration(Syntax.InternalSyntax.ConstructorDeclarationSyntax node)
            {
                Assert.True(false, "VisitConstructorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitConstructorInitializer(Syntax.InternalSyntax.ConstructorInitializerSyntax node)
            {
                Assert.True(false, "VisitConstructorInitializer should not have been called.");
                return default;
            }

            public override TResult VisitDestructorDeclaration(Syntax.InternalSyntax.DestructorDeclarationSyntax node)
            {
                Assert.True(false, "VisitDestructorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitPropertyDeclaration(Syntax.InternalSyntax.PropertyDeclarationSyntax node)
            {
                Assert.True(false, "VisitPropertyDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitArrowExpressionClause(Syntax.InternalSyntax.ArrowExpressionClauseSyntax node)
            {
                Assert.True(false, "VisitArrowExpressionClause should not have been called.");
                return default;
            }

            public override TResult VisitEventDeclaration(Syntax.InternalSyntax.EventDeclarationSyntax node)
            {
                Assert.True(false, "VisitEventDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitIndexerDeclaration(Syntax.InternalSyntax.IndexerDeclarationSyntax node)
            {
                Assert.True(false, "VisitIndexerDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitAccessorList(Syntax.InternalSyntax.AccessorListSyntax node)
            {
                Assert.True(false, "VisitAccessorList should not have been called.");
                return default;
            }

            public override TResult VisitAccessorDeclaration(Syntax.InternalSyntax.AccessorDeclarationSyntax node)
            {
                Assert.True(false, "VisitAccessorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitParameterList(Syntax.InternalSyntax.ParameterListSyntax node)
            {
                Assert.True(false, "VisitParameterList should not have been called.");
                return default;
            }

            public override TResult VisitBracketedParameterList(Syntax.InternalSyntax.BracketedParameterListSyntax node)
            {
                Assert.True(false, "VisitBracketedParameterList should not have been called.");
                return default;
            }

            public override TResult VisitParameter(Syntax.InternalSyntax.ParameterSyntax node)
            {
                Assert.True(false, "VisitParameter should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerParameter(Syntax.InternalSyntax.FunctionPointerParameterSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerParameter should not have been called.");
                return default;
            }

            public override TResult VisitIncompleteMember(Syntax.InternalSyntax.IncompleteMemberSyntax node)
            {
                Assert.True(false, "VisitIncompleteMember should not have been called.");
                return default;
            }

            public override TResult VisitSkippedTokensTrivia(Syntax.InternalSyntax.SkippedTokensTriviaSyntax node)
            {
                Assert.True(false, "VisitSkippedTokensTrivia should not have been called.");
                return default;
            }

            public override TResult VisitDocumentationCommentTrivia(Syntax.InternalSyntax.DocumentationCommentTriviaSyntax node)
            {
                Assert.True(false, "VisitDocumentationCommentTrivia should not have been called.");
                return default;
            }

            public override TResult VisitTypeCref(Syntax.InternalSyntax.TypeCrefSyntax node)
            {
                Assert.True(false, "VisitTypeCref should not have been called.");
                return default;
            }

            public override TResult VisitQualifiedCref(Syntax.InternalSyntax.QualifiedCrefSyntax node)
            {
                Assert.True(false, "VisitQualifiedCref should not have been called.");
                return default;
            }

            public override TResult VisitNameMemberCref(Syntax.InternalSyntax.NameMemberCrefSyntax node)
            {
                Assert.True(false, "VisitNameMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitIndexerMemberCref(Syntax.InternalSyntax.IndexerMemberCrefSyntax node)
            {
                Assert.True(false, "VisitIndexerMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitOperatorMemberCref(Syntax.InternalSyntax.OperatorMemberCrefSyntax node)
            {
                Assert.True(false, "VisitOperatorMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitConversionOperatorMemberCref(Syntax.InternalSyntax.ConversionOperatorMemberCrefSyntax node)
            {
                Assert.True(false, "VisitConversionOperatorMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitCrefParameterList(Syntax.InternalSyntax.CrefParameterListSyntax node)
            {
                Assert.True(false, "VisitCrefParameterList should not have been called.");
                return default;
            }

            public override TResult VisitCrefBracketedParameterList(Syntax.InternalSyntax.CrefBracketedParameterListSyntax node)
            {
                Assert.True(false, "VisitCrefBracketedParameterList should not have been called.");
                return default;
            }

            public override TResult VisitCrefParameter(Syntax.InternalSyntax.CrefParameterSyntax node)
            {
                Assert.True(false, "VisitCrefParameter should not have been called.");
                return default;
            }

            public override TResult VisitXmlElement(Syntax.InternalSyntax.XmlElementSyntax node)
            {
                Assert.True(false, "VisitXmlElement should not have been called.");
                return default;
            }

            public override TResult VisitXmlElementStartTag(Syntax.InternalSyntax.XmlElementStartTagSyntax node)
            {
                Assert.True(false, "VisitXmlElementStartTag should not have been called.");
                return default;
            }

            public override TResult VisitXmlElementEndTag(Syntax.InternalSyntax.XmlElementEndTagSyntax node)
            {
                Assert.True(false, "VisitXmlElementEndTag should not have been called.");
                return default;
            }

            public override TResult VisitXmlEmptyElement(Syntax.InternalSyntax.XmlEmptyElementSyntax node)
            {
                Assert.True(false, "VisitXmlEmptyElement should not have been called.");
                return default;
            }

            public override TResult VisitXmlName(Syntax.InternalSyntax.XmlNameSyntax node)
            {
                Assert.True(false, "VisitXmlName should not have been called.");
                return default;
            }

            public override TResult VisitXmlPrefix(Syntax.InternalSyntax.XmlPrefixSyntax node)
            {
                Assert.True(false, "VisitXmlPrefix should not have been called.");
                return default;
            }

            public override TResult VisitXmlTextAttribute(Syntax.InternalSyntax.XmlTextAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlTextAttribute should not have been called.");
                return default;
            }

            public override TResult VisitXmlCrefAttribute(Syntax.InternalSyntax.XmlCrefAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlCrefAttribute should not have been called.");
                return default;
            }

            public override TResult VisitXmlNameAttribute(Syntax.InternalSyntax.XmlNameAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlNameAttribute should not have been called.");
                return default;
            }

            public override TResult VisitXmlText(Syntax.InternalSyntax.XmlTextSyntax node)
            {
                Assert.True(false, "VisitXmlText should not have been called.");
                return default;
            }

            public override TResult VisitXmlCDataSection(Syntax.InternalSyntax.XmlCDataSectionSyntax node)
            {
                Assert.True(false, "VisitXmlCDataSection should not have been called.");
                return default;
            }

            public override TResult VisitXmlProcessingInstruction(Syntax.InternalSyntax.XmlProcessingInstructionSyntax node)
            {
                Assert.True(false, "VisitXmlProcessingInstruction should not have been called.");
                return default;
            }

            public override TResult VisitXmlComment(Syntax.InternalSyntax.XmlCommentSyntax node)
            {
                Assert.True(false, "VisitXmlComment should not have been called.");
                return default;
            }

            public override TResult VisitIfDirectiveTrivia(Syntax.InternalSyntax.IfDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitIfDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitElifDirectiveTrivia(Syntax.InternalSyntax.ElifDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitElifDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitElseDirectiveTrivia(Syntax.InternalSyntax.ElseDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitElseDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitEndIfDirectiveTrivia(Syntax.InternalSyntax.EndIfDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitEndIfDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitRegionDirectiveTrivia(Syntax.InternalSyntax.RegionDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitRegionDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitEndRegionDirectiveTrivia(Syntax.InternalSyntax.EndRegionDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitEndRegionDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitErrorDirectiveTrivia(Syntax.InternalSyntax.ErrorDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitErrorDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitWarningDirectiveTrivia(Syntax.InternalSyntax.WarningDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitWarningDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitBadDirectiveTrivia(Syntax.InternalSyntax.BadDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitBadDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitDefineDirectiveTrivia(Syntax.InternalSyntax.DefineDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitDefineDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitUndefDirectiveTrivia(Syntax.InternalSyntax.UndefDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitUndefDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitLineDirectiveTrivia(Syntax.InternalSyntax.LineDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLineDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitLineDirectivePosition(Syntax.InternalSyntax.LineDirectivePositionSyntax node)
            {
                Assert.True(false, "VisitLineDirectivePosition should not have been called.");
                return default;
            }

            public override TResult VisitLineSpanDirectiveTrivia(Syntax.InternalSyntax.LineSpanDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLineSpanDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitPragmaWarningDirectiveTrivia(Syntax.InternalSyntax.PragmaWarningDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitPragmaWarningDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitPragmaChecksumDirectiveTrivia(Syntax.InternalSyntax.PragmaChecksumDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitPragmaChecksumDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitReferenceDirectiveTrivia(Syntax.InternalSyntax.ReferenceDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitReferenceDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitLoadDirectiveTrivia(Syntax.InternalSyntax.LoadDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLoadDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitShebangDirectiveTrivia(Syntax.InternalSyntax.ShebangDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitShebangDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitNullableDirectiveTrivia(Syntax.InternalSyntax.NullableDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitNullableDirectiveTrivia should not have been called.");
                return default;
            }
        }
        internal class AssertOnEverythingButIdentifierNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIdentifierName(Syntax.InternalSyntax.IdentifierNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIdentifierNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIdentifierName();
            var visitor = new AssertOnEverythingButIdentifierNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIdentifierNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIdentifierName();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQualifiedName(Syntax.InternalSyntax.QualifiedNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQualifiedNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQualifiedName();
            var visitor = new AssertOnEverythingButQualifiedNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQualifiedNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQualifiedName();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGenericNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitGenericName(Syntax.InternalSyntax.GenericNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGenericNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateGenericName();
            var visitor = new AssertOnEverythingButGenericNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGenericNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateGenericName();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeArgumentListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeArgumentList(Syntax.InternalSyntax.TypeArgumentListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new AssertOnEverythingButTypeArgumentListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAliasQualifiedNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAliasQualifiedName(Syntax.InternalSyntax.AliasQualifiedNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new AssertOnEverythingButAliasQualifiedNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPredefinedTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPredefinedType(Syntax.InternalSyntax.PredefinedTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePredefinedType();
            var visitor = new AssertOnEverythingButPredefinedTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePredefinedType();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArrayType(Syntax.InternalSyntax.ArrayTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrayTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArrayType();
            var visitor = new AssertOnEverythingButArrayTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrayTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArrayType();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayRankSpecifierVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArrayRankSpecifier(Syntax.InternalSyntax.ArrayRankSpecifierSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new AssertOnEverythingButArrayRankSpecifierVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPointerTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPointerType(Syntax.InternalSyntax.PointerTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPointerTypeNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePointerType();
            var visitor = new AssertOnEverythingButPointerTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPointerTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePointerType();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerType(Syntax.InternalSyntax.FunctionPointerTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new AssertOnEverythingButFunctionPointerTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerParameterList(Syntax.InternalSyntax.FunctionPointerParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new AssertOnEverythingButFunctionPointerParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerCallingConventionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerCallingConvention(Syntax.InternalSyntax.FunctionPointerCallingConventionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerCallingConventionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerUnmanagedCallingConventionList(Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerUnmanagedCallingConvention(Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNullableType(Syntax.InternalSyntax.NullableTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNullableTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNullableType();
            var visitor = new AssertOnEverythingButNullableTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNullableTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNullableType();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTupleType(Syntax.InternalSyntax.TupleTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTupleTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTupleType();
            var visitor = new AssertOnEverythingButTupleTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTupleTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTupleType();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleElementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTupleElement(Syntax.InternalSyntax.TupleElementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTupleElementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTupleElement();
            var visitor = new AssertOnEverythingButTupleElementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTupleElementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTupleElement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedTypeArgumentVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOmittedTypeArgument(Syntax.InternalSyntax.OmittedTypeArgumentSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new AssertOnEverythingButOmittedTypeArgumentVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRefType(Syntax.InternalSyntax.RefTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRefType();
            var visitor = new AssertOnEverythingButRefTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRefType();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParenthesizedExpression(Syntax.InternalSyntax.ParenthesizedExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new AssertOnEverythingButParenthesizedExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTupleExpression(Syntax.InternalSyntax.TupleExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTupleExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTupleExpression();
            var visitor = new AssertOnEverythingButTupleExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTupleExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTupleExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrefixUnaryExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPrefixUnaryExpression(Syntax.InternalSyntax.PrefixUnaryExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new AssertOnEverythingButPrefixUnaryExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAwaitExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAwaitExpression(Syntax.InternalSyntax.AwaitExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAwaitExpression();
            var visitor = new AssertOnEverythingButAwaitExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAwaitExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPostfixUnaryExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPostfixUnaryExpression(Syntax.InternalSyntax.PostfixUnaryExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new AssertOnEverythingButPostfixUnaryExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberAccessExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitMemberAccessExpression(Syntax.InternalSyntax.MemberAccessExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new AssertOnEverythingButMemberAccessExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalAccessExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConditionalAccessExpression(Syntax.InternalSyntax.ConditionalAccessExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new AssertOnEverythingButConditionalAccessExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberBindingExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitMemberBindingExpression(Syntax.InternalSyntax.MemberBindingExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new AssertOnEverythingButMemberBindingExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementBindingExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElementBindingExpression(Syntax.InternalSyntax.ElementBindingExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new AssertOnEverythingButElementBindingExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRangeExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRangeExpression(Syntax.InternalSyntax.RangeExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRangeExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRangeExpression();
            var visitor = new AssertOnEverythingButRangeExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRangeExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRangeExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitElementAccessVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitImplicitElementAccess(Syntax.InternalSyntax.ImplicitElementAccessSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new AssertOnEverythingButImplicitElementAccessVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBinaryExpression(Syntax.InternalSyntax.BinaryExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBinaryExpression();
            var visitor = new AssertOnEverythingButBinaryExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBinaryExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAssignmentExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAssignmentExpression(Syntax.InternalSyntax.AssignmentExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new AssertOnEverythingButAssignmentExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConditionalExpression(Syntax.InternalSyntax.ConditionalExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConditionalExpression();
            var visitor = new AssertOnEverythingButConditionalExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConditionalExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThisExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitThisExpression(Syntax.InternalSyntax.ThisExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestThisExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateThisExpression();
            var visitor = new AssertOnEverythingButThisExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestThisExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateThisExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBaseExpression(Syntax.InternalSyntax.BaseExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBaseExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBaseExpression();
            var visitor = new AssertOnEverythingButBaseExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBaseExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBaseExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLiteralExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLiteralExpression(Syntax.InternalSyntax.LiteralExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLiteralExpression();
            var visitor = new AssertOnEverythingButLiteralExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLiteralExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMakeRefExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitMakeRefExpression(Syntax.InternalSyntax.MakeRefExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new AssertOnEverythingButMakeRefExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRefTypeExpression(Syntax.InternalSyntax.RefTypeExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new AssertOnEverythingButRefTypeExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefValueExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRefValueExpression(Syntax.InternalSyntax.RefValueExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRefValueExpression();
            var visitor = new AssertOnEverythingButRefValueExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRefValueExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCheckedExpression(Syntax.InternalSyntax.CheckedExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCheckedExpression();
            var visitor = new AssertOnEverythingButCheckedExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCheckedExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDefaultExpression(Syntax.InternalSyntax.DefaultExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultExpression();
            var visitor = new AssertOnEverythingButDefaultExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeOfExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeOfExpression(Syntax.InternalSyntax.TypeOfExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new AssertOnEverythingButTypeOfExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSizeOfExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSizeOfExpression(Syntax.InternalSyntax.SizeOfExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new AssertOnEverythingButSizeOfExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInvocationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInvocationExpression(Syntax.InternalSyntax.InvocationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInvocationExpression();
            var visitor = new AssertOnEverythingButInvocationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInvocationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementAccessExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElementAccessExpression(Syntax.InternalSyntax.ElementAccessExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new AssertOnEverythingButElementAccessExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArgumentList(Syntax.InternalSyntax.ArgumentListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArgumentListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArgumentList();
            var visitor = new AssertOnEverythingButArgumentListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArgumentListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArgumentList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedArgumentListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBracketedArgumentList(Syntax.InternalSyntax.BracketedArgumentListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new AssertOnEverythingButBracketedArgumentListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArgument(Syntax.InternalSyntax.ArgumentSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArgumentNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArgument();
            var visitor = new AssertOnEverythingButArgumentVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArgumentNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArgument();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionColonVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitExpressionColon(Syntax.InternalSyntax.ExpressionColonSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExpressionColonNodeVisitOnVisitorWithResult()
        {
            var node = GenerateExpressionColon();
            var visitor = new AssertOnEverythingButExpressionColonVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExpressionColonNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateExpressionColon();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameColonVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNameColon(Syntax.InternalSyntax.NameColonSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNameColonNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNameColon();
            var visitor = new AssertOnEverythingButNameColonVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNameColonNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNameColon();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDeclarationExpression(Syntax.InternalSyntax.DeclarationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new AssertOnEverythingButDeclarationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCastExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCastExpression(Syntax.InternalSyntax.CastExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCastExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCastExpression();
            var visitor = new AssertOnEverythingButCastExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCastExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCastExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousMethodExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAnonymousMethodExpression(Syntax.InternalSyntax.AnonymousMethodExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new AssertOnEverythingButAnonymousMethodExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleLambdaExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSimpleLambdaExpression(Syntax.InternalSyntax.SimpleLambdaExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new AssertOnEverythingButSimpleLambdaExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRefExpression(Syntax.InternalSyntax.RefExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRefExpression();
            var visitor = new AssertOnEverythingButRefExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRefExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParenthesizedLambdaExpression(Syntax.InternalSyntax.ParenthesizedLambdaExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInitializerExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInitializerExpression(Syntax.InternalSyntax.InitializerExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInitializerExpression();
            var visitor = new AssertOnEverythingButInitializerExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInitializerExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitImplicitObjectCreationExpression(Syntax.InternalSyntax.ImplicitObjectCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButObjectCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitObjectCreationExpression(Syntax.InternalSyntax.ObjectCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new AssertOnEverythingButObjectCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWithExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWithExpression(Syntax.InternalSyntax.WithExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWithExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWithExpression();
            var visitor = new AssertOnEverythingButWithExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWithExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWithExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAnonymousObjectMemberDeclarator(Syntax.InternalSyntax.AnonymousObjectMemberDeclaratorSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAnonymousObjectCreationExpression(Syntax.InternalSyntax.AnonymousObjectCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArrayCreationExpression(Syntax.InternalSyntax.ArrayCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new AssertOnEverythingButArrayCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitImplicitArrayCreationExpression(Syntax.InternalSyntax.ImplicitArrayCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitStackAllocArrayCreationExpression(Syntax.InternalSyntax.StackAllocArrayCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitImplicitStackAllocArrayCreationExpression(Syntax.InternalSyntax.ImplicitStackAllocArrayCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQueryExpression(Syntax.InternalSyntax.QueryExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQueryExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQueryExpression();
            var visitor = new AssertOnEverythingButQueryExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQueryExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQueryExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryBodyVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQueryBody(Syntax.InternalSyntax.QueryBodySyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQueryBodyNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQueryBody();
            var visitor = new AssertOnEverythingButQueryBodyVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQueryBodyNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQueryBody();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFromClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFromClause(Syntax.InternalSyntax.FromClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFromClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFromClause();
            var visitor = new AssertOnEverythingButFromClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFromClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFromClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLetClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLetClause(Syntax.InternalSyntax.LetClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLetClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLetClause();
            var visitor = new AssertOnEverythingButLetClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLetClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLetClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitJoinClause(Syntax.InternalSyntax.JoinClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestJoinClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateJoinClause();
            var visitor = new AssertOnEverythingButJoinClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestJoinClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateJoinClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinIntoClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitJoinIntoClause(Syntax.InternalSyntax.JoinIntoClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new AssertOnEverythingButJoinIntoClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhereClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWhereClause(Syntax.InternalSyntax.WhereClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWhereClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWhereClause();
            var visitor = new AssertOnEverythingButWhereClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWhereClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWhereClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderByClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOrderByClause(Syntax.InternalSyntax.OrderByClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOrderByClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOrderByClause();
            var visitor = new AssertOnEverythingButOrderByClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOrderByClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOrderByClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderingVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOrdering(Syntax.InternalSyntax.OrderingSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOrderingNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOrdering();
            var visitor = new AssertOnEverythingButOrderingVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOrderingNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOrdering();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSelectClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSelectClause(Syntax.InternalSyntax.SelectClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSelectClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSelectClause();
            var visitor = new AssertOnEverythingButSelectClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSelectClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSelectClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGroupClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitGroupClause(Syntax.InternalSyntax.GroupClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGroupClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateGroupClause();
            var visitor = new AssertOnEverythingButGroupClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGroupClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateGroupClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryContinuationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQueryContinuation(Syntax.InternalSyntax.QueryContinuationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQueryContinuationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQueryContinuation();
            var visitor = new AssertOnEverythingButQueryContinuationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQueryContinuationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQueryContinuation();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedArraySizeExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOmittedArraySizeExpression(Syntax.InternalSyntax.OmittedArraySizeExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new AssertOnEverythingButOmittedArraySizeExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolatedStringExpression(Syntax.InternalSyntax.InterpolatedStringExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new AssertOnEverythingButInterpolatedStringExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIsPatternExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIsPatternExpression(Syntax.InternalSyntax.IsPatternExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new AssertOnEverythingButIsPatternExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitThrowExpression(Syntax.InternalSyntax.ThrowExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestThrowExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateThrowExpression();
            var visitor = new AssertOnEverythingButThrowExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestThrowExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateThrowExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhenClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWhenClause(Syntax.InternalSyntax.WhenClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWhenClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWhenClause();
            var visitor = new AssertOnEverythingButWhenClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWhenClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWhenClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDiscardPattern(Syntax.InternalSyntax.DiscardPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDiscardPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDiscardPattern();
            var visitor = new AssertOnEverythingButDiscardPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDiscardPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDiscardPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDeclarationPattern(Syntax.InternalSyntax.DeclarationPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new AssertOnEverythingButDeclarationPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVarPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitVarPattern(Syntax.InternalSyntax.VarPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestVarPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateVarPattern();
            var visitor = new AssertOnEverythingButVarPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestVarPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateVarPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecursivePatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRecursivePattern(Syntax.InternalSyntax.RecursivePatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRecursivePatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRecursivePattern();
            var visitor = new AssertOnEverythingButRecursivePatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRecursivePatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRecursivePattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPositionalPatternClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPositionalPatternClause(Syntax.InternalSyntax.PositionalPatternClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new AssertOnEverythingButPositionalPatternClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyPatternClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPropertyPatternClause(Syntax.InternalSyntax.PropertyPatternClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new AssertOnEverythingButPropertyPatternClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSubpatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSubpattern(Syntax.InternalSyntax.SubpatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSubpatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSubpattern();
            var visitor = new AssertOnEverythingButSubpatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSubpatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSubpattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstantPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConstantPattern(Syntax.InternalSyntax.ConstantPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstantPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConstantPattern();
            var visitor = new AssertOnEverythingButConstantPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstantPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConstantPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParenthesizedPattern(Syntax.InternalSyntax.ParenthesizedPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new AssertOnEverythingButParenthesizedPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRelationalPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRelationalPattern(Syntax.InternalSyntax.RelationalPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRelationalPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRelationalPattern();
            var visitor = new AssertOnEverythingButRelationalPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRelationalPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRelationalPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypePatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypePattern(Syntax.InternalSyntax.TypePatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypePatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypePattern();
            var visitor = new AssertOnEverythingButTypePatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypePatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypePattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBinaryPattern(Syntax.InternalSyntax.BinaryPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBinaryPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBinaryPattern();
            var visitor = new AssertOnEverythingButBinaryPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBinaryPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBinaryPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnaryPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUnaryPattern(Syntax.InternalSyntax.UnaryPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUnaryPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUnaryPattern();
            var visitor = new AssertOnEverythingButUnaryPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUnaryPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUnaryPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButListPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitListPattern(Syntax.InternalSyntax.ListPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestListPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateListPattern();
            var visitor = new AssertOnEverythingButListPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestListPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateListPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSlicePatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSlicePattern(Syntax.InternalSyntax.SlicePatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSlicePatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSlicePattern();
            var visitor = new AssertOnEverythingButSlicePatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSlicePatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSlicePattern();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringTextVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolatedStringText(Syntax.InternalSyntax.InterpolatedStringTextSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new AssertOnEverythingButInterpolatedStringTextVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolation(Syntax.InternalSyntax.InterpolationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolation();
            var visitor = new AssertOnEverythingButInterpolationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolation();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationAlignmentClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolationAlignmentClause(Syntax.InternalSyntax.InterpolationAlignmentClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new AssertOnEverythingButInterpolationAlignmentClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationFormatClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolationFormatClause(Syntax.InternalSyntax.InterpolationFormatClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new AssertOnEverythingButInterpolationFormatClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGlobalStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitGlobalStatement(Syntax.InternalSyntax.GlobalStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGlobalStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateGlobalStatement();
            var visitor = new AssertOnEverythingButGlobalStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGlobalStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateGlobalStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBlockVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBlock(Syntax.InternalSyntax.BlockSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBlockNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBlock();
            var visitor = new AssertOnEverythingButBlockVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBlockNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBlock();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalFunctionStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLocalFunctionStatement(Syntax.InternalSyntax.LocalFunctionStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new AssertOnEverythingButLocalFunctionStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalDeclarationStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLocalDeclarationStatement(Syntax.InternalSyntax.LocalDeclarationStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new AssertOnEverythingButLocalDeclarationStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitVariableDeclaration(Syntax.InternalSyntax.VariableDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new AssertOnEverythingButVariableDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclaratorVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitVariableDeclarator(Syntax.InternalSyntax.VariableDeclaratorSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitOnVisitorWithResult()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new AssertOnEverythingButVariableDeclaratorVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEqualsValueClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEqualsValueClause(Syntax.InternalSyntax.EqualsValueClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new AssertOnEverythingButEqualsValueClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSingleVariableDesignationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSingleVariableDesignation(Syntax.InternalSyntax.SingleVariableDesignationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new AssertOnEverythingButSingleVariableDesignationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardDesignationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDiscardDesignation(Syntax.InternalSyntax.DiscardDesignationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new AssertOnEverythingButDiscardDesignationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedVariableDesignationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParenthesizedVariableDesignation(Syntax.InternalSyntax.ParenthesizedVariableDesignationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new AssertOnEverythingButParenthesizedVariableDesignationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitExpressionStatement(Syntax.InternalSyntax.ExpressionStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExpressionStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateExpressionStatement();
            var visitor = new AssertOnEverythingButExpressionStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExpressionStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateExpressionStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEmptyStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEmptyStatement(Syntax.InternalSyntax.EmptyStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEmptyStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEmptyStatement();
            var visitor = new AssertOnEverythingButEmptyStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEmptyStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEmptyStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLabeledStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLabeledStatement(Syntax.InternalSyntax.LabeledStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLabeledStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLabeledStatement();
            var visitor = new AssertOnEverythingButLabeledStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLabeledStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLabeledStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGotoStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitGotoStatement(Syntax.InternalSyntax.GotoStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGotoStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateGotoStatement();
            var visitor = new AssertOnEverythingButGotoStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGotoStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateGotoStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBreakStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBreakStatement(Syntax.InternalSyntax.BreakStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBreakStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBreakStatement();
            var visitor = new AssertOnEverythingButBreakStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBreakStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBreakStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButContinueStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitContinueStatement(Syntax.InternalSyntax.ContinueStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestContinueStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateContinueStatement();
            var visitor = new AssertOnEverythingButContinueStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestContinueStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateContinueStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReturnStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitReturnStatement(Syntax.InternalSyntax.ReturnStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestReturnStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateReturnStatement();
            var visitor = new AssertOnEverythingButReturnStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestReturnStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateReturnStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitThrowStatement(Syntax.InternalSyntax.ThrowStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestThrowStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateThrowStatement();
            var visitor = new AssertOnEverythingButThrowStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestThrowStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateThrowStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButYieldStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitYieldStatement(Syntax.InternalSyntax.YieldStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestYieldStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateYieldStatement();
            var visitor = new AssertOnEverythingButYieldStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestYieldStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateYieldStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhileStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWhileStatement(Syntax.InternalSyntax.WhileStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWhileStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWhileStatement();
            var visitor = new AssertOnEverythingButWhileStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWhileStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWhileStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDoStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDoStatement(Syntax.InternalSyntax.DoStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDoStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDoStatement();
            var visitor = new AssertOnEverythingButDoStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDoStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDoStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitForStatement(Syntax.InternalSyntax.ForStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestForStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateForStatement();
            var visitor = new AssertOnEverythingButForStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestForStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateForStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitForEachStatement(Syntax.InternalSyntax.ForEachStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestForEachStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateForEachStatement();
            var visitor = new AssertOnEverythingButForEachStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestForEachStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateForEachStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachVariableStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitForEachVariableStatement(Syntax.InternalSyntax.ForEachVariableStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new AssertOnEverythingButForEachVariableStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUsingStatement(Syntax.InternalSyntax.UsingStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUsingStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUsingStatement();
            var visitor = new AssertOnEverythingButUsingStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUsingStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUsingStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFixedStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFixedStatement(Syntax.InternalSyntax.FixedStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFixedStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFixedStatement();
            var visitor = new AssertOnEverythingButFixedStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFixedStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFixedStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCheckedStatement(Syntax.InternalSyntax.CheckedStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCheckedStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCheckedStatement();
            var visitor = new AssertOnEverythingButCheckedStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCheckedStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCheckedStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnsafeStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUnsafeStatement(Syntax.InternalSyntax.UnsafeStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new AssertOnEverythingButUnsafeStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLockStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLockStatement(Syntax.InternalSyntax.LockStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLockStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLockStatement();
            var visitor = new AssertOnEverythingButLockStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLockStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLockStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIfStatement(Syntax.InternalSyntax.IfStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIfStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIfStatement();
            var visitor = new AssertOnEverythingButIfStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIfStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIfStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElseClause(Syntax.InternalSyntax.ElseClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElseClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElseClause();
            var visitor = new AssertOnEverythingButElseClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElseClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElseClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSwitchStatement(Syntax.InternalSyntax.SwitchStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchStatement();
            var visitor = new AssertOnEverythingButSwitchStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchSectionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSwitchSection(Syntax.InternalSyntax.SwitchSectionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchSectionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchSection();
            var visitor = new AssertOnEverythingButSwitchSectionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchSectionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchSection();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCasePatternSwitchLabelVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCasePatternSwitchLabel(Syntax.InternalSyntax.CasePatternSwitchLabelSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new AssertOnEverythingButCasePatternSwitchLabelVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCaseSwitchLabelVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCaseSwitchLabel(Syntax.InternalSyntax.CaseSwitchLabelSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new AssertOnEverythingButCaseSwitchLabelVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultSwitchLabelVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDefaultSwitchLabel(Syntax.InternalSyntax.DefaultSwitchLabelSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new AssertOnEverythingButDefaultSwitchLabelVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSwitchExpression(Syntax.InternalSyntax.SwitchExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchExpression();
            var visitor = new AssertOnEverythingButSwitchExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionArmVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSwitchExpressionArm(Syntax.InternalSyntax.SwitchExpressionArmSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new AssertOnEverythingButSwitchExpressionArmVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTryStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTryStatement(Syntax.InternalSyntax.TryStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTryStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTryStatement();
            var visitor = new AssertOnEverythingButTryStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTryStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTryStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCatchClause(Syntax.InternalSyntax.CatchClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCatchClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCatchClause();
            var visitor = new AssertOnEverythingButCatchClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCatchClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCatchClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCatchDeclaration(Syntax.InternalSyntax.CatchDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new AssertOnEverythingButCatchDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchFilterClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCatchFilterClause(Syntax.InternalSyntax.CatchFilterClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new AssertOnEverythingButCatchFilterClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFinallyClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFinallyClause(Syntax.InternalSyntax.FinallyClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFinallyClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFinallyClause();
            var visitor = new AssertOnEverythingButFinallyClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFinallyClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFinallyClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCompilationUnitVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCompilationUnit(Syntax.InternalSyntax.CompilationUnitSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCompilationUnitNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCompilationUnit();
            var visitor = new AssertOnEverythingButCompilationUnitVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCompilationUnitNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCompilationUnit();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExternAliasDirectiveVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitExternAliasDirective(Syntax.InternalSyntax.ExternAliasDirectiveSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitOnVisitorWithResult()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new AssertOnEverythingButExternAliasDirectiveVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingDirectiveVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUsingDirective(Syntax.InternalSyntax.UsingDirectiveSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUsingDirective();
            var visitor = new AssertOnEverythingButUsingDirectiveVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUsingDirective();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNamespaceDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNamespaceDeclaration(Syntax.InternalSyntax.NamespaceDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new AssertOnEverythingButNamespaceDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFileScopedNamespaceDeclaration(Syntax.InternalSyntax.FileScopedNamespaceDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttributeList(Syntax.InternalSyntax.AttributeListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeList();
            var visitor = new AssertOnEverythingButAttributeListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeTargetSpecifierVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttributeTargetSpecifier(Syntax.InternalSyntax.AttributeTargetSpecifierSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new AssertOnEverythingButAttributeTargetSpecifierVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttribute(Syntax.InternalSyntax.AttributeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttribute();
            var visitor = new AssertOnEverythingButAttributeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttribute();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttributeArgumentList(Syntax.InternalSyntax.AttributeArgumentListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new AssertOnEverythingButAttributeArgumentListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttributeArgument(Syntax.InternalSyntax.AttributeArgumentSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeArgument();
            var visitor = new AssertOnEverythingButAttributeArgumentVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeArgument();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameEqualsVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNameEquals(Syntax.InternalSyntax.NameEqualsSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNameEqualsNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNameEquals();
            var visitor = new AssertOnEverythingButNameEqualsVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNameEqualsNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNameEquals();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeParameterList(Syntax.InternalSyntax.TypeParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameterList();
            var visitor = new AssertOnEverythingButTypeParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeParameter(Syntax.InternalSyntax.TypeParameterSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeParameterNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameter();
            var visitor = new AssertOnEverythingButTypeParameterVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeParameterNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameter();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitClassDeclaration(Syntax.InternalSyntax.ClassDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestClassDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateClassDeclaration();
            var visitor = new AssertOnEverythingButClassDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestClassDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateClassDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStructDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitStructDeclaration(Syntax.InternalSyntax.StructDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestStructDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateStructDeclaration();
            var visitor = new AssertOnEverythingButStructDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestStructDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateStructDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterfaceDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterfaceDeclaration(Syntax.InternalSyntax.InterfaceDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new AssertOnEverythingButInterfaceDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecordDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRecordDeclaration(Syntax.InternalSyntax.RecordDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new AssertOnEverythingButRecordDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEnumDeclaration(Syntax.InternalSyntax.EnumDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new AssertOnEverythingButEnumDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDelegateDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDelegateDeclaration(Syntax.InternalSyntax.DelegateDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new AssertOnEverythingButDelegateDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumMemberDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEnumMemberDeclaration(Syntax.InternalSyntax.EnumMemberDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new AssertOnEverythingButEnumMemberDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBaseList(Syntax.InternalSyntax.BaseListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBaseListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBaseList();
            var visitor = new AssertOnEverythingButBaseListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBaseListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBaseList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleBaseTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSimpleBaseType(Syntax.InternalSyntax.SimpleBaseTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new AssertOnEverythingButSimpleBaseTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPrimaryConstructorBaseType(Syntax.InternalSyntax.PrimaryConstructorBaseTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterConstraintClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeParameterConstraintClause(Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new AssertOnEverythingButTypeParameterConstraintClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorConstraintVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConstructorConstraint(Syntax.InternalSyntax.ConstructorConstraintSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new AssertOnEverythingButConstructorConstraintVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassOrStructConstraintVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitClassOrStructConstraint(Syntax.InternalSyntax.ClassOrStructConstraintSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitOnVisitorWithResult()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new AssertOnEverythingButClassOrStructConstraintVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeConstraintVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeConstraint(Syntax.InternalSyntax.TypeConstraintSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeConstraintNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeConstraint();
            var visitor = new AssertOnEverythingButTypeConstraintVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeConstraintNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeConstraint();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultConstraintVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDefaultConstraint(Syntax.InternalSyntax.DefaultConstraintSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new AssertOnEverythingButDefaultConstraintVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFieldDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFieldDeclaration(Syntax.InternalSyntax.FieldDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new AssertOnEverythingButFieldDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventFieldDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEventFieldDeclaration(Syntax.InternalSyntax.EventFieldDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new AssertOnEverythingButEventFieldDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitExplicitInterfaceSpecifier(Syntax.InternalSyntax.ExplicitInterfaceSpecifierSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitOnVisitorWithResult()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMethodDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitMethodDeclaration(Syntax.InternalSyntax.MethodDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new AssertOnEverythingButMethodDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOperatorDeclaration(Syntax.InternalSyntax.OperatorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new AssertOnEverythingButOperatorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConversionOperatorDeclaration(Syntax.InternalSyntax.ConversionOperatorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new AssertOnEverythingButConversionOperatorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConstructorDeclaration(Syntax.InternalSyntax.ConstructorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new AssertOnEverythingButConstructorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorInitializerVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConstructorInitializer(Syntax.InternalSyntax.ConstructorInitializerSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new AssertOnEverythingButConstructorInitializerVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDestructorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDestructorDeclaration(Syntax.InternalSyntax.DestructorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new AssertOnEverythingButDestructorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPropertyDeclaration(Syntax.InternalSyntax.PropertyDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new AssertOnEverythingButPropertyDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrowExpressionClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArrowExpressionClause(Syntax.InternalSyntax.ArrowExpressionClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new AssertOnEverythingButArrowExpressionClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEventDeclaration(Syntax.InternalSyntax.EventDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEventDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEventDeclaration();
            var visitor = new AssertOnEverythingButEventDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEventDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEventDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIndexerDeclaration(Syntax.InternalSyntax.IndexerDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new AssertOnEverythingButIndexerDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAccessorList(Syntax.InternalSyntax.AccessorListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAccessorListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAccessorList();
            var visitor = new AssertOnEverythingButAccessorListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAccessorListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAccessorList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAccessorDeclaration(Syntax.InternalSyntax.AccessorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new AssertOnEverythingButAccessorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParameterList(Syntax.InternalSyntax.ParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParameterList();
            var visitor = new AssertOnEverythingButParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBracketedParameterList(Syntax.InternalSyntax.BracketedParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new AssertOnEverythingButBracketedParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParameter(Syntax.InternalSyntax.ParameterSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParameterNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParameter();
            var visitor = new AssertOnEverythingButParameterVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParameterNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParameter();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerParameter(Syntax.InternalSyntax.FunctionPointerParameterSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new AssertOnEverythingButFunctionPointerParameterVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIncompleteMemberVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIncompleteMember(Syntax.InternalSyntax.IncompleteMemberSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIncompleteMember();
            var visitor = new AssertOnEverythingButIncompleteMemberVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIncompleteMember();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSkippedTokensTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSkippedTokensTrivia(Syntax.InternalSyntax.SkippedTokensTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new AssertOnEverythingButSkippedTokensTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDocumentationCommentTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDocumentationCommentTrivia(Syntax.InternalSyntax.DocumentationCommentTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new AssertOnEverythingButDocumentationCommentTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeCref(Syntax.InternalSyntax.TypeCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeCref();
            var visitor = new AssertOnEverythingButTypeCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeCref();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQualifiedCref(Syntax.InternalSyntax.QualifiedCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQualifiedCref();
            var visitor = new AssertOnEverythingButQualifiedCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQualifiedCref();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameMemberCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNameMemberCref(Syntax.InternalSyntax.NameMemberCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNameMemberCref();
            var visitor = new AssertOnEverythingButNameMemberCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNameMemberCref();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerMemberCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIndexerMemberCref(Syntax.InternalSyntax.IndexerMemberCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new AssertOnEverythingButIndexerMemberCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorMemberCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOperatorMemberCref(Syntax.InternalSyntax.OperatorMemberCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new AssertOnEverythingButOperatorMemberCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorMemberCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConversionOperatorMemberCref(Syntax.InternalSyntax.ConversionOperatorMemberCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new AssertOnEverythingButConversionOperatorMemberCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCrefParameterList(Syntax.InternalSyntax.CrefParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCrefParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCrefParameterList();
            var visitor = new AssertOnEverythingButCrefParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCrefParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCrefParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefBracketedParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCrefBracketedParameterList(Syntax.InternalSyntax.CrefBracketedParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new AssertOnEverythingButCrefBracketedParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCrefParameter(Syntax.InternalSyntax.CrefParameterSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCrefParameterNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCrefParameter();
            var visitor = new AssertOnEverythingButCrefParameterVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCrefParameterNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCrefParameter();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlElement(Syntax.InternalSyntax.XmlElementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlElementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElement();
            var visitor = new AssertOnEverythingButXmlElementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlElementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementStartTagVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlElementStartTag(Syntax.InternalSyntax.XmlElementStartTagSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new AssertOnEverythingButXmlElementStartTagVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementEndTagVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlElementEndTag(Syntax.InternalSyntax.XmlElementEndTagSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new AssertOnEverythingButXmlElementEndTagVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlEmptyElementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlEmptyElement(Syntax.InternalSyntax.XmlEmptyElementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new AssertOnEverythingButXmlEmptyElementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlName(Syntax.InternalSyntax.XmlNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlName();
            var visitor = new AssertOnEverythingButXmlNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlName();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlPrefixVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlPrefix(Syntax.InternalSyntax.XmlPrefixSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlPrefixNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlPrefix();
            var visitor = new AssertOnEverythingButXmlPrefixVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlPrefixNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlPrefix();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextAttributeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlTextAttribute(Syntax.InternalSyntax.XmlTextAttributeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new AssertOnEverythingButXmlTextAttributeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCrefAttributeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlCrefAttribute(Syntax.InternalSyntax.XmlCrefAttributeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new AssertOnEverythingButXmlCrefAttributeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameAttributeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlNameAttribute(Syntax.InternalSyntax.XmlNameAttributeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new AssertOnEverythingButXmlNameAttributeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlText(Syntax.InternalSyntax.XmlTextSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlTextNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlText();
            var visitor = new AssertOnEverythingButXmlTextVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlTextNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlText();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCDataSectionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlCDataSection(Syntax.InternalSyntax.XmlCDataSectionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new AssertOnEverythingButXmlCDataSectionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlProcessingInstructionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlProcessingInstruction(Syntax.InternalSyntax.XmlProcessingInstructionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new AssertOnEverythingButXmlProcessingInstructionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCommentVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlComment(Syntax.InternalSyntax.XmlCommentSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlCommentNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlComment();
            var visitor = new AssertOnEverythingButXmlCommentVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlCommentNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlComment();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIfDirectiveTrivia(Syntax.InternalSyntax.IfDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButIfDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElifDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElifDirectiveTrivia(Syntax.InternalSyntax.ElifDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new AssertOnEverythingButElifDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElseDirectiveTrivia(Syntax.InternalSyntax.ElseDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new AssertOnEverythingButElseDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndIfDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEndIfDirectiveTrivia(Syntax.InternalSyntax.EndIfDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndIfDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRegionDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRegionDirectiveTrivia(Syntax.InternalSyntax.RegionDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButRegionDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEndRegionDirectiveTrivia(Syntax.InternalSyntax.EndRegionDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButErrorDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitErrorDirectiveTrivia(Syntax.InternalSyntax.ErrorDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new AssertOnEverythingButErrorDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWarningDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWarningDirectiveTrivia(Syntax.InternalSyntax.WarningDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButWarningDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBadDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBadDirectiveTrivia(Syntax.InternalSyntax.BadDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new AssertOnEverythingButBadDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefineDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDefineDirectiveTrivia(Syntax.InternalSyntax.DefineDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new AssertOnEverythingButDefineDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUndefDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUndefDirectiveTrivia(Syntax.InternalSyntax.UndefDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new AssertOnEverythingButUndefDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLineDirectiveTrivia(Syntax.InternalSyntax.LineDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectivePositionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLineDirectivePosition(Syntax.InternalSyntax.LineDirectivePositionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new AssertOnEverythingButLineDirectivePositionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLineSpanDirectiveTrivia(Syntax.InternalSyntax.LineSpanDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPragmaWarningDirectiveTrivia(Syntax.InternalSyntax.PragmaWarningDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPragmaChecksumDirectiveTrivia(Syntax.InternalSyntax.PragmaChecksumDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReferenceDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitReferenceDirectiveTrivia(Syntax.InternalSyntax.ReferenceDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new AssertOnEverythingButReferenceDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLoadDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLoadDirectiveTrivia(Syntax.InternalSyntax.LoadDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new AssertOnEverythingButLoadDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButShebangDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitShebangDirectiveTrivia(Syntax.InternalSyntax.ShebangDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new AssertOnEverythingButShebangDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNullableDirectiveTrivia(Syntax.InternalSyntax.NullableDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new AssertOnEverythingButNullableDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal partial class AssertOnVisitVisitor : Syntax.InternalSyntax.CSharpSyntaxVisitor
        {
            public override void VisitIdentifierName(Syntax.InternalSyntax.IdentifierNameSyntax node)
            {
                Assert.True(false, "VisitIdentifierName should not have been called.");
            }

            public override void VisitQualifiedName(Syntax.InternalSyntax.QualifiedNameSyntax node)
            {
                Assert.True(false, "VisitQualifiedName should not have been called.");
            }

            public override void VisitGenericName(Syntax.InternalSyntax.GenericNameSyntax node)
            {
                Assert.True(false, "VisitGenericName should not have been called.");
            }

            public override void VisitTypeArgumentList(Syntax.InternalSyntax.TypeArgumentListSyntax node)
            {
                Assert.True(false, "VisitTypeArgumentList should not have been called.");
            }

            public override void VisitAliasQualifiedName(Syntax.InternalSyntax.AliasQualifiedNameSyntax node)
            {
                Assert.True(false, "VisitAliasQualifiedName should not have been called.");
            }

            public override void VisitPredefinedType(Syntax.InternalSyntax.PredefinedTypeSyntax node)
            {
                Assert.True(false, "VisitPredefinedType should not have been called.");
            }

            public override void VisitArrayType(Syntax.InternalSyntax.ArrayTypeSyntax node)
            {
                Assert.True(false, "VisitArrayType should not have been called.");
            }

            public override void VisitArrayRankSpecifier(Syntax.InternalSyntax.ArrayRankSpecifierSyntax node)
            {
                Assert.True(false, "VisitArrayRankSpecifier should not have been called.");
            }

            public override void VisitPointerType(Syntax.InternalSyntax.PointerTypeSyntax node)
            {
                Assert.True(false, "VisitPointerType should not have been called.");
            }

            public override void VisitFunctionPointerType(Syntax.InternalSyntax.FunctionPointerTypeSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerType should not have been called.");
            }

            public override void VisitFunctionPointerParameterList(Syntax.InternalSyntax.FunctionPointerParameterListSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerParameterList should not have been called.");
            }

            public override void VisitFunctionPointerCallingConvention(Syntax.InternalSyntax.FunctionPointerCallingConventionSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerCallingConvention should not have been called.");
            }

            public override void VisitFunctionPointerUnmanagedCallingConventionList(Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionListSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConventionList should not have been called.");
            }

            public override void VisitFunctionPointerUnmanagedCallingConvention(Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConvention should not have been called.");
            }

            public override void VisitNullableType(Syntax.InternalSyntax.NullableTypeSyntax node)
            {
                Assert.True(false, "VisitNullableType should not have been called.");
            }

            public override void VisitTupleType(Syntax.InternalSyntax.TupleTypeSyntax node)
            {
                Assert.True(false, "VisitTupleType should not have been called.");
            }

            public override void VisitTupleElement(Syntax.InternalSyntax.TupleElementSyntax node)
            {
                Assert.True(false, "VisitTupleElement should not have been called.");
            }

            public override void VisitOmittedTypeArgument(Syntax.InternalSyntax.OmittedTypeArgumentSyntax node)
            {
                Assert.True(false, "VisitOmittedTypeArgument should not have been called.");
            }

            public override void VisitRefType(Syntax.InternalSyntax.RefTypeSyntax node)
            {
                Assert.True(false, "VisitRefType should not have been called.");
            }

            public override void VisitParenthesizedExpression(Syntax.InternalSyntax.ParenthesizedExpressionSyntax node)
            {
                Assert.True(false, "VisitParenthesizedExpression should not have been called.");
            }

            public override void VisitTupleExpression(Syntax.InternalSyntax.TupleExpressionSyntax node)
            {
                Assert.True(false, "VisitTupleExpression should not have been called.");
            }

            public override void VisitPrefixUnaryExpression(Syntax.InternalSyntax.PrefixUnaryExpressionSyntax node)
            {
                Assert.True(false, "VisitPrefixUnaryExpression should not have been called.");
            }

            public override void VisitAwaitExpression(Syntax.InternalSyntax.AwaitExpressionSyntax node)
            {
                Assert.True(false, "VisitAwaitExpression should not have been called.");
            }

            public override void VisitPostfixUnaryExpression(Syntax.InternalSyntax.PostfixUnaryExpressionSyntax node)
            {
                Assert.True(false, "VisitPostfixUnaryExpression should not have been called.");
            }

            public override void VisitMemberAccessExpression(Syntax.InternalSyntax.MemberAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitMemberAccessExpression should not have been called.");
            }

            public override void VisitConditionalAccessExpression(Syntax.InternalSyntax.ConditionalAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitConditionalAccessExpression should not have been called.");
            }

            public override void VisitMemberBindingExpression(Syntax.InternalSyntax.MemberBindingExpressionSyntax node)
            {
                Assert.True(false, "VisitMemberBindingExpression should not have been called.");
            }

            public override void VisitElementBindingExpression(Syntax.InternalSyntax.ElementBindingExpressionSyntax node)
            {
                Assert.True(false, "VisitElementBindingExpression should not have been called.");
            }

            public override void VisitRangeExpression(Syntax.InternalSyntax.RangeExpressionSyntax node)
            {
                Assert.True(false, "VisitRangeExpression should not have been called.");
            }

            public override void VisitImplicitElementAccess(Syntax.InternalSyntax.ImplicitElementAccessSyntax node)
            {
                Assert.True(false, "VisitImplicitElementAccess should not have been called.");
            }

            public override void VisitBinaryExpression(Syntax.InternalSyntax.BinaryExpressionSyntax node)
            {
                Assert.True(false, "VisitBinaryExpression should not have been called.");
            }

            public override void VisitAssignmentExpression(Syntax.InternalSyntax.AssignmentExpressionSyntax node)
            {
                Assert.True(false, "VisitAssignmentExpression should not have been called.");
            }

            public override void VisitConditionalExpression(Syntax.InternalSyntax.ConditionalExpressionSyntax node)
            {
                Assert.True(false, "VisitConditionalExpression should not have been called.");
            }

            public override void VisitThisExpression(Syntax.InternalSyntax.ThisExpressionSyntax node)
            {
                Assert.True(false, "VisitThisExpression should not have been called.");
            }

            public override void VisitBaseExpression(Syntax.InternalSyntax.BaseExpressionSyntax node)
            {
                Assert.True(false, "VisitBaseExpression should not have been called.");
            }

            public override void VisitLiteralExpression(Syntax.InternalSyntax.LiteralExpressionSyntax node)
            {
                Assert.True(false, "VisitLiteralExpression should not have been called.");
            }

            public override void VisitMakeRefExpression(Syntax.InternalSyntax.MakeRefExpressionSyntax node)
            {
                Assert.True(false, "VisitMakeRefExpression should not have been called.");
            }

            public override void VisitRefTypeExpression(Syntax.InternalSyntax.RefTypeExpressionSyntax node)
            {
                Assert.True(false, "VisitRefTypeExpression should not have been called.");
            }

            public override void VisitRefValueExpression(Syntax.InternalSyntax.RefValueExpressionSyntax node)
            {
                Assert.True(false, "VisitRefValueExpression should not have been called.");
            }

            public override void VisitCheckedExpression(Syntax.InternalSyntax.CheckedExpressionSyntax node)
            {
                Assert.True(false, "VisitCheckedExpression should not have been called.");
            }

            public override void VisitDefaultExpression(Syntax.InternalSyntax.DefaultExpressionSyntax node)
            {
                Assert.True(false, "VisitDefaultExpression should not have been called.");
            }

            public override void VisitTypeOfExpression(Syntax.InternalSyntax.TypeOfExpressionSyntax node)
            {
                Assert.True(false, "VisitTypeOfExpression should not have been called.");
            }

            public override void VisitSizeOfExpression(Syntax.InternalSyntax.SizeOfExpressionSyntax node)
            {
                Assert.True(false, "VisitSizeOfExpression should not have been called.");
            }

            public override void VisitInvocationExpression(Syntax.InternalSyntax.InvocationExpressionSyntax node)
            {
                Assert.True(false, "VisitInvocationExpression should not have been called.");
            }

            public override void VisitElementAccessExpression(Syntax.InternalSyntax.ElementAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitElementAccessExpression should not have been called.");
            }

            public override void VisitArgumentList(Syntax.InternalSyntax.ArgumentListSyntax node)
            {
                Assert.True(false, "VisitArgumentList should not have been called.");
            }

            public override void VisitBracketedArgumentList(Syntax.InternalSyntax.BracketedArgumentListSyntax node)
            {
                Assert.True(false, "VisitBracketedArgumentList should not have been called.");
            }

            public override void VisitArgument(Syntax.InternalSyntax.ArgumentSyntax node)
            {
                Assert.True(false, "VisitArgument should not have been called.");
            }

            public override void VisitExpressionColon(Syntax.InternalSyntax.ExpressionColonSyntax node)
            {
                Assert.True(false, "VisitExpressionColon should not have been called.");
            }

            public override void VisitNameColon(Syntax.InternalSyntax.NameColonSyntax node)
            {
                Assert.True(false, "VisitNameColon should not have been called.");
            }

            public override void VisitDeclarationExpression(Syntax.InternalSyntax.DeclarationExpressionSyntax node)
            {
                Assert.True(false, "VisitDeclarationExpression should not have been called.");
            }

            public override void VisitCastExpression(Syntax.InternalSyntax.CastExpressionSyntax node)
            {
                Assert.True(false, "VisitCastExpression should not have been called.");
            }

            public override void VisitAnonymousMethodExpression(Syntax.InternalSyntax.AnonymousMethodExpressionSyntax node)
            {
                Assert.True(false, "VisitAnonymousMethodExpression should not have been called.");
            }

            public override void VisitSimpleLambdaExpression(Syntax.InternalSyntax.SimpleLambdaExpressionSyntax node)
            {
                Assert.True(false, "VisitSimpleLambdaExpression should not have been called.");
            }

            public override void VisitRefExpression(Syntax.InternalSyntax.RefExpressionSyntax node)
            {
                Assert.True(false, "VisitRefExpression should not have been called.");
            }

            public override void VisitParenthesizedLambdaExpression(Syntax.InternalSyntax.ParenthesizedLambdaExpressionSyntax node)
            {
                Assert.True(false, "VisitParenthesizedLambdaExpression should not have been called.");
            }

            public override void VisitInitializerExpression(Syntax.InternalSyntax.InitializerExpressionSyntax node)
            {
                Assert.True(false, "VisitInitializerExpression should not have been called.");
            }

            public override void VisitImplicitObjectCreationExpression(Syntax.InternalSyntax.ImplicitObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitObjectCreationExpression should not have been called.");
            }

            public override void VisitObjectCreationExpression(Syntax.InternalSyntax.ObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitObjectCreationExpression should not have been called.");
            }

            public override void VisitWithExpression(Syntax.InternalSyntax.WithExpressionSyntax node)
            {
                Assert.True(false, "VisitWithExpression should not have been called.");
            }

            public override void VisitAnonymousObjectMemberDeclarator(Syntax.InternalSyntax.AnonymousObjectMemberDeclaratorSyntax node)
            {
                Assert.True(false, "VisitAnonymousObjectMemberDeclarator should not have been called.");
            }

            public override void VisitAnonymousObjectCreationExpression(Syntax.InternalSyntax.AnonymousObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitAnonymousObjectCreationExpression should not have been called.");
            }

            public override void VisitArrayCreationExpression(Syntax.InternalSyntax.ArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitArrayCreationExpression should not have been called.");
            }

            public override void VisitImplicitArrayCreationExpression(Syntax.InternalSyntax.ImplicitArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitArrayCreationExpression should not have been called.");
            }

            public override void VisitStackAllocArrayCreationExpression(Syntax.InternalSyntax.StackAllocArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitStackAllocArrayCreationExpression should not have been called.");
            }

            public override void VisitImplicitStackAllocArrayCreationExpression(Syntax.InternalSyntax.ImplicitStackAllocArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitStackAllocArrayCreationExpression should not have been called.");
            }

            public override void VisitQueryExpression(Syntax.InternalSyntax.QueryExpressionSyntax node)
            {
                Assert.True(false, "VisitQueryExpression should not have been called.");
            }

            public override void VisitQueryBody(Syntax.InternalSyntax.QueryBodySyntax node)
            {
                Assert.True(false, "VisitQueryBody should not have been called.");
            }

            public override void VisitFromClause(Syntax.InternalSyntax.FromClauseSyntax node)
            {
                Assert.True(false, "VisitFromClause should not have been called.");
            }

            public override void VisitLetClause(Syntax.InternalSyntax.LetClauseSyntax node)
            {
                Assert.True(false, "VisitLetClause should not have been called.");
            }

            public override void VisitJoinClause(Syntax.InternalSyntax.JoinClauseSyntax node)
            {
                Assert.True(false, "VisitJoinClause should not have been called.");
            }

            public override void VisitJoinIntoClause(Syntax.InternalSyntax.JoinIntoClauseSyntax node)
            {
                Assert.True(false, "VisitJoinIntoClause should not have been called.");
            }

            public override void VisitWhereClause(Syntax.InternalSyntax.WhereClauseSyntax node)
            {
                Assert.True(false, "VisitWhereClause should not have been called.");
            }

            public override void VisitOrderByClause(Syntax.InternalSyntax.OrderByClauseSyntax node)
            {
                Assert.True(false, "VisitOrderByClause should not have been called.");
            }

            public override void VisitOrdering(Syntax.InternalSyntax.OrderingSyntax node)
            {
                Assert.True(false, "VisitOrdering should not have been called.");
            }

            public override void VisitSelectClause(Syntax.InternalSyntax.SelectClauseSyntax node)
            {
                Assert.True(false, "VisitSelectClause should not have been called.");
            }

            public override void VisitGroupClause(Syntax.InternalSyntax.GroupClauseSyntax node)
            {
                Assert.True(false, "VisitGroupClause should not have been called.");
            }

            public override void VisitQueryContinuation(Syntax.InternalSyntax.QueryContinuationSyntax node)
            {
                Assert.True(false, "VisitQueryContinuation should not have been called.");
            }

            public override void VisitOmittedArraySizeExpression(Syntax.InternalSyntax.OmittedArraySizeExpressionSyntax node)
            {
                Assert.True(false, "VisitOmittedArraySizeExpression should not have been called.");
            }

            public override void VisitInterpolatedStringExpression(Syntax.InternalSyntax.InterpolatedStringExpressionSyntax node)
            {
                Assert.True(false, "VisitInterpolatedStringExpression should not have been called.");
            }

            public override void VisitIsPatternExpression(Syntax.InternalSyntax.IsPatternExpressionSyntax node)
            {
                Assert.True(false, "VisitIsPatternExpression should not have been called.");
            }

            public override void VisitThrowExpression(Syntax.InternalSyntax.ThrowExpressionSyntax node)
            {
                Assert.True(false, "VisitThrowExpression should not have been called.");
            }

            public override void VisitWhenClause(Syntax.InternalSyntax.WhenClauseSyntax node)
            {
                Assert.True(false, "VisitWhenClause should not have been called.");
            }

            public override void VisitDiscardPattern(Syntax.InternalSyntax.DiscardPatternSyntax node)
            {
                Assert.True(false, "VisitDiscardPattern should not have been called.");
            }

            public override void VisitDeclarationPattern(Syntax.InternalSyntax.DeclarationPatternSyntax node)
            {
                Assert.True(false, "VisitDeclarationPattern should not have been called.");
            }

            public override void VisitVarPattern(Syntax.InternalSyntax.VarPatternSyntax node)
            {
                Assert.True(false, "VisitVarPattern should not have been called.");
            }

            public override void VisitRecursivePattern(Syntax.InternalSyntax.RecursivePatternSyntax node)
            {
                Assert.True(false, "VisitRecursivePattern should not have been called.");
            }

            public override void VisitPositionalPatternClause(Syntax.InternalSyntax.PositionalPatternClauseSyntax node)
            {
                Assert.True(false, "VisitPositionalPatternClause should not have been called.");
            }

            public override void VisitPropertyPatternClause(Syntax.InternalSyntax.PropertyPatternClauseSyntax node)
            {
                Assert.True(false, "VisitPropertyPatternClause should not have been called.");
            }

            public override void VisitSubpattern(Syntax.InternalSyntax.SubpatternSyntax node)
            {
                Assert.True(false, "VisitSubpattern should not have been called.");
            }

            public override void VisitConstantPattern(Syntax.InternalSyntax.ConstantPatternSyntax node)
            {
                Assert.True(false, "VisitConstantPattern should not have been called.");
            }

            public override void VisitParenthesizedPattern(Syntax.InternalSyntax.ParenthesizedPatternSyntax node)
            {
                Assert.True(false, "VisitParenthesizedPattern should not have been called.");
            }

            public override void VisitRelationalPattern(Syntax.InternalSyntax.RelationalPatternSyntax node)
            {
                Assert.True(false, "VisitRelationalPattern should not have been called.");
            }

            public override void VisitTypePattern(Syntax.InternalSyntax.TypePatternSyntax node)
            {
                Assert.True(false, "VisitTypePattern should not have been called.");
            }

            public override void VisitBinaryPattern(Syntax.InternalSyntax.BinaryPatternSyntax node)
            {
                Assert.True(false, "VisitBinaryPattern should not have been called.");
            }

            public override void VisitUnaryPattern(Syntax.InternalSyntax.UnaryPatternSyntax node)
            {
                Assert.True(false, "VisitUnaryPattern should not have been called.");
            }

            public override void VisitListPattern(Syntax.InternalSyntax.ListPatternSyntax node)
            {
                Assert.True(false, "VisitListPattern should not have been called.");
            }

            public override void VisitSlicePattern(Syntax.InternalSyntax.SlicePatternSyntax node)
            {
                Assert.True(false, "VisitSlicePattern should not have been called.");
            }

            public override void VisitInterpolatedStringText(Syntax.InternalSyntax.InterpolatedStringTextSyntax node)
            {
                Assert.True(false, "VisitInterpolatedStringText should not have been called.");
            }

            public override void VisitInterpolation(Syntax.InternalSyntax.InterpolationSyntax node)
            {
                Assert.True(false, "VisitInterpolation should not have been called.");
            }

            public override void VisitInterpolationAlignmentClause(Syntax.InternalSyntax.InterpolationAlignmentClauseSyntax node)
            {
                Assert.True(false, "VisitInterpolationAlignmentClause should not have been called.");
            }

            public override void VisitInterpolationFormatClause(Syntax.InternalSyntax.InterpolationFormatClauseSyntax node)
            {
                Assert.True(false, "VisitInterpolationFormatClause should not have been called.");
            }

            public override void VisitGlobalStatement(Syntax.InternalSyntax.GlobalStatementSyntax node)
            {
                Assert.True(false, "VisitGlobalStatement should not have been called.");
            }

            public override void VisitBlock(Syntax.InternalSyntax.BlockSyntax node)
            {
                Assert.True(false, "VisitBlock should not have been called.");
            }

            public override void VisitLocalFunctionStatement(Syntax.InternalSyntax.LocalFunctionStatementSyntax node)
            {
                Assert.True(false, "VisitLocalFunctionStatement should not have been called.");
            }

            public override void VisitLocalDeclarationStatement(Syntax.InternalSyntax.LocalDeclarationStatementSyntax node)
            {
                Assert.True(false, "VisitLocalDeclarationStatement should not have been called.");
            }

            public override void VisitVariableDeclaration(Syntax.InternalSyntax.VariableDeclarationSyntax node)
            {
                Assert.True(false, "VisitVariableDeclaration should not have been called.");
            }

            public override void VisitVariableDeclarator(Syntax.InternalSyntax.VariableDeclaratorSyntax node)
            {
                Assert.True(false, "VisitVariableDeclarator should not have been called.");
            }

            public override void VisitEqualsValueClause(Syntax.InternalSyntax.EqualsValueClauseSyntax node)
            {
                Assert.True(false, "VisitEqualsValueClause should not have been called.");
            }

            public override void VisitSingleVariableDesignation(Syntax.InternalSyntax.SingleVariableDesignationSyntax node)
            {
                Assert.True(false, "VisitSingleVariableDesignation should not have been called.");
            }

            public override void VisitDiscardDesignation(Syntax.InternalSyntax.DiscardDesignationSyntax node)
            {
                Assert.True(false, "VisitDiscardDesignation should not have been called.");
            }

            public override void VisitParenthesizedVariableDesignation(Syntax.InternalSyntax.ParenthesizedVariableDesignationSyntax node)
            {
                Assert.True(false, "VisitParenthesizedVariableDesignation should not have been called.");
            }

            public override void VisitExpressionStatement(Syntax.InternalSyntax.ExpressionStatementSyntax node)
            {
                Assert.True(false, "VisitExpressionStatement should not have been called.");
            }

            public override void VisitEmptyStatement(Syntax.InternalSyntax.EmptyStatementSyntax node)
            {
                Assert.True(false, "VisitEmptyStatement should not have been called.");
            }

            public override void VisitLabeledStatement(Syntax.InternalSyntax.LabeledStatementSyntax node)
            {
                Assert.True(false, "VisitLabeledStatement should not have been called.");
            }

            public override void VisitGotoStatement(Syntax.InternalSyntax.GotoStatementSyntax node)
            {
                Assert.True(false, "VisitGotoStatement should not have been called.");
            }

            public override void VisitBreakStatement(Syntax.InternalSyntax.BreakStatementSyntax node)
            {
                Assert.True(false, "VisitBreakStatement should not have been called.");
            }

            public override void VisitContinueStatement(Syntax.InternalSyntax.ContinueStatementSyntax node)
            {
                Assert.True(false, "VisitContinueStatement should not have been called.");
            }

            public override void VisitReturnStatement(Syntax.InternalSyntax.ReturnStatementSyntax node)
            {
                Assert.True(false, "VisitReturnStatement should not have been called.");
            }

            public override void VisitThrowStatement(Syntax.InternalSyntax.ThrowStatementSyntax node)
            {
                Assert.True(false, "VisitThrowStatement should not have been called.");
            }

            public override void VisitYieldStatement(Syntax.InternalSyntax.YieldStatementSyntax node)
            {
                Assert.True(false, "VisitYieldStatement should not have been called.");
            }

            public override void VisitWhileStatement(Syntax.InternalSyntax.WhileStatementSyntax node)
            {
                Assert.True(false, "VisitWhileStatement should not have been called.");
            }

            public override void VisitDoStatement(Syntax.InternalSyntax.DoStatementSyntax node)
            {
                Assert.True(false, "VisitDoStatement should not have been called.");
            }

            public override void VisitForStatement(Syntax.InternalSyntax.ForStatementSyntax node)
            {
                Assert.True(false, "VisitForStatement should not have been called.");
            }

            public override void VisitForEachStatement(Syntax.InternalSyntax.ForEachStatementSyntax node)
            {
                Assert.True(false, "VisitForEachStatement should not have been called.");
            }

            public override void VisitForEachVariableStatement(Syntax.InternalSyntax.ForEachVariableStatementSyntax node)
            {
                Assert.True(false, "VisitForEachVariableStatement should not have been called.");
            }

            public override void VisitUsingStatement(Syntax.InternalSyntax.UsingStatementSyntax node)
            {
                Assert.True(false, "VisitUsingStatement should not have been called.");
            }

            public override void VisitFixedStatement(Syntax.InternalSyntax.FixedStatementSyntax node)
            {
                Assert.True(false, "VisitFixedStatement should not have been called.");
            }

            public override void VisitCheckedStatement(Syntax.InternalSyntax.CheckedStatementSyntax node)
            {
                Assert.True(false, "VisitCheckedStatement should not have been called.");
            }

            public override void VisitUnsafeStatement(Syntax.InternalSyntax.UnsafeStatementSyntax node)
            {
                Assert.True(false, "VisitUnsafeStatement should not have been called.");
            }

            public override void VisitLockStatement(Syntax.InternalSyntax.LockStatementSyntax node)
            {
                Assert.True(false, "VisitLockStatement should not have been called.");
            }

            public override void VisitIfStatement(Syntax.InternalSyntax.IfStatementSyntax node)
            {
                Assert.True(false, "VisitIfStatement should not have been called.");
            }

            public override void VisitElseClause(Syntax.InternalSyntax.ElseClauseSyntax node)
            {
                Assert.True(false, "VisitElseClause should not have been called.");
            }

            public override void VisitSwitchStatement(Syntax.InternalSyntax.SwitchStatementSyntax node)
            {
                Assert.True(false, "VisitSwitchStatement should not have been called.");
            }

            public override void VisitSwitchSection(Syntax.InternalSyntax.SwitchSectionSyntax node)
            {
                Assert.True(false, "VisitSwitchSection should not have been called.");
            }

            public override void VisitCasePatternSwitchLabel(Syntax.InternalSyntax.CasePatternSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitCasePatternSwitchLabel should not have been called.");
            }

            public override void VisitCaseSwitchLabel(Syntax.InternalSyntax.CaseSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitCaseSwitchLabel should not have been called.");
            }

            public override void VisitDefaultSwitchLabel(Syntax.InternalSyntax.DefaultSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitDefaultSwitchLabel should not have been called.");
            }

            public override void VisitSwitchExpression(Syntax.InternalSyntax.SwitchExpressionSyntax node)
            {
                Assert.True(false, "VisitSwitchExpression should not have been called.");
            }

            public override void VisitSwitchExpressionArm(Syntax.InternalSyntax.SwitchExpressionArmSyntax node)
            {
                Assert.True(false, "VisitSwitchExpressionArm should not have been called.");
            }

            public override void VisitTryStatement(Syntax.InternalSyntax.TryStatementSyntax node)
            {
                Assert.True(false, "VisitTryStatement should not have been called.");
            }

            public override void VisitCatchClause(Syntax.InternalSyntax.CatchClauseSyntax node)
            {
                Assert.True(false, "VisitCatchClause should not have been called.");
            }

            public override void VisitCatchDeclaration(Syntax.InternalSyntax.CatchDeclarationSyntax node)
            {
                Assert.True(false, "VisitCatchDeclaration should not have been called.");
            }

            public override void VisitCatchFilterClause(Syntax.InternalSyntax.CatchFilterClauseSyntax node)
            {
                Assert.True(false, "VisitCatchFilterClause should not have been called.");
            }

            public override void VisitFinallyClause(Syntax.InternalSyntax.FinallyClauseSyntax node)
            {
                Assert.True(false, "VisitFinallyClause should not have been called.");
            }

            public override void VisitCompilationUnit(Syntax.InternalSyntax.CompilationUnitSyntax node)
            {
                Assert.True(false, "VisitCompilationUnit should not have been called.");
            }

            public override void VisitExternAliasDirective(Syntax.InternalSyntax.ExternAliasDirectiveSyntax node)
            {
                Assert.True(false, "VisitExternAliasDirective should not have been called.");
            }

            public override void VisitUsingDirective(Syntax.InternalSyntax.UsingDirectiveSyntax node)
            {
                Assert.True(false, "VisitUsingDirective should not have been called.");
            }

            public override void VisitNamespaceDeclaration(Syntax.InternalSyntax.NamespaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitNamespaceDeclaration should not have been called.");
            }

            public override void VisitFileScopedNamespaceDeclaration(Syntax.InternalSyntax.FileScopedNamespaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitFileScopedNamespaceDeclaration should not have been called.");
            }

            public override void VisitAttributeList(Syntax.InternalSyntax.AttributeListSyntax node)
            {
                Assert.True(false, "VisitAttributeList should not have been called.");
            }

            public override void VisitAttributeTargetSpecifier(Syntax.InternalSyntax.AttributeTargetSpecifierSyntax node)
            {
                Assert.True(false, "VisitAttributeTargetSpecifier should not have been called.");
            }

            public override void VisitAttribute(Syntax.InternalSyntax.AttributeSyntax node)
            {
                Assert.True(false, "VisitAttribute should not have been called.");
            }

            public override void VisitAttributeArgumentList(Syntax.InternalSyntax.AttributeArgumentListSyntax node)
            {
                Assert.True(false, "VisitAttributeArgumentList should not have been called.");
            }

            public override void VisitAttributeArgument(Syntax.InternalSyntax.AttributeArgumentSyntax node)
            {
                Assert.True(false, "VisitAttributeArgument should not have been called.");
            }

            public override void VisitNameEquals(Syntax.InternalSyntax.NameEqualsSyntax node)
            {
                Assert.True(false, "VisitNameEquals should not have been called.");
            }

            public override void VisitTypeParameterList(Syntax.InternalSyntax.TypeParameterListSyntax node)
            {
                Assert.True(false, "VisitTypeParameterList should not have been called.");
            }

            public override void VisitTypeParameter(Syntax.InternalSyntax.TypeParameterSyntax node)
            {
                Assert.True(false, "VisitTypeParameter should not have been called.");
            }

            public override void VisitClassDeclaration(Syntax.InternalSyntax.ClassDeclarationSyntax node)
            {
                Assert.True(false, "VisitClassDeclaration should not have been called.");
            }

            public override void VisitStructDeclaration(Syntax.InternalSyntax.StructDeclarationSyntax node)
            {
                Assert.True(false, "VisitStructDeclaration should not have been called.");
            }

            public override void VisitInterfaceDeclaration(Syntax.InternalSyntax.InterfaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitInterfaceDeclaration should not have been called.");
            }

            public override void VisitRecordDeclaration(Syntax.InternalSyntax.RecordDeclarationSyntax node)
            {
                Assert.True(false, "VisitRecordDeclaration should not have been called.");
            }

            public override void VisitEnumDeclaration(Syntax.InternalSyntax.EnumDeclarationSyntax node)
            {
                Assert.True(false, "VisitEnumDeclaration should not have been called.");
            }

            public override void VisitDelegateDeclaration(Syntax.InternalSyntax.DelegateDeclarationSyntax node)
            {
                Assert.True(false, "VisitDelegateDeclaration should not have been called.");
            }

            public override void VisitEnumMemberDeclaration(Syntax.InternalSyntax.EnumMemberDeclarationSyntax node)
            {
                Assert.True(false, "VisitEnumMemberDeclaration should not have been called.");
            }

            public override void VisitBaseList(Syntax.InternalSyntax.BaseListSyntax node)
            {
                Assert.True(false, "VisitBaseList should not have been called.");
            }

            public override void VisitSimpleBaseType(Syntax.InternalSyntax.SimpleBaseTypeSyntax node)
            {
                Assert.True(false, "VisitSimpleBaseType should not have been called.");
            }

            public override void VisitPrimaryConstructorBaseType(Syntax.InternalSyntax.PrimaryConstructorBaseTypeSyntax node)
            {
                Assert.True(false, "VisitPrimaryConstructorBaseType should not have been called.");
            }

            public override void VisitTypeParameterConstraintClause(Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax node)
            {
                Assert.True(false, "VisitTypeParameterConstraintClause should not have been called.");
            }

            public override void VisitConstructorConstraint(Syntax.InternalSyntax.ConstructorConstraintSyntax node)
            {
                Assert.True(false, "VisitConstructorConstraint should not have been called.");
            }

            public override void VisitClassOrStructConstraint(Syntax.InternalSyntax.ClassOrStructConstraintSyntax node)
            {
                Assert.True(false, "VisitClassOrStructConstraint should not have been called.");
            }

            public override void VisitTypeConstraint(Syntax.InternalSyntax.TypeConstraintSyntax node)
            {
                Assert.True(false, "VisitTypeConstraint should not have been called.");
            }

            public override void VisitDefaultConstraint(Syntax.InternalSyntax.DefaultConstraintSyntax node)
            {
                Assert.True(false, "VisitDefaultConstraint should not have been called.");
            }

            public override void VisitFieldDeclaration(Syntax.InternalSyntax.FieldDeclarationSyntax node)
            {
                Assert.True(false, "VisitFieldDeclaration should not have been called.");
            }

            public override void VisitEventFieldDeclaration(Syntax.InternalSyntax.EventFieldDeclarationSyntax node)
            {
                Assert.True(false, "VisitEventFieldDeclaration should not have been called.");
            }

            public override void VisitExplicitInterfaceSpecifier(Syntax.InternalSyntax.ExplicitInterfaceSpecifierSyntax node)
            {
                Assert.True(false, "VisitExplicitInterfaceSpecifier should not have been called.");
            }

            public override void VisitMethodDeclaration(Syntax.InternalSyntax.MethodDeclarationSyntax node)
            {
                Assert.True(false, "VisitMethodDeclaration should not have been called.");
            }

            public override void VisitOperatorDeclaration(Syntax.InternalSyntax.OperatorDeclarationSyntax node)
            {
                Assert.True(false, "VisitOperatorDeclaration should not have been called.");
            }

            public override void VisitConversionOperatorDeclaration(Syntax.InternalSyntax.ConversionOperatorDeclarationSyntax node)
            {
                Assert.True(false, "VisitConversionOperatorDeclaration should not have been called.");
            }

            public override void VisitConstructorDeclaration(Syntax.InternalSyntax.ConstructorDeclarationSyntax node)
            {
                Assert.True(false, "VisitConstructorDeclaration should not have been called.");
            }

            public override void VisitConstructorInitializer(Syntax.InternalSyntax.ConstructorInitializerSyntax node)
            {
                Assert.True(false, "VisitConstructorInitializer should not have been called.");
            }

            public override void VisitDestructorDeclaration(Syntax.InternalSyntax.DestructorDeclarationSyntax node)
            {
                Assert.True(false, "VisitDestructorDeclaration should not have been called.");
            }

            public override void VisitPropertyDeclaration(Syntax.InternalSyntax.PropertyDeclarationSyntax node)
            {
                Assert.True(false, "VisitPropertyDeclaration should not have been called.");
            }

            public override void VisitArrowExpressionClause(Syntax.InternalSyntax.ArrowExpressionClauseSyntax node)
            {
                Assert.True(false, "VisitArrowExpressionClause should not have been called.");
            }

            public override void VisitEventDeclaration(Syntax.InternalSyntax.EventDeclarationSyntax node)
            {
                Assert.True(false, "VisitEventDeclaration should not have been called.");
            }

            public override void VisitIndexerDeclaration(Syntax.InternalSyntax.IndexerDeclarationSyntax node)
            {
                Assert.True(false, "VisitIndexerDeclaration should not have been called.");
            }

            public override void VisitAccessorList(Syntax.InternalSyntax.AccessorListSyntax node)
            {
                Assert.True(false, "VisitAccessorList should not have been called.");
            }

            public override void VisitAccessorDeclaration(Syntax.InternalSyntax.AccessorDeclarationSyntax node)
            {
                Assert.True(false, "VisitAccessorDeclaration should not have been called.");
            }

            public override void VisitParameterList(Syntax.InternalSyntax.ParameterListSyntax node)
            {
                Assert.True(false, "VisitParameterList should not have been called.");
            }

            public override void VisitBracketedParameterList(Syntax.InternalSyntax.BracketedParameterListSyntax node)
            {
                Assert.True(false, "VisitBracketedParameterList should not have been called.");
            }

            public override void VisitParameter(Syntax.InternalSyntax.ParameterSyntax node)
            {
                Assert.True(false, "VisitParameter should not have been called.");
            }

            public override void VisitFunctionPointerParameter(Syntax.InternalSyntax.FunctionPointerParameterSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerParameter should not have been called.");
            }

            public override void VisitIncompleteMember(Syntax.InternalSyntax.IncompleteMemberSyntax node)
            {
                Assert.True(false, "VisitIncompleteMember should not have been called.");
            }

            public override void VisitSkippedTokensTrivia(Syntax.InternalSyntax.SkippedTokensTriviaSyntax node)
            {
                Assert.True(false, "VisitSkippedTokensTrivia should not have been called.");
            }

            public override void VisitDocumentationCommentTrivia(Syntax.InternalSyntax.DocumentationCommentTriviaSyntax node)
            {
                Assert.True(false, "VisitDocumentationCommentTrivia should not have been called.");
            }

            public override void VisitTypeCref(Syntax.InternalSyntax.TypeCrefSyntax node)
            {
                Assert.True(false, "VisitTypeCref should not have been called.");
            }

            public override void VisitQualifiedCref(Syntax.InternalSyntax.QualifiedCrefSyntax node)
            {
                Assert.True(false, "VisitQualifiedCref should not have been called.");
            }

            public override void VisitNameMemberCref(Syntax.InternalSyntax.NameMemberCrefSyntax node)
            {
                Assert.True(false, "VisitNameMemberCref should not have been called.");
            }

            public override void VisitIndexerMemberCref(Syntax.InternalSyntax.IndexerMemberCrefSyntax node)
            {
                Assert.True(false, "VisitIndexerMemberCref should not have been called.");
            }

            public override void VisitOperatorMemberCref(Syntax.InternalSyntax.OperatorMemberCrefSyntax node)
            {
                Assert.True(false, "VisitOperatorMemberCref should not have been called.");
            }

            public override void VisitConversionOperatorMemberCref(Syntax.InternalSyntax.ConversionOperatorMemberCrefSyntax node)
            {
                Assert.True(false, "VisitConversionOperatorMemberCref should not have been called.");
            }

            public override void VisitCrefParameterList(Syntax.InternalSyntax.CrefParameterListSyntax node)
            {
                Assert.True(false, "VisitCrefParameterList should not have been called.");
            }

            public override void VisitCrefBracketedParameterList(Syntax.InternalSyntax.CrefBracketedParameterListSyntax node)
            {
                Assert.True(false, "VisitCrefBracketedParameterList should not have been called.");
            }

            public override void VisitCrefParameter(Syntax.InternalSyntax.CrefParameterSyntax node)
            {
                Assert.True(false, "VisitCrefParameter should not have been called.");
            }

            public override void VisitXmlElement(Syntax.InternalSyntax.XmlElementSyntax node)
            {
                Assert.True(false, "VisitXmlElement should not have been called.");
            }

            public override void VisitXmlElementStartTag(Syntax.InternalSyntax.XmlElementStartTagSyntax node)
            {
                Assert.True(false, "VisitXmlElementStartTag should not have been called.");
            }

            public override void VisitXmlElementEndTag(Syntax.InternalSyntax.XmlElementEndTagSyntax node)
            {
                Assert.True(false, "VisitXmlElementEndTag should not have been called.");
            }

            public override void VisitXmlEmptyElement(Syntax.InternalSyntax.XmlEmptyElementSyntax node)
            {
                Assert.True(false, "VisitXmlEmptyElement should not have been called.");
            }

            public override void VisitXmlName(Syntax.InternalSyntax.XmlNameSyntax node)
            {
                Assert.True(false, "VisitXmlName should not have been called.");
            }

            public override void VisitXmlPrefix(Syntax.InternalSyntax.XmlPrefixSyntax node)
            {
                Assert.True(false, "VisitXmlPrefix should not have been called.");
            }

            public override void VisitXmlTextAttribute(Syntax.InternalSyntax.XmlTextAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlTextAttribute should not have been called.");
            }

            public override void VisitXmlCrefAttribute(Syntax.InternalSyntax.XmlCrefAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlCrefAttribute should not have been called.");
            }

            public override void VisitXmlNameAttribute(Syntax.InternalSyntax.XmlNameAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlNameAttribute should not have been called.");
            }

            public override void VisitXmlText(Syntax.InternalSyntax.XmlTextSyntax node)
            {
                Assert.True(false, "VisitXmlText should not have been called.");
            }

            public override void VisitXmlCDataSection(Syntax.InternalSyntax.XmlCDataSectionSyntax node)
            {
                Assert.True(false, "VisitXmlCDataSection should not have been called.");
            }

            public override void VisitXmlProcessingInstruction(Syntax.InternalSyntax.XmlProcessingInstructionSyntax node)
            {
                Assert.True(false, "VisitXmlProcessingInstruction should not have been called.");
            }

            public override void VisitXmlComment(Syntax.InternalSyntax.XmlCommentSyntax node)
            {
                Assert.True(false, "VisitXmlComment should not have been called.");
            }

            public override void VisitIfDirectiveTrivia(Syntax.InternalSyntax.IfDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitIfDirectiveTrivia should not have been called.");
            }

            public override void VisitElifDirectiveTrivia(Syntax.InternalSyntax.ElifDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitElifDirectiveTrivia should not have been called.");
            }

            public override void VisitElseDirectiveTrivia(Syntax.InternalSyntax.ElseDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitElseDirectiveTrivia should not have been called.");
            }

            public override void VisitEndIfDirectiveTrivia(Syntax.InternalSyntax.EndIfDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitEndIfDirectiveTrivia should not have been called.");
            }

            public override void VisitRegionDirectiveTrivia(Syntax.InternalSyntax.RegionDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitRegionDirectiveTrivia should not have been called.");
            }

            public override void VisitEndRegionDirectiveTrivia(Syntax.InternalSyntax.EndRegionDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitEndRegionDirectiveTrivia should not have been called.");
            }

            public override void VisitErrorDirectiveTrivia(Syntax.InternalSyntax.ErrorDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitErrorDirectiveTrivia should not have been called.");
            }

            public override void VisitWarningDirectiveTrivia(Syntax.InternalSyntax.WarningDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitWarningDirectiveTrivia should not have been called.");
            }

            public override void VisitBadDirectiveTrivia(Syntax.InternalSyntax.BadDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitBadDirectiveTrivia should not have been called.");
            }

            public override void VisitDefineDirectiveTrivia(Syntax.InternalSyntax.DefineDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitDefineDirectiveTrivia should not have been called.");
            }

            public override void VisitUndefDirectiveTrivia(Syntax.InternalSyntax.UndefDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitUndefDirectiveTrivia should not have been called.");
            }

            public override void VisitLineDirectiveTrivia(Syntax.InternalSyntax.LineDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLineDirectiveTrivia should not have been called.");
            }

            public override void VisitLineDirectivePosition(Syntax.InternalSyntax.LineDirectivePositionSyntax node)
            {
                Assert.True(false, "VisitLineDirectivePosition should not have been called.");
            }

            public override void VisitLineSpanDirectiveTrivia(Syntax.InternalSyntax.LineSpanDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLineSpanDirectiveTrivia should not have been called.");
            }

            public override void VisitPragmaWarningDirectiveTrivia(Syntax.InternalSyntax.PragmaWarningDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitPragmaWarningDirectiveTrivia should not have been called.");
            }

            public override void VisitPragmaChecksumDirectiveTrivia(Syntax.InternalSyntax.PragmaChecksumDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitPragmaChecksumDirectiveTrivia should not have been called.");
            }

            public override void VisitReferenceDirectiveTrivia(Syntax.InternalSyntax.ReferenceDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitReferenceDirectiveTrivia should not have been called.");
            }

            public override void VisitLoadDirectiveTrivia(Syntax.InternalSyntax.LoadDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLoadDirectiveTrivia should not have been called.");
            }

            public override void VisitShebangDirectiveTrivia(Syntax.InternalSyntax.ShebangDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitShebangDirectiveTrivia should not have been called.");
            }

            public override void VisitNullableDirectiveTrivia(Syntax.InternalSyntax.NullableDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitNullableDirectiveTrivia should not have been called.");
            }
        }
        internal class AssertOnEverythingButIdentifierNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIdentifierName(Syntax.InternalSyntax.IdentifierNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestIdentifierNameNodeVisitOnVisitor()
        {
            var node = GenerateIdentifierName();
            var visitor = new AssertOnEverythingButIdentifierNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIdentifierNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIdentifierName();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQualifiedName(Syntax.InternalSyntax.QualifiedNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestQualifiedNameNodeVisitOnVisitor()
        {
            var node = GenerateQualifiedName();
            var visitor = new AssertOnEverythingButQualifiedNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQualifiedNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQualifiedName();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGenericNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitGenericName(Syntax.InternalSyntax.GenericNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestGenericNameNodeVisitOnVisitor()
        {
            var node = GenerateGenericName();
            var visitor = new AssertOnEverythingButGenericNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestGenericNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateGenericName();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeArgumentListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeArgumentList(Syntax.InternalSyntax.TypeArgumentListSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitOnVisitor()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new AssertOnEverythingButTypeArgumentListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAliasQualifiedNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAliasQualifiedName(Syntax.InternalSyntax.AliasQualifiedNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitOnVisitor()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new AssertOnEverythingButAliasQualifiedNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPredefinedTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPredefinedType(Syntax.InternalSyntax.PredefinedTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitOnVisitor()
        {
            var node = GeneratePredefinedType();
            var visitor = new AssertOnEverythingButPredefinedTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePredefinedType();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArrayType(Syntax.InternalSyntax.ArrayTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestArrayTypeNodeVisitOnVisitor()
        {
            var node = GenerateArrayType();
            var visitor = new AssertOnEverythingButArrayTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArrayTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArrayType();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayRankSpecifierVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArrayRankSpecifier(Syntax.InternalSyntax.ArrayRankSpecifierSyntax node)
            {
            }
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitOnVisitor()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new AssertOnEverythingButArrayRankSpecifierVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPointerTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPointerType(Syntax.InternalSyntax.PointerTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestPointerTypeNodeVisitOnVisitor()
        {
            var node = GeneratePointerType();
            var visitor = new AssertOnEverythingButPointerTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPointerTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePointerType();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerType(Syntax.InternalSyntax.FunctionPointerTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new AssertOnEverythingButFunctionPointerTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerParameterList(Syntax.InternalSyntax.FunctionPointerParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new AssertOnEverythingButFunctionPointerParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerCallingConventionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerCallingConvention(Syntax.InternalSyntax.FunctionPointerCallingConventionSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerCallingConventionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerUnmanagedCallingConventionList(Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionListSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerUnmanagedCallingConvention(Syntax.InternalSyntax.FunctionPointerUnmanagedCallingConventionSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNullableType(Syntax.InternalSyntax.NullableTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestNullableTypeNodeVisitOnVisitor()
        {
            var node = GenerateNullableType();
            var visitor = new AssertOnEverythingButNullableTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNullableTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNullableType();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTupleType(Syntax.InternalSyntax.TupleTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestTupleTypeNodeVisitOnVisitor()
        {
            var node = GenerateTupleType();
            var visitor = new AssertOnEverythingButTupleTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTupleTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTupleType();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleElementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTupleElement(Syntax.InternalSyntax.TupleElementSyntax node)
            {
            }
        }

        [Fact]
        public void TestTupleElementNodeVisitOnVisitor()
        {
            var node = GenerateTupleElement();
            var visitor = new AssertOnEverythingButTupleElementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTupleElementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTupleElement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedTypeArgumentVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOmittedTypeArgument(Syntax.InternalSyntax.OmittedTypeArgumentSyntax node)
            {
            }
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitOnVisitor()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new AssertOnEverythingButOmittedTypeArgumentVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRefType(Syntax.InternalSyntax.RefTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestRefTypeNodeVisitOnVisitor()
        {
            var node = GenerateRefType();
            var visitor = new AssertOnEverythingButRefTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRefTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRefType();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParenthesizedExpression(Syntax.InternalSyntax.ParenthesizedExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitOnVisitor()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new AssertOnEverythingButParenthesizedExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTupleExpression(Syntax.InternalSyntax.TupleExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestTupleExpressionNodeVisitOnVisitor()
        {
            var node = GenerateTupleExpression();
            var visitor = new AssertOnEverythingButTupleExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTupleExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTupleExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrefixUnaryExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPrefixUnaryExpression(Syntax.InternalSyntax.PrefixUnaryExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitOnVisitor()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new AssertOnEverythingButPrefixUnaryExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAwaitExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAwaitExpression(Syntax.InternalSyntax.AwaitExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitOnVisitor()
        {
            var node = GenerateAwaitExpression();
            var visitor = new AssertOnEverythingButAwaitExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAwaitExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPostfixUnaryExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPostfixUnaryExpression(Syntax.InternalSyntax.PostfixUnaryExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitOnVisitor()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new AssertOnEverythingButPostfixUnaryExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberAccessExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitMemberAccessExpression(Syntax.InternalSyntax.MemberAccessExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitOnVisitor()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new AssertOnEverythingButMemberAccessExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalAccessExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConditionalAccessExpression(Syntax.InternalSyntax.ConditionalAccessExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitOnVisitor()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new AssertOnEverythingButConditionalAccessExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberBindingExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitMemberBindingExpression(Syntax.InternalSyntax.MemberBindingExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitOnVisitor()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new AssertOnEverythingButMemberBindingExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementBindingExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElementBindingExpression(Syntax.InternalSyntax.ElementBindingExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitOnVisitor()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new AssertOnEverythingButElementBindingExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRangeExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRangeExpression(Syntax.InternalSyntax.RangeExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestRangeExpressionNodeVisitOnVisitor()
        {
            var node = GenerateRangeExpression();
            var visitor = new AssertOnEverythingButRangeExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRangeExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRangeExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitElementAccessVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitImplicitElementAccess(Syntax.InternalSyntax.ImplicitElementAccessSyntax node)
            {
            }
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitOnVisitor()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new AssertOnEverythingButImplicitElementAccessVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBinaryExpression(Syntax.InternalSyntax.BinaryExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitOnVisitor()
        {
            var node = GenerateBinaryExpression();
            var visitor = new AssertOnEverythingButBinaryExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBinaryExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAssignmentExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAssignmentExpression(Syntax.InternalSyntax.AssignmentExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitOnVisitor()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new AssertOnEverythingButAssignmentExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConditionalExpression(Syntax.InternalSyntax.ConditionalExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitOnVisitor()
        {
            var node = GenerateConditionalExpression();
            var visitor = new AssertOnEverythingButConditionalExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConditionalExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThisExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitThisExpression(Syntax.InternalSyntax.ThisExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestThisExpressionNodeVisitOnVisitor()
        {
            var node = GenerateThisExpression();
            var visitor = new AssertOnEverythingButThisExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestThisExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateThisExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBaseExpression(Syntax.InternalSyntax.BaseExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestBaseExpressionNodeVisitOnVisitor()
        {
            var node = GenerateBaseExpression();
            var visitor = new AssertOnEverythingButBaseExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBaseExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBaseExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLiteralExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLiteralExpression(Syntax.InternalSyntax.LiteralExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitOnVisitor()
        {
            var node = GenerateLiteralExpression();
            var visitor = new AssertOnEverythingButLiteralExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLiteralExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMakeRefExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitMakeRefExpression(Syntax.InternalSyntax.MakeRefExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitOnVisitor()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new AssertOnEverythingButMakeRefExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRefTypeExpression(Syntax.InternalSyntax.RefTypeExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitOnVisitor()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new AssertOnEverythingButRefTypeExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefValueExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRefValueExpression(Syntax.InternalSyntax.RefValueExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitOnVisitor()
        {
            var node = GenerateRefValueExpression();
            var visitor = new AssertOnEverythingButRefValueExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRefValueExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCheckedExpression(Syntax.InternalSyntax.CheckedExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitOnVisitor()
        {
            var node = GenerateCheckedExpression();
            var visitor = new AssertOnEverythingButCheckedExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCheckedExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDefaultExpression(Syntax.InternalSyntax.DefaultExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitOnVisitor()
        {
            var node = GenerateDefaultExpression();
            var visitor = new AssertOnEverythingButDefaultExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDefaultExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeOfExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeOfExpression(Syntax.InternalSyntax.TypeOfExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitOnVisitor()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new AssertOnEverythingButTypeOfExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSizeOfExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSizeOfExpression(Syntax.InternalSyntax.SizeOfExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitOnVisitor()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new AssertOnEverythingButSizeOfExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInvocationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInvocationExpression(Syntax.InternalSyntax.InvocationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateInvocationExpression();
            var visitor = new AssertOnEverythingButInvocationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInvocationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementAccessExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElementAccessExpression(Syntax.InternalSyntax.ElementAccessExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitOnVisitor()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new AssertOnEverythingButElementAccessExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArgumentList(Syntax.InternalSyntax.ArgumentListSyntax node)
            {
            }
        }

        [Fact]
        public void TestArgumentListNodeVisitOnVisitor()
        {
            var node = GenerateArgumentList();
            var visitor = new AssertOnEverythingButArgumentListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArgumentListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArgumentList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedArgumentListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBracketedArgumentList(Syntax.InternalSyntax.BracketedArgumentListSyntax node)
            {
            }
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitOnVisitor()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new AssertOnEverythingButBracketedArgumentListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArgument(Syntax.InternalSyntax.ArgumentSyntax node)
            {
            }
        }

        [Fact]
        public void TestArgumentNodeVisitOnVisitor()
        {
            var node = GenerateArgument();
            var visitor = new AssertOnEverythingButArgumentVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArgumentNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArgument();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionColonVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitExpressionColon(Syntax.InternalSyntax.ExpressionColonSyntax node)
            {
            }
        }

        [Fact]
        public void TestExpressionColonNodeVisitOnVisitor()
        {
            var node = GenerateExpressionColon();
            var visitor = new AssertOnEverythingButExpressionColonVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestExpressionColonNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateExpressionColon();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameColonVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNameColon(Syntax.InternalSyntax.NameColonSyntax node)
            {
            }
        }

        [Fact]
        public void TestNameColonNodeVisitOnVisitor()
        {
            var node = GenerateNameColon();
            var visitor = new AssertOnEverythingButNameColonVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNameColonNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNameColon();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDeclarationExpression(Syntax.InternalSyntax.DeclarationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new AssertOnEverythingButDeclarationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCastExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCastExpression(Syntax.InternalSyntax.CastExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestCastExpressionNodeVisitOnVisitor()
        {
            var node = GenerateCastExpression();
            var visitor = new AssertOnEverythingButCastExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCastExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCastExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousMethodExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAnonymousMethodExpression(Syntax.InternalSyntax.AnonymousMethodExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitOnVisitor()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new AssertOnEverythingButAnonymousMethodExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleLambdaExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSimpleLambdaExpression(Syntax.InternalSyntax.SimpleLambdaExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitOnVisitor()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new AssertOnEverythingButSimpleLambdaExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRefExpression(Syntax.InternalSyntax.RefExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestRefExpressionNodeVisitOnVisitor()
        {
            var node = GenerateRefExpression();
            var visitor = new AssertOnEverythingButRefExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRefExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRefExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParenthesizedLambdaExpression(Syntax.InternalSyntax.ParenthesizedLambdaExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitOnVisitor()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInitializerExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInitializerExpression(Syntax.InternalSyntax.InitializerExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitOnVisitor()
        {
            var node = GenerateInitializerExpression();
            var visitor = new AssertOnEverythingButInitializerExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInitializerExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitImplicitObjectCreationExpression(Syntax.InternalSyntax.ImplicitObjectCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButObjectCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitObjectCreationExpression(Syntax.InternalSyntax.ObjectCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new AssertOnEverythingButObjectCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWithExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWithExpression(Syntax.InternalSyntax.WithExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestWithExpressionNodeVisitOnVisitor()
        {
            var node = GenerateWithExpression();
            var visitor = new AssertOnEverythingButWithExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWithExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWithExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAnonymousObjectMemberDeclarator(Syntax.InternalSyntax.AnonymousObjectMemberDeclaratorSyntax node)
            {
            }
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitOnVisitor()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAnonymousObjectCreationExpression(Syntax.InternalSyntax.AnonymousObjectCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArrayCreationExpression(Syntax.InternalSyntax.ArrayCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new AssertOnEverythingButArrayCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitImplicitArrayCreationExpression(Syntax.InternalSyntax.ImplicitArrayCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitStackAllocArrayCreationExpression(Syntax.InternalSyntax.StackAllocArrayCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitImplicitStackAllocArrayCreationExpression(Syntax.InternalSyntax.ImplicitStackAllocArrayCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQueryExpression(Syntax.InternalSyntax.QueryExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestQueryExpressionNodeVisitOnVisitor()
        {
            var node = GenerateQueryExpression();
            var visitor = new AssertOnEverythingButQueryExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQueryExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQueryExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryBodyVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQueryBody(Syntax.InternalSyntax.QueryBodySyntax node)
            {
            }
        }

        [Fact]
        public void TestQueryBodyNodeVisitOnVisitor()
        {
            var node = GenerateQueryBody();
            var visitor = new AssertOnEverythingButQueryBodyVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQueryBodyNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQueryBody();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFromClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFromClause(Syntax.InternalSyntax.FromClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestFromClauseNodeVisitOnVisitor()
        {
            var node = GenerateFromClause();
            var visitor = new AssertOnEverythingButFromClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFromClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFromClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLetClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLetClause(Syntax.InternalSyntax.LetClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestLetClauseNodeVisitOnVisitor()
        {
            var node = GenerateLetClause();
            var visitor = new AssertOnEverythingButLetClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLetClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLetClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitJoinClause(Syntax.InternalSyntax.JoinClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestJoinClauseNodeVisitOnVisitor()
        {
            var node = GenerateJoinClause();
            var visitor = new AssertOnEverythingButJoinClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestJoinClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateJoinClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinIntoClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitJoinIntoClause(Syntax.InternalSyntax.JoinIntoClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitOnVisitor()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new AssertOnEverythingButJoinIntoClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhereClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWhereClause(Syntax.InternalSyntax.WhereClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestWhereClauseNodeVisitOnVisitor()
        {
            var node = GenerateWhereClause();
            var visitor = new AssertOnEverythingButWhereClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWhereClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWhereClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderByClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOrderByClause(Syntax.InternalSyntax.OrderByClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestOrderByClauseNodeVisitOnVisitor()
        {
            var node = GenerateOrderByClause();
            var visitor = new AssertOnEverythingButOrderByClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOrderByClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOrderByClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderingVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOrdering(Syntax.InternalSyntax.OrderingSyntax node)
            {
            }
        }

        [Fact]
        public void TestOrderingNodeVisitOnVisitor()
        {
            var node = GenerateOrdering();
            var visitor = new AssertOnEverythingButOrderingVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOrderingNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOrdering();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSelectClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSelectClause(Syntax.InternalSyntax.SelectClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestSelectClauseNodeVisitOnVisitor()
        {
            var node = GenerateSelectClause();
            var visitor = new AssertOnEverythingButSelectClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSelectClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSelectClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGroupClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitGroupClause(Syntax.InternalSyntax.GroupClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestGroupClauseNodeVisitOnVisitor()
        {
            var node = GenerateGroupClause();
            var visitor = new AssertOnEverythingButGroupClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestGroupClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateGroupClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryContinuationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQueryContinuation(Syntax.InternalSyntax.QueryContinuationSyntax node)
            {
            }
        }

        [Fact]
        public void TestQueryContinuationNodeVisitOnVisitor()
        {
            var node = GenerateQueryContinuation();
            var visitor = new AssertOnEverythingButQueryContinuationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQueryContinuationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQueryContinuation();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedArraySizeExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOmittedArraySizeExpression(Syntax.InternalSyntax.OmittedArraySizeExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitOnVisitor()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new AssertOnEverythingButOmittedArraySizeExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolatedStringExpression(Syntax.InternalSyntax.InterpolatedStringExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitOnVisitor()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new AssertOnEverythingButInterpolatedStringExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIsPatternExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIsPatternExpression(Syntax.InternalSyntax.IsPatternExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitOnVisitor()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new AssertOnEverythingButIsPatternExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitThrowExpression(Syntax.InternalSyntax.ThrowExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestThrowExpressionNodeVisitOnVisitor()
        {
            var node = GenerateThrowExpression();
            var visitor = new AssertOnEverythingButThrowExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestThrowExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateThrowExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhenClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWhenClause(Syntax.InternalSyntax.WhenClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestWhenClauseNodeVisitOnVisitor()
        {
            var node = GenerateWhenClause();
            var visitor = new AssertOnEverythingButWhenClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWhenClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWhenClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDiscardPattern(Syntax.InternalSyntax.DiscardPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestDiscardPatternNodeVisitOnVisitor()
        {
            var node = GenerateDiscardPattern();
            var visitor = new AssertOnEverythingButDiscardPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDiscardPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDiscardPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDeclarationPattern(Syntax.InternalSyntax.DeclarationPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitOnVisitor()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new AssertOnEverythingButDeclarationPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVarPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitVarPattern(Syntax.InternalSyntax.VarPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestVarPatternNodeVisitOnVisitor()
        {
            var node = GenerateVarPattern();
            var visitor = new AssertOnEverythingButVarPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestVarPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateVarPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecursivePatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRecursivePattern(Syntax.InternalSyntax.RecursivePatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestRecursivePatternNodeVisitOnVisitor()
        {
            var node = GenerateRecursivePattern();
            var visitor = new AssertOnEverythingButRecursivePatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRecursivePatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRecursivePattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPositionalPatternClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPositionalPatternClause(Syntax.InternalSyntax.PositionalPatternClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitOnVisitor()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new AssertOnEverythingButPositionalPatternClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyPatternClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPropertyPatternClause(Syntax.InternalSyntax.PropertyPatternClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitOnVisitor()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new AssertOnEverythingButPropertyPatternClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSubpatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSubpattern(Syntax.InternalSyntax.SubpatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestSubpatternNodeVisitOnVisitor()
        {
            var node = GenerateSubpattern();
            var visitor = new AssertOnEverythingButSubpatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSubpatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSubpattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstantPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConstantPattern(Syntax.InternalSyntax.ConstantPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestConstantPatternNodeVisitOnVisitor()
        {
            var node = GenerateConstantPattern();
            var visitor = new AssertOnEverythingButConstantPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConstantPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConstantPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParenthesizedPattern(Syntax.InternalSyntax.ParenthesizedPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitOnVisitor()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new AssertOnEverythingButParenthesizedPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRelationalPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRelationalPattern(Syntax.InternalSyntax.RelationalPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestRelationalPatternNodeVisitOnVisitor()
        {
            var node = GenerateRelationalPattern();
            var visitor = new AssertOnEverythingButRelationalPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRelationalPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRelationalPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypePatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypePattern(Syntax.InternalSyntax.TypePatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypePatternNodeVisitOnVisitor()
        {
            var node = GenerateTypePattern();
            var visitor = new AssertOnEverythingButTypePatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypePatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypePattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBinaryPattern(Syntax.InternalSyntax.BinaryPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestBinaryPatternNodeVisitOnVisitor()
        {
            var node = GenerateBinaryPattern();
            var visitor = new AssertOnEverythingButBinaryPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBinaryPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBinaryPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnaryPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUnaryPattern(Syntax.InternalSyntax.UnaryPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestUnaryPatternNodeVisitOnVisitor()
        {
            var node = GenerateUnaryPattern();
            var visitor = new AssertOnEverythingButUnaryPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUnaryPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUnaryPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButListPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitListPattern(Syntax.InternalSyntax.ListPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestListPatternNodeVisitOnVisitor()
        {
            var node = GenerateListPattern();
            var visitor = new AssertOnEverythingButListPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestListPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateListPattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSlicePatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSlicePattern(Syntax.InternalSyntax.SlicePatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestSlicePatternNodeVisitOnVisitor()
        {
            var node = GenerateSlicePattern();
            var visitor = new AssertOnEverythingButSlicePatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSlicePatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSlicePattern();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringTextVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolatedStringText(Syntax.InternalSyntax.InterpolatedStringTextSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitOnVisitor()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new AssertOnEverythingButInterpolatedStringTextVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolation(Syntax.InternalSyntax.InterpolationSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolationNodeVisitOnVisitor()
        {
            var node = GenerateInterpolation();
            var visitor = new AssertOnEverythingButInterpolationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolation();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationAlignmentClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolationAlignmentClause(Syntax.InternalSyntax.InterpolationAlignmentClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitOnVisitor()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new AssertOnEverythingButInterpolationAlignmentClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationFormatClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolationFormatClause(Syntax.InternalSyntax.InterpolationFormatClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitOnVisitor()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new AssertOnEverythingButInterpolationFormatClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGlobalStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitGlobalStatement(Syntax.InternalSyntax.GlobalStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestGlobalStatementNodeVisitOnVisitor()
        {
            var node = GenerateGlobalStatement();
            var visitor = new AssertOnEverythingButGlobalStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestGlobalStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateGlobalStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBlockVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBlock(Syntax.InternalSyntax.BlockSyntax node)
            {
            }
        }

        [Fact]
        public void TestBlockNodeVisitOnVisitor()
        {
            var node = GenerateBlock();
            var visitor = new AssertOnEverythingButBlockVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBlockNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBlock();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalFunctionStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLocalFunctionStatement(Syntax.InternalSyntax.LocalFunctionStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitOnVisitor()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new AssertOnEverythingButLocalFunctionStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalDeclarationStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLocalDeclarationStatement(Syntax.InternalSyntax.LocalDeclarationStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitOnVisitor()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new AssertOnEverythingButLocalDeclarationStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitVariableDeclaration(Syntax.InternalSyntax.VariableDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new AssertOnEverythingButVariableDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclaratorVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitVariableDeclarator(Syntax.InternalSyntax.VariableDeclaratorSyntax node)
            {
            }
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitOnVisitor()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new AssertOnEverythingButVariableDeclaratorVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEqualsValueClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEqualsValueClause(Syntax.InternalSyntax.EqualsValueClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitOnVisitor()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new AssertOnEverythingButEqualsValueClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSingleVariableDesignationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSingleVariableDesignation(Syntax.InternalSyntax.SingleVariableDesignationSyntax node)
            {
            }
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitOnVisitor()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new AssertOnEverythingButSingleVariableDesignationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardDesignationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDiscardDesignation(Syntax.InternalSyntax.DiscardDesignationSyntax node)
            {
            }
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitOnVisitor()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new AssertOnEverythingButDiscardDesignationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedVariableDesignationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParenthesizedVariableDesignation(Syntax.InternalSyntax.ParenthesizedVariableDesignationSyntax node)
            {
            }
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitOnVisitor()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new AssertOnEverythingButParenthesizedVariableDesignationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitExpressionStatement(Syntax.InternalSyntax.ExpressionStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestExpressionStatementNodeVisitOnVisitor()
        {
            var node = GenerateExpressionStatement();
            var visitor = new AssertOnEverythingButExpressionStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestExpressionStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateExpressionStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEmptyStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEmptyStatement(Syntax.InternalSyntax.EmptyStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestEmptyStatementNodeVisitOnVisitor()
        {
            var node = GenerateEmptyStatement();
            var visitor = new AssertOnEverythingButEmptyStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEmptyStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEmptyStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLabeledStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLabeledStatement(Syntax.InternalSyntax.LabeledStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestLabeledStatementNodeVisitOnVisitor()
        {
            var node = GenerateLabeledStatement();
            var visitor = new AssertOnEverythingButLabeledStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLabeledStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLabeledStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGotoStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitGotoStatement(Syntax.InternalSyntax.GotoStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestGotoStatementNodeVisitOnVisitor()
        {
            var node = GenerateGotoStatement();
            var visitor = new AssertOnEverythingButGotoStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestGotoStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateGotoStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBreakStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBreakStatement(Syntax.InternalSyntax.BreakStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestBreakStatementNodeVisitOnVisitor()
        {
            var node = GenerateBreakStatement();
            var visitor = new AssertOnEverythingButBreakStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBreakStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBreakStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButContinueStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitContinueStatement(Syntax.InternalSyntax.ContinueStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestContinueStatementNodeVisitOnVisitor()
        {
            var node = GenerateContinueStatement();
            var visitor = new AssertOnEverythingButContinueStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestContinueStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateContinueStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReturnStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitReturnStatement(Syntax.InternalSyntax.ReturnStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestReturnStatementNodeVisitOnVisitor()
        {
            var node = GenerateReturnStatement();
            var visitor = new AssertOnEverythingButReturnStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestReturnStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateReturnStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitThrowStatement(Syntax.InternalSyntax.ThrowStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestThrowStatementNodeVisitOnVisitor()
        {
            var node = GenerateThrowStatement();
            var visitor = new AssertOnEverythingButThrowStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestThrowStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateThrowStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButYieldStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitYieldStatement(Syntax.InternalSyntax.YieldStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestYieldStatementNodeVisitOnVisitor()
        {
            var node = GenerateYieldStatement();
            var visitor = new AssertOnEverythingButYieldStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestYieldStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateYieldStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhileStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWhileStatement(Syntax.InternalSyntax.WhileStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestWhileStatementNodeVisitOnVisitor()
        {
            var node = GenerateWhileStatement();
            var visitor = new AssertOnEverythingButWhileStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWhileStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWhileStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDoStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDoStatement(Syntax.InternalSyntax.DoStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestDoStatementNodeVisitOnVisitor()
        {
            var node = GenerateDoStatement();
            var visitor = new AssertOnEverythingButDoStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDoStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDoStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitForStatement(Syntax.InternalSyntax.ForStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestForStatementNodeVisitOnVisitor()
        {
            var node = GenerateForStatement();
            var visitor = new AssertOnEverythingButForStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestForStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateForStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitForEachStatement(Syntax.InternalSyntax.ForEachStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestForEachStatementNodeVisitOnVisitor()
        {
            var node = GenerateForEachStatement();
            var visitor = new AssertOnEverythingButForEachStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestForEachStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateForEachStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachVariableStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitForEachVariableStatement(Syntax.InternalSyntax.ForEachVariableStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitOnVisitor()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new AssertOnEverythingButForEachVariableStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUsingStatement(Syntax.InternalSyntax.UsingStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestUsingStatementNodeVisitOnVisitor()
        {
            var node = GenerateUsingStatement();
            var visitor = new AssertOnEverythingButUsingStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUsingStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUsingStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFixedStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFixedStatement(Syntax.InternalSyntax.FixedStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestFixedStatementNodeVisitOnVisitor()
        {
            var node = GenerateFixedStatement();
            var visitor = new AssertOnEverythingButFixedStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFixedStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFixedStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCheckedStatement(Syntax.InternalSyntax.CheckedStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestCheckedStatementNodeVisitOnVisitor()
        {
            var node = GenerateCheckedStatement();
            var visitor = new AssertOnEverythingButCheckedStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCheckedStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCheckedStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnsafeStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUnsafeStatement(Syntax.InternalSyntax.UnsafeStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitOnVisitor()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new AssertOnEverythingButUnsafeStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLockStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLockStatement(Syntax.InternalSyntax.LockStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestLockStatementNodeVisitOnVisitor()
        {
            var node = GenerateLockStatement();
            var visitor = new AssertOnEverythingButLockStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLockStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLockStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIfStatement(Syntax.InternalSyntax.IfStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestIfStatementNodeVisitOnVisitor()
        {
            var node = GenerateIfStatement();
            var visitor = new AssertOnEverythingButIfStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIfStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIfStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElseClause(Syntax.InternalSyntax.ElseClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestElseClauseNodeVisitOnVisitor()
        {
            var node = GenerateElseClause();
            var visitor = new AssertOnEverythingButElseClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElseClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElseClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSwitchStatement(Syntax.InternalSyntax.SwitchStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestSwitchStatementNodeVisitOnVisitor()
        {
            var node = GenerateSwitchStatement();
            var visitor = new AssertOnEverythingButSwitchStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSwitchStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSwitchStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchSectionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSwitchSection(Syntax.InternalSyntax.SwitchSectionSyntax node)
            {
            }
        }

        [Fact]
        public void TestSwitchSectionNodeVisitOnVisitor()
        {
            var node = GenerateSwitchSection();
            var visitor = new AssertOnEverythingButSwitchSectionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSwitchSectionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSwitchSection();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCasePatternSwitchLabelVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCasePatternSwitchLabel(Syntax.InternalSyntax.CasePatternSwitchLabelSyntax node)
            {
            }
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitOnVisitor()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new AssertOnEverythingButCasePatternSwitchLabelVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCaseSwitchLabelVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCaseSwitchLabel(Syntax.InternalSyntax.CaseSwitchLabelSyntax node)
            {
            }
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitOnVisitor()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new AssertOnEverythingButCaseSwitchLabelVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultSwitchLabelVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDefaultSwitchLabel(Syntax.InternalSyntax.DefaultSwitchLabelSyntax node)
            {
            }
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitOnVisitor()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new AssertOnEverythingButDefaultSwitchLabelVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSwitchExpression(Syntax.InternalSyntax.SwitchExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitOnVisitor()
        {
            var node = GenerateSwitchExpression();
            var visitor = new AssertOnEverythingButSwitchExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSwitchExpression();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionArmVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSwitchExpressionArm(Syntax.InternalSyntax.SwitchExpressionArmSyntax node)
            {
            }
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitOnVisitor()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new AssertOnEverythingButSwitchExpressionArmVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTryStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTryStatement(Syntax.InternalSyntax.TryStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestTryStatementNodeVisitOnVisitor()
        {
            var node = GenerateTryStatement();
            var visitor = new AssertOnEverythingButTryStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTryStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTryStatement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCatchClause(Syntax.InternalSyntax.CatchClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestCatchClauseNodeVisitOnVisitor()
        {
            var node = GenerateCatchClause();
            var visitor = new AssertOnEverythingButCatchClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCatchClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCatchClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCatchDeclaration(Syntax.InternalSyntax.CatchDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new AssertOnEverythingButCatchDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchFilterClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCatchFilterClause(Syntax.InternalSyntax.CatchFilterClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitOnVisitor()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new AssertOnEverythingButCatchFilterClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFinallyClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFinallyClause(Syntax.InternalSyntax.FinallyClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestFinallyClauseNodeVisitOnVisitor()
        {
            var node = GenerateFinallyClause();
            var visitor = new AssertOnEverythingButFinallyClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFinallyClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFinallyClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCompilationUnitVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCompilationUnit(Syntax.InternalSyntax.CompilationUnitSyntax node)
            {
            }
        }

        [Fact]
        public void TestCompilationUnitNodeVisitOnVisitor()
        {
            var node = GenerateCompilationUnit();
            var visitor = new AssertOnEverythingButCompilationUnitVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCompilationUnitNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCompilationUnit();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExternAliasDirectiveVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitExternAliasDirective(Syntax.InternalSyntax.ExternAliasDirectiveSyntax node)
            {
            }
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitOnVisitor()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new AssertOnEverythingButExternAliasDirectiveVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingDirectiveVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUsingDirective(Syntax.InternalSyntax.UsingDirectiveSyntax node)
            {
            }
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitOnVisitor()
        {
            var node = GenerateUsingDirective();
            var visitor = new AssertOnEverythingButUsingDirectiveVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUsingDirective();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNamespaceDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNamespaceDeclaration(Syntax.InternalSyntax.NamespaceDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new AssertOnEverythingButNamespaceDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFileScopedNamespaceDeclaration(Syntax.InternalSyntax.FileScopedNamespaceDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttributeList(Syntax.InternalSyntax.AttributeListSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeListNodeVisitOnVisitor()
        {
            var node = GenerateAttributeList();
            var visitor = new AssertOnEverythingButAttributeListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttributeList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeTargetSpecifierVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttributeTargetSpecifier(Syntax.InternalSyntax.AttributeTargetSpecifierSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitOnVisitor()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new AssertOnEverythingButAttributeTargetSpecifierVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttribute(Syntax.InternalSyntax.AttributeSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeNodeVisitOnVisitor()
        {
            var node = GenerateAttribute();
            var visitor = new AssertOnEverythingButAttributeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttribute();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttributeArgumentList(Syntax.InternalSyntax.AttributeArgumentListSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitOnVisitor()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new AssertOnEverythingButAttributeArgumentListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttributeArgument(Syntax.InternalSyntax.AttributeArgumentSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitOnVisitor()
        {
            var node = GenerateAttributeArgument();
            var visitor = new AssertOnEverythingButAttributeArgumentVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttributeArgument();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameEqualsVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNameEquals(Syntax.InternalSyntax.NameEqualsSyntax node)
            {
            }
        }

        [Fact]
        public void TestNameEqualsNodeVisitOnVisitor()
        {
            var node = GenerateNameEquals();
            var visitor = new AssertOnEverythingButNameEqualsVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNameEqualsNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNameEquals();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeParameterList(Syntax.InternalSyntax.TypeParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeParameterListNodeVisitOnVisitor()
        {
            var node = GenerateTypeParameterList();
            var visitor = new AssertOnEverythingButTypeParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeParameter(Syntax.InternalSyntax.TypeParameterSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeParameterNodeVisitOnVisitor()
        {
            var node = GenerateTypeParameter();
            var visitor = new AssertOnEverythingButTypeParameterVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeParameterNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeParameter();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitClassDeclaration(Syntax.InternalSyntax.ClassDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestClassDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateClassDeclaration();
            var visitor = new AssertOnEverythingButClassDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestClassDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateClassDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStructDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitStructDeclaration(Syntax.InternalSyntax.StructDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestStructDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateStructDeclaration();
            var visitor = new AssertOnEverythingButStructDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestStructDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateStructDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterfaceDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterfaceDeclaration(Syntax.InternalSyntax.InterfaceDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new AssertOnEverythingButInterfaceDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecordDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRecordDeclaration(Syntax.InternalSyntax.RecordDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new AssertOnEverythingButRecordDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEnumDeclaration(Syntax.InternalSyntax.EnumDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new AssertOnEverythingButEnumDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDelegateDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDelegateDeclaration(Syntax.InternalSyntax.DelegateDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new AssertOnEverythingButDelegateDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumMemberDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEnumMemberDeclaration(Syntax.InternalSyntax.EnumMemberDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new AssertOnEverythingButEnumMemberDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBaseList(Syntax.InternalSyntax.BaseListSyntax node)
            {
            }
        }

        [Fact]
        public void TestBaseListNodeVisitOnVisitor()
        {
            var node = GenerateBaseList();
            var visitor = new AssertOnEverythingButBaseListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBaseListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBaseList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleBaseTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSimpleBaseType(Syntax.InternalSyntax.SimpleBaseTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitOnVisitor()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new AssertOnEverythingButSimpleBaseTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPrimaryConstructorBaseType(Syntax.InternalSyntax.PrimaryConstructorBaseTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitOnVisitor()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterConstraintClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeParameterConstraintClause(Syntax.InternalSyntax.TypeParameterConstraintClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitOnVisitor()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new AssertOnEverythingButTypeParameterConstraintClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorConstraintVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConstructorConstraint(Syntax.InternalSyntax.ConstructorConstraintSyntax node)
            {
            }
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitOnVisitor()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new AssertOnEverythingButConstructorConstraintVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassOrStructConstraintVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitClassOrStructConstraint(Syntax.InternalSyntax.ClassOrStructConstraintSyntax node)
            {
            }
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitOnVisitor()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new AssertOnEverythingButClassOrStructConstraintVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeConstraintVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeConstraint(Syntax.InternalSyntax.TypeConstraintSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeConstraintNodeVisitOnVisitor()
        {
            var node = GenerateTypeConstraint();
            var visitor = new AssertOnEverythingButTypeConstraintVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeConstraintNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeConstraint();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultConstraintVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDefaultConstraint(Syntax.InternalSyntax.DefaultConstraintSyntax node)
            {
            }
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitOnVisitor()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new AssertOnEverythingButDefaultConstraintVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFieldDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFieldDeclaration(Syntax.InternalSyntax.FieldDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new AssertOnEverythingButFieldDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventFieldDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEventFieldDeclaration(Syntax.InternalSyntax.EventFieldDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new AssertOnEverythingButEventFieldDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitExplicitInterfaceSpecifier(Syntax.InternalSyntax.ExplicitInterfaceSpecifierSyntax node)
            {
            }
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitOnVisitor()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMethodDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitMethodDeclaration(Syntax.InternalSyntax.MethodDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new AssertOnEverythingButMethodDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOperatorDeclaration(Syntax.InternalSyntax.OperatorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new AssertOnEverythingButOperatorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConversionOperatorDeclaration(Syntax.InternalSyntax.ConversionOperatorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new AssertOnEverythingButConversionOperatorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConstructorDeclaration(Syntax.InternalSyntax.ConstructorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new AssertOnEverythingButConstructorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorInitializerVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConstructorInitializer(Syntax.InternalSyntax.ConstructorInitializerSyntax node)
            {
            }
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitOnVisitor()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new AssertOnEverythingButConstructorInitializerVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDestructorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDestructorDeclaration(Syntax.InternalSyntax.DestructorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new AssertOnEverythingButDestructorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPropertyDeclaration(Syntax.InternalSyntax.PropertyDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitOnVisitor()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new AssertOnEverythingButPropertyDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrowExpressionClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArrowExpressionClause(Syntax.InternalSyntax.ArrowExpressionClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitOnVisitor()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new AssertOnEverythingButArrowExpressionClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEventDeclaration(Syntax.InternalSyntax.EventDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestEventDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateEventDeclaration();
            var visitor = new AssertOnEverythingButEventDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEventDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEventDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIndexerDeclaration(Syntax.InternalSyntax.IndexerDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new AssertOnEverythingButIndexerDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAccessorList(Syntax.InternalSyntax.AccessorListSyntax node)
            {
            }
        }

        [Fact]
        public void TestAccessorListNodeVisitOnVisitor()
        {
            var node = GenerateAccessorList();
            var visitor = new AssertOnEverythingButAccessorListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAccessorListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAccessorList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAccessorDeclaration(Syntax.InternalSyntax.AccessorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new AssertOnEverythingButAccessorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParameterList(Syntax.InternalSyntax.ParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestParameterListNodeVisitOnVisitor()
        {
            var node = GenerateParameterList();
            var visitor = new AssertOnEverythingButParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBracketedParameterList(Syntax.InternalSyntax.BracketedParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitOnVisitor()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new AssertOnEverythingButBracketedParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParameter(Syntax.InternalSyntax.ParameterSyntax node)
            {
            }
        }

        [Fact]
        public void TestParameterNodeVisitOnVisitor()
        {
            var node = GenerateParameter();
            var visitor = new AssertOnEverythingButParameterVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParameterNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParameter();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerParameter(Syntax.InternalSyntax.FunctionPointerParameterSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new AssertOnEverythingButFunctionPointerParameterVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIncompleteMemberVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIncompleteMember(Syntax.InternalSyntax.IncompleteMemberSyntax node)
            {
            }
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitOnVisitor()
        {
            var node = GenerateIncompleteMember();
            var visitor = new AssertOnEverythingButIncompleteMemberVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIncompleteMember();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSkippedTokensTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSkippedTokensTrivia(Syntax.InternalSyntax.SkippedTokensTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitOnVisitor()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new AssertOnEverythingButSkippedTokensTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDocumentationCommentTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDocumentationCommentTrivia(Syntax.InternalSyntax.DocumentationCommentTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitOnVisitor()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new AssertOnEverythingButDocumentationCommentTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeCref(Syntax.InternalSyntax.TypeCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeCrefNodeVisitOnVisitor()
        {
            var node = GenerateTypeCref();
            var visitor = new AssertOnEverythingButTypeCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeCref();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQualifiedCref(Syntax.InternalSyntax.QualifiedCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitOnVisitor()
        {
            var node = GenerateQualifiedCref();
            var visitor = new AssertOnEverythingButQualifiedCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQualifiedCref();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameMemberCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNameMemberCref(Syntax.InternalSyntax.NameMemberCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitOnVisitor()
        {
            var node = GenerateNameMemberCref();
            var visitor = new AssertOnEverythingButNameMemberCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNameMemberCref();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerMemberCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIndexerMemberCref(Syntax.InternalSyntax.IndexerMemberCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitOnVisitor()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new AssertOnEverythingButIndexerMemberCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorMemberCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOperatorMemberCref(Syntax.InternalSyntax.OperatorMemberCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitOnVisitor()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new AssertOnEverythingButOperatorMemberCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorMemberCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConversionOperatorMemberCref(Syntax.InternalSyntax.ConversionOperatorMemberCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitOnVisitor()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new AssertOnEverythingButConversionOperatorMemberCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCrefParameterList(Syntax.InternalSyntax.CrefParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestCrefParameterListNodeVisitOnVisitor()
        {
            var node = GenerateCrefParameterList();
            var visitor = new AssertOnEverythingButCrefParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCrefParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCrefParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefBracketedParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCrefBracketedParameterList(Syntax.InternalSyntax.CrefBracketedParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitOnVisitor()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new AssertOnEverythingButCrefBracketedParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCrefParameter(Syntax.InternalSyntax.CrefParameterSyntax node)
            {
            }
        }

        [Fact]
        public void TestCrefParameterNodeVisitOnVisitor()
        {
            var node = GenerateCrefParameter();
            var visitor = new AssertOnEverythingButCrefParameterVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCrefParameterNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCrefParameter();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlElement(Syntax.InternalSyntax.XmlElementSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlElementNodeVisitOnVisitor()
        {
            var node = GenerateXmlElement();
            var visitor = new AssertOnEverythingButXmlElementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlElementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlElement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementStartTagVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlElementStartTag(Syntax.InternalSyntax.XmlElementStartTagSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitOnVisitor()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new AssertOnEverythingButXmlElementStartTagVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementEndTagVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlElementEndTag(Syntax.InternalSyntax.XmlElementEndTagSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitOnVisitor()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new AssertOnEverythingButXmlElementEndTagVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlEmptyElementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlEmptyElement(Syntax.InternalSyntax.XmlEmptyElementSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitOnVisitor()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new AssertOnEverythingButXmlEmptyElementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlName(Syntax.InternalSyntax.XmlNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlNameNodeVisitOnVisitor()
        {
            var node = GenerateXmlName();
            var visitor = new AssertOnEverythingButXmlNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlName();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlPrefixVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlPrefix(Syntax.InternalSyntax.XmlPrefixSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlPrefixNodeVisitOnVisitor()
        {
            var node = GenerateXmlPrefix();
            var visitor = new AssertOnEverythingButXmlPrefixVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlPrefixNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlPrefix();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextAttributeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlTextAttribute(Syntax.InternalSyntax.XmlTextAttributeSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitOnVisitor()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new AssertOnEverythingButXmlTextAttributeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCrefAttributeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlCrefAttribute(Syntax.InternalSyntax.XmlCrefAttributeSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitOnVisitor()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new AssertOnEverythingButXmlCrefAttributeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameAttributeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlNameAttribute(Syntax.InternalSyntax.XmlNameAttributeSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitOnVisitor()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new AssertOnEverythingButXmlNameAttributeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlText(Syntax.InternalSyntax.XmlTextSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlTextNodeVisitOnVisitor()
        {
            var node = GenerateXmlText();
            var visitor = new AssertOnEverythingButXmlTextVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlTextNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlText();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCDataSectionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlCDataSection(Syntax.InternalSyntax.XmlCDataSectionSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitOnVisitor()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new AssertOnEverythingButXmlCDataSectionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlProcessingInstructionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlProcessingInstruction(Syntax.InternalSyntax.XmlProcessingInstructionSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitOnVisitor()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new AssertOnEverythingButXmlProcessingInstructionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCommentVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlComment(Syntax.InternalSyntax.XmlCommentSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlCommentNodeVisitOnVisitor()
        {
            var node = GenerateXmlComment();
            var visitor = new AssertOnEverythingButXmlCommentVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlCommentNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlComment();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIfDirectiveTrivia(Syntax.InternalSyntax.IfDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButIfDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElifDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElifDirectiveTrivia(Syntax.InternalSyntax.ElifDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new AssertOnEverythingButElifDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElseDirectiveTrivia(Syntax.InternalSyntax.ElseDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new AssertOnEverythingButElseDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndIfDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEndIfDirectiveTrivia(Syntax.InternalSyntax.EndIfDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndIfDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRegionDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRegionDirectiveTrivia(Syntax.InternalSyntax.RegionDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButRegionDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEndRegionDirectiveTrivia(Syntax.InternalSyntax.EndRegionDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButErrorDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitErrorDirectiveTrivia(Syntax.InternalSyntax.ErrorDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new AssertOnEverythingButErrorDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWarningDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWarningDirectiveTrivia(Syntax.InternalSyntax.WarningDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButWarningDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBadDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBadDirectiveTrivia(Syntax.InternalSyntax.BadDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new AssertOnEverythingButBadDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefineDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDefineDirectiveTrivia(Syntax.InternalSyntax.DefineDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new AssertOnEverythingButDefineDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUndefDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUndefDirectiveTrivia(Syntax.InternalSyntax.UndefDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new AssertOnEverythingButUndefDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLineDirectiveTrivia(Syntax.InternalSyntax.LineDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectivePositionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLineDirectivePosition(Syntax.InternalSyntax.LineDirectivePositionSyntax node)
            {
            }
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitOnVisitor()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new AssertOnEverythingButLineDirectivePositionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLineSpanDirectiveTrivia(Syntax.InternalSyntax.LineSpanDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPragmaWarningDirectiveTrivia(Syntax.InternalSyntax.PragmaWarningDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPragmaChecksumDirectiveTrivia(Syntax.InternalSyntax.PragmaChecksumDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReferenceDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitReferenceDirectiveTrivia(Syntax.InternalSyntax.ReferenceDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new AssertOnEverythingButReferenceDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLoadDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLoadDirectiveTrivia(Syntax.InternalSyntax.LoadDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new AssertOnEverythingButLoadDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButShebangDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitShebangDirectiveTrivia(Syntax.InternalSyntax.ShebangDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new AssertOnEverythingButShebangDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNullableDirectiveTrivia(Syntax.InternalSyntax.NullableDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new AssertOnEverythingButNullableDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new GreenVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }
        #endregion Green Visitors
    }

    public partial class RedNodeTests
    {
        #region Red Generators
        private static IdentifierNameSyntax GenerateIdentifierName()
            => SyntaxFactory.IdentifierName(SyntaxFactory.Identifier("Identifier"));

        private static QualifiedNameSyntax GenerateQualifiedName()
            => SyntaxFactory.QualifiedName(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.DotToken), GenerateIdentifierName());

        private static GenericNameSyntax GenerateGenericName()
            => SyntaxFactory.GenericName(SyntaxFactory.Identifier("Identifier"), GenerateTypeArgumentList());

        private static TypeArgumentListSyntax GenerateTypeArgumentList()
            => SyntaxFactory.TypeArgumentList(SyntaxFactory.Token(SyntaxKind.LessThanToken), new SeparatedSyntaxList<TypeSyntax>(), SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static AliasQualifiedNameSyntax GenerateAliasQualifiedName()
            => SyntaxFactory.AliasQualifiedName(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.ColonColonToken), GenerateIdentifierName());

        private static PredefinedTypeSyntax GeneratePredefinedType()
            => SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.BoolKeyword));

        private static ArrayTypeSyntax GenerateArrayType()
            => SyntaxFactory.ArrayType(GenerateIdentifierName(), new SyntaxList<ArrayRankSpecifierSyntax>());

        private static ArrayRankSpecifierSyntax GenerateArrayRankSpecifier()
            => SyntaxFactory.ArrayRankSpecifier(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), new SeparatedSyntaxList<ExpressionSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static PointerTypeSyntax GeneratePointerType()
            => SyntaxFactory.PointerType(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.AsteriskToken));

        private static FunctionPointerTypeSyntax GenerateFunctionPointerType()
            => SyntaxFactory.FunctionPointerType(SyntaxFactory.Token(SyntaxKind.DelegateKeyword), SyntaxFactory.Token(SyntaxKind.AsteriskToken), default(FunctionPointerCallingConventionSyntax), GenerateFunctionPointerParameterList());

        private static FunctionPointerParameterListSyntax GenerateFunctionPointerParameterList()
            => SyntaxFactory.FunctionPointerParameterList(SyntaxFactory.Token(SyntaxKind.LessThanToken), new SeparatedSyntaxList<FunctionPointerParameterSyntax>(), SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static FunctionPointerCallingConventionSyntax GenerateFunctionPointerCallingConvention()
            => SyntaxFactory.FunctionPointerCallingConvention(SyntaxFactory.Token(SyntaxKind.ManagedKeyword), default(FunctionPointerUnmanagedCallingConventionListSyntax));

        private static FunctionPointerUnmanagedCallingConventionListSyntax GenerateFunctionPointerUnmanagedCallingConventionList()
            => SyntaxFactory.FunctionPointerUnmanagedCallingConventionList(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), new SeparatedSyntaxList<FunctionPointerUnmanagedCallingConventionSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static FunctionPointerUnmanagedCallingConventionSyntax GenerateFunctionPointerUnmanagedCallingConvention()
            => SyntaxFactory.FunctionPointerUnmanagedCallingConvention(SyntaxFactory.Identifier("Name"));

        private static NullableTypeSyntax GenerateNullableType()
            => SyntaxFactory.NullableType(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.QuestionToken));

        private static TupleTypeSyntax GenerateTupleType()
            => SyntaxFactory.TupleType(SyntaxFactory.Token(SyntaxKind.OpenParenToken), new SeparatedSyntaxList<TupleElementSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static TupleElementSyntax GenerateTupleElement()
            => SyntaxFactory.TupleElement(GenerateIdentifierName(), default(SyntaxToken));

        private static OmittedTypeArgumentSyntax GenerateOmittedTypeArgument()
            => SyntaxFactory.OmittedTypeArgument(SyntaxFactory.Token(SyntaxKind.OmittedTypeArgumentToken));

        private static RefTypeSyntax GenerateRefType()
            => SyntaxFactory.RefType(SyntaxFactory.Token(SyntaxKind.RefKeyword), default(SyntaxToken), default(SyntaxToken), GenerateIdentifierName());

        private static ParenthesizedExpressionSyntax GenerateParenthesizedExpression()
            => SyntaxFactory.ParenthesizedExpression(SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static TupleExpressionSyntax GenerateTupleExpression()
            => SyntaxFactory.TupleExpression(SyntaxFactory.Token(SyntaxKind.OpenParenToken), new SeparatedSyntaxList<ArgumentSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static PrefixUnaryExpressionSyntax GeneratePrefixUnaryExpression()
            => SyntaxFactory.PrefixUnaryExpression(SyntaxKind.UnaryPlusExpression, SyntaxFactory.Token(SyntaxKind.PlusToken), GenerateIdentifierName());

        private static AwaitExpressionSyntax GenerateAwaitExpression()
            => SyntaxFactory.AwaitExpression(SyntaxFactory.Token(SyntaxKind.AwaitKeyword), GenerateIdentifierName());

        private static PostfixUnaryExpressionSyntax GeneratePostfixUnaryExpression()
            => SyntaxFactory.PostfixUnaryExpression(SyntaxKind.PostIncrementExpression, GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.PlusPlusToken));

        private static MemberAccessExpressionSyntax GenerateMemberAccessExpression()
            => SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.DotToken), GenerateIdentifierName());

        private static ConditionalAccessExpressionSyntax GenerateConditionalAccessExpression()
            => SyntaxFactory.ConditionalAccessExpression(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.QuestionToken), GenerateIdentifierName());

        private static MemberBindingExpressionSyntax GenerateMemberBindingExpression()
            => SyntaxFactory.MemberBindingExpression(SyntaxFactory.Token(SyntaxKind.DotToken), GenerateIdentifierName());

        private static ElementBindingExpressionSyntax GenerateElementBindingExpression()
            => SyntaxFactory.ElementBindingExpression(GenerateBracketedArgumentList());

        private static RangeExpressionSyntax GenerateRangeExpression()
            => SyntaxFactory.RangeExpression(default(ExpressionSyntax), SyntaxFactory.Token(SyntaxKind.DotDotToken), default(ExpressionSyntax));

        private static ImplicitElementAccessSyntax GenerateImplicitElementAccess()
            => SyntaxFactory.ImplicitElementAccess(GenerateBracketedArgumentList());

        private static BinaryExpressionSyntax GenerateBinaryExpression()
            => SyntaxFactory.BinaryExpression(SyntaxKind.AddExpression, GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.PlusToken), GenerateIdentifierName());

        private static AssignmentExpressionSyntax GenerateAssignmentExpression()
            => SyntaxFactory.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression, GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.EqualsToken), GenerateIdentifierName());

        private static ConditionalExpressionSyntax GenerateConditionalExpression()
            => SyntaxFactory.ConditionalExpression(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.QuestionToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.ColonToken), GenerateIdentifierName());

        private static ThisExpressionSyntax GenerateThisExpression()
            => SyntaxFactory.ThisExpression(SyntaxFactory.Token(SyntaxKind.ThisKeyword));

        private static BaseExpressionSyntax GenerateBaseExpression()
            => SyntaxFactory.BaseExpression(SyntaxFactory.Token(SyntaxKind.BaseKeyword));

        private static LiteralExpressionSyntax GenerateLiteralExpression()
            => SyntaxFactory.LiteralExpression(SyntaxKind.ArgListExpression, SyntaxFactory.Token(SyntaxKind.ArgListKeyword));

        private static MakeRefExpressionSyntax GenerateMakeRefExpression()
            => SyntaxFactory.MakeRefExpression(SyntaxFactory.Token(SyntaxKind.MakeRefKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static RefTypeExpressionSyntax GenerateRefTypeExpression()
            => SyntaxFactory.RefTypeExpression(SyntaxFactory.Token(SyntaxKind.RefTypeKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static RefValueExpressionSyntax GenerateRefValueExpression()
            => SyntaxFactory.RefValueExpression(SyntaxFactory.Token(SyntaxKind.RefValueKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CommaToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static CheckedExpressionSyntax GenerateCheckedExpression()
            => SyntaxFactory.CheckedExpression(SyntaxKind.CheckedExpression, SyntaxFactory.Token(SyntaxKind.CheckedKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static DefaultExpressionSyntax GenerateDefaultExpression()
            => SyntaxFactory.DefaultExpression(SyntaxFactory.Token(SyntaxKind.DefaultKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static TypeOfExpressionSyntax GenerateTypeOfExpression()
            => SyntaxFactory.TypeOfExpression(SyntaxFactory.Token(SyntaxKind.TypeOfKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static SizeOfExpressionSyntax GenerateSizeOfExpression()
            => SyntaxFactory.SizeOfExpression(SyntaxFactory.Token(SyntaxKind.SizeOfKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static InvocationExpressionSyntax GenerateInvocationExpression()
            => SyntaxFactory.InvocationExpression(GenerateIdentifierName(), GenerateArgumentList());

        private static ElementAccessExpressionSyntax GenerateElementAccessExpression()
            => SyntaxFactory.ElementAccessExpression(GenerateIdentifierName(), GenerateBracketedArgumentList());

        private static ArgumentListSyntax GenerateArgumentList()
            => SyntaxFactory.ArgumentList(SyntaxFactory.Token(SyntaxKind.OpenParenToken), new SeparatedSyntaxList<ArgumentSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static BracketedArgumentListSyntax GenerateBracketedArgumentList()
            => SyntaxFactory.BracketedArgumentList(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), new SeparatedSyntaxList<ArgumentSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static ArgumentSyntax GenerateArgument()
            => SyntaxFactory.Argument(default(NameColonSyntax), default(SyntaxToken), GenerateIdentifierName());

        private static ExpressionColonSyntax GenerateExpressionColon()
            => SyntaxFactory.ExpressionColon(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.ColonToken));

        private static NameColonSyntax GenerateNameColon()
            => SyntaxFactory.NameColon(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.ColonToken));

        private static DeclarationExpressionSyntax GenerateDeclarationExpression()
            => SyntaxFactory.DeclarationExpression(GenerateIdentifierName(), GenerateSingleVariableDesignation());

        private static CastExpressionSyntax GenerateCastExpression()
            => SyntaxFactory.CastExpression(SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateIdentifierName());

        private static AnonymousMethodExpressionSyntax GenerateAnonymousMethodExpression()
            => SyntaxFactory.AnonymousMethodExpression(new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.DelegateKeyword), default(ParameterListSyntax), GenerateBlock(), default(ExpressionSyntax));

        private static SimpleLambdaExpressionSyntax GenerateSimpleLambdaExpression()
            => SyntaxFactory.SimpleLambdaExpression(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), GenerateParameter(), SyntaxFactory.Token(SyntaxKind.EqualsGreaterThanToken), default(BlockSyntax), default(ExpressionSyntax));

        private static RefExpressionSyntax GenerateRefExpression()
            => SyntaxFactory.RefExpression(SyntaxFactory.Token(SyntaxKind.RefKeyword), GenerateIdentifierName());

        private static ParenthesizedLambdaExpressionSyntax GenerateParenthesizedLambdaExpression()
            => SyntaxFactory.ParenthesizedLambdaExpression(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), default(TypeSyntax), GenerateParameterList(), SyntaxFactory.Token(SyntaxKind.EqualsGreaterThanToken), default(BlockSyntax), default(ExpressionSyntax));

        private static InitializerExpressionSyntax GenerateInitializerExpression()
            => SyntaxFactory.InitializerExpression(SyntaxKind.ObjectInitializerExpression, SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SeparatedSyntaxList<ExpressionSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static ImplicitObjectCreationExpressionSyntax GenerateImplicitObjectCreationExpression()
            => SyntaxFactory.ImplicitObjectCreationExpression(SyntaxFactory.Token(SyntaxKind.NewKeyword), GenerateArgumentList(), default(InitializerExpressionSyntax));

        private static ObjectCreationExpressionSyntax GenerateObjectCreationExpression()
            => SyntaxFactory.ObjectCreationExpression(SyntaxFactory.Token(SyntaxKind.NewKeyword), GenerateIdentifierName(), default(ArgumentListSyntax), default(InitializerExpressionSyntax));

        private static WithExpressionSyntax GenerateWithExpression()
            => SyntaxFactory.WithExpression(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.WithKeyword), GenerateInitializerExpression());

        private static AnonymousObjectMemberDeclaratorSyntax GenerateAnonymousObjectMemberDeclarator()
            => SyntaxFactory.AnonymousObjectMemberDeclarator(default(NameEqualsSyntax), GenerateIdentifierName());

        private static AnonymousObjectCreationExpressionSyntax GenerateAnonymousObjectCreationExpression()
            => SyntaxFactory.AnonymousObjectCreationExpression(SyntaxFactory.Token(SyntaxKind.NewKeyword), SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SeparatedSyntaxList<AnonymousObjectMemberDeclaratorSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static ArrayCreationExpressionSyntax GenerateArrayCreationExpression()
            => SyntaxFactory.ArrayCreationExpression(SyntaxFactory.Token(SyntaxKind.NewKeyword), GenerateArrayType(), default(InitializerExpressionSyntax));

        private static ImplicitArrayCreationExpressionSyntax GenerateImplicitArrayCreationExpression()
            => SyntaxFactory.ImplicitArrayCreationExpression(SyntaxFactory.Token(SyntaxKind.NewKeyword), SyntaxFactory.Token(SyntaxKind.OpenBracketToken), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.CloseBracketToken), GenerateInitializerExpression());

        private static StackAllocArrayCreationExpressionSyntax GenerateStackAllocArrayCreationExpression()
            => SyntaxFactory.StackAllocArrayCreationExpression(SyntaxFactory.Token(SyntaxKind.StackAllocKeyword), GenerateIdentifierName(), default(InitializerExpressionSyntax));

        private static ImplicitStackAllocArrayCreationExpressionSyntax GenerateImplicitStackAllocArrayCreationExpression()
            => SyntaxFactory.ImplicitStackAllocArrayCreationExpression(SyntaxFactory.Token(SyntaxKind.StackAllocKeyword), SyntaxFactory.Token(SyntaxKind.OpenBracketToken), SyntaxFactory.Token(SyntaxKind.CloseBracketToken), GenerateInitializerExpression());

        private static QueryExpressionSyntax GenerateQueryExpression()
            => SyntaxFactory.QueryExpression(GenerateFromClause(), GenerateQueryBody());

        private static QueryBodySyntax GenerateQueryBody()
            => SyntaxFactory.QueryBody(new SyntaxList<QueryClauseSyntax>(), GenerateSelectClause(), default(QueryContinuationSyntax));

        private static FromClauseSyntax GenerateFromClause()
            => SyntaxFactory.FromClause(SyntaxFactory.Token(SyntaxKind.FromKeyword), default(TypeSyntax), SyntaxFactory.Identifier("Identifier"), SyntaxFactory.Token(SyntaxKind.InKeyword), GenerateIdentifierName());

        private static LetClauseSyntax GenerateLetClause()
            => SyntaxFactory.LetClause(SyntaxFactory.Token(SyntaxKind.LetKeyword), SyntaxFactory.Identifier("Identifier"), SyntaxFactory.Token(SyntaxKind.EqualsToken), GenerateIdentifierName());

        private static JoinClauseSyntax GenerateJoinClause()
            => SyntaxFactory.JoinClause(SyntaxFactory.Token(SyntaxKind.JoinKeyword), default(TypeSyntax), SyntaxFactory.Identifier("Identifier"), SyntaxFactory.Token(SyntaxKind.InKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.OnKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.EqualsKeyword), GenerateIdentifierName(), default(JoinIntoClauseSyntax));

        private static JoinIntoClauseSyntax GenerateJoinIntoClause()
            => SyntaxFactory.JoinIntoClause(SyntaxFactory.Token(SyntaxKind.IntoKeyword), SyntaxFactory.Identifier("Identifier"));

        private static WhereClauseSyntax GenerateWhereClause()
            => SyntaxFactory.WhereClause(SyntaxFactory.Token(SyntaxKind.WhereKeyword), GenerateIdentifierName());

        private static OrderByClauseSyntax GenerateOrderByClause()
            => SyntaxFactory.OrderByClause(SyntaxFactory.Token(SyntaxKind.OrderByKeyword), new SeparatedSyntaxList<OrderingSyntax>());

        private static OrderingSyntax GenerateOrdering()
            => SyntaxFactory.Ordering(SyntaxKind.AscendingOrdering, GenerateIdentifierName(), default(SyntaxToken));

        private static SelectClauseSyntax GenerateSelectClause()
            => SyntaxFactory.SelectClause(SyntaxFactory.Token(SyntaxKind.SelectKeyword), GenerateIdentifierName());

        private static GroupClauseSyntax GenerateGroupClause()
            => SyntaxFactory.GroupClause(SyntaxFactory.Token(SyntaxKind.GroupKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.ByKeyword), GenerateIdentifierName());

        private static QueryContinuationSyntax GenerateQueryContinuation()
            => SyntaxFactory.QueryContinuation(SyntaxFactory.Token(SyntaxKind.IntoKeyword), SyntaxFactory.Identifier("Identifier"), GenerateQueryBody());

        private static OmittedArraySizeExpressionSyntax GenerateOmittedArraySizeExpression()
            => SyntaxFactory.OmittedArraySizeExpression(SyntaxFactory.Token(SyntaxKind.OmittedArraySizeExpressionToken));

        private static InterpolatedStringExpressionSyntax GenerateInterpolatedStringExpression()
            => SyntaxFactory.InterpolatedStringExpression(SyntaxFactory.Token(SyntaxKind.InterpolatedStringStartToken), new SyntaxList<InterpolatedStringContentSyntax>(), SyntaxFactory.Token(SyntaxKind.InterpolatedStringEndToken));

        private static IsPatternExpressionSyntax GenerateIsPatternExpression()
            => SyntaxFactory.IsPatternExpression(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.IsKeyword), GenerateDiscardPattern());

        private static ThrowExpressionSyntax GenerateThrowExpression()
            => SyntaxFactory.ThrowExpression(SyntaxFactory.Token(SyntaxKind.ThrowKeyword), GenerateIdentifierName());

        private static WhenClauseSyntax GenerateWhenClause()
            => SyntaxFactory.WhenClause(SyntaxFactory.Token(SyntaxKind.WhenKeyword), GenerateIdentifierName());

        private static DiscardPatternSyntax GenerateDiscardPattern()
            => SyntaxFactory.DiscardPattern(SyntaxFactory.Token(SyntaxKind.UnderscoreToken));

        private static DeclarationPatternSyntax GenerateDeclarationPattern()
            => SyntaxFactory.DeclarationPattern(GenerateIdentifierName(), GenerateSingleVariableDesignation());

        private static VarPatternSyntax GenerateVarPattern()
            => SyntaxFactory.VarPattern(SyntaxFactory.Token(SyntaxKind.VarKeyword), GenerateSingleVariableDesignation());

        private static RecursivePatternSyntax GenerateRecursivePattern()
            => SyntaxFactory.RecursivePattern(default(TypeSyntax), default(PositionalPatternClauseSyntax), default(PropertyPatternClauseSyntax), default(VariableDesignationSyntax));

        private static PositionalPatternClauseSyntax GeneratePositionalPatternClause()
            => SyntaxFactory.PositionalPatternClause(SyntaxFactory.Token(SyntaxKind.OpenParenToken), new SeparatedSyntaxList<SubpatternSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static PropertyPatternClauseSyntax GeneratePropertyPatternClause()
            => SyntaxFactory.PropertyPatternClause(SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SeparatedSyntaxList<SubpatternSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static SubpatternSyntax GenerateSubpattern()
            => SyntaxFactory.Subpattern(default(BaseExpressionColonSyntax), GenerateDiscardPattern());

        private static ConstantPatternSyntax GenerateConstantPattern()
            => SyntaxFactory.ConstantPattern(GenerateIdentifierName());

        private static ParenthesizedPatternSyntax GenerateParenthesizedPattern()
            => SyntaxFactory.ParenthesizedPattern(SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateDiscardPattern(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static RelationalPatternSyntax GenerateRelationalPattern()
            => SyntaxFactory.RelationalPattern(SyntaxFactory.Token(SyntaxKind.EqualsEqualsToken), GenerateIdentifierName());

        private static TypePatternSyntax GenerateTypePattern()
            => SyntaxFactory.TypePattern(GenerateIdentifierName());

        private static BinaryPatternSyntax GenerateBinaryPattern()
            => SyntaxFactory.BinaryPattern(SyntaxKind.OrPattern, GenerateDiscardPattern(), SyntaxFactory.Token(SyntaxKind.OrKeyword), GenerateDiscardPattern());

        private static UnaryPatternSyntax GenerateUnaryPattern()
            => SyntaxFactory.UnaryPattern(SyntaxFactory.Token(SyntaxKind.NotKeyword), GenerateDiscardPattern());

        private static ListPatternSyntax GenerateListPattern()
            => SyntaxFactory.ListPattern(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), new SeparatedSyntaxList<PatternSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBracketToken), default(VariableDesignationSyntax));

        private static SlicePatternSyntax GenerateSlicePattern()
            => SyntaxFactory.SlicePattern(SyntaxFactory.Token(SyntaxKind.DotDotToken), default(PatternSyntax));

        private static InterpolatedStringTextSyntax GenerateInterpolatedStringText()
            => SyntaxFactory.InterpolatedStringText(SyntaxFactory.Token(SyntaxKind.InterpolatedStringTextToken));

        private static InterpolationSyntax GenerateInterpolation()
            => SyntaxFactory.Interpolation(SyntaxFactory.Token(SyntaxKind.OpenBraceToken), GenerateIdentifierName(), default(InterpolationAlignmentClauseSyntax), default(InterpolationFormatClauseSyntax), SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static InterpolationAlignmentClauseSyntax GenerateInterpolationAlignmentClause()
            => SyntaxFactory.InterpolationAlignmentClause(SyntaxFactory.Identifier("CommaToken"), GenerateIdentifierName());

        private static InterpolationFormatClauseSyntax GenerateInterpolationFormatClause()
            => SyntaxFactory.InterpolationFormatClause(SyntaxFactory.Identifier("ColonToken"), SyntaxFactory.Token(SyntaxKind.InterpolatedStringTextToken));

        private static GlobalStatementSyntax GenerateGlobalStatement()
            => SyntaxFactory.GlobalStatement(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), GenerateBlock());

        private static BlockSyntax GenerateBlock()
            => SyntaxFactory.Block(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SyntaxList<StatementSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static LocalFunctionStatementSyntax GenerateLocalFunctionStatement()
            => SyntaxFactory.LocalFunctionStatement(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), GenerateIdentifierName(), SyntaxFactory.Identifier("Identifier"), default(TypeParameterListSyntax), GenerateParameterList(), new SyntaxList<TypeParameterConstraintClauseSyntax>(), default(BlockSyntax), default(ArrowExpressionClauseSyntax), default(SyntaxToken));

        private static LocalDeclarationStatementSyntax GenerateLocalDeclarationStatement()
            => SyntaxFactory.LocalDeclarationStatement(new SyntaxList<AttributeListSyntax>(), default(SyntaxToken), default(SyntaxToken), new SyntaxTokenList(), GenerateVariableDeclaration(), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static VariableDeclarationSyntax GenerateVariableDeclaration()
            => SyntaxFactory.VariableDeclaration(GenerateIdentifierName(), new SeparatedSyntaxList<VariableDeclaratorSyntax>());

        private static VariableDeclaratorSyntax GenerateVariableDeclarator()
            => SyntaxFactory.VariableDeclarator(SyntaxFactory.Identifier("Identifier"), default(BracketedArgumentListSyntax), default(EqualsValueClauseSyntax));

        private static EqualsValueClauseSyntax GenerateEqualsValueClause()
            => SyntaxFactory.EqualsValueClause(SyntaxFactory.Token(SyntaxKind.EqualsToken), GenerateIdentifierName());

        private static SingleVariableDesignationSyntax GenerateSingleVariableDesignation()
            => SyntaxFactory.SingleVariableDesignation(SyntaxFactory.Identifier("Identifier"));

        private static DiscardDesignationSyntax GenerateDiscardDesignation()
            => SyntaxFactory.DiscardDesignation(SyntaxFactory.Token(SyntaxKind.UnderscoreToken));

        private static ParenthesizedVariableDesignationSyntax GenerateParenthesizedVariableDesignation()
            => SyntaxFactory.ParenthesizedVariableDesignation(SyntaxFactory.Token(SyntaxKind.OpenParenToken), new SeparatedSyntaxList<VariableDesignationSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static ExpressionStatementSyntax GenerateExpressionStatement()
            => SyntaxFactory.ExpressionStatement(new SyntaxList<AttributeListSyntax>(), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static EmptyStatementSyntax GenerateEmptyStatement()
            => SyntaxFactory.EmptyStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static LabeledStatementSyntax GenerateLabeledStatement()
            => SyntaxFactory.LabeledStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Identifier("Identifier"), SyntaxFactory.Token(SyntaxKind.ColonToken), GenerateBlock());

        private static GotoStatementSyntax GenerateGotoStatement()
            => SyntaxFactory.GotoStatement(SyntaxKind.GotoStatement, new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.GotoKeyword), default(SyntaxToken), default(ExpressionSyntax), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static BreakStatementSyntax GenerateBreakStatement()
            => SyntaxFactory.BreakStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.BreakKeyword), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static ContinueStatementSyntax GenerateContinueStatement()
            => SyntaxFactory.ContinueStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.ContinueKeyword), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static ReturnStatementSyntax GenerateReturnStatement()
            => SyntaxFactory.ReturnStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.ReturnKeyword), default(ExpressionSyntax), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static ThrowStatementSyntax GenerateThrowStatement()
            => SyntaxFactory.ThrowStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.ThrowKeyword), default(ExpressionSyntax), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static YieldStatementSyntax GenerateYieldStatement()
            => SyntaxFactory.YieldStatement(SyntaxKind.YieldReturnStatement, new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.YieldKeyword), SyntaxFactory.Token(SyntaxKind.ReturnKeyword), default(ExpressionSyntax), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static WhileStatementSyntax GenerateWhileStatement()
            => SyntaxFactory.WhileStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.WhileKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static DoStatementSyntax GenerateDoStatement()
            => SyntaxFactory.DoStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.DoKeyword), GenerateBlock(), SyntaxFactory.Token(SyntaxKind.WhileKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static ForStatementSyntax GenerateForStatement()
            => SyntaxFactory.ForStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.ForKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), default(VariableDeclarationSyntax), new SeparatedSyntaxList<ExpressionSyntax>(), SyntaxFactory.Token(SyntaxKind.SemicolonToken), default(ExpressionSyntax), SyntaxFactory.Token(SyntaxKind.SemicolonToken), new SeparatedSyntaxList<ExpressionSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static ForEachStatementSyntax GenerateForEachStatement()
            => SyntaxFactory.ForEachStatement(new SyntaxList<AttributeListSyntax>(), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.ForEachKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Identifier("Identifier"), SyntaxFactory.Token(SyntaxKind.InKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static ForEachVariableStatementSyntax GenerateForEachVariableStatement()
            => SyntaxFactory.ForEachVariableStatement(new SyntaxList<AttributeListSyntax>(), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.ForEachKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.InKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static UsingStatementSyntax GenerateUsingStatement()
            => SyntaxFactory.UsingStatement(new SyntaxList<AttributeListSyntax>(), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.UsingKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), default(VariableDeclarationSyntax), default(ExpressionSyntax), SyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static FixedStatementSyntax GenerateFixedStatement()
            => SyntaxFactory.FixedStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.FixedKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateVariableDeclaration(), SyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static CheckedStatementSyntax GenerateCheckedStatement()
            => SyntaxFactory.CheckedStatement(SyntaxKind.CheckedStatement, new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.CheckedKeyword), GenerateBlock());

        private static UnsafeStatementSyntax GenerateUnsafeStatement()
            => SyntaxFactory.UnsafeStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.UnsafeKeyword), GenerateBlock());

        private static LockStatementSyntax GenerateLockStatement()
            => SyntaxFactory.LockStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.LockKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock());

        private static IfStatementSyntax GenerateIfStatement()
            => SyntaxFactory.IfStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.IfKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken), GenerateBlock(), default(ElseClauseSyntax));

        private static ElseClauseSyntax GenerateElseClause()
            => SyntaxFactory.ElseClause(SyntaxFactory.Token(SyntaxKind.ElseKeyword), GenerateBlock());

        private static SwitchStatementSyntax GenerateSwitchStatement()
            => SyntaxFactory.SwitchStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.SwitchKeyword), default(SyntaxToken), GenerateIdentifierName(), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SyntaxList<SwitchSectionSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static SwitchSectionSyntax GenerateSwitchSection()
            => SyntaxFactory.SwitchSection(new SyntaxList<SwitchLabelSyntax>(), new SyntaxList<StatementSyntax>());

        private static CasePatternSwitchLabelSyntax GenerateCasePatternSwitchLabel()
            => SyntaxFactory.CasePatternSwitchLabel(SyntaxFactory.Token(SyntaxKind.CaseKeyword), GenerateDiscardPattern(), default(WhenClauseSyntax), SyntaxFactory.Token(SyntaxKind.ColonToken));

        private static CaseSwitchLabelSyntax GenerateCaseSwitchLabel()
            => SyntaxFactory.CaseSwitchLabel(SyntaxFactory.Token(SyntaxKind.CaseKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.ColonToken));

        private static DefaultSwitchLabelSyntax GenerateDefaultSwitchLabel()
            => SyntaxFactory.DefaultSwitchLabel(SyntaxFactory.Token(SyntaxKind.DefaultKeyword), SyntaxFactory.Token(SyntaxKind.ColonToken));

        private static SwitchExpressionSyntax GenerateSwitchExpression()
            => SyntaxFactory.SwitchExpression(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.SwitchKeyword), SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SeparatedSyntaxList<SwitchExpressionArmSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static SwitchExpressionArmSyntax GenerateSwitchExpressionArm()
            => SyntaxFactory.SwitchExpressionArm(GenerateDiscardPattern(), default(WhenClauseSyntax), SyntaxFactory.Token(SyntaxKind.EqualsGreaterThanToken), GenerateIdentifierName());

        private static TryStatementSyntax GenerateTryStatement()
            => SyntaxFactory.TryStatement(new SyntaxList<AttributeListSyntax>(), SyntaxFactory.Token(SyntaxKind.TryKeyword), GenerateBlock(), new SyntaxList<CatchClauseSyntax>(), default(FinallyClauseSyntax));

        private static CatchClauseSyntax GenerateCatchClause()
            => SyntaxFactory.CatchClause(SyntaxFactory.Token(SyntaxKind.CatchKeyword), default(CatchDeclarationSyntax), default(CatchFilterClauseSyntax), GenerateBlock());

        private static CatchDeclarationSyntax GenerateCatchDeclaration()
            => SyntaxFactory.CatchDeclaration(SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static CatchFilterClauseSyntax GenerateCatchFilterClause()
            => SyntaxFactory.CatchFilterClause(SyntaxFactory.Token(SyntaxKind.WhenKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static FinallyClauseSyntax GenerateFinallyClause()
            => SyntaxFactory.FinallyClause(SyntaxFactory.Token(SyntaxKind.FinallyKeyword), GenerateBlock());

        private static CompilationUnitSyntax GenerateCompilationUnit()
            => SyntaxFactory.CompilationUnit(new SyntaxList<ExternAliasDirectiveSyntax>(), new SyntaxList<UsingDirectiveSyntax>(), new SyntaxList<AttributeListSyntax>(), new SyntaxList<MemberDeclarationSyntax>(), SyntaxFactory.Token(SyntaxKind.EndOfFileToken));

        private static ExternAliasDirectiveSyntax GenerateExternAliasDirective()
            => SyntaxFactory.ExternAliasDirective(SyntaxFactory.Token(SyntaxKind.ExternKeyword), SyntaxFactory.Token(SyntaxKind.AliasKeyword), SyntaxFactory.Identifier("Identifier"), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static UsingDirectiveSyntax GenerateUsingDirective()
            => SyntaxFactory.UsingDirective(default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.UsingKeyword), default(SyntaxToken), default(NameEqualsSyntax), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static NamespaceDeclarationSyntax GenerateNamespaceDeclaration()
            => SyntaxFactory.NamespaceDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.NamespaceKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SyntaxList<ExternAliasDirectiveSyntax>(), new SyntaxList<UsingDirectiveSyntax>(), new SyntaxList<MemberDeclarationSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken), default(SyntaxToken));

        private static FileScopedNamespaceDeclarationSyntax GenerateFileScopedNamespaceDeclaration()
            => SyntaxFactory.FileScopedNamespaceDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.NamespaceKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.SemicolonToken), new SyntaxList<ExternAliasDirectiveSyntax>(), new SyntaxList<UsingDirectiveSyntax>(), new SyntaxList<MemberDeclarationSyntax>());

        private static AttributeListSyntax GenerateAttributeList()
            => SyntaxFactory.AttributeList(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), default(AttributeTargetSpecifierSyntax), new SeparatedSyntaxList<AttributeSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static AttributeTargetSpecifierSyntax GenerateAttributeTargetSpecifier()
            => SyntaxFactory.AttributeTargetSpecifier(SyntaxFactory.Identifier("Identifier"), SyntaxFactory.Token(SyntaxKind.ColonToken));

        private static AttributeSyntax GenerateAttribute()
            => SyntaxFactory.Attribute(GenerateIdentifierName(), default(AttributeArgumentListSyntax));

        private static AttributeArgumentListSyntax GenerateAttributeArgumentList()
            => SyntaxFactory.AttributeArgumentList(SyntaxFactory.Token(SyntaxKind.OpenParenToken), new SeparatedSyntaxList<AttributeArgumentSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static AttributeArgumentSyntax GenerateAttributeArgument()
            => SyntaxFactory.AttributeArgument(default(NameEqualsSyntax), default(NameColonSyntax), GenerateIdentifierName());

        private static NameEqualsSyntax GenerateNameEquals()
            => SyntaxFactory.NameEquals(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.EqualsToken));

        private static TypeParameterListSyntax GenerateTypeParameterList()
            => SyntaxFactory.TypeParameterList(SyntaxFactory.Token(SyntaxKind.LessThanToken), new SeparatedSyntaxList<TypeParameterSyntax>(), SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static TypeParameterSyntax GenerateTypeParameter()
            => SyntaxFactory.TypeParameter(new SyntaxList<AttributeListSyntax>(), default(SyntaxToken), SyntaxFactory.Identifier("Identifier"));

        private static ClassDeclarationSyntax GenerateClassDeclaration()
            => SyntaxFactory.ClassDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.ClassKeyword), SyntaxFactory.Identifier("Identifier"), default(TypeParameterListSyntax), default(BaseListSyntax), new SyntaxList<TypeParameterConstraintClauseSyntax>(), SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SyntaxList<MemberDeclarationSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken), default(SyntaxToken));

        private static StructDeclarationSyntax GenerateStructDeclaration()
            => SyntaxFactory.StructDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.StructKeyword), SyntaxFactory.Identifier("Identifier"), default(TypeParameterListSyntax), default(BaseListSyntax), new SyntaxList<TypeParameterConstraintClauseSyntax>(), SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SyntaxList<MemberDeclarationSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken), default(SyntaxToken));

        private static InterfaceDeclarationSyntax GenerateInterfaceDeclaration()
            => SyntaxFactory.InterfaceDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.InterfaceKeyword), SyntaxFactory.Identifier("Identifier"), default(TypeParameterListSyntax), default(BaseListSyntax), new SyntaxList<TypeParameterConstraintClauseSyntax>(), SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SyntaxList<MemberDeclarationSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken), default(SyntaxToken));

        private static RecordDeclarationSyntax GenerateRecordDeclaration()
            => SyntaxFactory.RecordDeclaration(SyntaxKind.RecordDeclaration, new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Identifier("Keyword"), default(SyntaxToken), SyntaxFactory.Identifier("Identifier"), default(TypeParameterListSyntax), default(ParameterListSyntax), default(BaseListSyntax), new SyntaxList<TypeParameterConstraintClauseSyntax>(), default(SyntaxToken), new SyntaxList<MemberDeclarationSyntax>(), default(SyntaxToken), default(SyntaxToken));

        private static EnumDeclarationSyntax GenerateEnumDeclaration()
            => SyntaxFactory.EnumDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.EnumKeyword), SyntaxFactory.Identifier("Identifier"), default(BaseListSyntax), SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SeparatedSyntaxList<EnumMemberDeclarationSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken), default(SyntaxToken));

        private static DelegateDeclarationSyntax GenerateDelegateDeclaration()
            => SyntaxFactory.DelegateDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.DelegateKeyword), GenerateIdentifierName(), SyntaxFactory.Identifier("Identifier"), default(TypeParameterListSyntax), GenerateParameterList(), new SyntaxList<TypeParameterConstraintClauseSyntax>(), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static EnumMemberDeclarationSyntax GenerateEnumMemberDeclaration()
            => SyntaxFactory.EnumMemberDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Identifier("Identifier"), default(EqualsValueClauseSyntax));

        private static BaseListSyntax GenerateBaseList()
            => SyntaxFactory.BaseList(SyntaxFactory.Token(SyntaxKind.ColonToken), new SeparatedSyntaxList<BaseTypeSyntax>());

        private static SimpleBaseTypeSyntax GenerateSimpleBaseType()
            => SyntaxFactory.SimpleBaseType(GenerateIdentifierName());

        private static PrimaryConstructorBaseTypeSyntax GeneratePrimaryConstructorBaseType()
            => SyntaxFactory.PrimaryConstructorBaseType(GenerateIdentifierName(), GenerateArgumentList());

        private static TypeParameterConstraintClauseSyntax GenerateTypeParameterConstraintClause()
            => SyntaxFactory.TypeParameterConstraintClause(SyntaxFactory.Token(SyntaxKind.WhereKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.ColonToken), new SeparatedSyntaxList<TypeParameterConstraintSyntax>());

        private static ConstructorConstraintSyntax GenerateConstructorConstraint()
            => SyntaxFactory.ConstructorConstraint(SyntaxFactory.Token(SyntaxKind.NewKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static ClassOrStructConstraintSyntax GenerateClassOrStructConstraint()
            => SyntaxFactory.ClassOrStructConstraint(SyntaxKind.ClassConstraint, SyntaxFactory.Token(SyntaxKind.ClassKeyword), default(SyntaxToken));

        private static TypeConstraintSyntax GenerateTypeConstraint()
            => SyntaxFactory.TypeConstraint(GenerateIdentifierName());

        private static DefaultConstraintSyntax GenerateDefaultConstraint()
            => SyntaxFactory.DefaultConstraint(SyntaxFactory.Token(SyntaxKind.DefaultKeyword));

        private static FieldDeclarationSyntax GenerateFieldDeclaration()
            => SyntaxFactory.FieldDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), GenerateVariableDeclaration(), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static EventFieldDeclarationSyntax GenerateEventFieldDeclaration()
            => SyntaxFactory.EventFieldDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.EventKeyword), GenerateVariableDeclaration(), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static ExplicitInterfaceSpecifierSyntax GenerateExplicitInterfaceSpecifier()
            => SyntaxFactory.ExplicitInterfaceSpecifier(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.DotToken));

        private static MethodDeclarationSyntax GenerateMethodDeclaration()
            => SyntaxFactory.MethodDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), GenerateIdentifierName(), default(ExplicitInterfaceSpecifierSyntax), SyntaxFactory.Identifier("Identifier"), default(TypeParameterListSyntax), GenerateParameterList(), new SyntaxList<TypeParameterConstraintClauseSyntax>(), default(BlockSyntax), default(ArrowExpressionClauseSyntax), default(SyntaxToken));

        private static OperatorDeclarationSyntax GenerateOperatorDeclaration()
            => SyntaxFactory.OperatorDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), GenerateIdentifierName(), default(ExplicitInterfaceSpecifierSyntax), SyntaxFactory.Token(SyntaxKind.OperatorKeyword), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.PlusToken), GenerateParameterList(), default(BlockSyntax), default(ArrowExpressionClauseSyntax), default(SyntaxToken));

        private static ConversionOperatorDeclarationSyntax GenerateConversionOperatorDeclaration()
            => SyntaxFactory.ConversionOperatorDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.ImplicitKeyword), default(ExplicitInterfaceSpecifierSyntax), SyntaxFactory.Token(SyntaxKind.OperatorKeyword), default(SyntaxToken), GenerateIdentifierName(), GenerateParameterList(), default(BlockSyntax), default(ArrowExpressionClauseSyntax), default(SyntaxToken));

        private static ConstructorDeclarationSyntax GenerateConstructorDeclaration()
            => SyntaxFactory.ConstructorDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Identifier("Identifier"), GenerateParameterList(), default(ConstructorInitializerSyntax), default(BlockSyntax), default(ArrowExpressionClauseSyntax), default(SyntaxToken));

        private static ConstructorInitializerSyntax GenerateConstructorInitializer()
            => SyntaxFactory.ConstructorInitializer(SyntaxKind.BaseConstructorInitializer, SyntaxFactory.Token(SyntaxKind.ColonToken), SyntaxFactory.Token(SyntaxKind.BaseKeyword), GenerateArgumentList());

        private static DestructorDeclarationSyntax GenerateDestructorDeclaration()
            => SyntaxFactory.DestructorDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.TildeToken), SyntaxFactory.Identifier("Identifier"), GenerateParameterList(), default(BlockSyntax), default(ArrowExpressionClauseSyntax), default(SyntaxToken));

        private static PropertyDeclarationSyntax GeneratePropertyDeclaration()
            => SyntaxFactory.PropertyDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), GenerateIdentifierName(), default(ExplicitInterfaceSpecifierSyntax), SyntaxFactory.Identifier("Identifier"), default(AccessorListSyntax), default(ArrowExpressionClauseSyntax), default(EqualsValueClauseSyntax), default(SyntaxToken));

        private static ArrowExpressionClauseSyntax GenerateArrowExpressionClause()
            => SyntaxFactory.ArrowExpressionClause(SyntaxFactory.Token(SyntaxKind.EqualsGreaterThanToken), GenerateIdentifierName());

        private static EventDeclarationSyntax GenerateEventDeclaration()
            => SyntaxFactory.EventDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.EventKeyword), GenerateIdentifierName(), default(ExplicitInterfaceSpecifierSyntax), SyntaxFactory.Identifier("Identifier"), default(AccessorListSyntax), default(SyntaxToken));

        private static IndexerDeclarationSyntax GenerateIndexerDeclaration()
            => SyntaxFactory.IndexerDeclaration(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), GenerateIdentifierName(), default(ExplicitInterfaceSpecifierSyntax), SyntaxFactory.Token(SyntaxKind.ThisKeyword), GenerateBracketedParameterList(), default(AccessorListSyntax), default(ArrowExpressionClauseSyntax), default(SyntaxToken));

        private static AccessorListSyntax GenerateAccessorList()
            => SyntaxFactory.AccessorList(SyntaxFactory.Token(SyntaxKind.OpenBraceToken), new SyntaxList<AccessorDeclarationSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        private static AccessorDeclarationSyntax GenerateAccessorDeclaration()
            => SyntaxFactory.AccessorDeclaration(SyntaxKind.GetAccessorDeclaration, new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.GetKeyword), default(BlockSyntax), default(ArrowExpressionClauseSyntax), default(SyntaxToken));

        private static ParameterListSyntax GenerateParameterList()
            => SyntaxFactory.ParameterList(SyntaxFactory.Token(SyntaxKind.OpenParenToken), new SeparatedSyntaxList<ParameterSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static BracketedParameterListSyntax GenerateBracketedParameterList()
            => SyntaxFactory.BracketedParameterList(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), new SeparatedSyntaxList<ParameterSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static ParameterSyntax GenerateParameter()
            => SyntaxFactory.Parameter(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), default(TypeSyntax), SyntaxFactory.Identifier("Identifier"), default(EqualsValueClauseSyntax));

        private static FunctionPointerParameterSyntax GenerateFunctionPointerParameter()
            => SyntaxFactory.FunctionPointerParameter(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), GenerateIdentifierName());

        private static IncompleteMemberSyntax GenerateIncompleteMember()
            => SyntaxFactory.IncompleteMember(new SyntaxList<AttributeListSyntax>(), new SyntaxTokenList(), default(TypeSyntax));

        private static SkippedTokensTriviaSyntax GenerateSkippedTokensTrivia()
            => SyntaxFactory.SkippedTokensTrivia(new SyntaxTokenList());

        private static DocumentationCommentTriviaSyntax GenerateDocumentationCommentTrivia()
            => SyntaxFactory.DocumentationCommentTrivia(SyntaxKind.SingleLineDocumentationCommentTrivia, new SyntaxList<XmlNodeSyntax>(), SyntaxFactory.Token(SyntaxKind.EndOfDocumentationCommentToken));

        private static TypeCrefSyntax GenerateTypeCref()
            => SyntaxFactory.TypeCref(GenerateIdentifierName());

        private static QualifiedCrefSyntax GenerateQualifiedCref()
            => SyntaxFactory.QualifiedCref(GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.DotToken), GenerateNameMemberCref());

        private static NameMemberCrefSyntax GenerateNameMemberCref()
            => SyntaxFactory.NameMemberCref(GenerateIdentifierName(), default(CrefParameterListSyntax));

        private static IndexerMemberCrefSyntax GenerateIndexerMemberCref()
            => SyntaxFactory.IndexerMemberCref(SyntaxFactory.Token(SyntaxKind.ThisKeyword), default(CrefBracketedParameterListSyntax));

        private static OperatorMemberCrefSyntax GenerateOperatorMemberCref()
            => SyntaxFactory.OperatorMemberCref(SyntaxFactory.Token(SyntaxKind.OperatorKeyword), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.PlusToken), default(CrefParameterListSyntax));

        private static ConversionOperatorMemberCrefSyntax GenerateConversionOperatorMemberCref()
            => SyntaxFactory.ConversionOperatorMemberCref(SyntaxFactory.Token(SyntaxKind.ImplicitKeyword), SyntaxFactory.Token(SyntaxKind.OperatorKeyword), default(SyntaxToken), GenerateIdentifierName(), default(CrefParameterListSyntax));

        private static CrefParameterListSyntax GenerateCrefParameterList()
            => SyntaxFactory.CrefParameterList(SyntaxFactory.Token(SyntaxKind.OpenParenToken), new SeparatedSyntaxList<CrefParameterSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static CrefBracketedParameterListSyntax GenerateCrefBracketedParameterList()
            => SyntaxFactory.CrefBracketedParameterList(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), new SeparatedSyntaxList<CrefParameterSyntax>(), SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        private static CrefParameterSyntax GenerateCrefParameter()
            => SyntaxFactory.CrefParameter(default(SyntaxToken), GenerateIdentifierName());

        private static XmlElementSyntax GenerateXmlElement()
            => SyntaxFactory.XmlElement(GenerateXmlElementStartTag(), new SyntaxList<XmlNodeSyntax>(), GenerateXmlElementEndTag());

        private static XmlElementStartTagSyntax GenerateXmlElementStartTag()
            => SyntaxFactory.XmlElementStartTag(SyntaxFactory.Token(SyntaxKind.LessThanToken), GenerateXmlName(), new SyntaxList<XmlAttributeSyntax>(), SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static XmlElementEndTagSyntax GenerateXmlElementEndTag()
            => SyntaxFactory.XmlElementEndTag(SyntaxFactory.Token(SyntaxKind.LessThanSlashToken), GenerateXmlName(), SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        private static XmlEmptyElementSyntax GenerateXmlEmptyElement()
            => SyntaxFactory.XmlEmptyElement(SyntaxFactory.Token(SyntaxKind.LessThanToken), GenerateXmlName(), new SyntaxList<XmlAttributeSyntax>(), SyntaxFactory.Token(SyntaxKind.SlashGreaterThanToken));

        private static XmlNameSyntax GenerateXmlName()
            => SyntaxFactory.XmlName(default(XmlPrefixSyntax), SyntaxFactory.Identifier("LocalName"));

        private static XmlPrefixSyntax GenerateXmlPrefix()
            => SyntaxFactory.XmlPrefix(SyntaxFactory.Identifier("Prefix"), SyntaxFactory.Token(SyntaxKind.ColonToken));

        private static XmlTextAttributeSyntax GenerateXmlTextAttribute()
            => SyntaxFactory.XmlTextAttribute(GenerateXmlName(), SyntaxFactory.Token(SyntaxKind.EqualsToken), SyntaxFactory.Token(SyntaxKind.SingleQuoteToken), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.SingleQuoteToken));

        private static XmlCrefAttributeSyntax GenerateXmlCrefAttribute()
            => SyntaxFactory.XmlCrefAttribute(GenerateXmlName(), SyntaxFactory.Token(SyntaxKind.EqualsToken), SyntaxFactory.Token(SyntaxKind.SingleQuoteToken), GenerateTypeCref(), SyntaxFactory.Token(SyntaxKind.SingleQuoteToken));

        private static XmlNameAttributeSyntax GenerateXmlNameAttribute()
            => SyntaxFactory.XmlNameAttribute(GenerateXmlName(), SyntaxFactory.Token(SyntaxKind.EqualsToken), SyntaxFactory.Token(SyntaxKind.SingleQuoteToken), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.SingleQuoteToken));

        private static XmlTextSyntax GenerateXmlText()
            => SyntaxFactory.XmlText(new SyntaxTokenList());

        private static XmlCDataSectionSyntax GenerateXmlCDataSection()
            => SyntaxFactory.XmlCDataSection(SyntaxFactory.Token(SyntaxKind.XmlCDataStartToken), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.XmlCDataEndToken));

        private static XmlProcessingInstructionSyntax GenerateXmlProcessingInstruction()
            => SyntaxFactory.XmlProcessingInstruction(SyntaxFactory.Token(SyntaxKind.XmlProcessingInstructionStartToken), GenerateXmlName(), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.XmlProcessingInstructionEndToken));

        private static XmlCommentSyntax GenerateXmlComment()
            => SyntaxFactory.XmlComment(SyntaxFactory.Token(SyntaxKind.XmlCommentStartToken), new SyntaxTokenList(), SyntaxFactory.Token(SyntaxKind.XmlCommentEndToken));

        private static IfDirectiveTriviaSyntax GenerateIfDirectiveTrivia()
            => SyntaxFactory.IfDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.IfKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool(), new bool(), new bool());

        private static ElifDirectiveTriviaSyntax GenerateElifDirectiveTrivia()
            => SyntaxFactory.ElifDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.ElifKeyword), GenerateIdentifierName(), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool(), new bool(), new bool());

        private static ElseDirectiveTriviaSyntax GenerateElseDirectiveTrivia()
            => SyntaxFactory.ElseDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.ElseKeyword), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool(), new bool());

        private static EndIfDirectiveTriviaSyntax GenerateEndIfDirectiveTrivia()
            => SyntaxFactory.EndIfDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.EndIfKeyword), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static RegionDirectiveTriviaSyntax GenerateRegionDirectiveTrivia()
            => SyntaxFactory.RegionDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.RegionKeyword), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static EndRegionDirectiveTriviaSyntax GenerateEndRegionDirectiveTrivia()
            => SyntaxFactory.EndRegionDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.EndRegionKeyword), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static ErrorDirectiveTriviaSyntax GenerateErrorDirectiveTrivia()
            => SyntaxFactory.ErrorDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.ErrorKeyword), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static WarningDirectiveTriviaSyntax GenerateWarningDirectiveTrivia()
            => SyntaxFactory.WarningDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.WarningKeyword), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static BadDirectiveTriviaSyntax GenerateBadDirectiveTrivia()
            => SyntaxFactory.BadDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Identifier("Identifier"), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static DefineDirectiveTriviaSyntax GenerateDefineDirectiveTrivia()
            => SyntaxFactory.DefineDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.DefineKeyword), SyntaxFactory.Identifier("Name"), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static UndefDirectiveTriviaSyntax GenerateUndefDirectiveTrivia()
            => SyntaxFactory.UndefDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.UndefKeyword), SyntaxFactory.Identifier("Name"), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static LineDirectiveTriviaSyntax GenerateLineDirectiveTrivia()
            => SyntaxFactory.LineDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.LineKeyword), SyntaxFactory.Literal("1", 1), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static LineDirectivePositionSyntax GenerateLineDirectivePosition()
            => SyntaxFactory.LineDirectivePosition(SyntaxFactory.Token(SyntaxKind.OpenParenToken), SyntaxFactory.Literal("1", 1), SyntaxFactory.Token(SyntaxKind.CommaToken), SyntaxFactory.Literal("1", 1), SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        private static LineSpanDirectiveTriviaSyntax GenerateLineSpanDirectiveTrivia()
            => SyntaxFactory.LineSpanDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.LineKeyword), GenerateLineDirectivePosition(), SyntaxFactory.Token(SyntaxKind.MinusToken), GenerateLineDirectivePosition(), default(SyntaxToken), SyntaxFactory.Literal("string", "string"), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static PragmaWarningDirectiveTriviaSyntax GeneratePragmaWarningDirectiveTrivia()
            => SyntaxFactory.PragmaWarningDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.PragmaKeyword), SyntaxFactory.Token(SyntaxKind.WarningKeyword), SyntaxFactory.Token(SyntaxKind.DisableKeyword), new SeparatedSyntaxList<ExpressionSyntax>(), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static PragmaChecksumDirectiveTriviaSyntax GeneratePragmaChecksumDirectiveTrivia()
            => SyntaxFactory.PragmaChecksumDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.PragmaKeyword), SyntaxFactory.Token(SyntaxKind.ChecksumKeyword), SyntaxFactory.Literal("string", "string"), SyntaxFactory.Literal("string", "string"), SyntaxFactory.Literal("string", "string"), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static ReferenceDirectiveTriviaSyntax GenerateReferenceDirectiveTrivia()
            => SyntaxFactory.ReferenceDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.ReferenceKeyword), SyntaxFactory.Literal("string", "string"), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static LoadDirectiveTriviaSyntax GenerateLoadDirectiveTrivia()
            => SyntaxFactory.LoadDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.LoadKeyword), SyntaxFactory.Literal("string", "string"), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static ShebangDirectiveTriviaSyntax GenerateShebangDirectiveTrivia()
            => SyntaxFactory.ShebangDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.ExclamationToken), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());

        private static NullableDirectiveTriviaSyntax GenerateNullableDirectiveTrivia()
            => SyntaxFactory.NullableDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.HashToken), SyntaxFactory.Token(SyntaxKind.NullableKeyword), SyntaxFactory.Token(SyntaxKind.EnableKeyword), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.EndOfDirectiveToken), new bool());
        #endregion Red Generators

        #region Red Factory and Property Tests
        [Fact]
        public void TestIdentifierNameFactoryAndProperties()
        {
            var node = GenerateIdentifierName();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            var newNode = node.WithIdentifier(node.Identifier);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestQualifiedNameFactoryAndProperties()
        {
            var node = GenerateQualifiedName();

            Assert.NotNull(node.Left);
            Assert.Equal(SyntaxKind.DotToken, node.DotToken.Kind());
            Assert.NotNull(node.Right);
            var newNode = node.WithLeft(node.Left).WithDotToken(node.DotToken).WithRight(node.Right);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestGenericNameFactoryAndProperties()
        {
            var node = GenerateGenericName();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.NotNull(node.TypeArgumentList);
            var newNode = node.WithIdentifier(node.Identifier).WithTypeArgumentList(node.TypeArgumentList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTypeArgumentListFactoryAndProperties()
        {
            var node = GenerateTypeArgumentList();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind());
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind());
            var newNode = node.WithLessThanToken(node.LessThanToken).WithArguments(node.Arguments).WithGreaterThanToken(node.GreaterThanToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAliasQualifiedNameFactoryAndProperties()
        {
            var node = GenerateAliasQualifiedName();

            Assert.NotNull(node.Alias);
            Assert.Equal(SyntaxKind.ColonColonToken, node.ColonColonToken.Kind());
            Assert.NotNull(node.Name);
            var newNode = node.WithAlias(node.Alias).WithColonColonToken(node.ColonColonToken).WithName(node.Name);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPredefinedTypeFactoryAndProperties()
        {
            var node = GeneratePredefinedType();

            Assert.Equal(SyntaxKind.BoolKeyword, node.Keyword.Kind());
            var newNode = node.WithKeyword(node.Keyword);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestArrayTypeFactoryAndProperties()
        {
            var node = GenerateArrayType();

            Assert.NotNull(node.ElementType);
            Assert.Equal(default, node.RankSpecifiers);
            var newNode = node.WithElementType(node.ElementType).WithRankSpecifiers(node.RankSpecifiers);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestArrayRankSpecifierFactoryAndProperties()
        {
            var node = GenerateArrayRankSpecifier();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind());
            Assert.Equal(default, node.Sizes);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind());
            var newNode = node.WithOpenBracketToken(node.OpenBracketToken).WithSizes(node.Sizes).WithCloseBracketToken(node.CloseBracketToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPointerTypeFactoryAndProperties()
        {
            var node = GeneratePointerType();

            Assert.NotNull(node.ElementType);
            Assert.Equal(SyntaxKind.AsteriskToken, node.AsteriskToken.Kind());
            var newNode = node.WithElementType(node.ElementType).WithAsteriskToken(node.AsteriskToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFunctionPointerTypeFactoryAndProperties()
        {
            var node = GenerateFunctionPointerType();

            Assert.Equal(SyntaxKind.DelegateKeyword, node.DelegateKeyword.Kind());
            Assert.Equal(SyntaxKind.AsteriskToken, node.AsteriskToken.Kind());
            Assert.Null(node.CallingConvention);
            Assert.NotNull(node.ParameterList);
            var newNode = node.WithDelegateKeyword(node.DelegateKeyword).WithAsteriskToken(node.AsteriskToken).WithCallingConvention(node.CallingConvention).WithParameterList(node.ParameterList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFunctionPointerParameterListFactoryAndProperties()
        {
            var node = GenerateFunctionPointerParameterList();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind());
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind());
            var newNode = node.WithLessThanToken(node.LessThanToken).WithParameters(node.Parameters).WithGreaterThanToken(node.GreaterThanToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFunctionPointerCallingConventionFactoryAndProperties()
        {
            var node = GenerateFunctionPointerCallingConvention();

            Assert.Equal(SyntaxKind.ManagedKeyword, node.ManagedOrUnmanagedKeyword.Kind());
            Assert.Null(node.UnmanagedCallingConventionList);
            var newNode = node.WithManagedOrUnmanagedKeyword(node.ManagedOrUnmanagedKeyword).WithUnmanagedCallingConventionList(node.UnmanagedCallingConventionList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListFactoryAndProperties()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind());
            Assert.Equal(default, node.CallingConventions);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind());
            var newNode = node.WithOpenBracketToken(node.OpenBracketToken).WithCallingConventions(node.CallingConventions).WithCloseBracketToken(node.CloseBracketToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionFactoryAndProperties()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Name.Kind());
            var newNode = node.WithName(node.Name);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestNullableTypeFactoryAndProperties()
        {
            var node = GenerateNullableType();

            Assert.NotNull(node.ElementType);
            Assert.Equal(SyntaxKind.QuestionToken, node.QuestionToken.Kind());
            var newNode = node.WithElementType(node.ElementType).WithQuestionToken(node.QuestionToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTupleTypeFactoryAndProperties()
        {
            var node = GenerateTupleType();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(default, node.Elements);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithElements(node.Elements).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTupleElementFactoryAndProperties()
        {
            var node = GenerateTupleElement();

            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.None, node.Identifier.Kind());
            var newNode = node.WithType(node.Type).WithIdentifier(node.Identifier);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestOmittedTypeArgumentFactoryAndProperties()
        {
            var node = GenerateOmittedTypeArgument();

            Assert.Equal(SyntaxKind.OmittedTypeArgumentToken, node.OmittedTypeArgumentToken.Kind());
            var newNode = node.WithOmittedTypeArgumentToken(node.OmittedTypeArgumentToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestRefTypeFactoryAndProperties()
        {
            var node = GenerateRefType();

            Assert.Equal(SyntaxKind.RefKeyword, node.RefKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.ReadOnlyKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.ScopedKeyword.Kind());
            Assert.NotNull(node.Type);
            var newNode = node.WithRefKeyword(node.RefKeyword).WithReadOnlyKeyword(node.ReadOnlyKeyword).WithScopedKeyword(node.ScopedKeyword).WithType(node.Type);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestParenthesizedExpressionFactoryAndProperties()
        {
            var node = GenerateParenthesizedExpression();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithExpression(node.Expression).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTupleExpressionFactoryAndProperties()
        {
            var node = GenerateTupleExpression();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithArguments(node.Arguments).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPrefixUnaryExpressionFactoryAndProperties()
        {
            var node = GeneratePrefixUnaryExpression();

            Assert.Equal(SyntaxKind.PlusToken, node.OperatorToken.Kind());
            Assert.NotNull(node.Operand);
            var newNode = node.WithOperatorToken(node.OperatorToken).WithOperand(node.Operand);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAwaitExpressionFactoryAndProperties()
        {
            var node = GenerateAwaitExpression();

            Assert.Equal(SyntaxKind.AwaitKeyword, node.AwaitKeyword.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithAwaitKeyword(node.AwaitKeyword).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPostfixUnaryExpressionFactoryAndProperties()
        {
            var node = GeneratePostfixUnaryExpression();

            Assert.NotNull(node.Operand);
            Assert.Equal(SyntaxKind.PlusPlusToken, node.OperatorToken.Kind());
            var newNode = node.WithOperand(node.Operand).WithOperatorToken(node.OperatorToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestMemberAccessExpressionFactoryAndProperties()
        {
            var node = GenerateMemberAccessExpression();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.DotToken, node.OperatorToken.Kind());
            Assert.NotNull(node.Name);
            var newNode = node.WithExpression(node.Expression).WithOperatorToken(node.OperatorToken).WithName(node.Name);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestConditionalAccessExpressionFactoryAndProperties()
        {
            var node = GenerateConditionalAccessExpression();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.QuestionToken, node.OperatorToken.Kind());
            Assert.NotNull(node.WhenNotNull);
            var newNode = node.WithExpression(node.Expression).WithOperatorToken(node.OperatorToken).WithWhenNotNull(node.WhenNotNull);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestMemberBindingExpressionFactoryAndProperties()
        {
            var node = GenerateMemberBindingExpression();

            Assert.Equal(SyntaxKind.DotToken, node.OperatorToken.Kind());
            Assert.NotNull(node.Name);
            var newNode = node.WithOperatorToken(node.OperatorToken).WithName(node.Name);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestElementBindingExpressionFactoryAndProperties()
        {
            var node = GenerateElementBindingExpression();

            Assert.NotNull(node.ArgumentList);
            var newNode = node.WithArgumentList(node.ArgumentList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestRangeExpressionFactoryAndProperties()
        {
            var node = GenerateRangeExpression();

            Assert.Null(node.LeftOperand);
            Assert.Equal(SyntaxKind.DotDotToken, node.OperatorToken.Kind());
            Assert.Null(node.RightOperand);
            var newNode = node.WithLeftOperand(node.LeftOperand).WithOperatorToken(node.OperatorToken).WithRightOperand(node.RightOperand);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestImplicitElementAccessFactoryAndProperties()
        {
            var node = GenerateImplicitElementAccess();

            Assert.NotNull(node.ArgumentList);
            var newNode = node.WithArgumentList(node.ArgumentList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestBinaryExpressionFactoryAndProperties()
        {
            var node = GenerateBinaryExpression();

            Assert.NotNull(node.Left);
            Assert.Equal(SyntaxKind.PlusToken, node.OperatorToken.Kind());
            Assert.NotNull(node.Right);
            var newNode = node.WithLeft(node.Left).WithOperatorToken(node.OperatorToken).WithRight(node.Right);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAssignmentExpressionFactoryAndProperties()
        {
            var node = GenerateAssignmentExpression();

            Assert.NotNull(node.Left);
            Assert.Equal(SyntaxKind.EqualsToken, node.OperatorToken.Kind());
            Assert.NotNull(node.Right);
            var newNode = node.WithLeft(node.Left).WithOperatorToken(node.OperatorToken).WithRight(node.Right);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestConditionalExpressionFactoryAndProperties()
        {
            var node = GenerateConditionalExpression();

            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.QuestionToken, node.QuestionToken.Kind());
            Assert.NotNull(node.WhenTrue);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            Assert.NotNull(node.WhenFalse);
            var newNode = node.WithCondition(node.Condition).WithQuestionToken(node.QuestionToken).WithWhenTrue(node.WhenTrue).WithColonToken(node.ColonToken).WithWhenFalse(node.WhenFalse);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestThisExpressionFactoryAndProperties()
        {
            var node = GenerateThisExpression();

            Assert.Equal(SyntaxKind.ThisKeyword, node.Token.Kind());
            var newNode = node.WithToken(node.Token);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestBaseExpressionFactoryAndProperties()
        {
            var node = GenerateBaseExpression();

            Assert.Equal(SyntaxKind.BaseKeyword, node.Token.Kind());
            var newNode = node.WithToken(node.Token);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLiteralExpressionFactoryAndProperties()
        {
            var node = GenerateLiteralExpression();

            Assert.Equal(SyntaxKind.ArgListKeyword, node.Token.Kind());
            var newNode = node.WithToken(node.Token);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestMakeRefExpressionFactoryAndProperties()
        {
            var node = GenerateMakeRefExpression();

            Assert.Equal(SyntaxKind.MakeRefKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithOpenParenToken(node.OpenParenToken).WithExpression(node.Expression).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestRefTypeExpressionFactoryAndProperties()
        {
            var node = GenerateRefTypeExpression();

            Assert.Equal(SyntaxKind.RefTypeKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithOpenParenToken(node.OpenParenToken).WithExpression(node.Expression).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestRefValueExpressionFactoryAndProperties()
        {
            var node = GenerateRefValueExpression();

            Assert.Equal(SyntaxKind.RefValueKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CommaToken, node.Comma.Kind());
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithOpenParenToken(node.OpenParenToken).WithExpression(node.Expression).WithComma(node.Comma).WithType(node.Type).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCheckedExpressionFactoryAndProperties()
        {
            var node = GenerateCheckedExpression();

            Assert.Equal(SyntaxKind.CheckedKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithOpenParenToken(node.OpenParenToken).WithExpression(node.Expression).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDefaultExpressionFactoryAndProperties()
        {
            var node = GenerateDefaultExpression();

            Assert.Equal(SyntaxKind.DefaultKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithOpenParenToken(node.OpenParenToken).WithType(node.Type).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTypeOfExpressionFactoryAndProperties()
        {
            var node = GenerateTypeOfExpression();

            Assert.Equal(SyntaxKind.TypeOfKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithOpenParenToken(node.OpenParenToken).WithType(node.Type).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSizeOfExpressionFactoryAndProperties()
        {
            var node = GenerateSizeOfExpression();

            Assert.Equal(SyntaxKind.SizeOfKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithOpenParenToken(node.OpenParenToken).WithType(node.Type).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestInvocationExpressionFactoryAndProperties()
        {
            var node = GenerateInvocationExpression();

            Assert.NotNull(node.Expression);
            Assert.NotNull(node.ArgumentList);
            var newNode = node.WithExpression(node.Expression).WithArgumentList(node.ArgumentList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestElementAccessExpressionFactoryAndProperties()
        {
            var node = GenerateElementAccessExpression();

            Assert.NotNull(node.Expression);
            Assert.NotNull(node.ArgumentList);
            var newNode = node.WithExpression(node.Expression).WithArgumentList(node.ArgumentList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestArgumentListFactoryAndProperties()
        {
            var node = GenerateArgumentList();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithArguments(node.Arguments).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestBracketedArgumentListFactoryAndProperties()
        {
            var node = GenerateBracketedArgumentList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind());
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind());
            var newNode = node.WithOpenBracketToken(node.OpenBracketToken).WithArguments(node.Arguments).WithCloseBracketToken(node.CloseBracketToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestArgumentFactoryAndProperties()
        {
            var node = GenerateArgument();

            Assert.Null(node.NameColon);
            Assert.Equal(SyntaxKind.None, node.RefKindKeyword.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithNameColon(node.NameColon).WithRefKindKeyword(node.RefKindKeyword).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestExpressionColonFactoryAndProperties()
        {
            var node = GenerateExpressionColon();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            var newNode = node.WithExpression(node.Expression).WithColonToken(node.ColonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestNameColonFactoryAndProperties()
        {
            var node = GenerateNameColon();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            var newNode = node.WithName(node.Name).WithColonToken(node.ColonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDeclarationExpressionFactoryAndProperties()
        {
            var node = GenerateDeclarationExpression();

            Assert.NotNull(node.Type);
            Assert.NotNull(node.Designation);
            var newNode = node.WithType(node.Type).WithDesignation(node.Designation);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCastExpressionFactoryAndProperties()
        {
            var node = GenerateCastExpression();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithType(node.Type).WithCloseParenToken(node.CloseParenToken).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAnonymousMethodExpressionFactoryAndProperties()
        {
            var node = GenerateAnonymousMethodExpression();

            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.DelegateKeyword, node.DelegateKeyword.Kind());
            Assert.Null(node.ParameterList);
            Assert.NotNull(node.Block);
            Assert.Null(node.ExpressionBody);
            var newNode = node.WithModifiers(node.Modifiers).WithDelegateKeyword(node.DelegateKeyword).WithParameterList(node.ParameterList).WithBlock(node.Block).WithExpressionBody(node.ExpressionBody);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSimpleLambdaExpressionFactoryAndProperties()
        {
            var node = GenerateSimpleLambdaExpression();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Parameter);
            Assert.Equal(SyntaxKind.EqualsGreaterThanToken, node.ArrowToken.Kind());
            Assert.Null(node.Block);
            Assert.Null(node.ExpressionBody);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithParameter(node.Parameter).WithArrowToken(node.ArrowToken).WithBlock(node.Block).WithExpressionBody(node.ExpressionBody);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestRefExpressionFactoryAndProperties()
        {
            var node = GenerateRefExpression();

            Assert.Equal(SyntaxKind.RefKeyword, node.RefKeyword.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithRefKeyword(node.RefKeyword).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionFactoryAndProperties()
        {
            var node = GenerateParenthesizedLambdaExpression();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Null(node.ReturnType);
            Assert.NotNull(node.ParameterList);
            Assert.Equal(SyntaxKind.EqualsGreaterThanToken, node.ArrowToken.Kind());
            Assert.Null(node.Block);
            Assert.Null(node.ExpressionBody);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithReturnType(node.ReturnType).WithParameterList(node.ParameterList).WithArrowToken(node.ArrowToken).WithBlock(node.Block).WithExpressionBody(node.ExpressionBody);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestInitializerExpressionFactoryAndProperties()
        {
            var node = GenerateInitializerExpression();

            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Expressions);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            var newNode = node.WithOpenBraceToken(node.OpenBraceToken).WithExpressions(node.Expressions).WithCloseBraceToken(node.CloseBraceToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionFactoryAndProperties()
        {
            var node = GenerateImplicitObjectCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind());
            Assert.NotNull(node.ArgumentList);
            Assert.Null(node.Initializer);
            var newNode = node.WithNewKeyword(node.NewKeyword).WithArgumentList(node.ArgumentList).WithInitializer(node.Initializer);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestObjectCreationExpressionFactoryAndProperties()
        {
            var node = GenerateObjectCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind());
            Assert.NotNull(node.Type);
            Assert.Null(node.ArgumentList);
            Assert.Null(node.Initializer);
            var newNode = node.WithNewKeyword(node.NewKeyword).WithType(node.Type).WithArgumentList(node.ArgumentList).WithInitializer(node.Initializer);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestWithExpressionFactoryAndProperties()
        {
            var node = GenerateWithExpression();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.WithKeyword, node.WithKeyword.Kind());
            Assert.NotNull(node.Initializer);
            var newNode = node.WithExpression(node.Expression).WithWithKeyword(node.WithKeyword).WithInitializer(node.Initializer);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorFactoryAndProperties()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();

            Assert.Null(node.NameEquals);
            Assert.NotNull(node.Expression);
            var newNode = node.WithNameEquals(node.NameEquals).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionFactoryAndProperties()
        {
            var node = GenerateAnonymousObjectCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Initializers);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            var newNode = node.WithNewKeyword(node.NewKeyword).WithOpenBraceToken(node.OpenBraceToken).WithInitializers(node.Initializers).WithCloseBraceToken(node.CloseBraceToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestArrayCreationExpressionFactoryAndProperties()
        {
            var node = GenerateArrayCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind());
            Assert.NotNull(node.Type);
            Assert.Null(node.Initializer);
            var newNode = node.WithNewKeyword(node.NewKeyword).WithType(node.Type).WithInitializer(node.Initializer);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionFactoryAndProperties()
        {
            var node = GenerateImplicitArrayCreationExpression();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind());
            Assert.Equal(default, node.Commas);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind());
            Assert.NotNull(node.Initializer);
            var newNode = node.WithNewKeyword(node.NewKeyword).WithOpenBracketToken(node.OpenBracketToken).WithCommas(node.Commas).WithCloseBracketToken(node.CloseBracketToken).WithInitializer(node.Initializer);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionFactoryAndProperties()
        {
            var node = GenerateStackAllocArrayCreationExpression();

            Assert.Equal(SyntaxKind.StackAllocKeyword, node.StackAllocKeyword.Kind());
            Assert.NotNull(node.Type);
            Assert.Null(node.Initializer);
            var newNode = node.WithStackAllocKeyword(node.StackAllocKeyword).WithType(node.Type).WithInitializer(node.Initializer);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionFactoryAndProperties()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();

            Assert.Equal(SyntaxKind.StackAllocKeyword, node.StackAllocKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind());
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind());
            Assert.NotNull(node.Initializer);
            var newNode = node.WithStackAllocKeyword(node.StackAllocKeyword).WithOpenBracketToken(node.OpenBracketToken).WithCloseBracketToken(node.CloseBracketToken).WithInitializer(node.Initializer);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestQueryExpressionFactoryAndProperties()
        {
            var node = GenerateQueryExpression();

            Assert.NotNull(node.FromClause);
            Assert.NotNull(node.Body);
            var newNode = node.WithFromClause(node.FromClause).WithBody(node.Body);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestQueryBodyFactoryAndProperties()
        {
            var node = GenerateQueryBody();

            Assert.Equal(default, node.Clauses);
            Assert.NotNull(node.SelectOrGroup);
            Assert.Null(node.Continuation);
            var newNode = node.WithClauses(node.Clauses).WithSelectOrGroup(node.SelectOrGroup).WithContinuation(node.Continuation);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFromClauseFactoryAndProperties()
        {
            var node = GenerateFromClause();

            Assert.Equal(SyntaxKind.FromKeyword, node.FromKeyword.Kind());
            Assert.Null(node.Type);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Equal(SyntaxKind.InKeyword, node.InKeyword.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithFromKeyword(node.FromKeyword).WithType(node.Type).WithIdentifier(node.Identifier).WithInKeyword(node.InKeyword).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLetClauseFactoryAndProperties()
        {
            var node = GenerateLetClause();

            Assert.Equal(SyntaxKind.LetKeyword, node.LetKeyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithLetKeyword(node.LetKeyword).WithIdentifier(node.Identifier).WithEqualsToken(node.EqualsToken).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestJoinClauseFactoryAndProperties()
        {
            var node = GenerateJoinClause();

            Assert.Equal(SyntaxKind.JoinKeyword, node.JoinKeyword.Kind());
            Assert.Null(node.Type);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Equal(SyntaxKind.InKeyword, node.InKeyword.Kind());
            Assert.NotNull(node.InExpression);
            Assert.Equal(SyntaxKind.OnKeyword, node.OnKeyword.Kind());
            Assert.NotNull(node.LeftExpression);
            Assert.Equal(SyntaxKind.EqualsKeyword, node.EqualsKeyword.Kind());
            Assert.NotNull(node.RightExpression);
            Assert.Null(node.Into);
            var newNode = node.WithJoinKeyword(node.JoinKeyword).WithType(node.Type).WithIdentifier(node.Identifier).WithInKeyword(node.InKeyword).WithInExpression(node.InExpression).WithOnKeyword(node.OnKeyword).WithLeftExpression(node.LeftExpression).WithEqualsKeyword(node.EqualsKeyword).WithRightExpression(node.RightExpression).WithInto(node.Into);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestJoinIntoClauseFactoryAndProperties()
        {
            var node = GenerateJoinIntoClause();

            Assert.Equal(SyntaxKind.IntoKeyword, node.IntoKeyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            var newNode = node.WithIntoKeyword(node.IntoKeyword).WithIdentifier(node.Identifier);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestWhereClauseFactoryAndProperties()
        {
            var node = GenerateWhereClause();

            Assert.Equal(SyntaxKind.WhereKeyword, node.WhereKeyword.Kind());
            Assert.NotNull(node.Condition);
            var newNode = node.WithWhereKeyword(node.WhereKeyword).WithCondition(node.Condition);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestOrderByClauseFactoryAndProperties()
        {
            var node = GenerateOrderByClause();

            Assert.Equal(SyntaxKind.OrderByKeyword, node.OrderByKeyword.Kind());
            Assert.Equal(default, node.Orderings);
            var newNode = node.WithOrderByKeyword(node.OrderByKeyword).WithOrderings(node.Orderings);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestOrderingFactoryAndProperties()
        {
            var node = GenerateOrdering();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.None, node.AscendingOrDescendingKeyword.Kind());
            var newNode = node.WithExpression(node.Expression).WithAscendingOrDescendingKeyword(node.AscendingOrDescendingKeyword);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSelectClauseFactoryAndProperties()
        {
            var node = GenerateSelectClause();

            Assert.Equal(SyntaxKind.SelectKeyword, node.SelectKeyword.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithSelectKeyword(node.SelectKeyword).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestGroupClauseFactoryAndProperties()
        {
            var node = GenerateGroupClause();

            Assert.Equal(SyntaxKind.GroupKeyword, node.GroupKeyword.Kind());
            Assert.NotNull(node.GroupExpression);
            Assert.Equal(SyntaxKind.ByKeyword, node.ByKeyword.Kind());
            Assert.NotNull(node.ByExpression);
            var newNode = node.WithGroupKeyword(node.GroupKeyword).WithGroupExpression(node.GroupExpression).WithByKeyword(node.ByKeyword).WithByExpression(node.ByExpression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestQueryContinuationFactoryAndProperties()
        {
            var node = GenerateQueryContinuation();

            Assert.Equal(SyntaxKind.IntoKeyword, node.IntoKeyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.NotNull(node.Body);
            var newNode = node.WithIntoKeyword(node.IntoKeyword).WithIdentifier(node.Identifier).WithBody(node.Body);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestOmittedArraySizeExpressionFactoryAndProperties()
        {
            var node = GenerateOmittedArraySizeExpression();

            Assert.Equal(SyntaxKind.OmittedArraySizeExpressionToken, node.OmittedArraySizeExpressionToken.Kind());
            var newNode = node.WithOmittedArraySizeExpressionToken(node.OmittedArraySizeExpressionToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestInterpolatedStringExpressionFactoryAndProperties()
        {
            var node = GenerateInterpolatedStringExpression();

            Assert.Equal(SyntaxKind.InterpolatedStringStartToken, node.StringStartToken.Kind());
            Assert.Equal(default, node.Contents);
            Assert.Equal(SyntaxKind.InterpolatedStringEndToken, node.StringEndToken.Kind());
            var newNode = node.WithStringStartToken(node.StringStartToken).WithContents(node.Contents).WithStringEndToken(node.StringEndToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestIsPatternExpressionFactoryAndProperties()
        {
            var node = GenerateIsPatternExpression();

            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.IsKeyword, node.IsKeyword.Kind());
            Assert.NotNull(node.Pattern);
            var newNode = node.WithExpression(node.Expression).WithIsKeyword(node.IsKeyword).WithPattern(node.Pattern);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestThrowExpressionFactoryAndProperties()
        {
            var node = GenerateThrowExpression();

            Assert.Equal(SyntaxKind.ThrowKeyword, node.ThrowKeyword.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithThrowKeyword(node.ThrowKeyword).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestWhenClauseFactoryAndProperties()
        {
            var node = GenerateWhenClause();

            Assert.Equal(SyntaxKind.WhenKeyword, node.WhenKeyword.Kind());
            Assert.NotNull(node.Condition);
            var newNode = node.WithWhenKeyword(node.WhenKeyword).WithCondition(node.Condition);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDiscardPatternFactoryAndProperties()
        {
            var node = GenerateDiscardPattern();

            Assert.Equal(SyntaxKind.UnderscoreToken, node.UnderscoreToken.Kind());
            var newNode = node.WithUnderscoreToken(node.UnderscoreToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDeclarationPatternFactoryAndProperties()
        {
            var node = GenerateDeclarationPattern();

            Assert.NotNull(node.Type);
            Assert.NotNull(node.Designation);
            var newNode = node.WithType(node.Type).WithDesignation(node.Designation);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestVarPatternFactoryAndProperties()
        {
            var node = GenerateVarPattern();

            Assert.Equal(SyntaxKind.VarKeyword, node.VarKeyword.Kind());
            Assert.NotNull(node.Designation);
            var newNode = node.WithVarKeyword(node.VarKeyword).WithDesignation(node.Designation);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestRecursivePatternFactoryAndProperties()
        {
            var node = GenerateRecursivePattern();

            Assert.Null(node.Type);
            Assert.Null(node.PositionalPatternClause);
            Assert.Null(node.PropertyPatternClause);
            Assert.Null(node.Designation);
            var newNode = node.WithType(node.Type).WithPositionalPatternClause(node.PositionalPatternClause).WithPropertyPatternClause(node.PropertyPatternClause).WithDesignation(node.Designation);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPositionalPatternClauseFactoryAndProperties()
        {
            var node = GeneratePositionalPatternClause();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(default, node.Subpatterns);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithSubpatterns(node.Subpatterns).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPropertyPatternClauseFactoryAndProperties()
        {
            var node = GeneratePropertyPatternClause();

            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Subpatterns);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            var newNode = node.WithOpenBraceToken(node.OpenBraceToken).WithSubpatterns(node.Subpatterns).WithCloseBraceToken(node.CloseBraceToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSubpatternFactoryAndProperties()
        {
            var node = GenerateSubpattern();

            Assert.Null(node.ExpressionColon);
            Assert.NotNull(node.Pattern);
            var newNode = node.WithExpressionColon(node.ExpressionColon).WithPattern(node.Pattern);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestConstantPatternFactoryAndProperties()
        {
            var node = GenerateConstantPattern();

            Assert.NotNull(node.Expression);
            var newNode = node.WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestParenthesizedPatternFactoryAndProperties()
        {
            var node = GenerateParenthesizedPattern();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Pattern);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithPattern(node.Pattern).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestRelationalPatternFactoryAndProperties()
        {
            var node = GenerateRelationalPattern();

            Assert.Equal(SyntaxKind.EqualsEqualsToken, node.OperatorToken.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithOperatorToken(node.OperatorToken).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTypePatternFactoryAndProperties()
        {
            var node = GenerateTypePattern();

            Assert.NotNull(node.Type);
            var newNode = node.WithType(node.Type);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestBinaryPatternFactoryAndProperties()
        {
            var node = GenerateBinaryPattern();

            Assert.NotNull(node.Left);
            Assert.Equal(SyntaxKind.OrKeyword, node.OperatorToken.Kind());
            Assert.NotNull(node.Right);
            var newNode = node.WithLeft(node.Left).WithOperatorToken(node.OperatorToken).WithRight(node.Right);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestUnaryPatternFactoryAndProperties()
        {
            var node = GenerateUnaryPattern();

            Assert.Equal(SyntaxKind.NotKeyword, node.OperatorToken.Kind());
            Assert.NotNull(node.Pattern);
            var newNode = node.WithOperatorToken(node.OperatorToken).WithPattern(node.Pattern);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestListPatternFactoryAndProperties()
        {
            var node = GenerateListPattern();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind());
            Assert.Equal(default, node.Patterns);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind());
            Assert.Null(node.Designation);
            var newNode = node.WithOpenBracketToken(node.OpenBracketToken).WithPatterns(node.Patterns).WithCloseBracketToken(node.CloseBracketToken).WithDesignation(node.Designation);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSlicePatternFactoryAndProperties()
        {
            var node = GenerateSlicePattern();

            Assert.Equal(SyntaxKind.DotDotToken, node.DotDotToken.Kind());
            Assert.Null(node.Pattern);
            var newNode = node.WithDotDotToken(node.DotDotToken).WithPattern(node.Pattern);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestInterpolatedStringTextFactoryAndProperties()
        {
            var node = GenerateInterpolatedStringText();

            Assert.Equal(SyntaxKind.InterpolatedStringTextToken, node.TextToken.Kind());
            var newNode = node.WithTextToken(node.TextToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestInterpolationFactoryAndProperties()
        {
            var node = GenerateInterpolation();

            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.NotNull(node.Expression);
            Assert.Null(node.AlignmentClause);
            Assert.Null(node.FormatClause);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            var newNode = node.WithOpenBraceToken(node.OpenBraceToken).WithExpression(node.Expression).WithAlignmentClause(node.AlignmentClause).WithFormatClause(node.FormatClause).WithCloseBraceToken(node.CloseBraceToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestInterpolationAlignmentClauseFactoryAndProperties()
        {
            var node = GenerateInterpolationAlignmentClause();

            Assert.Equal(SyntaxKind.IdentifierToken, node.CommaToken.Kind());
            Assert.NotNull(node.Value);
            var newNode = node.WithCommaToken(node.CommaToken).WithValue(node.Value);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestInterpolationFormatClauseFactoryAndProperties()
        {
            var node = GenerateInterpolationFormatClause();

            Assert.Equal(SyntaxKind.IdentifierToken, node.ColonToken.Kind());
            Assert.Equal(SyntaxKind.InterpolatedStringTextToken, node.FormatStringToken.Kind());
            var newNode = node.WithColonToken(node.ColonToken).WithFormatStringToken(node.FormatStringToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestGlobalStatementFactoryAndProperties()
        {
            var node = GenerateGlobalStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Statement);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestBlockFactoryAndProperties()
        {
            var node = GenerateBlock();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Statements);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithOpenBraceToken(node.OpenBraceToken).WithStatements(node.Statements).WithCloseBraceToken(node.CloseBraceToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLocalFunctionStatementFactoryAndProperties()
        {
            var node = GenerateLocalFunctionStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.ReturnType);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.TypeParameterList);
            Assert.NotNull(node.ParameterList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithReturnType(node.ReturnType).WithIdentifier(node.Identifier).WithTypeParameterList(node.TypeParameterList).WithParameterList(node.ParameterList).WithConstraintClauses(node.ConstraintClauses).WithBody(node.Body).WithExpressionBody(node.ExpressionBody).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLocalDeclarationStatementFactoryAndProperties()
        {
            var node = GenerateLocalDeclarationStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.None, node.AwaitKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.UsingKeyword.Kind());
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Declaration);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithAwaitKeyword(node.AwaitKeyword).WithUsingKeyword(node.UsingKeyword).WithModifiers(node.Modifiers).WithDeclaration(node.Declaration).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestVariableDeclarationFactoryAndProperties()
        {
            var node = GenerateVariableDeclaration();

            Assert.NotNull(node.Type);
            Assert.Equal(default, node.Variables);
            var newNode = node.WithType(node.Type).WithVariables(node.Variables);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestVariableDeclaratorFactoryAndProperties()
        {
            var node = GenerateVariableDeclarator();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.ArgumentList);
            Assert.Null(node.Initializer);
            var newNode = node.WithIdentifier(node.Identifier).WithArgumentList(node.ArgumentList).WithInitializer(node.Initializer);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestEqualsValueClauseFactoryAndProperties()
        {
            var node = GenerateEqualsValueClause();

            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind());
            Assert.NotNull(node.Value);
            var newNode = node.WithEqualsToken(node.EqualsToken).WithValue(node.Value);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSingleVariableDesignationFactoryAndProperties()
        {
            var node = GenerateSingleVariableDesignation();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            var newNode = node.WithIdentifier(node.Identifier);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDiscardDesignationFactoryAndProperties()
        {
            var node = GenerateDiscardDesignation();

            Assert.Equal(SyntaxKind.UnderscoreToken, node.UnderscoreToken.Kind());
            var newNode = node.WithUnderscoreToken(node.UnderscoreToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestParenthesizedVariableDesignationFactoryAndProperties()
        {
            var node = GenerateParenthesizedVariableDesignation();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(default, node.Variables);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithVariables(node.Variables).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestExpressionStatementFactoryAndProperties()
        {
            var node = GenerateExpressionStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithExpression(node.Expression).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestEmptyStatementFactoryAndProperties()
        {
            var node = GenerateEmptyStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLabeledStatementFactoryAndProperties()
        {
            var node = GenerateLabeledStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            Assert.NotNull(node.Statement);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithIdentifier(node.Identifier).WithColonToken(node.ColonToken).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestGotoStatementFactoryAndProperties()
        {
            var node = GenerateGotoStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.GotoKeyword, node.GotoKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.CaseOrDefaultKeyword.Kind());
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithGotoKeyword(node.GotoKeyword).WithCaseOrDefaultKeyword(node.CaseOrDefaultKeyword).WithExpression(node.Expression).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestBreakStatementFactoryAndProperties()
        {
            var node = GenerateBreakStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.BreakKeyword, node.BreakKeyword.Kind());
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithBreakKeyword(node.BreakKeyword).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestContinueStatementFactoryAndProperties()
        {
            var node = GenerateContinueStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.ContinueKeyword, node.ContinueKeyword.Kind());
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithContinueKeyword(node.ContinueKeyword).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestReturnStatementFactoryAndProperties()
        {
            var node = GenerateReturnStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.ReturnKeyword, node.ReturnKeyword.Kind());
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithReturnKeyword(node.ReturnKeyword).WithExpression(node.Expression).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestThrowStatementFactoryAndProperties()
        {
            var node = GenerateThrowStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.ThrowKeyword, node.ThrowKeyword.Kind());
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithThrowKeyword(node.ThrowKeyword).WithExpression(node.Expression).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestYieldStatementFactoryAndProperties()
        {
            var node = GenerateYieldStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.YieldKeyword, node.YieldKeyword.Kind());
            Assert.Equal(SyntaxKind.ReturnKeyword, node.ReturnOrBreakKeyword.Kind());
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithYieldKeyword(node.YieldKeyword).WithReturnOrBreakKeyword(node.ReturnOrBreakKeyword).WithExpression(node.Expression).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestWhileStatementFactoryAndProperties()
        {
            var node = GenerateWhileStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.WhileKeyword, node.WhileKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.NotNull(node.Statement);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithWhileKeyword(node.WhileKeyword).WithOpenParenToken(node.OpenParenToken).WithCondition(node.Condition).WithCloseParenToken(node.CloseParenToken).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDoStatementFactoryAndProperties()
        {
            var node = GenerateDoStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.DoKeyword, node.DoKeyword.Kind());
            Assert.NotNull(node.Statement);
            Assert.Equal(SyntaxKind.WhileKeyword, node.WhileKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithDoKeyword(node.DoKeyword).WithStatement(node.Statement).WithWhileKeyword(node.WhileKeyword).WithOpenParenToken(node.OpenParenToken).WithCondition(node.Condition).WithCloseParenToken(node.CloseParenToken).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestForStatementFactoryAndProperties()
        {
            var node = GenerateForStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.ForKeyword, node.ForKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Null(node.Declaration);
            Assert.Equal(default, node.Initializers);
            Assert.Equal(SyntaxKind.SemicolonToken, node.FirstSemicolonToken.Kind());
            Assert.Null(node.Condition);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SecondSemicolonToken.Kind());
            Assert.Equal(default, node.Incrementors);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.NotNull(node.Statement);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithForKeyword(node.ForKeyword).WithOpenParenToken(node.OpenParenToken).WithDeclaration(node.Declaration).WithInitializers(node.Initializers).WithFirstSemicolonToken(node.FirstSemicolonToken).WithCondition(node.Condition).WithSecondSemicolonToken(node.SecondSemicolonToken).WithIncrementors(node.Incrementors).WithCloseParenToken(node.CloseParenToken).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestForEachStatementFactoryAndProperties()
        {
            var node = GenerateForEachStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.None, node.AwaitKeyword.Kind());
            Assert.Equal(SyntaxKind.ForEachKeyword, node.ForEachKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Equal(SyntaxKind.InKeyword, node.InKeyword.Kind());
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.NotNull(node.Statement);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithAwaitKeyword(node.AwaitKeyword).WithForEachKeyword(node.ForEachKeyword).WithOpenParenToken(node.OpenParenToken).WithType(node.Type).WithIdentifier(node.Identifier).WithInKeyword(node.InKeyword).WithExpression(node.Expression).WithCloseParenToken(node.CloseParenToken).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestForEachVariableStatementFactoryAndProperties()
        {
            var node = GenerateForEachVariableStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.None, node.AwaitKeyword.Kind());
            Assert.Equal(SyntaxKind.ForEachKeyword, node.ForEachKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Variable);
            Assert.Equal(SyntaxKind.InKeyword, node.InKeyword.Kind());
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.NotNull(node.Statement);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithAwaitKeyword(node.AwaitKeyword).WithForEachKeyword(node.ForEachKeyword).WithOpenParenToken(node.OpenParenToken).WithVariable(node.Variable).WithInKeyword(node.InKeyword).WithExpression(node.Expression).WithCloseParenToken(node.CloseParenToken).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestUsingStatementFactoryAndProperties()
        {
            var node = GenerateUsingStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.None, node.AwaitKeyword.Kind());
            Assert.Equal(SyntaxKind.UsingKeyword, node.UsingKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Null(node.Declaration);
            Assert.Null(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.NotNull(node.Statement);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithAwaitKeyword(node.AwaitKeyword).WithUsingKeyword(node.UsingKeyword).WithOpenParenToken(node.OpenParenToken).WithDeclaration(node.Declaration).WithExpression(node.Expression).WithCloseParenToken(node.CloseParenToken).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFixedStatementFactoryAndProperties()
        {
            var node = GenerateFixedStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.FixedKeyword, node.FixedKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Declaration);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.NotNull(node.Statement);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithFixedKeyword(node.FixedKeyword).WithOpenParenToken(node.OpenParenToken).WithDeclaration(node.Declaration).WithCloseParenToken(node.CloseParenToken).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCheckedStatementFactoryAndProperties()
        {
            var node = GenerateCheckedStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.CheckedKeyword, node.Keyword.Kind());
            Assert.NotNull(node.Block);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithKeyword(node.Keyword).WithBlock(node.Block);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestUnsafeStatementFactoryAndProperties()
        {
            var node = GenerateUnsafeStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.UnsafeKeyword, node.UnsafeKeyword.Kind());
            Assert.NotNull(node.Block);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithUnsafeKeyword(node.UnsafeKeyword).WithBlock(node.Block);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLockStatementFactoryAndProperties()
        {
            var node = GenerateLockStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.LockKeyword, node.LockKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.NotNull(node.Statement);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithLockKeyword(node.LockKeyword).WithOpenParenToken(node.OpenParenToken).WithExpression(node.Expression).WithCloseParenToken(node.CloseParenToken).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestIfStatementFactoryAndProperties()
        {
            var node = GenerateIfStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.IfKeyword, node.IfKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            Assert.NotNull(node.Statement);
            Assert.Null(node.Else);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithIfKeyword(node.IfKeyword).WithOpenParenToken(node.OpenParenToken).WithCondition(node.Condition).WithCloseParenToken(node.CloseParenToken).WithStatement(node.Statement).WithElse(node.Else);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestElseClauseFactoryAndProperties()
        {
            var node = GenerateElseClause();

            Assert.Equal(SyntaxKind.ElseKeyword, node.ElseKeyword.Kind());
            Assert.NotNull(node.Statement);
            var newNode = node.WithElseKeyword(node.ElseKeyword).WithStatement(node.Statement);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSwitchStatementFactoryAndProperties()
        {
            var node = GenerateSwitchStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.SwitchKeyword, node.SwitchKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.OpenParenToken.Kind());
            Assert.NotNull(node.Expression);
            Assert.Equal(SyntaxKind.None, node.CloseParenToken.Kind());
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Sections);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithSwitchKeyword(node.SwitchKeyword).WithOpenParenToken(node.OpenParenToken).WithExpression(node.Expression).WithCloseParenToken(node.CloseParenToken).WithOpenBraceToken(node.OpenBraceToken).WithSections(node.Sections).WithCloseBraceToken(node.CloseBraceToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSwitchSectionFactoryAndProperties()
        {
            var node = GenerateSwitchSection();

            Assert.Equal(default, node.Labels);
            Assert.Equal(default, node.Statements);
            var newNode = node.WithLabels(node.Labels).WithStatements(node.Statements);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCasePatternSwitchLabelFactoryAndProperties()
        {
            var node = GenerateCasePatternSwitchLabel();

            Assert.Equal(SyntaxKind.CaseKeyword, node.Keyword.Kind());
            Assert.NotNull(node.Pattern);
            Assert.Null(node.WhenClause);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithPattern(node.Pattern).WithWhenClause(node.WhenClause).WithColonToken(node.ColonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCaseSwitchLabelFactoryAndProperties()
        {
            var node = GenerateCaseSwitchLabel();

            Assert.Equal(SyntaxKind.CaseKeyword, node.Keyword.Kind());
            Assert.NotNull(node.Value);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithValue(node.Value).WithColonToken(node.ColonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDefaultSwitchLabelFactoryAndProperties()
        {
            var node = GenerateDefaultSwitchLabel();

            Assert.Equal(SyntaxKind.DefaultKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            var newNode = node.WithKeyword(node.Keyword).WithColonToken(node.ColonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSwitchExpressionFactoryAndProperties()
        {
            var node = GenerateSwitchExpression();

            Assert.NotNull(node.GoverningExpression);
            Assert.Equal(SyntaxKind.SwitchKeyword, node.SwitchKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Arms);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            var newNode = node.WithGoverningExpression(node.GoverningExpression).WithSwitchKeyword(node.SwitchKeyword).WithOpenBraceToken(node.OpenBraceToken).WithArms(node.Arms).WithCloseBraceToken(node.CloseBraceToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSwitchExpressionArmFactoryAndProperties()
        {
            var node = GenerateSwitchExpressionArm();

            Assert.NotNull(node.Pattern);
            Assert.Null(node.WhenClause);
            Assert.Equal(SyntaxKind.EqualsGreaterThanToken, node.EqualsGreaterThanToken.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithPattern(node.Pattern).WithWhenClause(node.WhenClause).WithEqualsGreaterThanToken(node.EqualsGreaterThanToken).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTryStatementFactoryAndProperties()
        {
            var node = GenerateTryStatement();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.TryKeyword, node.TryKeyword.Kind());
            Assert.NotNull(node.Block);
            Assert.Equal(default, node.Catches);
            Assert.Null(node.Finally);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithTryKeyword(node.TryKeyword).WithBlock(node.Block).WithCatches(node.Catches).WithFinally(node.Finally);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCatchClauseFactoryAndProperties()
        {
            var node = GenerateCatchClause();

            Assert.Equal(SyntaxKind.CatchKeyword, node.CatchKeyword.Kind());
            Assert.Null(node.Declaration);
            Assert.Null(node.Filter);
            Assert.NotNull(node.Block);
            var newNode = node.WithCatchKeyword(node.CatchKeyword).WithDeclaration(node.Declaration).WithFilter(node.Filter).WithBlock(node.Block);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCatchDeclarationFactoryAndProperties()
        {
            var node = GenerateCatchDeclaration();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.Type);
            Assert.Equal(SyntaxKind.None, node.Identifier.Kind());
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithType(node.Type).WithIdentifier(node.Identifier).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCatchFilterClauseFactoryAndProperties()
        {
            var node = GenerateCatchFilterClause();

            Assert.Equal(SyntaxKind.WhenKeyword, node.WhenKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.NotNull(node.FilterExpression);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithWhenKeyword(node.WhenKeyword).WithOpenParenToken(node.OpenParenToken).WithFilterExpression(node.FilterExpression).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFinallyClauseFactoryAndProperties()
        {
            var node = GenerateFinallyClause();

            Assert.Equal(SyntaxKind.FinallyKeyword, node.FinallyKeyword.Kind());
            Assert.NotNull(node.Block);
            var newNode = node.WithFinallyKeyword(node.FinallyKeyword).WithBlock(node.Block);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCompilationUnitFactoryAndProperties()
        {
            var node = GenerateCompilationUnit();

            Assert.Equal(default, node.Externs);
            Assert.Equal(default, node.Usings);
            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.EndOfFileToken, node.EndOfFileToken.Kind());
            var newNode = node.WithExterns(node.Externs).WithUsings(node.Usings).WithAttributeLists(node.AttributeLists).WithMembers(node.Members).WithEndOfFileToken(node.EndOfFileToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestExternAliasDirectiveFactoryAndProperties()
        {
            var node = GenerateExternAliasDirective();

            Assert.Equal(SyntaxKind.ExternKeyword, node.ExternKeyword.Kind());
            Assert.Equal(SyntaxKind.AliasKeyword, node.AliasKeyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithExternKeyword(node.ExternKeyword).WithAliasKeyword(node.AliasKeyword).WithIdentifier(node.Identifier).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestUsingDirectiveFactoryAndProperties()
        {
            var node = GenerateUsingDirective();

            Assert.Equal(SyntaxKind.None, node.GlobalKeyword.Kind());
            Assert.Equal(SyntaxKind.UsingKeyword, node.UsingKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.StaticKeyword.Kind());
            Assert.Null(node.Alias);
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithGlobalKeyword(node.GlobalKeyword).WithUsingKeyword(node.UsingKeyword).WithStaticKeyword(node.StaticKeyword).WithAlias(node.Alias).WithName(node.Name).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestNamespaceDeclarationFactoryAndProperties()
        {
            var node = GenerateNamespaceDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.NamespaceKeyword, node.NamespaceKeyword.Kind());
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Externs);
            Assert.Equal(default, node.Usings);
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithNamespaceKeyword(node.NamespaceKeyword).WithName(node.Name).WithOpenBraceToken(node.OpenBraceToken).WithExterns(node.Externs).WithUsings(node.Usings).WithMembers(node.Members).WithCloseBraceToken(node.CloseBraceToken).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationFactoryAndProperties()
        {
            var node = GenerateFileScopedNamespaceDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.NamespaceKeyword, node.NamespaceKeyword.Kind());
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            Assert.Equal(default, node.Externs);
            Assert.Equal(default, node.Usings);
            Assert.Equal(default, node.Members);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithNamespaceKeyword(node.NamespaceKeyword).WithName(node.Name).WithSemicolonToken(node.SemicolonToken).WithExterns(node.Externs).WithUsings(node.Usings).WithMembers(node.Members);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAttributeListFactoryAndProperties()
        {
            var node = GenerateAttributeList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind());
            Assert.Null(node.Target);
            Assert.Equal(default, node.Attributes);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind());
            var newNode = node.WithOpenBracketToken(node.OpenBracketToken).WithTarget(node.Target).WithAttributes(node.Attributes).WithCloseBracketToken(node.CloseBracketToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAttributeTargetSpecifierFactoryAndProperties()
        {
            var node = GenerateAttributeTargetSpecifier();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            var newNode = node.WithIdentifier(node.Identifier).WithColonToken(node.ColonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAttributeFactoryAndProperties()
        {
            var node = GenerateAttribute();

            Assert.NotNull(node.Name);
            Assert.Null(node.ArgumentList);
            var newNode = node.WithName(node.Name).WithArgumentList(node.ArgumentList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAttributeArgumentListFactoryAndProperties()
        {
            var node = GenerateAttributeArgumentList();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(default, node.Arguments);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithArguments(node.Arguments).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAttributeArgumentFactoryAndProperties()
        {
            var node = GenerateAttributeArgument();

            Assert.Null(node.NameEquals);
            Assert.Null(node.NameColon);
            Assert.NotNull(node.Expression);
            var newNode = node.WithNameEquals(node.NameEquals).WithNameColon(node.NameColon).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestNameEqualsFactoryAndProperties()
        {
            var node = GenerateNameEquals();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind());
            var newNode = node.WithName(node.Name).WithEqualsToken(node.EqualsToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTypeParameterListFactoryAndProperties()
        {
            var node = GenerateTypeParameterList();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind());
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind());
            var newNode = node.WithLessThanToken(node.LessThanToken).WithParameters(node.Parameters).WithGreaterThanToken(node.GreaterThanToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTypeParameterFactoryAndProperties()
        {
            var node = GenerateTypeParameter();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(SyntaxKind.None, node.VarianceKeyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithVarianceKeyword(node.VarianceKeyword).WithIdentifier(node.Identifier);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestClassDeclarationFactoryAndProperties()
        {
            var node = GenerateClassDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.ClassKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.TypeParameterList);
            Assert.Null(node.BaseList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithKeyword(node.Keyword).WithIdentifier(node.Identifier).WithTypeParameterList(node.TypeParameterList).WithBaseList(node.BaseList).WithConstraintClauses(node.ConstraintClauses).WithOpenBraceToken(node.OpenBraceToken).WithMembers(node.Members).WithCloseBraceToken(node.CloseBraceToken).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestStructDeclarationFactoryAndProperties()
        {
            var node = GenerateStructDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.StructKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.TypeParameterList);
            Assert.Null(node.BaseList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithKeyword(node.Keyword).WithIdentifier(node.Identifier).WithTypeParameterList(node.TypeParameterList).WithBaseList(node.BaseList).WithConstraintClauses(node.ConstraintClauses).WithOpenBraceToken(node.OpenBraceToken).WithMembers(node.Members).WithCloseBraceToken(node.CloseBraceToken).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestInterfaceDeclarationFactoryAndProperties()
        {
            var node = GenerateInterfaceDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.InterfaceKeyword, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.TypeParameterList);
            Assert.Null(node.BaseList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithKeyword(node.Keyword).WithIdentifier(node.Identifier).WithTypeParameterList(node.TypeParameterList).WithBaseList(node.BaseList).WithConstraintClauses(node.ConstraintClauses).WithOpenBraceToken(node.OpenBraceToken).WithMembers(node.Members).WithCloseBraceToken(node.CloseBraceToken).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestRecordDeclarationFactoryAndProperties()
        {
            var node = GenerateRecordDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Keyword.Kind());
            Assert.Equal(SyntaxKind.None, node.ClassOrStructKeyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.TypeParameterList);
            Assert.Null(node.ParameterList);
            Assert.Null(node.BaseList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Equal(SyntaxKind.None, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.None, node.CloseBraceToken.Kind());
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithKeyword(node.Keyword).WithClassOrStructKeyword(node.ClassOrStructKeyword).WithIdentifier(node.Identifier).WithTypeParameterList(node.TypeParameterList).WithParameterList(node.ParameterList).WithBaseList(node.BaseList).WithConstraintClauses(node.ConstraintClauses).WithOpenBraceToken(node.OpenBraceToken).WithMembers(node.Members).WithCloseBraceToken(node.CloseBraceToken).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestEnumDeclarationFactoryAndProperties()
        {
            var node = GenerateEnumDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.EnumKeyword, node.EnumKeyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.BaseList);
            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Members);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithEnumKeyword(node.EnumKeyword).WithIdentifier(node.Identifier).WithBaseList(node.BaseList).WithOpenBraceToken(node.OpenBraceToken).WithMembers(node.Members).WithCloseBraceToken(node.CloseBraceToken).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDelegateDeclarationFactoryAndProperties()
        {
            var node = GenerateDelegateDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.DelegateKeyword, node.DelegateKeyword.Kind());
            Assert.NotNull(node.ReturnType);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.TypeParameterList);
            Assert.NotNull(node.ParameterList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithDelegateKeyword(node.DelegateKeyword).WithReturnType(node.ReturnType).WithIdentifier(node.Identifier).WithTypeParameterList(node.TypeParameterList).WithParameterList(node.ParameterList).WithConstraintClauses(node.ConstraintClauses).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestEnumMemberDeclarationFactoryAndProperties()
        {
            var node = GenerateEnumMemberDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.EqualsValue);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithIdentifier(node.Identifier).WithEqualsValue(node.EqualsValue);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestBaseListFactoryAndProperties()
        {
            var node = GenerateBaseList();

            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            Assert.Equal(default, node.Types);
            var newNode = node.WithColonToken(node.ColonToken).WithTypes(node.Types);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSimpleBaseTypeFactoryAndProperties()
        {
            var node = GenerateSimpleBaseType();

            Assert.NotNull(node.Type);
            var newNode = node.WithType(node.Type);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeFactoryAndProperties()
        {
            var node = GeneratePrimaryConstructorBaseType();

            Assert.NotNull(node.Type);
            Assert.NotNull(node.ArgumentList);
            var newNode = node.WithType(node.Type).WithArgumentList(node.ArgumentList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTypeParameterConstraintClauseFactoryAndProperties()
        {
            var node = GenerateTypeParameterConstraintClause();

            Assert.Equal(SyntaxKind.WhereKeyword, node.WhereKeyword.Kind());
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            Assert.Equal(default, node.Constraints);
            var newNode = node.WithWhereKeyword(node.WhereKeyword).WithName(node.Name).WithColonToken(node.ColonToken).WithConstraints(node.Constraints);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestConstructorConstraintFactoryAndProperties()
        {
            var node = GenerateConstructorConstraint();

            Assert.Equal(SyntaxKind.NewKeyword, node.NewKeyword.Kind());
            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithNewKeyword(node.NewKeyword).WithOpenParenToken(node.OpenParenToken).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestClassOrStructConstraintFactoryAndProperties()
        {
            var node = GenerateClassOrStructConstraint();

            Assert.Equal(SyntaxKind.ClassKeyword, node.ClassOrStructKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.QuestionToken.Kind());
            var newNode = node.WithClassOrStructKeyword(node.ClassOrStructKeyword).WithQuestionToken(node.QuestionToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTypeConstraintFactoryAndProperties()
        {
            var node = GenerateTypeConstraint();

            Assert.NotNull(node.Type);
            var newNode = node.WithType(node.Type);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDefaultConstraintFactoryAndProperties()
        {
            var node = GenerateDefaultConstraint();

            Assert.Equal(SyntaxKind.DefaultKeyword, node.DefaultKeyword.Kind());
            var newNode = node.WithDefaultKeyword(node.DefaultKeyword);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFieldDeclarationFactoryAndProperties()
        {
            var node = GenerateFieldDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Declaration);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithDeclaration(node.Declaration).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestEventFieldDeclarationFactoryAndProperties()
        {
            var node = GenerateEventFieldDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.EventKeyword, node.EventKeyword.Kind());
            Assert.NotNull(node.Declaration);
            Assert.Equal(SyntaxKind.SemicolonToken, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithEventKeyword(node.EventKeyword).WithDeclaration(node.Declaration).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierFactoryAndProperties()
        {
            var node = GenerateExplicitInterfaceSpecifier();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.DotToken, node.DotToken.Kind());
            var newNode = node.WithName(node.Name).WithDotToken(node.DotToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestMethodDeclarationFactoryAndProperties()
        {
            var node = GenerateMethodDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.ReturnType);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.TypeParameterList);
            Assert.NotNull(node.ParameterList);
            Assert.Equal(default, node.ConstraintClauses);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithReturnType(node.ReturnType).WithExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier).WithIdentifier(node.Identifier).WithTypeParameterList(node.TypeParameterList).WithParameterList(node.ParameterList).WithConstraintClauses(node.ConstraintClauses).WithBody(node.Body).WithExpressionBody(node.ExpressionBody).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestOperatorDeclarationFactoryAndProperties()
        {
            var node = GenerateOperatorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.ReturnType);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.OperatorKeyword, node.OperatorKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.CheckedKeyword.Kind());
            Assert.Equal(SyntaxKind.PlusToken, node.OperatorToken.Kind());
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithReturnType(node.ReturnType).WithExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier).WithOperatorKeyword(node.OperatorKeyword).WithCheckedKeyword(node.CheckedKeyword).WithOperatorToken(node.OperatorToken).WithParameterList(node.ParameterList).WithBody(node.Body).WithExpressionBody(node.ExpressionBody).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestConversionOperatorDeclarationFactoryAndProperties()
        {
            var node = GenerateConversionOperatorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.ImplicitKeyword, node.ImplicitOrExplicitKeyword.Kind());
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.OperatorKeyword, node.OperatorKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.CheckedKeyword.Kind());
            Assert.NotNull(node.Type);
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithImplicitOrExplicitKeyword(node.ImplicitOrExplicitKeyword).WithExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier).WithOperatorKeyword(node.OperatorKeyword).WithCheckedKeyword(node.CheckedKeyword).WithType(node.Type).WithParameterList(node.ParameterList).WithBody(node.Body).WithExpressionBody(node.ExpressionBody).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestConstructorDeclarationFactoryAndProperties()
        {
            var node = GenerateConstructorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.Initializer);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithIdentifier(node.Identifier).WithParameterList(node.ParameterList).WithInitializer(node.Initializer).WithBody(node.Body).WithExpressionBody(node.ExpressionBody).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestConstructorInitializerFactoryAndProperties()
        {
            var node = GenerateConstructorInitializer();

            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            Assert.Equal(SyntaxKind.BaseKeyword, node.ThisOrBaseKeyword.Kind());
            Assert.NotNull(node.ArgumentList);
            var newNode = node.WithColonToken(node.ColonToken).WithThisOrBaseKeyword(node.ThisOrBaseKeyword).WithArgumentList(node.ArgumentList);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDestructorDeclarationFactoryAndProperties()
        {
            var node = GenerateDestructorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.TildeToken, node.TildeToken.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithTildeToken(node.TildeToken).WithIdentifier(node.Identifier).WithParameterList(node.ParameterList).WithBody(node.Body).WithExpressionBody(node.ExpressionBody).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPropertyDeclarationFactoryAndProperties()
        {
            var node = GeneratePropertyDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Type);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.AccessorList);
            Assert.Null(node.ExpressionBody);
            Assert.Null(node.Initializer);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithType(node.Type).WithExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier).WithIdentifier(node.Identifier).WithAccessorList(node.AccessorList).WithExpressionBody(node.ExpressionBody).WithInitializer(node.Initializer).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestArrowExpressionClauseFactoryAndProperties()
        {
            var node = GenerateArrowExpressionClause();

            Assert.Equal(SyntaxKind.EqualsGreaterThanToken, node.ArrowToken.Kind());
            Assert.NotNull(node.Expression);
            var newNode = node.WithArrowToken(node.ArrowToken).WithExpression(node.Expression);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestEventDeclarationFactoryAndProperties()
        {
            var node = GenerateEventDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.EventKeyword, node.EventKeyword.Kind());
            Assert.NotNull(node.Type);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.AccessorList);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithEventKeyword(node.EventKeyword).WithType(node.Type).WithExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier).WithIdentifier(node.Identifier).WithAccessorList(node.AccessorList).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestIndexerDeclarationFactoryAndProperties()
        {
            var node = GenerateIndexerDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Type);
            Assert.Null(node.ExplicitInterfaceSpecifier);
            Assert.Equal(SyntaxKind.ThisKeyword, node.ThisKeyword.Kind());
            Assert.NotNull(node.ParameterList);
            Assert.Null(node.AccessorList);
            Assert.Null(node.ExpressionBody);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithType(node.Type).WithExplicitInterfaceSpecifier(node.ExplicitInterfaceSpecifier).WithThisKeyword(node.ThisKeyword).WithParameterList(node.ParameterList).WithAccessorList(node.AccessorList).WithExpressionBody(node.ExpressionBody).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAccessorListFactoryAndProperties()
        {
            var node = GenerateAccessorList();

            Assert.Equal(SyntaxKind.OpenBraceToken, node.OpenBraceToken.Kind());
            Assert.Equal(default, node.Accessors);
            Assert.Equal(SyntaxKind.CloseBraceToken, node.CloseBraceToken.Kind());
            var newNode = node.WithOpenBraceToken(node.OpenBraceToken).WithAccessors(node.Accessors).WithCloseBraceToken(node.CloseBraceToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestAccessorDeclarationFactoryAndProperties()
        {
            var node = GenerateAccessorDeclaration();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Equal(SyntaxKind.GetKeyword, node.Keyword.Kind());
            Assert.Null(node.Body);
            Assert.Null(node.ExpressionBody);
            Assert.Equal(SyntaxKind.None, node.SemicolonToken.Kind());
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithKeyword(node.Keyword).WithBody(node.Body).WithExpressionBody(node.ExpressionBody).WithSemicolonToken(node.SemicolonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestParameterListFactoryAndProperties()
        {
            var node = GenerateParameterList();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithParameters(node.Parameters).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestBracketedParameterListFactoryAndProperties()
        {
            var node = GenerateBracketedParameterList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind());
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind());
            var newNode = node.WithOpenBracketToken(node.OpenBracketToken).WithParameters(node.Parameters).WithCloseBracketToken(node.CloseBracketToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestParameterFactoryAndProperties()
        {
            var node = GenerateParameter();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Null(node.Type);
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Null(node.Default);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithType(node.Type).WithIdentifier(node.Identifier).WithDefault(node.Default);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestFunctionPointerParameterFactoryAndProperties()
        {
            var node = GenerateFunctionPointerParameter();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.NotNull(node.Type);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithType(node.Type);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestIncompleteMemberFactoryAndProperties()
        {
            var node = GenerateIncompleteMember();

            Assert.Equal(default, node.AttributeLists);
            Assert.Equal(default, node.Modifiers);
            Assert.Null(node.Type);
            var newNode = node.WithAttributeLists(node.AttributeLists).WithModifiers(node.Modifiers).WithType(node.Type);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestSkippedTokensTriviaFactoryAndProperties()
        {
            var node = GenerateSkippedTokensTrivia();

            Assert.Equal(default, node.Tokens);
            var newNode = node.WithTokens(node.Tokens);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDocumentationCommentTriviaFactoryAndProperties()
        {
            var node = GenerateDocumentationCommentTrivia();

            Assert.Equal(default, node.Content);
            Assert.Equal(SyntaxKind.EndOfDocumentationCommentToken, node.EndOfComment.Kind());
            var newNode = node.WithContent(node.Content).WithEndOfComment(node.EndOfComment);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestTypeCrefFactoryAndProperties()
        {
            var node = GenerateTypeCref();

            Assert.NotNull(node.Type);
            var newNode = node.WithType(node.Type);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestQualifiedCrefFactoryAndProperties()
        {
            var node = GenerateQualifiedCref();

            Assert.NotNull(node.Container);
            Assert.Equal(SyntaxKind.DotToken, node.DotToken.Kind());
            Assert.NotNull(node.Member);
            var newNode = node.WithContainer(node.Container).WithDotToken(node.DotToken).WithMember(node.Member);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestNameMemberCrefFactoryAndProperties()
        {
            var node = GenerateNameMemberCref();

            Assert.NotNull(node.Name);
            Assert.Null(node.Parameters);
            var newNode = node.WithName(node.Name).WithParameters(node.Parameters);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestIndexerMemberCrefFactoryAndProperties()
        {
            var node = GenerateIndexerMemberCref();

            Assert.Equal(SyntaxKind.ThisKeyword, node.ThisKeyword.Kind());
            Assert.Null(node.Parameters);
            var newNode = node.WithThisKeyword(node.ThisKeyword).WithParameters(node.Parameters);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestOperatorMemberCrefFactoryAndProperties()
        {
            var node = GenerateOperatorMemberCref();

            Assert.Equal(SyntaxKind.OperatorKeyword, node.OperatorKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.CheckedKeyword.Kind());
            Assert.Equal(SyntaxKind.PlusToken, node.OperatorToken.Kind());
            Assert.Null(node.Parameters);
            var newNode = node.WithOperatorKeyword(node.OperatorKeyword).WithCheckedKeyword(node.CheckedKeyword).WithOperatorToken(node.OperatorToken).WithParameters(node.Parameters);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestConversionOperatorMemberCrefFactoryAndProperties()
        {
            var node = GenerateConversionOperatorMemberCref();

            Assert.Equal(SyntaxKind.ImplicitKeyword, node.ImplicitOrExplicitKeyword.Kind());
            Assert.Equal(SyntaxKind.OperatorKeyword, node.OperatorKeyword.Kind());
            Assert.Equal(SyntaxKind.None, node.CheckedKeyword.Kind());
            Assert.NotNull(node.Type);
            Assert.Null(node.Parameters);
            var newNode = node.WithImplicitOrExplicitKeyword(node.ImplicitOrExplicitKeyword).WithOperatorKeyword(node.OperatorKeyword).WithCheckedKeyword(node.CheckedKeyword).WithType(node.Type).WithParameters(node.Parameters);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCrefParameterListFactoryAndProperties()
        {
            var node = GenerateCrefParameterList();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithParameters(node.Parameters).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCrefBracketedParameterListFactoryAndProperties()
        {
            var node = GenerateCrefBracketedParameterList();

            Assert.Equal(SyntaxKind.OpenBracketToken, node.OpenBracketToken.Kind());
            Assert.Equal(default, node.Parameters);
            Assert.Equal(SyntaxKind.CloseBracketToken, node.CloseBracketToken.Kind());
            var newNode = node.WithOpenBracketToken(node.OpenBracketToken).WithParameters(node.Parameters).WithCloseBracketToken(node.CloseBracketToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestCrefParameterFactoryAndProperties()
        {
            var node = GenerateCrefParameter();

            Assert.Equal(SyntaxKind.None, node.RefKindKeyword.Kind());
            Assert.NotNull(node.Type);
            var newNode = node.WithRefKindKeyword(node.RefKindKeyword).WithType(node.Type);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlElementFactoryAndProperties()
        {
            var node = GenerateXmlElement();

            Assert.NotNull(node.StartTag);
            Assert.Equal(default, node.Content);
            Assert.NotNull(node.EndTag);
            var newNode = node.WithStartTag(node.StartTag).WithContent(node.Content).WithEndTag(node.EndTag);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlElementStartTagFactoryAndProperties()
        {
            var node = GenerateXmlElementStartTag();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind());
            Assert.NotNull(node.Name);
            Assert.Equal(default, node.Attributes);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind());
            var newNode = node.WithLessThanToken(node.LessThanToken).WithName(node.Name).WithAttributes(node.Attributes).WithGreaterThanToken(node.GreaterThanToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlElementEndTagFactoryAndProperties()
        {
            var node = GenerateXmlElementEndTag();

            Assert.Equal(SyntaxKind.LessThanSlashToken, node.LessThanSlashToken.Kind());
            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.GreaterThanToken, node.GreaterThanToken.Kind());
            var newNode = node.WithLessThanSlashToken(node.LessThanSlashToken).WithName(node.Name).WithGreaterThanToken(node.GreaterThanToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlEmptyElementFactoryAndProperties()
        {
            var node = GenerateXmlEmptyElement();

            Assert.Equal(SyntaxKind.LessThanToken, node.LessThanToken.Kind());
            Assert.NotNull(node.Name);
            Assert.Equal(default, node.Attributes);
            Assert.Equal(SyntaxKind.SlashGreaterThanToken, node.SlashGreaterThanToken.Kind());
            var newNode = node.WithLessThanToken(node.LessThanToken).WithName(node.Name).WithAttributes(node.Attributes).WithSlashGreaterThanToken(node.SlashGreaterThanToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlNameFactoryAndProperties()
        {
            var node = GenerateXmlName();

            Assert.Null(node.Prefix);
            Assert.Equal(SyntaxKind.IdentifierToken, node.LocalName.Kind());
            var newNode = node.WithPrefix(node.Prefix).WithLocalName(node.LocalName);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlPrefixFactoryAndProperties()
        {
            var node = GenerateXmlPrefix();

            Assert.Equal(SyntaxKind.IdentifierToken, node.Prefix.Kind());
            Assert.Equal(SyntaxKind.ColonToken, node.ColonToken.Kind());
            var newNode = node.WithPrefix(node.Prefix).WithColonToken(node.ColonToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlTextAttributeFactoryAndProperties()
        {
            var node = GenerateXmlTextAttribute();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind());
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.StartQuoteToken.Kind());
            Assert.Equal(default, node.TextTokens);
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.EndQuoteToken.Kind());
            var newNode = node.WithName(node.Name).WithEqualsToken(node.EqualsToken).WithStartQuoteToken(node.StartQuoteToken).WithTextTokens(node.TextTokens).WithEndQuoteToken(node.EndQuoteToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlCrefAttributeFactoryAndProperties()
        {
            var node = GenerateXmlCrefAttribute();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind());
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.StartQuoteToken.Kind());
            Assert.NotNull(node.Cref);
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.EndQuoteToken.Kind());
            var newNode = node.WithName(node.Name).WithEqualsToken(node.EqualsToken).WithStartQuoteToken(node.StartQuoteToken).WithCref(node.Cref).WithEndQuoteToken(node.EndQuoteToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlNameAttributeFactoryAndProperties()
        {
            var node = GenerateXmlNameAttribute();

            Assert.NotNull(node.Name);
            Assert.Equal(SyntaxKind.EqualsToken, node.EqualsToken.Kind());
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.StartQuoteToken.Kind());
            Assert.NotNull(node.Identifier);
            Assert.Equal(SyntaxKind.SingleQuoteToken, node.EndQuoteToken.Kind());
            var newNode = node.WithName(node.Name).WithEqualsToken(node.EqualsToken).WithStartQuoteToken(node.StartQuoteToken).WithIdentifier(node.Identifier).WithEndQuoteToken(node.EndQuoteToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlTextFactoryAndProperties()
        {
            var node = GenerateXmlText();

            Assert.Equal(default, node.TextTokens);
            var newNode = node.WithTextTokens(node.TextTokens);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlCDataSectionFactoryAndProperties()
        {
            var node = GenerateXmlCDataSection();

            Assert.Equal(SyntaxKind.XmlCDataStartToken, node.StartCDataToken.Kind());
            Assert.Equal(default, node.TextTokens);
            Assert.Equal(SyntaxKind.XmlCDataEndToken, node.EndCDataToken.Kind());
            var newNode = node.WithStartCDataToken(node.StartCDataToken).WithTextTokens(node.TextTokens).WithEndCDataToken(node.EndCDataToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlProcessingInstructionFactoryAndProperties()
        {
            var node = GenerateXmlProcessingInstruction();

            Assert.Equal(SyntaxKind.XmlProcessingInstructionStartToken, node.StartProcessingInstructionToken.Kind());
            Assert.NotNull(node.Name);
            Assert.Equal(default, node.TextTokens);
            Assert.Equal(SyntaxKind.XmlProcessingInstructionEndToken, node.EndProcessingInstructionToken.Kind());
            var newNode = node.WithStartProcessingInstructionToken(node.StartProcessingInstructionToken).WithName(node.Name).WithTextTokens(node.TextTokens).WithEndProcessingInstructionToken(node.EndProcessingInstructionToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestXmlCommentFactoryAndProperties()
        {
            var node = GenerateXmlComment();

            Assert.Equal(SyntaxKind.XmlCommentStartToken, node.LessThanExclamationMinusMinusToken.Kind());
            Assert.Equal(default, node.TextTokens);
            Assert.Equal(SyntaxKind.XmlCommentEndToken, node.MinusMinusGreaterThanToken.Kind());
            var newNode = node.WithLessThanExclamationMinusMinusToken(node.LessThanExclamationMinusMinusToken).WithTextTokens(node.TextTokens).WithMinusMinusGreaterThanToken(node.MinusMinusGreaterThanToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestIfDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateIfDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.IfKeyword, node.IfKeyword.Kind());
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            Assert.Equal(new bool(), node.BranchTaken);
            Assert.Equal(new bool(), node.ConditionValue);
            var newNode = node.WithHashToken(node.HashToken).WithIfKeyword(node.IfKeyword).WithCondition(node.Condition).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive).WithBranchTaken(node.BranchTaken).WithConditionValue(node.ConditionValue);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestElifDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateElifDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.ElifKeyword, node.ElifKeyword.Kind());
            Assert.NotNull(node.Condition);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            Assert.Equal(new bool(), node.BranchTaken);
            Assert.Equal(new bool(), node.ConditionValue);
            var newNode = node.WithHashToken(node.HashToken).WithElifKeyword(node.ElifKeyword).WithCondition(node.Condition).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive).WithBranchTaken(node.BranchTaken).WithConditionValue(node.ConditionValue);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestElseDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateElseDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.ElseKeyword, node.ElseKeyword.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            Assert.Equal(new bool(), node.BranchTaken);
            var newNode = node.WithHashToken(node.HashToken).WithElseKeyword(node.ElseKeyword).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive).WithBranchTaken(node.BranchTaken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestEndIfDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateEndIfDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.EndIfKeyword, node.EndIfKeyword.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithEndIfKeyword(node.EndIfKeyword).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestRegionDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateRegionDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.RegionKeyword, node.RegionKeyword.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithRegionKeyword(node.RegionKeyword).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateEndRegionDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.EndRegionKeyword, node.EndRegionKeyword.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithEndRegionKeyword(node.EndRegionKeyword).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestErrorDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateErrorDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.ErrorKeyword, node.ErrorKeyword.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithErrorKeyword(node.ErrorKeyword).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestWarningDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateWarningDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.WarningKeyword, node.WarningKeyword.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithWarningKeyword(node.WarningKeyword).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestBadDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateBadDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Identifier.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithIdentifier(node.Identifier).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestDefineDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateDefineDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.DefineKeyword, node.DefineKeyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Name.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithDefineKeyword(node.DefineKeyword).WithName(node.Name).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestUndefDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateUndefDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.UndefKeyword, node.UndefKeyword.Kind());
            Assert.Equal(SyntaxKind.IdentifierToken, node.Name.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithUndefKeyword(node.UndefKeyword).WithName(node.Name).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLineDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateLineDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.LineKeyword, node.LineKeyword.Kind());
            Assert.Equal(SyntaxKind.NumericLiteralToken, node.Line.Kind());
            Assert.Equal(SyntaxKind.None, node.File.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithLineKeyword(node.LineKeyword).WithLine(node.Line).WithFile(node.File).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLineDirectivePositionFactoryAndProperties()
        {
            var node = GenerateLineDirectivePosition();

            Assert.Equal(SyntaxKind.OpenParenToken, node.OpenParenToken.Kind());
            Assert.Equal(SyntaxKind.NumericLiteralToken, node.Line.Kind());
            Assert.Equal(SyntaxKind.CommaToken, node.CommaToken.Kind());
            Assert.Equal(SyntaxKind.NumericLiteralToken, node.Character.Kind());
            Assert.Equal(SyntaxKind.CloseParenToken, node.CloseParenToken.Kind());
            var newNode = node.WithOpenParenToken(node.OpenParenToken).WithLine(node.Line).WithCommaToken(node.CommaToken).WithCharacter(node.Character).WithCloseParenToken(node.CloseParenToken);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateLineSpanDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.LineKeyword, node.LineKeyword.Kind());
            Assert.NotNull(node.Start);
            Assert.Equal(SyntaxKind.MinusToken, node.MinusToken.Kind());
            Assert.NotNull(node.End);
            Assert.Equal(SyntaxKind.None, node.CharacterOffset.Kind());
            Assert.Equal(SyntaxKind.StringLiteralToken, node.File.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithLineKeyword(node.LineKeyword).WithStart(node.Start).WithMinusToken(node.MinusToken).WithEnd(node.End).WithCharacterOffset(node.CharacterOffset).WithFile(node.File).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaFactoryAndProperties()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.PragmaKeyword, node.PragmaKeyword.Kind());
            Assert.Equal(SyntaxKind.WarningKeyword, node.WarningKeyword.Kind());
            Assert.Equal(SyntaxKind.DisableKeyword, node.DisableOrRestoreKeyword.Kind());
            Assert.Equal(default, node.ErrorCodes);
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithPragmaKeyword(node.PragmaKeyword).WithWarningKeyword(node.WarningKeyword).WithDisableOrRestoreKeyword(node.DisableOrRestoreKeyword).WithErrorCodes(node.ErrorCodes).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaFactoryAndProperties()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.PragmaKeyword, node.PragmaKeyword.Kind());
            Assert.Equal(SyntaxKind.ChecksumKeyword, node.ChecksumKeyword.Kind());
            Assert.Equal(SyntaxKind.StringLiteralToken, node.File.Kind());
            Assert.Equal(SyntaxKind.StringLiteralToken, node.Guid.Kind());
            Assert.Equal(SyntaxKind.StringLiteralToken, node.Bytes.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithPragmaKeyword(node.PragmaKeyword).WithChecksumKeyword(node.ChecksumKeyword).WithFile(node.File).WithGuid(node.Guid).WithBytes(node.Bytes).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestReferenceDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateReferenceDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.ReferenceKeyword, node.ReferenceKeyword.Kind());
            Assert.Equal(SyntaxKind.StringLiteralToken, node.File.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithReferenceKeyword(node.ReferenceKeyword).WithFile(node.File).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestLoadDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateLoadDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.LoadKeyword, node.LoadKeyword.Kind());
            Assert.Equal(SyntaxKind.StringLiteralToken, node.File.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithLoadKeyword(node.LoadKeyword).WithFile(node.File).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestShebangDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateShebangDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.ExclamationToken, node.ExclamationToken.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithExclamationToken(node.ExclamationToken).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }

        [Fact]
        public void TestNullableDirectiveTriviaFactoryAndProperties()
        {
            var node = GenerateNullableDirectiveTrivia();

            Assert.Equal(SyntaxKind.HashToken, node.HashToken.Kind());
            Assert.Equal(SyntaxKind.NullableKeyword, node.NullableKeyword.Kind());
            Assert.Equal(SyntaxKind.EnableKeyword, node.SettingToken.Kind());
            Assert.Equal(SyntaxKind.None, node.TargetToken.Kind());
            Assert.Equal(SyntaxKind.EndOfDirectiveToken, node.EndOfDirectiveToken.Kind());
            Assert.Equal(new bool(), node.IsActive);
            var newNode = node.WithHashToken(node.HashToken).WithNullableKeyword(node.NullableKeyword).WithSettingToken(node.SettingToken).WithTargetToken(node.TargetToken).WithEndOfDirectiveToken(node.EndOfDirectiveToken).WithIsActive(node.IsActive);
            Assert.Equal(node, newNode);
        }
        #endregion Red Factory and Property Tests

        #region Red Rewriters
        [Fact]
        public void TestIdentifierNameTokenDeleteRewriter()
        {
            var oldNode = GenerateIdentifierName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIdentifierNameTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateIdentifierName();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIdentifierNameIdentityRewriter()
        {
            var oldNode = GenerateIdentifierName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQualifiedNameTokenDeleteRewriter()
        {
            var oldNode = GenerateQualifiedName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQualifiedNameTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateQualifiedName();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQualifiedNameIdentityRewriter()
        {
            var oldNode = GenerateQualifiedName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestGenericNameTokenDeleteRewriter()
        {
            var oldNode = GenerateGenericName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGenericNameTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateGenericName();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGenericNameIdentityRewriter()
        {
            var oldNode = GenerateGenericName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeArgumentListTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeArgumentList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeArgumentListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTypeArgumentList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeArgumentListIdentityRewriter()
        {
            var oldNode = GenerateTypeArgumentList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAliasQualifiedNameTokenDeleteRewriter()
        {
            var oldNode = GenerateAliasQualifiedName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAliasQualifiedNameTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAliasQualifiedName();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAliasQualifiedNameIdentityRewriter()
        {
            var oldNode = GenerateAliasQualifiedName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPredefinedTypeTokenDeleteRewriter()
        {
            var oldNode = GeneratePredefinedType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPredefinedTypeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePredefinedType();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPredefinedTypeIdentityRewriter()
        {
            var oldNode = GeneratePredefinedType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArrayTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateArrayType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrayTypeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateArrayType();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrayTypeIdentityRewriter()
        {
            var oldNode = GenerateArrayType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArrayRankSpecifierTokenDeleteRewriter()
        {
            var oldNode = GenerateArrayRankSpecifier();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrayRankSpecifierTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateArrayRankSpecifier();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrayRankSpecifierIdentityRewriter()
        {
            var oldNode = GenerateArrayRankSpecifier();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPointerTypeTokenDeleteRewriter()
        {
            var oldNode = GeneratePointerType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPointerTypeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePointerType();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPointerTypeIdentityRewriter()
        {
            var oldNode = GeneratePointerType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerTypeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFunctionPointerType();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerTypeIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerParameterListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFunctionPointerParameterList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerParameterListIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerCallingConventionTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerCallingConvention();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerCallingConventionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFunctionPointerCallingConvention();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerCallingConventionIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerCallingConvention();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConventionList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConventionList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConventionList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConvention();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConvention();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerUnmanagedCallingConvention();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNullableTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateNullableType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNullableTypeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateNullableType();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNullableTypeIdentityRewriter()
        {
            var oldNode = GenerateNullableType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTupleTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateTupleType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTupleTypeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTupleType();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTupleTypeIdentityRewriter()
        {
            var oldNode = GenerateTupleType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTupleElementTokenDeleteRewriter()
        {
            var oldNode = GenerateTupleElement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTupleElementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTupleElement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTupleElementIdentityRewriter()
        {
            var oldNode = GenerateTupleElement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOmittedTypeArgumentTokenDeleteRewriter()
        {
            var oldNode = GenerateOmittedTypeArgument();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOmittedTypeArgumentTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateOmittedTypeArgument();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOmittedTypeArgumentIdentityRewriter()
        {
            var oldNode = GenerateOmittedTypeArgument();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRefTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateRefType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefTypeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateRefType();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefTypeIdentityRewriter()
        {
            var oldNode = GenerateRefType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParenthesizedExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateParenthesizedExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateParenthesizedExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedExpressionIdentityRewriter()
        {
            var oldNode = GenerateParenthesizedExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTupleExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateTupleExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTupleExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTupleExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTupleExpressionIdentityRewriter()
        {
            var oldNode = GenerateTupleExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPrefixUnaryExpressionTokenDeleteRewriter()
        {
            var oldNode = GeneratePrefixUnaryExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPrefixUnaryExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePrefixUnaryExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPrefixUnaryExpressionIdentityRewriter()
        {
            var oldNode = GeneratePrefixUnaryExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAwaitExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateAwaitExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAwaitExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAwaitExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAwaitExpressionIdentityRewriter()
        {
            var oldNode = GenerateAwaitExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPostfixUnaryExpressionTokenDeleteRewriter()
        {
            var oldNode = GeneratePostfixUnaryExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPostfixUnaryExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePostfixUnaryExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPostfixUnaryExpressionIdentityRewriter()
        {
            var oldNode = GeneratePostfixUnaryExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestMemberAccessExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateMemberAccessExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMemberAccessExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateMemberAccessExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMemberAccessExpressionIdentityRewriter()
        {
            var oldNode = GenerateMemberAccessExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConditionalAccessExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateConditionalAccessExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConditionalAccessExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateConditionalAccessExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConditionalAccessExpressionIdentityRewriter()
        {
            var oldNode = GenerateConditionalAccessExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestMemberBindingExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateMemberBindingExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMemberBindingExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateMemberBindingExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMemberBindingExpressionIdentityRewriter()
        {
            var oldNode = GenerateMemberBindingExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElementBindingExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateElementBindingExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElementBindingExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateElementBindingExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElementBindingExpressionIdentityRewriter()
        {
            var oldNode = GenerateElementBindingExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRangeExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateRangeExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRangeExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateRangeExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRangeExpressionIdentityRewriter()
        {
            var oldNode = GenerateRangeExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestImplicitElementAccessTokenDeleteRewriter()
        {
            var oldNode = GenerateImplicitElementAccess();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitElementAccessTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateImplicitElementAccess();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitElementAccessIdentityRewriter()
        {
            var oldNode = GenerateImplicitElementAccess();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBinaryExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateBinaryExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBinaryExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateBinaryExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBinaryExpressionIdentityRewriter()
        {
            var oldNode = GenerateBinaryExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAssignmentExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateAssignmentExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAssignmentExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAssignmentExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAssignmentExpressionIdentityRewriter()
        {
            var oldNode = GenerateAssignmentExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConditionalExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateConditionalExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConditionalExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateConditionalExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConditionalExpressionIdentityRewriter()
        {
            var oldNode = GenerateConditionalExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestThisExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateThisExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestThisExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateThisExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestThisExpressionIdentityRewriter()
        {
            var oldNode = GenerateThisExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBaseExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateBaseExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBaseExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateBaseExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBaseExpressionIdentityRewriter()
        {
            var oldNode = GenerateBaseExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLiteralExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateLiteralExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLiteralExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLiteralExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLiteralExpressionIdentityRewriter()
        {
            var oldNode = GenerateLiteralExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestMakeRefExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateMakeRefExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMakeRefExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateMakeRefExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMakeRefExpressionIdentityRewriter()
        {
            var oldNode = GenerateMakeRefExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRefTypeExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateRefTypeExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefTypeExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateRefTypeExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefTypeExpressionIdentityRewriter()
        {
            var oldNode = GenerateRefTypeExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRefValueExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateRefValueExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefValueExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateRefValueExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefValueExpressionIdentityRewriter()
        {
            var oldNode = GenerateRefValueExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCheckedExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateCheckedExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCheckedExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCheckedExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCheckedExpressionIdentityRewriter()
        {
            var oldNode = GenerateCheckedExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDefaultExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateDefaultExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefaultExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDefaultExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefaultExpressionIdentityRewriter()
        {
            var oldNode = GenerateDefaultExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeOfExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeOfExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeOfExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTypeOfExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeOfExpressionIdentityRewriter()
        {
            var oldNode = GenerateTypeOfExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSizeOfExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateSizeOfExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSizeOfExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSizeOfExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSizeOfExpressionIdentityRewriter()
        {
            var oldNode = GenerateSizeOfExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInvocationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateInvocationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInvocationExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateInvocationExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInvocationExpressionIdentityRewriter()
        {
            var oldNode = GenerateInvocationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElementAccessExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateElementAccessExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElementAccessExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateElementAccessExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElementAccessExpressionIdentityRewriter()
        {
            var oldNode = GenerateElementAccessExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArgumentListTokenDeleteRewriter()
        {
            var oldNode = GenerateArgumentList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArgumentListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateArgumentList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArgumentListIdentityRewriter()
        {
            var oldNode = GenerateArgumentList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBracketedArgumentListTokenDeleteRewriter()
        {
            var oldNode = GenerateBracketedArgumentList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBracketedArgumentListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateBracketedArgumentList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBracketedArgumentListIdentityRewriter()
        {
            var oldNode = GenerateBracketedArgumentList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArgumentTokenDeleteRewriter()
        {
            var oldNode = GenerateArgument();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArgumentTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateArgument();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArgumentIdentityRewriter()
        {
            var oldNode = GenerateArgument();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestExpressionColonTokenDeleteRewriter()
        {
            var oldNode = GenerateExpressionColon();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExpressionColonTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateExpressionColon();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExpressionColonIdentityRewriter()
        {
            var oldNode = GenerateExpressionColon();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNameColonTokenDeleteRewriter()
        {
            var oldNode = GenerateNameColon();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNameColonTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateNameColon();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNameColonIdentityRewriter()
        {
            var oldNode = GenerateNameColon();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDeclarationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateDeclarationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDeclarationExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDeclarationExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDeclarationExpressionIdentityRewriter()
        {
            var oldNode = GenerateDeclarationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCastExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateCastExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCastExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCastExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCastExpressionIdentityRewriter()
        {
            var oldNode = GenerateCastExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAnonymousMethodExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateAnonymousMethodExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAnonymousMethodExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAnonymousMethodExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAnonymousMethodExpressionIdentityRewriter()
        {
            var oldNode = GenerateAnonymousMethodExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSimpleLambdaExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateSimpleLambdaExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSimpleLambdaExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSimpleLambdaExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSimpleLambdaExpressionIdentityRewriter()
        {
            var oldNode = GenerateSimpleLambdaExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRefExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateRefExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateRefExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRefExpressionIdentityRewriter()
        {
            var oldNode = GenerateRefExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateParenthesizedLambdaExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateParenthesizedLambdaExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionIdentityRewriter()
        {
            var oldNode = GenerateParenthesizedLambdaExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInitializerExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateInitializerExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInitializerExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateInitializerExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInitializerExpressionIdentityRewriter()
        {
            var oldNode = GenerateInitializerExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateImplicitObjectCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateImplicitObjectCreationExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateImplicitObjectCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestObjectCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateObjectCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestObjectCreationExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateObjectCreationExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestObjectCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateObjectCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWithExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateWithExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWithExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateWithExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWithExpressionIdentityRewriter()
        {
            var oldNode = GenerateWithExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorTokenDeleteRewriter()
        {
            var oldNode = GenerateAnonymousObjectMemberDeclarator();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAnonymousObjectMemberDeclarator();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorIdentityRewriter()
        {
            var oldNode = GenerateAnonymousObjectMemberDeclarator();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateAnonymousObjectCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAnonymousObjectCreationExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateAnonymousObjectCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArrayCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateArrayCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrayCreationExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateArrayCreationExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrayCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateArrayCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateImplicitArrayCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateImplicitArrayCreationExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateImplicitArrayCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateStackAllocArrayCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateStackAllocArrayCreationExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateStackAllocArrayCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateImplicitStackAllocArrayCreationExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateImplicitStackAllocArrayCreationExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionIdentityRewriter()
        {
            var oldNode = GenerateImplicitStackAllocArrayCreationExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQueryExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateQueryExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQueryExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateQueryExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQueryExpressionIdentityRewriter()
        {
            var oldNode = GenerateQueryExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQueryBodyTokenDeleteRewriter()
        {
            var oldNode = GenerateQueryBody();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQueryBodyTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateQueryBody();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQueryBodyIdentityRewriter()
        {
            var oldNode = GenerateQueryBody();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFromClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateFromClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFromClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFromClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFromClauseIdentityRewriter()
        {
            var oldNode = GenerateFromClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLetClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateLetClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLetClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLetClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLetClauseIdentityRewriter()
        {
            var oldNode = GenerateLetClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestJoinClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateJoinClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestJoinClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateJoinClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestJoinClauseIdentityRewriter()
        {
            var oldNode = GenerateJoinClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestJoinIntoClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateJoinIntoClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestJoinIntoClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateJoinIntoClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestJoinIntoClauseIdentityRewriter()
        {
            var oldNode = GenerateJoinIntoClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWhereClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateWhereClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWhereClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateWhereClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWhereClauseIdentityRewriter()
        {
            var oldNode = GenerateWhereClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOrderByClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateOrderByClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOrderByClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateOrderByClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOrderByClauseIdentityRewriter()
        {
            var oldNode = GenerateOrderByClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOrderingTokenDeleteRewriter()
        {
            var oldNode = GenerateOrdering();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOrderingTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateOrdering();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOrderingIdentityRewriter()
        {
            var oldNode = GenerateOrdering();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSelectClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateSelectClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSelectClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSelectClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSelectClauseIdentityRewriter()
        {
            var oldNode = GenerateSelectClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestGroupClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateGroupClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGroupClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateGroupClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGroupClauseIdentityRewriter()
        {
            var oldNode = GenerateGroupClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQueryContinuationTokenDeleteRewriter()
        {
            var oldNode = GenerateQueryContinuation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQueryContinuationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateQueryContinuation();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQueryContinuationIdentityRewriter()
        {
            var oldNode = GenerateQueryContinuation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOmittedArraySizeExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateOmittedArraySizeExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOmittedArraySizeExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateOmittedArraySizeExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOmittedArraySizeExpressionIdentityRewriter()
        {
            var oldNode = GenerateOmittedArraySizeExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolatedStringExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolatedStringExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolatedStringExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateInterpolatedStringExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolatedStringExpressionIdentityRewriter()
        {
            var oldNode = GenerateInterpolatedStringExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIsPatternExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateIsPatternExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIsPatternExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateIsPatternExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIsPatternExpressionIdentityRewriter()
        {
            var oldNode = GenerateIsPatternExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestThrowExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateThrowExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestThrowExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateThrowExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestThrowExpressionIdentityRewriter()
        {
            var oldNode = GenerateThrowExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWhenClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateWhenClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWhenClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateWhenClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWhenClauseIdentityRewriter()
        {
            var oldNode = GenerateWhenClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDiscardPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateDiscardPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDiscardPatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDiscardPattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDiscardPatternIdentityRewriter()
        {
            var oldNode = GenerateDiscardPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDeclarationPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateDeclarationPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDeclarationPatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDeclarationPattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDeclarationPatternIdentityRewriter()
        {
            var oldNode = GenerateDeclarationPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestVarPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateVarPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestVarPatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateVarPattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestVarPatternIdentityRewriter()
        {
            var oldNode = GenerateVarPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRecursivePatternTokenDeleteRewriter()
        {
            var oldNode = GenerateRecursivePattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRecursivePatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateRecursivePattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRecursivePatternIdentityRewriter()
        {
            var oldNode = GenerateRecursivePattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPositionalPatternClauseTokenDeleteRewriter()
        {
            var oldNode = GeneratePositionalPatternClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPositionalPatternClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePositionalPatternClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPositionalPatternClauseIdentityRewriter()
        {
            var oldNode = GeneratePositionalPatternClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPropertyPatternClauseTokenDeleteRewriter()
        {
            var oldNode = GeneratePropertyPatternClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPropertyPatternClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePropertyPatternClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPropertyPatternClauseIdentityRewriter()
        {
            var oldNode = GeneratePropertyPatternClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSubpatternTokenDeleteRewriter()
        {
            var oldNode = GenerateSubpattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSubpatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSubpattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSubpatternIdentityRewriter()
        {
            var oldNode = GenerateSubpattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConstantPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateConstantPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstantPatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateConstantPattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstantPatternIdentityRewriter()
        {
            var oldNode = GenerateConstantPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParenthesizedPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateParenthesizedPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedPatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateParenthesizedPattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedPatternIdentityRewriter()
        {
            var oldNode = GenerateParenthesizedPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRelationalPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateRelationalPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRelationalPatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateRelationalPattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRelationalPatternIdentityRewriter()
        {
            var oldNode = GenerateRelationalPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypePatternTokenDeleteRewriter()
        {
            var oldNode = GenerateTypePattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypePatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTypePattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypePatternIdentityRewriter()
        {
            var oldNode = GenerateTypePattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBinaryPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateBinaryPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBinaryPatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateBinaryPattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBinaryPatternIdentityRewriter()
        {
            var oldNode = GenerateBinaryPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUnaryPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateUnaryPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUnaryPatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateUnaryPattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUnaryPatternIdentityRewriter()
        {
            var oldNode = GenerateUnaryPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestListPatternTokenDeleteRewriter()
        {
            var oldNode = GenerateListPattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestListPatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateListPattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestListPatternIdentityRewriter()
        {
            var oldNode = GenerateListPattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSlicePatternTokenDeleteRewriter()
        {
            var oldNode = GenerateSlicePattern();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSlicePatternTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSlicePattern();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSlicePatternIdentityRewriter()
        {
            var oldNode = GenerateSlicePattern();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolatedStringTextTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolatedStringText();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolatedStringTextTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateInterpolatedStringText();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolatedStringTextIdentityRewriter()
        {
            var oldNode = GenerateInterpolatedStringText();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolationTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateInterpolation();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolationIdentityRewriter()
        {
            var oldNode = GenerateInterpolation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolationAlignmentClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolationAlignmentClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolationAlignmentClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateInterpolationAlignmentClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolationAlignmentClauseIdentityRewriter()
        {
            var oldNode = GenerateInterpolationAlignmentClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterpolationFormatClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateInterpolationFormatClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolationFormatClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateInterpolationFormatClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterpolationFormatClauseIdentityRewriter()
        {
            var oldNode = GenerateInterpolationFormatClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestGlobalStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateGlobalStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGlobalStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateGlobalStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGlobalStatementIdentityRewriter()
        {
            var oldNode = GenerateGlobalStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBlockTokenDeleteRewriter()
        {
            var oldNode = GenerateBlock();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBlockTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateBlock();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBlockIdentityRewriter()
        {
            var oldNode = GenerateBlock();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLocalFunctionStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateLocalFunctionStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLocalFunctionStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLocalFunctionStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLocalFunctionStatementIdentityRewriter()
        {
            var oldNode = GenerateLocalFunctionStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLocalDeclarationStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateLocalDeclarationStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLocalDeclarationStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLocalDeclarationStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLocalDeclarationStatementIdentityRewriter()
        {
            var oldNode = GenerateLocalDeclarationStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestVariableDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateVariableDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestVariableDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateVariableDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestVariableDeclarationIdentityRewriter()
        {
            var oldNode = GenerateVariableDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestVariableDeclaratorTokenDeleteRewriter()
        {
            var oldNode = GenerateVariableDeclarator();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestVariableDeclaratorTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateVariableDeclarator();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestVariableDeclaratorIdentityRewriter()
        {
            var oldNode = GenerateVariableDeclarator();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEqualsValueClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateEqualsValueClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEqualsValueClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateEqualsValueClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEqualsValueClauseIdentityRewriter()
        {
            var oldNode = GenerateEqualsValueClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSingleVariableDesignationTokenDeleteRewriter()
        {
            var oldNode = GenerateSingleVariableDesignation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSingleVariableDesignationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSingleVariableDesignation();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSingleVariableDesignationIdentityRewriter()
        {
            var oldNode = GenerateSingleVariableDesignation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDiscardDesignationTokenDeleteRewriter()
        {
            var oldNode = GenerateDiscardDesignation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDiscardDesignationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDiscardDesignation();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDiscardDesignationIdentityRewriter()
        {
            var oldNode = GenerateDiscardDesignation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParenthesizedVariableDesignationTokenDeleteRewriter()
        {
            var oldNode = GenerateParenthesizedVariableDesignation();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedVariableDesignationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateParenthesizedVariableDesignation();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParenthesizedVariableDesignationIdentityRewriter()
        {
            var oldNode = GenerateParenthesizedVariableDesignation();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestExpressionStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateExpressionStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExpressionStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateExpressionStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExpressionStatementIdentityRewriter()
        {
            var oldNode = GenerateExpressionStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEmptyStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateEmptyStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEmptyStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateEmptyStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEmptyStatementIdentityRewriter()
        {
            var oldNode = GenerateEmptyStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLabeledStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateLabeledStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLabeledStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLabeledStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLabeledStatementIdentityRewriter()
        {
            var oldNode = GenerateLabeledStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestGotoStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateGotoStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGotoStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateGotoStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestGotoStatementIdentityRewriter()
        {
            var oldNode = GenerateGotoStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBreakStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateBreakStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBreakStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateBreakStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBreakStatementIdentityRewriter()
        {
            var oldNode = GenerateBreakStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestContinueStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateContinueStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestContinueStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateContinueStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestContinueStatementIdentityRewriter()
        {
            var oldNode = GenerateContinueStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestReturnStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateReturnStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestReturnStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateReturnStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestReturnStatementIdentityRewriter()
        {
            var oldNode = GenerateReturnStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestThrowStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateThrowStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestThrowStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateThrowStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestThrowStatementIdentityRewriter()
        {
            var oldNode = GenerateThrowStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestYieldStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateYieldStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestYieldStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateYieldStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestYieldStatementIdentityRewriter()
        {
            var oldNode = GenerateYieldStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWhileStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateWhileStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWhileStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateWhileStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWhileStatementIdentityRewriter()
        {
            var oldNode = GenerateWhileStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDoStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateDoStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDoStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDoStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDoStatementIdentityRewriter()
        {
            var oldNode = GenerateDoStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestForStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateForStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestForStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateForStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestForStatementIdentityRewriter()
        {
            var oldNode = GenerateForStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestForEachStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateForEachStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestForEachStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateForEachStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestForEachStatementIdentityRewriter()
        {
            var oldNode = GenerateForEachStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestForEachVariableStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateForEachVariableStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestForEachVariableStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateForEachVariableStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestForEachVariableStatementIdentityRewriter()
        {
            var oldNode = GenerateForEachVariableStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUsingStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateUsingStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUsingStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateUsingStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUsingStatementIdentityRewriter()
        {
            var oldNode = GenerateUsingStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFixedStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateFixedStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFixedStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFixedStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFixedStatementIdentityRewriter()
        {
            var oldNode = GenerateFixedStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCheckedStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateCheckedStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCheckedStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCheckedStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCheckedStatementIdentityRewriter()
        {
            var oldNode = GenerateCheckedStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUnsafeStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateUnsafeStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUnsafeStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateUnsafeStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUnsafeStatementIdentityRewriter()
        {
            var oldNode = GenerateUnsafeStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLockStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateLockStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLockStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLockStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLockStatementIdentityRewriter()
        {
            var oldNode = GenerateLockStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIfStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateIfStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIfStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateIfStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIfStatementIdentityRewriter()
        {
            var oldNode = GenerateIfStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElseClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateElseClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElseClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateElseClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElseClauseIdentityRewriter()
        {
            var oldNode = GenerateElseClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSwitchStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateSwitchStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSwitchStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchStatementIdentityRewriter()
        {
            var oldNode = GenerateSwitchStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSwitchSectionTokenDeleteRewriter()
        {
            var oldNode = GenerateSwitchSection();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchSectionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSwitchSection();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchSectionIdentityRewriter()
        {
            var oldNode = GenerateSwitchSection();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCasePatternSwitchLabelTokenDeleteRewriter()
        {
            var oldNode = GenerateCasePatternSwitchLabel();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCasePatternSwitchLabelTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCasePatternSwitchLabel();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCasePatternSwitchLabelIdentityRewriter()
        {
            var oldNode = GenerateCasePatternSwitchLabel();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCaseSwitchLabelTokenDeleteRewriter()
        {
            var oldNode = GenerateCaseSwitchLabel();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCaseSwitchLabelTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCaseSwitchLabel();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCaseSwitchLabelIdentityRewriter()
        {
            var oldNode = GenerateCaseSwitchLabel();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDefaultSwitchLabelTokenDeleteRewriter()
        {
            var oldNode = GenerateDefaultSwitchLabel();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefaultSwitchLabelTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDefaultSwitchLabel();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefaultSwitchLabelIdentityRewriter()
        {
            var oldNode = GenerateDefaultSwitchLabel();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSwitchExpressionTokenDeleteRewriter()
        {
            var oldNode = GenerateSwitchExpression();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchExpressionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSwitchExpression();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchExpressionIdentityRewriter()
        {
            var oldNode = GenerateSwitchExpression();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSwitchExpressionArmTokenDeleteRewriter()
        {
            var oldNode = GenerateSwitchExpressionArm();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchExpressionArmTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSwitchExpressionArm();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSwitchExpressionArmIdentityRewriter()
        {
            var oldNode = GenerateSwitchExpressionArm();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTryStatementTokenDeleteRewriter()
        {
            var oldNode = GenerateTryStatement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTryStatementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTryStatement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTryStatementIdentityRewriter()
        {
            var oldNode = GenerateTryStatement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCatchClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateCatchClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCatchClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCatchClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCatchClauseIdentityRewriter()
        {
            var oldNode = GenerateCatchClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCatchDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateCatchDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCatchDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCatchDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCatchDeclarationIdentityRewriter()
        {
            var oldNode = GenerateCatchDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCatchFilterClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateCatchFilterClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCatchFilterClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCatchFilterClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCatchFilterClauseIdentityRewriter()
        {
            var oldNode = GenerateCatchFilterClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFinallyClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateFinallyClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFinallyClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFinallyClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFinallyClauseIdentityRewriter()
        {
            var oldNode = GenerateFinallyClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCompilationUnitTokenDeleteRewriter()
        {
            var oldNode = GenerateCompilationUnit();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCompilationUnitTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCompilationUnit();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCompilationUnitIdentityRewriter()
        {
            var oldNode = GenerateCompilationUnit();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestExternAliasDirectiveTokenDeleteRewriter()
        {
            var oldNode = GenerateExternAliasDirective();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExternAliasDirectiveTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateExternAliasDirective();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExternAliasDirectiveIdentityRewriter()
        {
            var oldNode = GenerateExternAliasDirective();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUsingDirectiveTokenDeleteRewriter()
        {
            var oldNode = GenerateUsingDirective();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUsingDirectiveTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateUsingDirective();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUsingDirectiveIdentityRewriter()
        {
            var oldNode = GenerateUsingDirective();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNamespaceDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateNamespaceDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNamespaceDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateNamespaceDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNamespaceDeclarationIdentityRewriter()
        {
            var oldNode = GenerateNamespaceDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateFileScopedNamespaceDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFileScopedNamespaceDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationIdentityRewriter()
        {
            var oldNode = GenerateFileScopedNamespaceDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeListTokenDeleteRewriter()
        {
            var oldNode = GenerateAttributeList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAttributeList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeListIdentityRewriter()
        {
            var oldNode = GenerateAttributeList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeTargetSpecifierTokenDeleteRewriter()
        {
            var oldNode = GenerateAttributeTargetSpecifier();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeTargetSpecifierTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAttributeTargetSpecifier();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeTargetSpecifierIdentityRewriter()
        {
            var oldNode = GenerateAttributeTargetSpecifier();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeTokenDeleteRewriter()
        {
            var oldNode = GenerateAttribute();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAttribute();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeIdentityRewriter()
        {
            var oldNode = GenerateAttribute();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeArgumentListTokenDeleteRewriter()
        {
            var oldNode = GenerateAttributeArgumentList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeArgumentListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAttributeArgumentList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeArgumentListIdentityRewriter()
        {
            var oldNode = GenerateAttributeArgumentList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAttributeArgumentTokenDeleteRewriter()
        {
            var oldNode = GenerateAttributeArgument();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeArgumentTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAttributeArgument();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAttributeArgumentIdentityRewriter()
        {
            var oldNode = GenerateAttributeArgument();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNameEqualsTokenDeleteRewriter()
        {
            var oldNode = GenerateNameEquals();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNameEqualsTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateNameEquals();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNameEqualsIdentityRewriter()
        {
            var oldNode = GenerateNameEquals();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeParameterListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTypeParameterList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeParameterListIdentityRewriter()
        {
            var oldNode = GenerateTypeParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeParameterTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeParameter();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeParameterTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTypeParameter();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeParameterIdentityRewriter()
        {
            var oldNode = GenerateTypeParameter();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestClassDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateClassDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestClassDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateClassDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestClassDeclarationIdentityRewriter()
        {
            var oldNode = GenerateClassDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestStructDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateStructDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestStructDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateStructDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestStructDeclarationIdentityRewriter()
        {
            var oldNode = GenerateStructDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestInterfaceDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateInterfaceDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterfaceDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateInterfaceDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestInterfaceDeclarationIdentityRewriter()
        {
            var oldNode = GenerateInterfaceDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRecordDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateRecordDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRecordDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateRecordDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRecordDeclarationIdentityRewriter()
        {
            var oldNode = GenerateRecordDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEnumDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateEnumDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEnumDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateEnumDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEnumDeclarationIdentityRewriter()
        {
            var oldNode = GenerateEnumDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDelegateDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateDelegateDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDelegateDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDelegateDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDelegateDeclarationIdentityRewriter()
        {
            var oldNode = GenerateDelegateDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEnumMemberDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateEnumMemberDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEnumMemberDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateEnumMemberDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEnumMemberDeclarationIdentityRewriter()
        {
            var oldNode = GenerateEnumMemberDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBaseListTokenDeleteRewriter()
        {
            var oldNode = GenerateBaseList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBaseListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateBaseList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBaseListIdentityRewriter()
        {
            var oldNode = GenerateBaseList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSimpleBaseTypeTokenDeleteRewriter()
        {
            var oldNode = GenerateSimpleBaseType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSimpleBaseTypeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSimpleBaseType();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSimpleBaseTypeIdentityRewriter()
        {
            var oldNode = GenerateSimpleBaseType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeTokenDeleteRewriter()
        {
            var oldNode = GeneratePrimaryConstructorBaseType();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePrimaryConstructorBaseType();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeIdentityRewriter()
        {
            var oldNode = GeneratePrimaryConstructorBaseType();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeParameterConstraintClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeParameterConstraintClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeParameterConstraintClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTypeParameterConstraintClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeParameterConstraintClauseIdentityRewriter()
        {
            var oldNode = GenerateTypeParameterConstraintClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConstructorConstraintTokenDeleteRewriter()
        {
            var oldNode = GenerateConstructorConstraint();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstructorConstraintTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateConstructorConstraint();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstructorConstraintIdentityRewriter()
        {
            var oldNode = GenerateConstructorConstraint();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestClassOrStructConstraintTokenDeleteRewriter()
        {
            var oldNode = GenerateClassOrStructConstraint();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestClassOrStructConstraintTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateClassOrStructConstraint();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestClassOrStructConstraintIdentityRewriter()
        {
            var oldNode = GenerateClassOrStructConstraint();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeConstraintTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeConstraint();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeConstraintTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTypeConstraint();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeConstraintIdentityRewriter()
        {
            var oldNode = GenerateTypeConstraint();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDefaultConstraintTokenDeleteRewriter()
        {
            var oldNode = GenerateDefaultConstraint();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefaultConstraintTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDefaultConstraint();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefaultConstraintIdentityRewriter()
        {
            var oldNode = GenerateDefaultConstraint();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFieldDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateFieldDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFieldDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFieldDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFieldDeclarationIdentityRewriter()
        {
            var oldNode = GenerateFieldDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEventFieldDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateEventFieldDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEventFieldDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateEventFieldDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEventFieldDeclarationIdentityRewriter()
        {
            var oldNode = GenerateEventFieldDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierTokenDeleteRewriter()
        {
            var oldNode = GenerateExplicitInterfaceSpecifier();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateExplicitInterfaceSpecifier();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierIdentityRewriter()
        {
            var oldNode = GenerateExplicitInterfaceSpecifier();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestMethodDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateMethodDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMethodDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateMethodDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestMethodDeclarationIdentityRewriter()
        {
            var oldNode = GenerateMethodDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOperatorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateOperatorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOperatorDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateOperatorDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOperatorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateOperatorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConversionOperatorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateConversionOperatorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConversionOperatorDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateConversionOperatorDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConversionOperatorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateConversionOperatorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConstructorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateConstructorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstructorDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateConstructorDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstructorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateConstructorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConstructorInitializerTokenDeleteRewriter()
        {
            var oldNode = GenerateConstructorInitializer();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstructorInitializerTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateConstructorInitializer();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConstructorInitializerIdentityRewriter()
        {
            var oldNode = GenerateConstructorInitializer();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDestructorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateDestructorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDestructorDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDestructorDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDestructorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateDestructorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPropertyDeclarationTokenDeleteRewriter()
        {
            var oldNode = GeneratePropertyDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPropertyDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePropertyDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPropertyDeclarationIdentityRewriter()
        {
            var oldNode = GeneratePropertyDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestArrowExpressionClauseTokenDeleteRewriter()
        {
            var oldNode = GenerateArrowExpressionClause();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrowExpressionClauseTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateArrowExpressionClause();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestArrowExpressionClauseIdentityRewriter()
        {
            var oldNode = GenerateArrowExpressionClause();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEventDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateEventDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEventDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateEventDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEventDeclarationIdentityRewriter()
        {
            var oldNode = GenerateEventDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIndexerDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateIndexerDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIndexerDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateIndexerDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIndexerDeclarationIdentityRewriter()
        {
            var oldNode = GenerateIndexerDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAccessorListTokenDeleteRewriter()
        {
            var oldNode = GenerateAccessorList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAccessorListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAccessorList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAccessorListIdentityRewriter()
        {
            var oldNode = GenerateAccessorList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestAccessorDeclarationTokenDeleteRewriter()
        {
            var oldNode = GenerateAccessorDeclaration();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAccessorDeclarationTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateAccessorDeclaration();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestAccessorDeclarationIdentityRewriter()
        {
            var oldNode = GenerateAccessorDeclaration();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParameterListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateParameterList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParameterListIdentityRewriter()
        {
            var oldNode = GenerateParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBracketedParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateBracketedParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBracketedParameterListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateBracketedParameterList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBracketedParameterListIdentityRewriter()
        {
            var oldNode = GenerateBracketedParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestParameterTokenDeleteRewriter()
        {
            var oldNode = GenerateParameter();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParameterTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateParameter();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestParameterIdentityRewriter()
        {
            var oldNode = GenerateParameter();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestFunctionPointerParameterTokenDeleteRewriter()
        {
            var oldNode = GenerateFunctionPointerParameter();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerParameterTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateFunctionPointerParameter();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestFunctionPointerParameterIdentityRewriter()
        {
            var oldNode = GenerateFunctionPointerParameter();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIncompleteMemberTokenDeleteRewriter()
        {
            var oldNode = GenerateIncompleteMember();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIncompleteMemberTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateIncompleteMember();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIncompleteMemberIdentityRewriter()
        {
            var oldNode = GenerateIncompleteMember();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestSkippedTokensTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateSkippedTokensTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSkippedTokensTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateSkippedTokensTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestSkippedTokensTriviaIdentityRewriter()
        {
            var oldNode = GenerateSkippedTokensTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDocumentationCommentTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateDocumentationCommentTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDocumentationCommentTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDocumentationCommentTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDocumentationCommentTriviaIdentityRewriter()
        {
            var oldNode = GenerateDocumentationCommentTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestTypeCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateTypeCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeCrefTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateTypeCref();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestTypeCrefIdentityRewriter()
        {
            var oldNode = GenerateTypeCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestQualifiedCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateQualifiedCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQualifiedCrefTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateQualifiedCref();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestQualifiedCrefIdentityRewriter()
        {
            var oldNode = GenerateQualifiedCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNameMemberCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateNameMemberCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNameMemberCrefTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateNameMemberCref();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNameMemberCrefIdentityRewriter()
        {
            var oldNode = GenerateNameMemberCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIndexerMemberCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateIndexerMemberCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIndexerMemberCrefTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateIndexerMemberCref();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIndexerMemberCrefIdentityRewriter()
        {
            var oldNode = GenerateIndexerMemberCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestOperatorMemberCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateOperatorMemberCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOperatorMemberCrefTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateOperatorMemberCref();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestOperatorMemberCrefIdentityRewriter()
        {
            var oldNode = GenerateOperatorMemberCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestConversionOperatorMemberCrefTokenDeleteRewriter()
        {
            var oldNode = GenerateConversionOperatorMemberCref();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConversionOperatorMemberCrefTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateConversionOperatorMemberCref();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestConversionOperatorMemberCrefIdentityRewriter()
        {
            var oldNode = GenerateConversionOperatorMemberCref();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCrefParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateCrefParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCrefParameterListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCrefParameterList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCrefParameterListIdentityRewriter()
        {
            var oldNode = GenerateCrefParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCrefBracketedParameterListTokenDeleteRewriter()
        {
            var oldNode = GenerateCrefBracketedParameterList();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCrefBracketedParameterListTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCrefBracketedParameterList();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCrefBracketedParameterListIdentityRewriter()
        {
            var oldNode = GenerateCrefBracketedParameterList();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestCrefParameterTokenDeleteRewriter()
        {
            var oldNode = GenerateCrefParameter();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCrefParameterTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateCrefParameter();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestCrefParameterIdentityRewriter()
        {
            var oldNode = GenerateCrefParameter();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlElementTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlElement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlElementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlElement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlElementIdentityRewriter()
        {
            var oldNode = GenerateXmlElement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlElementStartTagTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlElementStartTag();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlElementStartTagTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlElementStartTag();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlElementStartTagIdentityRewriter()
        {
            var oldNode = GenerateXmlElementStartTag();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlElementEndTagTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlElementEndTag();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlElementEndTagTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlElementEndTag();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlElementEndTagIdentityRewriter()
        {
            var oldNode = GenerateXmlElementEndTag();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlEmptyElementTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlEmptyElement();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlEmptyElementTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlEmptyElement();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlEmptyElementIdentityRewriter()
        {
            var oldNode = GenerateXmlEmptyElement();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlNameTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlName();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlNameTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlName();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlNameIdentityRewriter()
        {
            var oldNode = GenerateXmlName();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlPrefixTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlPrefix();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlPrefixTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlPrefix();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlPrefixIdentityRewriter()
        {
            var oldNode = GenerateXmlPrefix();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlTextAttributeTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlTextAttribute();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlTextAttributeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlTextAttribute();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlTextAttributeIdentityRewriter()
        {
            var oldNode = GenerateXmlTextAttribute();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlCrefAttributeTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlCrefAttribute();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlCrefAttributeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlCrefAttribute();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlCrefAttributeIdentityRewriter()
        {
            var oldNode = GenerateXmlCrefAttribute();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlNameAttributeTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlNameAttribute();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlNameAttributeTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlNameAttribute();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlNameAttributeIdentityRewriter()
        {
            var oldNode = GenerateXmlNameAttribute();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlTextTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlText();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlTextTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlText();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlTextIdentityRewriter()
        {
            var oldNode = GenerateXmlText();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlCDataSectionTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlCDataSection();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlCDataSectionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlCDataSection();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlCDataSectionIdentityRewriter()
        {
            var oldNode = GenerateXmlCDataSection();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlProcessingInstructionTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlProcessingInstruction();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlProcessingInstructionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlProcessingInstruction();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlProcessingInstructionIdentityRewriter()
        {
            var oldNode = GenerateXmlProcessingInstruction();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestXmlCommentTokenDeleteRewriter()
        {
            var oldNode = GenerateXmlComment();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlCommentTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateXmlComment();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestXmlCommentIdentityRewriter()
        {
            var oldNode = GenerateXmlComment();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestIfDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateIfDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIfDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateIfDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestIfDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateIfDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElifDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateElifDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElifDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateElifDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElifDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateElifDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestElseDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateElseDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElseDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateElseDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestElseDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateElseDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEndIfDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateEndIfDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEndIfDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateEndIfDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEndIfDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateEndIfDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestRegionDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateRegionDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRegionDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateRegionDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestRegionDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateRegionDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateEndRegionDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateEndRegionDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateEndRegionDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestErrorDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateErrorDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestErrorDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateErrorDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestErrorDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateErrorDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestWarningDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateWarningDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWarningDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateWarningDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestWarningDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateWarningDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestBadDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateBadDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBadDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateBadDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestBadDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateBadDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestDefineDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateDefineDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefineDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateDefineDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestDefineDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateDefineDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestUndefDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateUndefDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUndefDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateUndefDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestUndefDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateUndefDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLineDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateLineDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLineDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLineDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLineDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateLineDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLineDirectivePositionTokenDeleteRewriter()
        {
            var oldNode = GenerateLineDirectivePosition();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLineDirectivePositionTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLineDirectivePosition();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLineDirectivePositionIdentityRewriter()
        {
            var oldNode = GenerateLineDirectivePosition();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateLineSpanDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLineSpanDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateLineSpanDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GeneratePragmaWarningDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePragmaWarningDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GeneratePragmaWarningDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GeneratePragmaChecksumDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GeneratePragmaChecksumDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GeneratePragmaChecksumDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestReferenceDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateReferenceDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestReferenceDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateReferenceDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestReferenceDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateReferenceDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestLoadDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateLoadDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLoadDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateLoadDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestLoadDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateLoadDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestShebangDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateShebangDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestShebangDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateShebangDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestShebangDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateShebangDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }

        [Fact]
        public void TestNullableDirectiveTriviaTokenDeleteRewriter()
        {
            var oldNode = GenerateNullableDirectiveTrivia();
            var rewriter = new TokenDeleteRewriter();
            var newNode = rewriter.Visit(oldNode);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNullableDirectiveTriviaTokenDeleteRewriterWithArgument()
        {
            var oldNode = GenerateNullableDirectiveTrivia();
            var rewriter = new TokenDeleteRewriterWithArgument();
            var argument = new VisitorArgument();
            var newNode = rewriter.Visit(oldNode, argument);

            if(!oldNode.IsMissing)
            {
                Assert.NotEqual(oldNode, newNode);
                Assert.True(argument.VisitCount > 0);
            }
            else
            {
                Assert.True(argument.VisitCount >= 0);
            }

            Assert.NotNull(newNode);
            Assert.True(newNode.IsMissing, "No tokens => missing");
        }

        [Fact]
        public void TestNullableDirectiveTriviaIdentityRewriter()
        {
            var oldNode = GenerateNullableDirectiveTrivia();
            var rewriter = new IdentityRewriter();
            var newNode = rewriter.Visit(oldNode);

            Assert.Same(oldNode, newNode);
        }
        #endregion Red Rewriters
        #region Red Visitors
        internal partial class AssertOnVisitVisitor<TArgument, TResult> : CSharpSyntaxVisitor<TArgument, TResult>
        {
            public override TResult VisitIdentifierName(IdentifierNameSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitIdentifierName should not have been called.");
                return default;
            }

            public override TResult VisitQualifiedName(QualifiedNameSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitQualifiedName should not have been called.");
                return default;
            }

            public override TResult VisitGenericName(GenericNameSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitGenericName should not have been called.");
                return default;
            }

            public override TResult VisitTypeArgumentList(TypeArgumentListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTypeArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitAliasQualifiedName(AliasQualifiedNameSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAliasQualifiedName should not have been called.");
                return default;
            }

            public override TResult VisitPredefinedType(PredefinedTypeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPredefinedType should not have been called.");
                return default;
            }

            public override TResult VisitArrayType(ArrayTypeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitArrayType should not have been called.");
                return default;
            }

            public override TResult VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitArrayRankSpecifier should not have been called.");
                return default;
            }

            public override TResult VisitPointerType(PointerTypeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPointerType should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerType(FunctionPointerTypeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFunctionPointerType should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerParameterList(FunctionPointerParameterListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFunctionPointerParameterList should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerCallingConvention(FunctionPointerCallingConventionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFunctionPointerCallingConvention should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerUnmanagedCallingConventionList(FunctionPointerUnmanagedCallingConventionListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConventionList should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerUnmanagedCallingConvention(FunctionPointerUnmanagedCallingConventionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConvention should not have been called.");
                return default;
            }

            public override TResult VisitNullableType(NullableTypeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitNullableType should not have been called.");
                return default;
            }

            public override TResult VisitTupleType(TupleTypeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTupleType should not have been called.");
                return default;
            }

            public override TResult VisitTupleElement(TupleElementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTupleElement should not have been called.");
                return default;
            }

            public override TResult VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitOmittedTypeArgument should not have been called.");
                return default;
            }

            public override TResult VisitRefType(RefTypeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitRefType should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedExpression(ParenthesizedExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitParenthesizedExpression should not have been called.");
                return default;
            }

            public override TResult VisitTupleExpression(TupleExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTupleExpression should not have been called.");
                return default;
            }

            public override TResult VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPrefixUnaryExpression should not have been called.");
                return default;
            }

            public override TResult VisitAwaitExpression(AwaitExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAwaitExpression should not have been called.");
                return default;
            }

            public override TResult VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPostfixUnaryExpression should not have been called.");
                return default;
            }

            public override TResult VisitMemberAccessExpression(MemberAccessExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitMemberAccessExpression should not have been called.");
                return default;
            }

            public override TResult VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitConditionalAccessExpression should not have been called.");
                return default;
            }

            public override TResult VisitMemberBindingExpression(MemberBindingExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitMemberBindingExpression should not have been called.");
                return default;
            }

            public override TResult VisitElementBindingExpression(ElementBindingExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitElementBindingExpression should not have been called.");
                return default;
            }

            public override TResult VisitRangeExpression(RangeExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitRangeExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitElementAccess(ImplicitElementAccessSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitImplicitElementAccess should not have been called.");
                return default;
            }

            public override TResult VisitBinaryExpression(BinaryExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitBinaryExpression should not have been called.");
                return default;
            }

            public override TResult VisitAssignmentExpression(AssignmentExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAssignmentExpression should not have been called.");
                return default;
            }

            public override TResult VisitConditionalExpression(ConditionalExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitConditionalExpression should not have been called.");
                return default;
            }

            public override TResult VisitThisExpression(ThisExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitThisExpression should not have been called.");
                return default;
            }

            public override TResult VisitBaseExpression(BaseExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitBaseExpression should not have been called.");
                return default;
            }

            public override TResult VisitLiteralExpression(LiteralExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLiteralExpression should not have been called.");
                return default;
            }

            public override TResult VisitMakeRefExpression(MakeRefExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitMakeRefExpression should not have been called.");
                return default;
            }

            public override TResult VisitRefTypeExpression(RefTypeExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitRefTypeExpression should not have been called.");
                return default;
            }

            public override TResult VisitRefValueExpression(RefValueExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitRefValueExpression should not have been called.");
                return default;
            }

            public override TResult VisitCheckedExpression(CheckedExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCheckedExpression should not have been called.");
                return default;
            }

            public override TResult VisitDefaultExpression(DefaultExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDefaultExpression should not have been called.");
                return default;
            }

            public override TResult VisitTypeOfExpression(TypeOfExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTypeOfExpression should not have been called.");
                return default;
            }

            public override TResult VisitSizeOfExpression(SizeOfExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSizeOfExpression should not have been called.");
                return default;
            }

            public override TResult VisitInvocationExpression(InvocationExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitInvocationExpression should not have been called.");
                return default;
            }

            public override TResult VisitElementAccessExpression(ElementAccessExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitElementAccessExpression should not have been called.");
                return default;
            }

            public override TResult VisitArgumentList(ArgumentListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitBracketedArgumentList(BracketedArgumentListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitBracketedArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitArgument(ArgumentSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitArgument should not have been called.");
                return default;
            }

            public override TResult VisitExpressionColon(ExpressionColonSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitExpressionColon should not have been called.");
                return default;
            }

            public override TResult VisitNameColon(NameColonSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitNameColon should not have been called.");
                return default;
            }

            public override TResult VisitDeclarationExpression(DeclarationExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDeclarationExpression should not have been called.");
                return default;
            }

            public override TResult VisitCastExpression(CastExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCastExpression should not have been called.");
                return default;
            }

            public override TResult VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAnonymousMethodExpression should not have been called.");
                return default;
            }

            public override TResult VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSimpleLambdaExpression should not have been called.");
                return default;
            }

            public override TResult VisitRefExpression(RefExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitRefExpression should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitParenthesizedLambdaExpression should not have been called.");
                return default;
            }

            public override TResult VisitInitializerExpression(InitializerExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitInitializerExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitObjectCreationExpression(ImplicitObjectCreationExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitImplicitObjectCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitObjectCreationExpression(ObjectCreationExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitObjectCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitWithExpression(WithExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitWithExpression should not have been called.");
                return default;
            }

            public override TResult VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAnonymousObjectMemberDeclarator should not have been called.");
                return default;
            }

            public override TResult VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAnonymousObjectCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitArrayCreationExpression(ArrayCreationExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitImplicitArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitStackAllocArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitStackAllocArrayCreationExpression(ImplicitStackAllocArrayCreationExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitImplicitStackAllocArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitQueryExpression(QueryExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitQueryExpression should not have been called.");
                return default;
            }

            public override TResult VisitQueryBody(QueryBodySyntax node, TArgument argument)
            {
                Assert.True(false, "VisitQueryBody should not have been called.");
                return default;
            }

            public override TResult VisitFromClause(FromClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFromClause should not have been called.");
                return default;
            }

            public override TResult VisitLetClause(LetClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLetClause should not have been called.");
                return default;
            }

            public override TResult VisitJoinClause(JoinClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitJoinClause should not have been called.");
                return default;
            }

            public override TResult VisitJoinIntoClause(JoinIntoClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitJoinIntoClause should not have been called.");
                return default;
            }

            public override TResult VisitWhereClause(WhereClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitWhereClause should not have been called.");
                return default;
            }

            public override TResult VisitOrderByClause(OrderByClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitOrderByClause should not have been called.");
                return default;
            }

            public override TResult VisitOrdering(OrderingSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitOrdering should not have been called.");
                return default;
            }

            public override TResult VisitSelectClause(SelectClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSelectClause should not have been called.");
                return default;
            }

            public override TResult VisitGroupClause(GroupClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitGroupClause should not have been called.");
                return default;
            }

            public override TResult VisitQueryContinuation(QueryContinuationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitQueryContinuation should not have been called.");
                return default;
            }

            public override TResult VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitOmittedArraySizeExpression should not have been called.");
                return default;
            }

            public override TResult VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitInterpolatedStringExpression should not have been called.");
                return default;
            }

            public override TResult VisitIsPatternExpression(IsPatternExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitIsPatternExpression should not have been called.");
                return default;
            }

            public override TResult VisitThrowExpression(ThrowExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitThrowExpression should not have been called.");
                return default;
            }

            public override TResult VisitWhenClause(WhenClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitWhenClause should not have been called.");
                return default;
            }

            public override TResult VisitDiscardPattern(DiscardPatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDiscardPattern should not have been called.");
                return default;
            }

            public override TResult VisitDeclarationPattern(DeclarationPatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDeclarationPattern should not have been called.");
                return default;
            }

            public override TResult VisitVarPattern(VarPatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitVarPattern should not have been called.");
                return default;
            }

            public override TResult VisitRecursivePattern(RecursivePatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitRecursivePattern should not have been called.");
                return default;
            }

            public override TResult VisitPositionalPatternClause(PositionalPatternClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPositionalPatternClause should not have been called.");
                return default;
            }

            public override TResult VisitPropertyPatternClause(PropertyPatternClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPropertyPatternClause should not have been called.");
                return default;
            }

            public override TResult VisitSubpattern(SubpatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSubpattern should not have been called.");
                return default;
            }

            public override TResult VisitConstantPattern(ConstantPatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitConstantPattern should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedPattern(ParenthesizedPatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitParenthesizedPattern should not have been called.");
                return default;
            }

            public override TResult VisitRelationalPattern(RelationalPatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitRelationalPattern should not have been called.");
                return default;
            }

            public override TResult VisitTypePattern(TypePatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTypePattern should not have been called.");
                return default;
            }

            public override TResult VisitBinaryPattern(BinaryPatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitBinaryPattern should not have been called.");
                return default;
            }

            public override TResult VisitUnaryPattern(UnaryPatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitUnaryPattern should not have been called.");
                return default;
            }

            public override TResult VisitListPattern(ListPatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitListPattern should not have been called.");
                return default;
            }

            public override TResult VisitSlicePattern(SlicePatternSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSlicePattern should not have been called.");
                return default;
            }

            public override TResult VisitInterpolatedStringText(InterpolatedStringTextSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitInterpolatedStringText should not have been called.");
                return default;
            }

            public override TResult VisitInterpolation(InterpolationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitInterpolation should not have been called.");
                return default;
            }

            public override TResult VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitInterpolationAlignmentClause should not have been called.");
                return default;
            }

            public override TResult VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitInterpolationFormatClause should not have been called.");
                return default;
            }

            public override TResult VisitGlobalStatement(GlobalStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitGlobalStatement should not have been called.");
                return default;
            }

            public override TResult VisitBlock(BlockSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitBlock should not have been called.");
                return default;
            }

            public override TResult VisitLocalFunctionStatement(LocalFunctionStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLocalFunctionStatement should not have been called.");
                return default;
            }

            public override TResult VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLocalDeclarationStatement should not have been called.");
                return default;
            }

            public override TResult VisitVariableDeclaration(VariableDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitVariableDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitVariableDeclarator(VariableDeclaratorSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitVariableDeclarator should not have been called.");
                return default;
            }

            public override TResult VisitEqualsValueClause(EqualsValueClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitEqualsValueClause should not have been called.");
                return default;
            }

            public override TResult VisitSingleVariableDesignation(SingleVariableDesignationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSingleVariableDesignation should not have been called.");
                return default;
            }

            public override TResult VisitDiscardDesignation(DiscardDesignationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDiscardDesignation should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitParenthesizedVariableDesignation should not have been called.");
                return default;
            }

            public override TResult VisitExpressionStatement(ExpressionStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitExpressionStatement should not have been called.");
                return default;
            }

            public override TResult VisitEmptyStatement(EmptyStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitEmptyStatement should not have been called.");
                return default;
            }

            public override TResult VisitLabeledStatement(LabeledStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLabeledStatement should not have been called.");
                return default;
            }

            public override TResult VisitGotoStatement(GotoStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitGotoStatement should not have been called.");
                return default;
            }

            public override TResult VisitBreakStatement(BreakStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitBreakStatement should not have been called.");
                return default;
            }

            public override TResult VisitContinueStatement(ContinueStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitContinueStatement should not have been called.");
                return default;
            }

            public override TResult VisitReturnStatement(ReturnStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitReturnStatement should not have been called.");
                return default;
            }

            public override TResult VisitThrowStatement(ThrowStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitThrowStatement should not have been called.");
                return default;
            }

            public override TResult VisitYieldStatement(YieldStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitYieldStatement should not have been called.");
                return default;
            }

            public override TResult VisitWhileStatement(WhileStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitWhileStatement should not have been called.");
                return default;
            }

            public override TResult VisitDoStatement(DoStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDoStatement should not have been called.");
                return default;
            }

            public override TResult VisitForStatement(ForStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitForStatement should not have been called.");
                return default;
            }

            public override TResult VisitForEachStatement(ForEachStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitForEachStatement should not have been called.");
                return default;
            }

            public override TResult VisitForEachVariableStatement(ForEachVariableStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitForEachVariableStatement should not have been called.");
                return default;
            }

            public override TResult VisitUsingStatement(UsingStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitUsingStatement should not have been called.");
                return default;
            }

            public override TResult VisitFixedStatement(FixedStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFixedStatement should not have been called.");
                return default;
            }

            public override TResult VisitCheckedStatement(CheckedStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCheckedStatement should not have been called.");
                return default;
            }

            public override TResult VisitUnsafeStatement(UnsafeStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitUnsafeStatement should not have been called.");
                return default;
            }

            public override TResult VisitLockStatement(LockStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLockStatement should not have been called.");
                return default;
            }

            public override TResult VisitIfStatement(IfStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitIfStatement should not have been called.");
                return default;
            }

            public override TResult VisitElseClause(ElseClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitElseClause should not have been called.");
                return default;
            }

            public override TResult VisitSwitchStatement(SwitchStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSwitchStatement should not have been called.");
                return default;
            }

            public override TResult VisitSwitchSection(SwitchSectionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSwitchSection should not have been called.");
                return default;
            }

            public override TResult VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCasePatternSwitchLabel should not have been called.");
                return default;
            }

            public override TResult VisitCaseSwitchLabel(CaseSwitchLabelSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCaseSwitchLabel should not have been called.");
                return default;
            }

            public override TResult VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDefaultSwitchLabel should not have been called.");
                return default;
            }

            public override TResult VisitSwitchExpression(SwitchExpressionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSwitchExpression should not have been called.");
                return default;
            }

            public override TResult VisitSwitchExpressionArm(SwitchExpressionArmSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSwitchExpressionArm should not have been called.");
                return default;
            }

            public override TResult VisitTryStatement(TryStatementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTryStatement should not have been called.");
                return default;
            }

            public override TResult VisitCatchClause(CatchClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCatchClause should not have been called.");
                return default;
            }

            public override TResult VisitCatchDeclaration(CatchDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCatchDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitCatchFilterClause(CatchFilterClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCatchFilterClause should not have been called.");
                return default;
            }

            public override TResult VisitFinallyClause(FinallyClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFinallyClause should not have been called.");
                return default;
            }

            public override TResult VisitCompilationUnit(CompilationUnitSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCompilationUnit should not have been called.");
                return default;
            }

            public override TResult VisitExternAliasDirective(ExternAliasDirectiveSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitExternAliasDirective should not have been called.");
                return default;
            }

            public override TResult VisitUsingDirective(UsingDirectiveSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitUsingDirective should not have been called.");
                return default;
            }

            public override TResult VisitNamespaceDeclaration(NamespaceDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitNamespaceDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitFileScopedNamespaceDeclaration(FileScopedNamespaceDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFileScopedNamespaceDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitAttributeList(AttributeListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAttributeList should not have been called.");
                return default;
            }

            public override TResult VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAttributeTargetSpecifier should not have been called.");
                return default;
            }

            public override TResult VisitAttribute(AttributeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAttribute should not have been called.");
                return default;
            }

            public override TResult VisitAttributeArgumentList(AttributeArgumentListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAttributeArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitAttributeArgument(AttributeArgumentSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAttributeArgument should not have been called.");
                return default;
            }

            public override TResult VisitNameEquals(NameEqualsSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitNameEquals should not have been called.");
                return default;
            }

            public override TResult VisitTypeParameterList(TypeParameterListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTypeParameterList should not have been called.");
                return default;
            }

            public override TResult VisitTypeParameter(TypeParameterSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTypeParameter should not have been called.");
                return default;
            }

            public override TResult VisitClassDeclaration(ClassDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitClassDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitStructDeclaration(StructDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitStructDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitInterfaceDeclaration(InterfaceDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitInterfaceDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitRecordDeclaration(RecordDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitRecordDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitEnumDeclaration(EnumDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitEnumDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitDelegateDeclaration(DelegateDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDelegateDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitEnumMemberDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitBaseList(BaseListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitBaseList should not have been called.");
                return default;
            }

            public override TResult VisitSimpleBaseType(SimpleBaseTypeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSimpleBaseType should not have been called.");
                return default;
            }

            public override TResult VisitPrimaryConstructorBaseType(PrimaryConstructorBaseTypeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPrimaryConstructorBaseType should not have been called.");
                return default;
            }

            public override TResult VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTypeParameterConstraintClause should not have been called.");
                return default;
            }

            public override TResult VisitConstructorConstraint(ConstructorConstraintSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitConstructorConstraint should not have been called.");
                return default;
            }

            public override TResult VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitClassOrStructConstraint should not have been called.");
                return default;
            }

            public override TResult VisitTypeConstraint(TypeConstraintSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTypeConstraint should not have been called.");
                return default;
            }

            public override TResult VisitDefaultConstraint(DefaultConstraintSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDefaultConstraint should not have been called.");
                return default;
            }

            public override TResult VisitFieldDeclaration(FieldDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFieldDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitEventFieldDeclaration(EventFieldDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitEventFieldDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitExplicitInterfaceSpecifier should not have been called.");
                return default;
            }

            public override TResult VisitMethodDeclaration(MethodDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitMethodDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitOperatorDeclaration(OperatorDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitOperatorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitConversionOperatorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitConstructorDeclaration(ConstructorDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitConstructorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitConstructorInitializer(ConstructorInitializerSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitConstructorInitializer should not have been called.");
                return default;
            }

            public override TResult VisitDestructorDeclaration(DestructorDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDestructorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitPropertyDeclaration(PropertyDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPropertyDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitArrowExpressionClause(ArrowExpressionClauseSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitArrowExpressionClause should not have been called.");
                return default;
            }

            public override TResult VisitEventDeclaration(EventDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitEventDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitIndexerDeclaration(IndexerDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitIndexerDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitAccessorList(AccessorListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAccessorList should not have been called.");
                return default;
            }

            public override TResult VisitAccessorDeclaration(AccessorDeclarationSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitAccessorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitParameterList(ParameterListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitParameterList should not have been called.");
                return default;
            }

            public override TResult VisitBracketedParameterList(BracketedParameterListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitBracketedParameterList should not have been called.");
                return default;
            }

            public override TResult VisitParameter(ParameterSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitParameter should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerParameter(FunctionPointerParameterSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitFunctionPointerParameter should not have been called.");
                return default;
            }

            public override TResult VisitIncompleteMember(IncompleteMemberSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitIncompleteMember should not have been called.");
                return default;
            }

            public override TResult VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitSkippedTokensTrivia should not have been called.");
                return default;
            }

            public override TResult VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDocumentationCommentTrivia should not have been called.");
                return default;
            }

            public override TResult VisitTypeCref(TypeCrefSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitTypeCref should not have been called.");
                return default;
            }

            public override TResult VisitQualifiedCref(QualifiedCrefSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitQualifiedCref should not have been called.");
                return default;
            }

            public override TResult VisitNameMemberCref(NameMemberCrefSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitNameMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitIndexerMemberCref(IndexerMemberCrefSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitIndexerMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitOperatorMemberCref(OperatorMemberCrefSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitOperatorMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitConversionOperatorMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitCrefParameterList(CrefParameterListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCrefParameterList should not have been called.");
                return default;
            }

            public override TResult VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCrefBracketedParameterList should not have been called.");
                return default;
            }

            public override TResult VisitCrefParameter(CrefParameterSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitCrefParameter should not have been called.");
                return default;
            }

            public override TResult VisitXmlElement(XmlElementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlElement should not have been called.");
                return default;
            }

            public override TResult VisitXmlElementStartTag(XmlElementStartTagSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlElementStartTag should not have been called.");
                return default;
            }

            public override TResult VisitXmlElementEndTag(XmlElementEndTagSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlElementEndTag should not have been called.");
                return default;
            }

            public override TResult VisitXmlEmptyElement(XmlEmptyElementSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlEmptyElement should not have been called.");
                return default;
            }

            public override TResult VisitXmlName(XmlNameSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlName should not have been called.");
                return default;
            }

            public override TResult VisitXmlPrefix(XmlPrefixSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlPrefix should not have been called.");
                return default;
            }

            public override TResult VisitXmlTextAttribute(XmlTextAttributeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlTextAttribute should not have been called.");
                return default;
            }

            public override TResult VisitXmlCrefAttribute(XmlCrefAttributeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlCrefAttribute should not have been called.");
                return default;
            }

            public override TResult VisitXmlNameAttribute(XmlNameAttributeSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlNameAttribute should not have been called.");
                return default;
            }

            public override TResult VisitXmlText(XmlTextSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlText should not have been called.");
                return default;
            }

            public override TResult VisitXmlCDataSection(XmlCDataSectionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlCDataSection should not have been called.");
                return default;
            }

            public override TResult VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlProcessingInstruction should not have been called.");
                return default;
            }

            public override TResult VisitXmlComment(XmlCommentSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitXmlComment should not have been called.");
                return default;
            }

            public override TResult VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitIfDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitElifDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitElseDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitEndIfDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitRegionDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitEndRegionDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitErrorDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitWarningDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitBadDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitDefineDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitUndefDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLineDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitLineDirectivePosition(LineDirectivePositionSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLineDirectivePosition should not have been called.");
                return default;
            }

            public override TResult VisitLineSpanDirectiveTrivia(LineSpanDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLineSpanDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPragmaWarningDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitPragmaChecksumDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitReferenceDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitLoadDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitShebangDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitNullableDirectiveTrivia(NullableDirectiveTriviaSyntax node, TArgument argument)
            {
                Assert.True(false, "VisitNullableDirectiveTrivia should not have been called.");
                return default;
            }
        }
        internal class AssertOnEverythingButIdentifierNameVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitIdentifierName(IdentifierNameSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIdentifierNameNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIdentifierName();
            var visitor = new AssertOnEverythingButIdentifierNameVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIdentifierNameNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIdentifierName();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedNameVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitQualifiedName(QualifiedNameSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQualifiedNameNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQualifiedName();
            var visitor = new AssertOnEverythingButQualifiedNameVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQualifiedNameNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQualifiedName();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGenericNameVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitGenericName(GenericNameSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGenericNameNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateGenericName();
            var visitor = new AssertOnEverythingButGenericNameVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGenericNameNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateGenericName();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeArgumentListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTypeArgumentList(TypeArgumentListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new AssertOnEverythingButTypeArgumentListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAliasQualifiedNameVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAliasQualifiedName(AliasQualifiedNameSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new AssertOnEverythingButAliasQualifiedNameVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPredefinedTypeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPredefinedType(PredefinedTypeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePredefinedType();
            var visitor = new AssertOnEverythingButPredefinedTypeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePredefinedType();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayTypeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitArrayType(ArrayTypeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrayTypeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArrayType();
            var visitor = new AssertOnEverythingButArrayTypeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrayTypeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArrayType();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayRankSpecifierVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new AssertOnEverythingButArrayRankSpecifierVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPointerTypeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPointerType(PointerTypeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPointerTypeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePointerType();
            var visitor = new AssertOnEverythingButPointerTypeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPointerTypeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePointerType();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerTypeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFunctionPointerType(FunctionPointerTypeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new AssertOnEverythingButFunctionPointerTypeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFunctionPointerParameterList(FunctionPointerParameterListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new AssertOnEverythingButFunctionPointerParameterListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerCallingConventionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFunctionPointerCallingConvention(FunctionPointerCallingConventionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerCallingConventionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFunctionPointerUnmanagedCallingConventionList(FunctionPointerUnmanagedCallingConventionListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFunctionPointerUnmanagedCallingConvention(FunctionPointerUnmanagedCallingConventionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableTypeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitNullableType(NullableTypeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNullableTypeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNullableType();
            var visitor = new AssertOnEverythingButNullableTypeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNullableTypeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNullableType();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleTypeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTupleType(TupleTypeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTupleTypeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTupleType();
            var visitor = new AssertOnEverythingButTupleTypeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTupleTypeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTupleType();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleElementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTupleElement(TupleElementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTupleElementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTupleElement();
            var visitor = new AssertOnEverythingButTupleElementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTupleElementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTupleElement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedTypeArgumentVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new AssertOnEverythingButOmittedTypeArgumentVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitRefType(RefTypeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefTypeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRefType();
            var visitor = new AssertOnEverythingButRefTypeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefTypeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRefType();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitParenthesizedExpression(ParenthesizedExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new AssertOnEverythingButParenthesizedExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTupleExpression(TupleExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTupleExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTupleExpression();
            var visitor = new AssertOnEverythingButTupleExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTupleExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTupleExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrefixUnaryExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new AssertOnEverythingButPrefixUnaryExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAwaitExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAwaitExpression(AwaitExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAwaitExpression();
            var visitor = new AssertOnEverythingButAwaitExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAwaitExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPostfixUnaryExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new AssertOnEverythingButPostfixUnaryExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberAccessExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitMemberAccessExpression(MemberAccessExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new AssertOnEverythingButMemberAccessExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalAccessExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new AssertOnEverythingButConditionalAccessExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberBindingExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitMemberBindingExpression(MemberBindingExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new AssertOnEverythingButMemberBindingExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementBindingExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitElementBindingExpression(ElementBindingExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new AssertOnEverythingButElementBindingExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRangeExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitRangeExpression(RangeExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRangeExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRangeExpression();
            var visitor = new AssertOnEverythingButRangeExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRangeExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRangeExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitElementAccessVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitImplicitElementAccess(ImplicitElementAccessSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new AssertOnEverythingButImplicitElementAccessVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitBinaryExpression(BinaryExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBinaryExpression();
            var visitor = new AssertOnEverythingButBinaryExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBinaryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAssignmentExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAssignmentExpression(AssignmentExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new AssertOnEverythingButAssignmentExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitConditionalExpression(ConditionalExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConditionalExpression();
            var visitor = new AssertOnEverythingButConditionalExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConditionalExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThisExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitThisExpression(ThisExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestThisExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateThisExpression();
            var visitor = new AssertOnEverythingButThisExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestThisExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateThisExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitBaseExpression(BaseExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBaseExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBaseExpression();
            var visitor = new AssertOnEverythingButBaseExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBaseExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBaseExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLiteralExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLiteralExpression(LiteralExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLiteralExpression();
            var visitor = new AssertOnEverythingButLiteralExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLiteralExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMakeRefExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitMakeRefExpression(MakeRefExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new AssertOnEverythingButMakeRefExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitRefTypeExpression(RefTypeExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new AssertOnEverythingButRefTypeExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefValueExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitRefValueExpression(RefValueExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRefValueExpression();
            var visitor = new AssertOnEverythingButRefValueExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRefValueExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCheckedExpression(CheckedExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCheckedExpression();
            var visitor = new AssertOnEverythingButCheckedExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCheckedExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDefaultExpression(DefaultExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDefaultExpression();
            var visitor = new AssertOnEverythingButDefaultExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDefaultExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeOfExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTypeOfExpression(TypeOfExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new AssertOnEverythingButTypeOfExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSizeOfExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSizeOfExpression(SizeOfExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new AssertOnEverythingButSizeOfExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInvocationExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitInvocationExpression(InvocationExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInvocationExpression();
            var visitor = new AssertOnEverythingButInvocationExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInvocationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementAccessExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitElementAccessExpression(ElementAccessExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new AssertOnEverythingButElementAccessExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitArgumentList(ArgumentListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArgumentListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArgumentList();
            var visitor = new AssertOnEverythingButArgumentListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArgumentListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedArgumentListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitBracketedArgumentList(BracketedArgumentListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new AssertOnEverythingButBracketedArgumentListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitArgument(ArgumentSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArgumentNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArgument();
            var visitor = new AssertOnEverythingButArgumentVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArgumentNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArgument();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionColonVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitExpressionColon(ExpressionColonSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExpressionColonNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateExpressionColon();
            var visitor = new AssertOnEverythingButExpressionColonVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExpressionColonNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateExpressionColon();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameColonVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitNameColon(NameColonSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNameColonNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNameColon();
            var visitor = new AssertOnEverythingButNameColonVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNameColonNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNameColon();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDeclarationExpression(DeclarationExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new AssertOnEverythingButDeclarationExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCastExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCastExpression(CastExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCastExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCastExpression();
            var visitor = new AssertOnEverythingButCastExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCastExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCastExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousMethodExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new AssertOnEverythingButAnonymousMethodExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleLambdaExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new AssertOnEverythingButSimpleLambdaExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitRefExpression(RefExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRefExpression();
            var visitor = new AssertOnEverythingButRefExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRefExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInitializerExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitInitializerExpression(InitializerExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInitializerExpression();
            var visitor = new AssertOnEverythingButInitializerExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInitializerExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitImplicitObjectCreationExpression(ImplicitObjectCreationExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButObjectCreationExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitObjectCreationExpression(ObjectCreationExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new AssertOnEverythingButObjectCreationExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWithExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitWithExpression(WithExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWithExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWithExpression();
            var visitor = new AssertOnEverythingButWithExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWithExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWithExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayCreationExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitArrayCreationExpression(ArrayCreationExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new AssertOnEverythingButArrayCreationExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitImplicitStackAllocArrayCreationExpression(ImplicitStackAllocArrayCreationExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitQueryExpression(QueryExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQueryExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQueryExpression();
            var visitor = new AssertOnEverythingButQueryExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQueryExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQueryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryBodyVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitQueryBody(QueryBodySyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQueryBodyNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQueryBody();
            var visitor = new AssertOnEverythingButQueryBodyVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQueryBodyNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQueryBody();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFromClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFromClause(FromClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFromClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFromClause();
            var visitor = new AssertOnEverythingButFromClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFromClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFromClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLetClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLetClause(LetClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLetClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLetClause();
            var visitor = new AssertOnEverythingButLetClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLetClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLetClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitJoinClause(JoinClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestJoinClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateJoinClause();
            var visitor = new AssertOnEverythingButJoinClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestJoinClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateJoinClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinIntoClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitJoinIntoClause(JoinIntoClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new AssertOnEverythingButJoinIntoClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhereClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitWhereClause(WhereClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWhereClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWhereClause();
            var visitor = new AssertOnEverythingButWhereClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWhereClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWhereClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderByClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitOrderByClause(OrderByClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOrderByClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOrderByClause();
            var visitor = new AssertOnEverythingButOrderByClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOrderByClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOrderByClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderingVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitOrdering(OrderingSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOrderingNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOrdering();
            var visitor = new AssertOnEverythingButOrderingVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOrderingNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOrdering();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSelectClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSelectClause(SelectClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSelectClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSelectClause();
            var visitor = new AssertOnEverythingButSelectClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSelectClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSelectClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGroupClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitGroupClause(GroupClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGroupClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateGroupClause();
            var visitor = new AssertOnEverythingButGroupClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGroupClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateGroupClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryContinuationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitQueryContinuation(QueryContinuationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQueryContinuationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQueryContinuation();
            var visitor = new AssertOnEverythingButQueryContinuationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQueryContinuationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQueryContinuation();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedArraySizeExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new AssertOnEverythingButOmittedArraySizeExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new AssertOnEverythingButInterpolatedStringExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIsPatternExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitIsPatternExpression(IsPatternExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new AssertOnEverythingButIsPatternExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitThrowExpression(ThrowExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestThrowExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateThrowExpression();
            var visitor = new AssertOnEverythingButThrowExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestThrowExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateThrowExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhenClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitWhenClause(WhenClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWhenClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWhenClause();
            var visitor = new AssertOnEverythingButWhenClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWhenClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWhenClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardPatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDiscardPattern(DiscardPatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDiscardPatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDiscardPattern();
            var visitor = new AssertOnEverythingButDiscardPatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDiscardPatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDiscardPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationPatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDeclarationPattern(DeclarationPatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new AssertOnEverythingButDeclarationPatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVarPatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitVarPattern(VarPatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestVarPatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateVarPattern();
            var visitor = new AssertOnEverythingButVarPatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestVarPatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateVarPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecursivePatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitRecursivePattern(RecursivePatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRecursivePatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRecursivePattern();
            var visitor = new AssertOnEverythingButRecursivePatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRecursivePatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRecursivePattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPositionalPatternClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPositionalPatternClause(PositionalPatternClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new AssertOnEverythingButPositionalPatternClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyPatternClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPropertyPatternClause(PropertyPatternClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new AssertOnEverythingButPropertyPatternClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSubpatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSubpattern(SubpatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSubpatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSubpattern();
            var visitor = new AssertOnEverythingButSubpatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSubpatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSubpattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstantPatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitConstantPattern(ConstantPatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstantPatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConstantPattern();
            var visitor = new AssertOnEverythingButConstantPatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstantPatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConstantPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedPatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitParenthesizedPattern(ParenthesizedPatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new AssertOnEverythingButParenthesizedPatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRelationalPatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitRelationalPattern(RelationalPatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRelationalPatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRelationalPattern();
            var visitor = new AssertOnEverythingButRelationalPatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRelationalPatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRelationalPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypePatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTypePattern(TypePatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypePatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypePattern();
            var visitor = new AssertOnEverythingButTypePatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypePatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypePattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryPatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitBinaryPattern(BinaryPatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBinaryPatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBinaryPattern();
            var visitor = new AssertOnEverythingButBinaryPatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBinaryPatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBinaryPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnaryPatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitUnaryPattern(UnaryPatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUnaryPatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUnaryPattern();
            var visitor = new AssertOnEverythingButUnaryPatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUnaryPatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUnaryPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButListPatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitListPattern(ListPatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestListPatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateListPattern();
            var visitor = new AssertOnEverythingButListPatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestListPatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateListPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSlicePatternVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSlicePattern(SlicePatternSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSlicePatternNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSlicePattern();
            var visitor = new AssertOnEverythingButSlicePatternVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSlicePatternNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSlicePattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringTextVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitInterpolatedStringText(InterpolatedStringTextSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new AssertOnEverythingButInterpolatedStringTextVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitInterpolation(InterpolationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolation();
            var visitor = new AssertOnEverythingButInterpolationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolation();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationAlignmentClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new AssertOnEverythingButInterpolationAlignmentClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationFormatClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new AssertOnEverythingButInterpolationFormatClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGlobalStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitGlobalStatement(GlobalStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGlobalStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateGlobalStatement();
            var visitor = new AssertOnEverythingButGlobalStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGlobalStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateGlobalStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBlockVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitBlock(BlockSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBlockNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBlock();
            var visitor = new AssertOnEverythingButBlockVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBlockNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBlock();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalFunctionStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLocalFunctionStatement(LocalFunctionStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new AssertOnEverythingButLocalFunctionStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalDeclarationStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new AssertOnEverythingButLocalDeclarationStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitVariableDeclaration(VariableDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new AssertOnEverythingButVariableDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclaratorVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitVariableDeclarator(VariableDeclaratorSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new AssertOnEverythingButVariableDeclaratorVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEqualsValueClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitEqualsValueClause(EqualsValueClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new AssertOnEverythingButEqualsValueClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSingleVariableDesignationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSingleVariableDesignation(SingleVariableDesignationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new AssertOnEverythingButSingleVariableDesignationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardDesignationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDiscardDesignation(DiscardDesignationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new AssertOnEverythingButDiscardDesignationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedVariableDesignationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new AssertOnEverythingButParenthesizedVariableDesignationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitExpressionStatement(ExpressionStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExpressionStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateExpressionStatement();
            var visitor = new AssertOnEverythingButExpressionStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExpressionStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateExpressionStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEmptyStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitEmptyStatement(EmptyStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEmptyStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEmptyStatement();
            var visitor = new AssertOnEverythingButEmptyStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEmptyStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEmptyStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLabeledStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLabeledStatement(LabeledStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLabeledStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLabeledStatement();
            var visitor = new AssertOnEverythingButLabeledStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLabeledStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLabeledStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGotoStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitGotoStatement(GotoStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGotoStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateGotoStatement();
            var visitor = new AssertOnEverythingButGotoStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGotoStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateGotoStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBreakStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitBreakStatement(BreakStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBreakStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBreakStatement();
            var visitor = new AssertOnEverythingButBreakStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBreakStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBreakStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButContinueStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitContinueStatement(ContinueStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestContinueStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateContinueStatement();
            var visitor = new AssertOnEverythingButContinueStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestContinueStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateContinueStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReturnStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitReturnStatement(ReturnStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestReturnStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateReturnStatement();
            var visitor = new AssertOnEverythingButReturnStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestReturnStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateReturnStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitThrowStatement(ThrowStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestThrowStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateThrowStatement();
            var visitor = new AssertOnEverythingButThrowStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestThrowStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateThrowStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButYieldStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitYieldStatement(YieldStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestYieldStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateYieldStatement();
            var visitor = new AssertOnEverythingButYieldStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestYieldStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateYieldStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhileStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitWhileStatement(WhileStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWhileStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWhileStatement();
            var visitor = new AssertOnEverythingButWhileStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWhileStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWhileStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDoStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDoStatement(DoStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDoStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDoStatement();
            var visitor = new AssertOnEverythingButDoStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDoStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDoStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitForStatement(ForStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestForStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateForStatement();
            var visitor = new AssertOnEverythingButForStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestForStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateForStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitForEachStatement(ForEachStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestForEachStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateForEachStatement();
            var visitor = new AssertOnEverythingButForEachStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestForEachStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateForEachStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachVariableStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitForEachVariableStatement(ForEachVariableStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new AssertOnEverythingButForEachVariableStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitUsingStatement(UsingStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUsingStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUsingStatement();
            var visitor = new AssertOnEverythingButUsingStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUsingStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUsingStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFixedStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFixedStatement(FixedStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFixedStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFixedStatement();
            var visitor = new AssertOnEverythingButFixedStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFixedStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFixedStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCheckedStatement(CheckedStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCheckedStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCheckedStatement();
            var visitor = new AssertOnEverythingButCheckedStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCheckedStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCheckedStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnsafeStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitUnsafeStatement(UnsafeStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new AssertOnEverythingButUnsafeStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLockStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLockStatement(LockStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLockStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLockStatement();
            var visitor = new AssertOnEverythingButLockStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLockStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLockStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitIfStatement(IfStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIfStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIfStatement();
            var visitor = new AssertOnEverythingButIfStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIfStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIfStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitElseClause(ElseClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElseClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElseClause();
            var visitor = new AssertOnEverythingButElseClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElseClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElseClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSwitchStatement(SwitchStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSwitchStatement();
            var visitor = new AssertOnEverythingButSwitchStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSwitchStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchSectionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSwitchSection(SwitchSectionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchSectionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSwitchSection();
            var visitor = new AssertOnEverythingButSwitchSectionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchSectionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSwitchSection();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCasePatternSwitchLabelVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new AssertOnEverythingButCasePatternSwitchLabelVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCaseSwitchLabelVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCaseSwitchLabel(CaseSwitchLabelSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new AssertOnEverythingButCaseSwitchLabelVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultSwitchLabelVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new AssertOnEverythingButDefaultSwitchLabelVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSwitchExpression(SwitchExpressionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSwitchExpression();
            var visitor = new AssertOnEverythingButSwitchExpressionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSwitchExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionArmVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSwitchExpressionArm(SwitchExpressionArmSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new AssertOnEverythingButSwitchExpressionArmVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTryStatementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTryStatement(TryStatementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTryStatementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTryStatement();
            var visitor = new AssertOnEverythingButTryStatementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTryStatementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTryStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCatchClause(CatchClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCatchClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCatchClause();
            var visitor = new AssertOnEverythingButCatchClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCatchClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCatchClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCatchDeclaration(CatchDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new AssertOnEverythingButCatchDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchFilterClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCatchFilterClause(CatchFilterClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new AssertOnEverythingButCatchFilterClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFinallyClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFinallyClause(FinallyClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFinallyClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFinallyClause();
            var visitor = new AssertOnEverythingButFinallyClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFinallyClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFinallyClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCompilationUnitVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCompilationUnit(CompilationUnitSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCompilationUnitNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCompilationUnit();
            var visitor = new AssertOnEverythingButCompilationUnitVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCompilationUnitNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCompilationUnit();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExternAliasDirectiveVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitExternAliasDirective(ExternAliasDirectiveSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new AssertOnEverythingButExternAliasDirectiveVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingDirectiveVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitUsingDirective(UsingDirectiveSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUsingDirective();
            var visitor = new AssertOnEverythingButUsingDirectiveVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUsingDirective();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNamespaceDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitNamespaceDeclaration(NamespaceDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new AssertOnEverythingButNamespaceDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFileScopedNamespaceDeclaration(FileScopedNamespaceDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAttributeList(AttributeListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttributeList();
            var visitor = new AssertOnEverythingButAttributeListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttributeList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeTargetSpecifierVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new AssertOnEverythingButAttributeTargetSpecifierVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAttribute(AttributeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttribute();
            var visitor = new AssertOnEverythingButAttributeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAttributeArgumentList(AttributeArgumentListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new AssertOnEverythingButAttributeArgumentListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAttributeArgument(AttributeArgumentSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttributeArgument();
            var visitor = new AssertOnEverythingButAttributeArgumentVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAttributeArgument();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameEqualsVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitNameEquals(NameEqualsSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNameEqualsNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNameEquals();
            var visitor = new AssertOnEverythingButNameEqualsVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNameEqualsNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNameEquals();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTypeParameterList(TypeParameterListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeParameterListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeParameterList();
            var visitor = new AssertOnEverythingButTypeParameterListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeParameterListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTypeParameter(TypeParameterSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeParameterNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeParameter();
            var visitor = new AssertOnEverythingButTypeParameterVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeParameterNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeParameter();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitClassDeclaration(ClassDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestClassDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateClassDeclaration();
            var visitor = new AssertOnEverythingButClassDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestClassDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateClassDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStructDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitStructDeclaration(StructDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestStructDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateStructDeclaration();
            var visitor = new AssertOnEverythingButStructDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestStructDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateStructDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterfaceDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitInterfaceDeclaration(InterfaceDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new AssertOnEverythingButInterfaceDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecordDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitRecordDeclaration(RecordDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new AssertOnEverythingButRecordDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitEnumDeclaration(EnumDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new AssertOnEverythingButEnumDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDelegateDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDelegateDeclaration(DelegateDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new AssertOnEverythingButDelegateDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumMemberDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new AssertOnEverythingButEnumMemberDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitBaseList(BaseListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBaseListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBaseList();
            var visitor = new AssertOnEverythingButBaseListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBaseListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBaseList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleBaseTypeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSimpleBaseType(SimpleBaseTypeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new AssertOnEverythingButSimpleBaseTypeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPrimaryConstructorBaseType(PrimaryConstructorBaseTypeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterConstraintClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new AssertOnEverythingButTypeParameterConstraintClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorConstraintVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitConstructorConstraint(ConstructorConstraintSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new AssertOnEverythingButConstructorConstraintVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassOrStructConstraintVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new AssertOnEverythingButClassOrStructConstraintVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeConstraintVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTypeConstraint(TypeConstraintSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeConstraintNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeConstraint();
            var visitor = new AssertOnEverythingButTypeConstraintVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeConstraintNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultConstraintVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDefaultConstraint(DefaultConstraintSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new AssertOnEverythingButDefaultConstraintVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFieldDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFieldDeclaration(FieldDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new AssertOnEverythingButFieldDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventFieldDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitEventFieldDeclaration(EventFieldDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new AssertOnEverythingButEventFieldDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMethodDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitMethodDeclaration(MethodDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new AssertOnEverythingButMethodDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitOperatorDeclaration(OperatorDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new AssertOnEverythingButOperatorDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new AssertOnEverythingButConversionOperatorDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitConstructorDeclaration(ConstructorDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new AssertOnEverythingButConstructorDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorInitializerVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitConstructorInitializer(ConstructorInitializerSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new AssertOnEverythingButConstructorInitializerVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDestructorDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDestructorDeclaration(DestructorDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new AssertOnEverythingButDestructorDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPropertyDeclaration(PropertyDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new AssertOnEverythingButPropertyDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrowExpressionClauseVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitArrowExpressionClause(ArrowExpressionClauseSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new AssertOnEverythingButArrowExpressionClauseVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitEventDeclaration(EventDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEventDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEventDeclaration();
            var visitor = new AssertOnEverythingButEventDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEventDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEventDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitIndexerDeclaration(IndexerDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new AssertOnEverythingButIndexerDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAccessorList(AccessorListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAccessorListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAccessorList();
            var visitor = new AssertOnEverythingButAccessorListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAccessorListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAccessorList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorDeclarationVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitAccessorDeclaration(AccessorDeclarationSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new AssertOnEverythingButAccessorDeclarationVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitParameterList(ParameterListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParameterListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParameterList();
            var visitor = new AssertOnEverythingButParameterListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParameterListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedParameterListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitBracketedParameterList(BracketedParameterListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new AssertOnEverythingButBracketedParameterListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitParameter(ParameterSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParameterNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParameter();
            var visitor = new AssertOnEverythingButParameterVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParameterNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateParameter();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitFunctionPointerParameter(FunctionPointerParameterSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new AssertOnEverythingButFunctionPointerParameterVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIncompleteMemberVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitIncompleteMember(IncompleteMemberSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIncompleteMember();
            var visitor = new AssertOnEverythingButIncompleteMemberVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIncompleteMember();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSkippedTokensTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new AssertOnEverythingButSkippedTokensTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDocumentationCommentTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new AssertOnEverythingButDocumentationCommentTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeCrefVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitTypeCref(TypeCrefSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeCrefNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeCref();
            var visitor = new AssertOnEverythingButTypeCrefVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeCrefNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateTypeCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedCrefVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitQualifiedCref(QualifiedCrefSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQualifiedCref();
            var visitor = new AssertOnEverythingButQualifiedCrefVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateQualifiedCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameMemberCrefVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitNameMemberCref(NameMemberCrefSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNameMemberCref();
            var visitor = new AssertOnEverythingButNameMemberCrefVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNameMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerMemberCrefVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitIndexerMemberCref(IndexerMemberCrefSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new AssertOnEverythingButIndexerMemberCrefVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorMemberCrefVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitOperatorMemberCref(OperatorMemberCrefSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new AssertOnEverythingButOperatorMemberCrefVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorMemberCrefVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new AssertOnEverythingButConversionOperatorMemberCrefVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCrefParameterList(CrefParameterListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCrefParameterListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCrefParameterList();
            var visitor = new AssertOnEverythingButCrefParameterListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCrefParameterListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCrefParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefBracketedParameterListVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new AssertOnEverythingButCrefBracketedParameterListVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitCrefParameter(CrefParameterSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCrefParameterNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCrefParameter();
            var visitor = new AssertOnEverythingButCrefParameterVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCrefParameterNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateCrefParameter();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlElement(XmlElementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlElementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlElement();
            var visitor = new AssertOnEverythingButXmlElementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlElementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlElement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementStartTagVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlElementStartTag(XmlElementStartTagSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new AssertOnEverythingButXmlElementStartTagVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementEndTagVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlElementEndTag(XmlElementEndTagSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new AssertOnEverythingButXmlElementEndTagVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlEmptyElementVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlEmptyElement(XmlEmptyElementSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new AssertOnEverythingButXmlEmptyElementVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlName(XmlNameSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlNameNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlName();
            var visitor = new AssertOnEverythingButXmlNameVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlNameNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlName();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlPrefixVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlPrefix(XmlPrefixSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlPrefixNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlPrefix();
            var visitor = new AssertOnEverythingButXmlPrefixVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlPrefixNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlPrefix();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextAttributeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlTextAttribute(XmlTextAttributeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new AssertOnEverythingButXmlTextAttributeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCrefAttributeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlCrefAttribute(XmlCrefAttributeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new AssertOnEverythingButXmlCrefAttributeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameAttributeVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlNameAttribute(XmlNameAttributeSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new AssertOnEverythingButXmlNameAttributeVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlText(XmlTextSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlTextNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlText();
            var visitor = new AssertOnEverythingButXmlTextVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlTextNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlText();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCDataSectionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlCDataSection(XmlCDataSectionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new AssertOnEverythingButXmlCDataSectionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlProcessingInstructionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new AssertOnEverythingButXmlProcessingInstructionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCommentVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitXmlComment(XmlCommentSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlCommentNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlComment();
            var visitor = new AssertOnEverythingButXmlCommentVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlCommentNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateXmlComment();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButIfDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElifDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new AssertOnEverythingButElifDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new AssertOnEverythingButElseDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndIfDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndIfDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRegionDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButRegionDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButErrorDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new AssertOnEverythingButErrorDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWarningDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButWarningDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBadDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new AssertOnEverythingButBadDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefineDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new AssertOnEverythingButDefineDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUndefDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new AssertOnEverythingButUndefDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectivePositionVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLineDirectivePosition(LineDirectivePositionSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new AssertOnEverythingButLineDirectivePositionVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLineSpanDirectiveTrivia(LineSpanDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReferenceDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new AssertOnEverythingButReferenceDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLoadDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new AssertOnEverythingButLoadDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButShebangDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new AssertOnEverythingButShebangDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableDirectiveTriviaVisitVisitorWithArgumentAndResult : AssertOnVisitVisitor<int, int>
        {
            public override int VisitNullableDirectiveTrivia(NullableDirectiveTriviaSyntax node, int argument)
            {
                Assert.Equal(int.MinValue, argument);
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new AssertOnEverythingButNullableDirectiveTriviaVisitVisitorWithArgumentAndResult();
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithArgumentAndResult()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int, int>(int.MaxValue);
            var result = visitor.Visit(node, int.MinValue);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal partial class AssertOnVisitVisitor<TResult> : CSharpSyntaxVisitor<TResult>
        {
            public override TResult VisitIdentifierName(IdentifierNameSyntax node)
            {
                Assert.True(false, "VisitIdentifierName should not have been called.");
                return default;
            }

            public override TResult VisitQualifiedName(QualifiedNameSyntax node)
            {
                Assert.True(false, "VisitQualifiedName should not have been called.");
                return default;
            }

            public override TResult VisitGenericName(GenericNameSyntax node)
            {
                Assert.True(false, "VisitGenericName should not have been called.");
                return default;
            }

            public override TResult VisitTypeArgumentList(TypeArgumentListSyntax node)
            {
                Assert.True(false, "VisitTypeArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
            {
                Assert.True(false, "VisitAliasQualifiedName should not have been called.");
                return default;
            }

            public override TResult VisitPredefinedType(PredefinedTypeSyntax node)
            {
                Assert.True(false, "VisitPredefinedType should not have been called.");
                return default;
            }

            public override TResult VisitArrayType(ArrayTypeSyntax node)
            {
                Assert.True(false, "VisitArrayType should not have been called.");
                return default;
            }

            public override TResult VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
            {
                Assert.True(false, "VisitArrayRankSpecifier should not have been called.");
                return default;
            }

            public override TResult VisitPointerType(PointerTypeSyntax node)
            {
                Assert.True(false, "VisitPointerType should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerType(FunctionPointerTypeSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerType should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerParameterList(FunctionPointerParameterListSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerParameterList should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerCallingConvention(FunctionPointerCallingConventionSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerCallingConvention should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerUnmanagedCallingConventionList(FunctionPointerUnmanagedCallingConventionListSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConventionList should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerUnmanagedCallingConvention(FunctionPointerUnmanagedCallingConventionSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConvention should not have been called.");
                return default;
            }

            public override TResult VisitNullableType(NullableTypeSyntax node)
            {
                Assert.True(false, "VisitNullableType should not have been called.");
                return default;
            }

            public override TResult VisitTupleType(TupleTypeSyntax node)
            {
                Assert.True(false, "VisitTupleType should not have been called.");
                return default;
            }

            public override TResult VisitTupleElement(TupleElementSyntax node)
            {
                Assert.True(false, "VisitTupleElement should not have been called.");
                return default;
            }

            public override TResult VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node)
            {
                Assert.True(false, "VisitOmittedTypeArgument should not have been called.");
                return default;
            }

            public override TResult VisitRefType(RefTypeSyntax node)
            {
                Assert.True(false, "VisitRefType should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedExpression(ParenthesizedExpressionSyntax node)
            {
                Assert.True(false, "VisitParenthesizedExpression should not have been called.");
                return default;
            }

            public override TResult VisitTupleExpression(TupleExpressionSyntax node)
            {
                Assert.True(false, "VisitTupleExpression should not have been called.");
                return default;
            }

            public override TResult VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
            {
                Assert.True(false, "VisitPrefixUnaryExpression should not have been called.");
                return default;
            }

            public override TResult VisitAwaitExpression(AwaitExpressionSyntax node)
            {
                Assert.True(false, "VisitAwaitExpression should not have been called.");
                return default;
            }

            public override TResult VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node)
            {
                Assert.True(false, "VisitPostfixUnaryExpression should not have been called.");
                return default;
            }

            public override TResult VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitMemberAccessExpression should not have been called.");
                return default;
            }

            public override TResult VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitConditionalAccessExpression should not have been called.");
                return default;
            }

            public override TResult VisitMemberBindingExpression(MemberBindingExpressionSyntax node)
            {
                Assert.True(false, "VisitMemberBindingExpression should not have been called.");
                return default;
            }

            public override TResult VisitElementBindingExpression(ElementBindingExpressionSyntax node)
            {
                Assert.True(false, "VisitElementBindingExpression should not have been called.");
                return default;
            }

            public override TResult VisitRangeExpression(RangeExpressionSyntax node)
            {
                Assert.True(false, "VisitRangeExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitElementAccess(ImplicitElementAccessSyntax node)
            {
                Assert.True(false, "VisitImplicitElementAccess should not have been called.");
                return default;
            }

            public override TResult VisitBinaryExpression(BinaryExpressionSyntax node)
            {
                Assert.True(false, "VisitBinaryExpression should not have been called.");
                return default;
            }

            public override TResult VisitAssignmentExpression(AssignmentExpressionSyntax node)
            {
                Assert.True(false, "VisitAssignmentExpression should not have been called.");
                return default;
            }

            public override TResult VisitConditionalExpression(ConditionalExpressionSyntax node)
            {
                Assert.True(false, "VisitConditionalExpression should not have been called.");
                return default;
            }

            public override TResult VisitThisExpression(ThisExpressionSyntax node)
            {
                Assert.True(false, "VisitThisExpression should not have been called.");
                return default;
            }

            public override TResult VisitBaseExpression(BaseExpressionSyntax node)
            {
                Assert.True(false, "VisitBaseExpression should not have been called.");
                return default;
            }

            public override TResult VisitLiteralExpression(LiteralExpressionSyntax node)
            {
                Assert.True(false, "VisitLiteralExpression should not have been called.");
                return default;
            }

            public override TResult VisitMakeRefExpression(MakeRefExpressionSyntax node)
            {
                Assert.True(false, "VisitMakeRefExpression should not have been called.");
                return default;
            }

            public override TResult VisitRefTypeExpression(RefTypeExpressionSyntax node)
            {
                Assert.True(false, "VisitRefTypeExpression should not have been called.");
                return default;
            }

            public override TResult VisitRefValueExpression(RefValueExpressionSyntax node)
            {
                Assert.True(false, "VisitRefValueExpression should not have been called.");
                return default;
            }

            public override TResult VisitCheckedExpression(CheckedExpressionSyntax node)
            {
                Assert.True(false, "VisitCheckedExpression should not have been called.");
                return default;
            }

            public override TResult VisitDefaultExpression(DefaultExpressionSyntax node)
            {
                Assert.True(false, "VisitDefaultExpression should not have been called.");
                return default;
            }

            public override TResult VisitTypeOfExpression(TypeOfExpressionSyntax node)
            {
                Assert.True(false, "VisitTypeOfExpression should not have been called.");
                return default;
            }

            public override TResult VisitSizeOfExpression(SizeOfExpressionSyntax node)
            {
                Assert.True(false, "VisitSizeOfExpression should not have been called.");
                return default;
            }

            public override TResult VisitInvocationExpression(InvocationExpressionSyntax node)
            {
                Assert.True(false, "VisitInvocationExpression should not have been called.");
                return default;
            }

            public override TResult VisitElementAccessExpression(ElementAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitElementAccessExpression should not have been called.");
                return default;
            }

            public override TResult VisitArgumentList(ArgumentListSyntax node)
            {
                Assert.True(false, "VisitArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitBracketedArgumentList(BracketedArgumentListSyntax node)
            {
                Assert.True(false, "VisitBracketedArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitArgument(ArgumentSyntax node)
            {
                Assert.True(false, "VisitArgument should not have been called.");
                return default;
            }

            public override TResult VisitExpressionColon(ExpressionColonSyntax node)
            {
                Assert.True(false, "VisitExpressionColon should not have been called.");
                return default;
            }

            public override TResult VisitNameColon(NameColonSyntax node)
            {
                Assert.True(false, "VisitNameColon should not have been called.");
                return default;
            }

            public override TResult VisitDeclarationExpression(DeclarationExpressionSyntax node)
            {
                Assert.True(false, "VisitDeclarationExpression should not have been called.");
                return default;
            }

            public override TResult VisitCastExpression(CastExpressionSyntax node)
            {
                Assert.True(false, "VisitCastExpression should not have been called.");
                return default;
            }

            public override TResult VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node)
            {
                Assert.True(false, "VisitAnonymousMethodExpression should not have been called.");
                return default;
            }

            public override TResult VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
            {
                Assert.True(false, "VisitSimpleLambdaExpression should not have been called.");
                return default;
            }

            public override TResult VisitRefExpression(RefExpressionSyntax node)
            {
                Assert.True(false, "VisitRefExpression should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node)
            {
                Assert.True(false, "VisitParenthesizedLambdaExpression should not have been called.");
                return default;
            }

            public override TResult VisitInitializerExpression(InitializerExpressionSyntax node)
            {
                Assert.True(false, "VisitInitializerExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitObjectCreationExpression(ImplicitObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitObjectCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitObjectCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitWithExpression(WithExpressionSyntax node)
            {
                Assert.True(false, "VisitWithExpression should not have been called.");
                return default;
            }

            public override TResult VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node)
            {
                Assert.True(false, "VisitAnonymousObjectMemberDeclarator should not have been called.");
                return default;
            }

            public override TResult VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitAnonymousObjectCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitArrayCreationExpression(ArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitStackAllocArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitImplicitStackAllocArrayCreationExpression(ImplicitStackAllocArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitStackAllocArrayCreationExpression should not have been called.");
                return default;
            }

            public override TResult VisitQueryExpression(QueryExpressionSyntax node)
            {
                Assert.True(false, "VisitQueryExpression should not have been called.");
                return default;
            }

            public override TResult VisitQueryBody(QueryBodySyntax node)
            {
                Assert.True(false, "VisitQueryBody should not have been called.");
                return default;
            }

            public override TResult VisitFromClause(FromClauseSyntax node)
            {
                Assert.True(false, "VisitFromClause should not have been called.");
                return default;
            }

            public override TResult VisitLetClause(LetClauseSyntax node)
            {
                Assert.True(false, "VisitLetClause should not have been called.");
                return default;
            }

            public override TResult VisitJoinClause(JoinClauseSyntax node)
            {
                Assert.True(false, "VisitJoinClause should not have been called.");
                return default;
            }

            public override TResult VisitJoinIntoClause(JoinIntoClauseSyntax node)
            {
                Assert.True(false, "VisitJoinIntoClause should not have been called.");
                return default;
            }

            public override TResult VisitWhereClause(WhereClauseSyntax node)
            {
                Assert.True(false, "VisitWhereClause should not have been called.");
                return default;
            }

            public override TResult VisitOrderByClause(OrderByClauseSyntax node)
            {
                Assert.True(false, "VisitOrderByClause should not have been called.");
                return default;
            }

            public override TResult VisitOrdering(OrderingSyntax node)
            {
                Assert.True(false, "VisitOrdering should not have been called.");
                return default;
            }

            public override TResult VisitSelectClause(SelectClauseSyntax node)
            {
                Assert.True(false, "VisitSelectClause should not have been called.");
                return default;
            }

            public override TResult VisitGroupClause(GroupClauseSyntax node)
            {
                Assert.True(false, "VisitGroupClause should not have been called.");
                return default;
            }

            public override TResult VisitQueryContinuation(QueryContinuationSyntax node)
            {
                Assert.True(false, "VisitQueryContinuation should not have been called.");
                return default;
            }

            public override TResult VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node)
            {
                Assert.True(false, "VisitOmittedArraySizeExpression should not have been called.");
                return default;
            }

            public override TResult VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node)
            {
                Assert.True(false, "VisitInterpolatedStringExpression should not have been called.");
                return default;
            }

            public override TResult VisitIsPatternExpression(IsPatternExpressionSyntax node)
            {
                Assert.True(false, "VisitIsPatternExpression should not have been called.");
                return default;
            }

            public override TResult VisitThrowExpression(ThrowExpressionSyntax node)
            {
                Assert.True(false, "VisitThrowExpression should not have been called.");
                return default;
            }

            public override TResult VisitWhenClause(WhenClauseSyntax node)
            {
                Assert.True(false, "VisitWhenClause should not have been called.");
                return default;
            }

            public override TResult VisitDiscardPattern(DiscardPatternSyntax node)
            {
                Assert.True(false, "VisitDiscardPattern should not have been called.");
                return default;
            }

            public override TResult VisitDeclarationPattern(DeclarationPatternSyntax node)
            {
                Assert.True(false, "VisitDeclarationPattern should not have been called.");
                return default;
            }

            public override TResult VisitVarPattern(VarPatternSyntax node)
            {
                Assert.True(false, "VisitVarPattern should not have been called.");
                return default;
            }

            public override TResult VisitRecursivePattern(RecursivePatternSyntax node)
            {
                Assert.True(false, "VisitRecursivePattern should not have been called.");
                return default;
            }

            public override TResult VisitPositionalPatternClause(PositionalPatternClauseSyntax node)
            {
                Assert.True(false, "VisitPositionalPatternClause should not have been called.");
                return default;
            }

            public override TResult VisitPropertyPatternClause(PropertyPatternClauseSyntax node)
            {
                Assert.True(false, "VisitPropertyPatternClause should not have been called.");
                return default;
            }

            public override TResult VisitSubpattern(SubpatternSyntax node)
            {
                Assert.True(false, "VisitSubpattern should not have been called.");
                return default;
            }

            public override TResult VisitConstantPattern(ConstantPatternSyntax node)
            {
                Assert.True(false, "VisitConstantPattern should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedPattern(ParenthesizedPatternSyntax node)
            {
                Assert.True(false, "VisitParenthesizedPattern should not have been called.");
                return default;
            }

            public override TResult VisitRelationalPattern(RelationalPatternSyntax node)
            {
                Assert.True(false, "VisitRelationalPattern should not have been called.");
                return default;
            }

            public override TResult VisitTypePattern(TypePatternSyntax node)
            {
                Assert.True(false, "VisitTypePattern should not have been called.");
                return default;
            }

            public override TResult VisitBinaryPattern(BinaryPatternSyntax node)
            {
                Assert.True(false, "VisitBinaryPattern should not have been called.");
                return default;
            }

            public override TResult VisitUnaryPattern(UnaryPatternSyntax node)
            {
                Assert.True(false, "VisitUnaryPattern should not have been called.");
                return default;
            }

            public override TResult VisitListPattern(ListPatternSyntax node)
            {
                Assert.True(false, "VisitListPattern should not have been called.");
                return default;
            }

            public override TResult VisitSlicePattern(SlicePatternSyntax node)
            {
                Assert.True(false, "VisitSlicePattern should not have been called.");
                return default;
            }

            public override TResult VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
            {
                Assert.True(false, "VisitInterpolatedStringText should not have been called.");
                return default;
            }

            public override TResult VisitInterpolation(InterpolationSyntax node)
            {
                Assert.True(false, "VisitInterpolation should not have been called.");
                return default;
            }

            public override TResult VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
            {
                Assert.True(false, "VisitInterpolationAlignmentClause should not have been called.");
                return default;
            }

            public override TResult VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
            {
                Assert.True(false, "VisitInterpolationFormatClause should not have been called.");
                return default;
            }

            public override TResult VisitGlobalStatement(GlobalStatementSyntax node)
            {
                Assert.True(false, "VisitGlobalStatement should not have been called.");
                return default;
            }

            public override TResult VisitBlock(BlockSyntax node)
            {
                Assert.True(false, "VisitBlock should not have been called.");
                return default;
            }

            public override TResult VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
            {
                Assert.True(false, "VisitLocalFunctionStatement should not have been called.");
                return default;
            }

            public override TResult VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
            {
                Assert.True(false, "VisitLocalDeclarationStatement should not have been called.");
                return default;
            }

            public override TResult VisitVariableDeclaration(VariableDeclarationSyntax node)
            {
                Assert.True(false, "VisitVariableDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitVariableDeclarator(VariableDeclaratorSyntax node)
            {
                Assert.True(false, "VisitVariableDeclarator should not have been called.");
                return default;
            }

            public override TResult VisitEqualsValueClause(EqualsValueClauseSyntax node)
            {
                Assert.True(false, "VisitEqualsValueClause should not have been called.");
                return default;
            }

            public override TResult VisitSingleVariableDesignation(SingleVariableDesignationSyntax node)
            {
                Assert.True(false, "VisitSingleVariableDesignation should not have been called.");
                return default;
            }

            public override TResult VisitDiscardDesignation(DiscardDesignationSyntax node)
            {
                Assert.True(false, "VisitDiscardDesignation should not have been called.");
                return default;
            }

            public override TResult VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node)
            {
                Assert.True(false, "VisitParenthesizedVariableDesignation should not have been called.");
                return default;
            }

            public override TResult VisitExpressionStatement(ExpressionStatementSyntax node)
            {
                Assert.True(false, "VisitExpressionStatement should not have been called.");
                return default;
            }

            public override TResult VisitEmptyStatement(EmptyStatementSyntax node)
            {
                Assert.True(false, "VisitEmptyStatement should not have been called.");
                return default;
            }

            public override TResult VisitLabeledStatement(LabeledStatementSyntax node)
            {
                Assert.True(false, "VisitLabeledStatement should not have been called.");
                return default;
            }

            public override TResult VisitGotoStatement(GotoStatementSyntax node)
            {
                Assert.True(false, "VisitGotoStatement should not have been called.");
                return default;
            }

            public override TResult VisitBreakStatement(BreakStatementSyntax node)
            {
                Assert.True(false, "VisitBreakStatement should not have been called.");
                return default;
            }

            public override TResult VisitContinueStatement(ContinueStatementSyntax node)
            {
                Assert.True(false, "VisitContinueStatement should not have been called.");
                return default;
            }

            public override TResult VisitReturnStatement(ReturnStatementSyntax node)
            {
                Assert.True(false, "VisitReturnStatement should not have been called.");
                return default;
            }

            public override TResult VisitThrowStatement(ThrowStatementSyntax node)
            {
                Assert.True(false, "VisitThrowStatement should not have been called.");
                return default;
            }

            public override TResult VisitYieldStatement(YieldStatementSyntax node)
            {
                Assert.True(false, "VisitYieldStatement should not have been called.");
                return default;
            }

            public override TResult VisitWhileStatement(WhileStatementSyntax node)
            {
                Assert.True(false, "VisitWhileStatement should not have been called.");
                return default;
            }

            public override TResult VisitDoStatement(DoStatementSyntax node)
            {
                Assert.True(false, "VisitDoStatement should not have been called.");
                return default;
            }

            public override TResult VisitForStatement(ForStatementSyntax node)
            {
                Assert.True(false, "VisitForStatement should not have been called.");
                return default;
            }

            public override TResult VisitForEachStatement(ForEachStatementSyntax node)
            {
                Assert.True(false, "VisitForEachStatement should not have been called.");
                return default;
            }

            public override TResult VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
            {
                Assert.True(false, "VisitForEachVariableStatement should not have been called.");
                return default;
            }

            public override TResult VisitUsingStatement(UsingStatementSyntax node)
            {
                Assert.True(false, "VisitUsingStatement should not have been called.");
                return default;
            }

            public override TResult VisitFixedStatement(FixedStatementSyntax node)
            {
                Assert.True(false, "VisitFixedStatement should not have been called.");
                return default;
            }

            public override TResult VisitCheckedStatement(CheckedStatementSyntax node)
            {
                Assert.True(false, "VisitCheckedStatement should not have been called.");
                return default;
            }

            public override TResult VisitUnsafeStatement(UnsafeStatementSyntax node)
            {
                Assert.True(false, "VisitUnsafeStatement should not have been called.");
                return default;
            }

            public override TResult VisitLockStatement(LockStatementSyntax node)
            {
                Assert.True(false, "VisitLockStatement should not have been called.");
                return default;
            }

            public override TResult VisitIfStatement(IfStatementSyntax node)
            {
                Assert.True(false, "VisitIfStatement should not have been called.");
                return default;
            }

            public override TResult VisitElseClause(ElseClauseSyntax node)
            {
                Assert.True(false, "VisitElseClause should not have been called.");
                return default;
            }

            public override TResult VisitSwitchStatement(SwitchStatementSyntax node)
            {
                Assert.True(false, "VisitSwitchStatement should not have been called.");
                return default;
            }

            public override TResult VisitSwitchSection(SwitchSectionSyntax node)
            {
                Assert.True(false, "VisitSwitchSection should not have been called.");
                return default;
            }

            public override TResult VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitCasePatternSwitchLabel should not have been called.");
                return default;
            }

            public override TResult VisitCaseSwitchLabel(CaseSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitCaseSwitchLabel should not have been called.");
                return default;
            }

            public override TResult VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitDefaultSwitchLabel should not have been called.");
                return default;
            }

            public override TResult VisitSwitchExpression(SwitchExpressionSyntax node)
            {
                Assert.True(false, "VisitSwitchExpression should not have been called.");
                return default;
            }

            public override TResult VisitSwitchExpressionArm(SwitchExpressionArmSyntax node)
            {
                Assert.True(false, "VisitSwitchExpressionArm should not have been called.");
                return default;
            }

            public override TResult VisitTryStatement(TryStatementSyntax node)
            {
                Assert.True(false, "VisitTryStatement should not have been called.");
                return default;
            }

            public override TResult VisitCatchClause(CatchClauseSyntax node)
            {
                Assert.True(false, "VisitCatchClause should not have been called.");
                return default;
            }

            public override TResult VisitCatchDeclaration(CatchDeclarationSyntax node)
            {
                Assert.True(false, "VisitCatchDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitCatchFilterClause(CatchFilterClauseSyntax node)
            {
                Assert.True(false, "VisitCatchFilterClause should not have been called.");
                return default;
            }

            public override TResult VisitFinallyClause(FinallyClauseSyntax node)
            {
                Assert.True(false, "VisitFinallyClause should not have been called.");
                return default;
            }

            public override TResult VisitCompilationUnit(CompilationUnitSyntax node)
            {
                Assert.True(false, "VisitCompilationUnit should not have been called.");
                return default;
            }

            public override TResult VisitExternAliasDirective(ExternAliasDirectiveSyntax node)
            {
                Assert.True(false, "VisitExternAliasDirective should not have been called.");
                return default;
            }

            public override TResult VisitUsingDirective(UsingDirectiveSyntax node)
            {
                Assert.True(false, "VisitUsingDirective should not have been called.");
                return default;
            }

            public override TResult VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitNamespaceDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitFileScopedNamespaceDeclaration(FileScopedNamespaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitFileScopedNamespaceDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitAttributeList(AttributeListSyntax node)
            {
                Assert.True(false, "VisitAttributeList should not have been called.");
                return default;
            }

            public override TResult VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node)
            {
                Assert.True(false, "VisitAttributeTargetSpecifier should not have been called.");
                return default;
            }

            public override TResult VisitAttribute(AttributeSyntax node)
            {
                Assert.True(false, "VisitAttribute should not have been called.");
                return default;
            }

            public override TResult VisitAttributeArgumentList(AttributeArgumentListSyntax node)
            {
                Assert.True(false, "VisitAttributeArgumentList should not have been called.");
                return default;
            }

            public override TResult VisitAttributeArgument(AttributeArgumentSyntax node)
            {
                Assert.True(false, "VisitAttributeArgument should not have been called.");
                return default;
            }

            public override TResult VisitNameEquals(NameEqualsSyntax node)
            {
                Assert.True(false, "VisitNameEquals should not have been called.");
                return default;
            }

            public override TResult VisitTypeParameterList(TypeParameterListSyntax node)
            {
                Assert.True(false, "VisitTypeParameterList should not have been called.");
                return default;
            }

            public override TResult VisitTypeParameter(TypeParameterSyntax node)
            {
                Assert.True(false, "VisitTypeParameter should not have been called.");
                return default;
            }

            public override TResult VisitClassDeclaration(ClassDeclarationSyntax node)
            {
                Assert.True(false, "VisitClassDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitStructDeclaration(StructDeclarationSyntax node)
            {
                Assert.True(false, "VisitStructDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitInterfaceDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitRecordDeclaration(RecordDeclarationSyntax node)
            {
                Assert.True(false, "VisitRecordDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitEnumDeclaration(EnumDeclarationSyntax node)
            {
                Assert.True(false, "VisitEnumDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitDelegateDeclaration(DelegateDeclarationSyntax node)
            {
                Assert.True(false, "VisitDelegateDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node)
            {
                Assert.True(false, "VisitEnumMemberDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitBaseList(BaseListSyntax node)
            {
                Assert.True(false, "VisitBaseList should not have been called.");
                return default;
            }

            public override TResult VisitSimpleBaseType(SimpleBaseTypeSyntax node)
            {
                Assert.True(false, "VisitSimpleBaseType should not have been called.");
                return default;
            }

            public override TResult VisitPrimaryConstructorBaseType(PrimaryConstructorBaseTypeSyntax node)
            {
                Assert.True(false, "VisitPrimaryConstructorBaseType should not have been called.");
                return default;
            }

            public override TResult VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node)
            {
                Assert.True(false, "VisitTypeParameterConstraintClause should not have been called.");
                return default;
            }

            public override TResult VisitConstructorConstraint(ConstructorConstraintSyntax node)
            {
                Assert.True(false, "VisitConstructorConstraint should not have been called.");
                return default;
            }

            public override TResult VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node)
            {
                Assert.True(false, "VisitClassOrStructConstraint should not have been called.");
                return default;
            }

            public override TResult VisitTypeConstraint(TypeConstraintSyntax node)
            {
                Assert.True(false, "VisitTypeConstraint should not have been called.");
                return default;
            }

            public override TResult VisitDefaultConstraint(DefaultConstraintSyntax node)
            {
                Assert.True(false, "VisitDefaultConstraint should not have been called.");
                return default;
            }

            public override TResult VisitFieldDeclaration(FieldDeclarationSyntax node)
            {
                Assert.True(false, "VisitFieldDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
            {
                Assert.True(false, "VisitEventFieldDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node)
            {
                Assert.True(false, "VisitExplicitInterfaceSpecifier should not have been called.");
                return default;
            }

            public override TResult VisitMethodDeclaration(MethodDeclarationSyntax node)
            {
                Assert.True(false, "VisitMethodDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitOperatorDeclaration(OperatorDeclarationSyntax node)
            {
                Assert.True(false, "VisitOperatorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node)
            {
                Assert.True(false, "VisitConversionOperatorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
            {
                Assert.True(false, "VisitConstructorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitConstructorInitializer(ConstructorInitializerSyntax node)
            {
                Assert.True(false, "VisitConstructorInitializer should not have been called.");
                return default;
            }

            public override TResult VisitDestructorDeclaration(DestructorDeclarationSyntax node)
            {
                Assert.True(false, "VisitDestructorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitPropertyDeclaration(PropertyDeclarationSyntax node)
            {
                Assert.True(false, "VisitPropertyDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitArrowExpressionClause(ArrowExpressionClauseSyntax node)
            {
                Assert.True(false, "VisitArrowExpressionClause should not have been called.");
                return default;
            }

            public override TResult VisitEventDeclaration(EventDeclarationSyntax node)
            {
                Assert.True(false, "VisitEventDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitIndexerDeclaration(IndexerDeclarationSyntax node)
            {
                Assert.True(false, "VisitIndexerDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitAccessorList(AccessorListSyntax node)
            {
                Assert.True(false, "VisitAccessorList should not have been called.");
                return default;
            }

            public override TResult VisitAccessorDeclaration(AccessorDeclarationSyntax node)
            {
                Assert.True(false, "VisitAccessorDeclaration should not have been called.");
                return default;
            }

            public override TResult VisitParameterList(ParameterListSyntax node)
            {
                Assert.True(false, "VisitParameterList should not have been called.");
                return default;
            }

            public override TResult VisitBracketedParameterList(BracketedParameterListSyntax node)
            {
                Assert.True(false, "VisitBracketedParameterList should not have been called.");
                return default;
            }

            public override TResult VisitParameter(ParameterSyntax node)
            {
                Assert.True(false, "VisitParameter should not have been called.");
                return default;
            }

            public override TResult VisitFunctionPointerParameter(FunctionPointerParameterSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerParameter should not have been called.");
                return default;
            }

            public override TResult VisitIncompleteMember(IncompleteMemberSyntax node)
            {
                Assert.True(false, "VisitIncompleteMember should not have been called.");
                return default;
            }

            public override TResult VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
            {
                Assert.True(false, "VisitSkippedTokensTrivia should not have been called.");
                return default;
            }

            public override TResult VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
            {
                Assert.True(false, "VisitDocumentationCommentTrivia should not have been called.");
                return default;
            }

            public override TResult VisitTypeCref(TypeCrefSyntax node)
            {
                Assert.True(false, "VisitTypeCref should not have been called.");
                return default;
            }

            public override TResult VisitQualifiedCref(QualifiedCrefSyntax node)
            {
                Assert.True(false, "VisitQualifiedCref should not have been called.");
                return default;
            }

            public override TResult VisitNameMemberCref(NameMemberCrefSyntax node)
            {
                Assert.True(false, "VisitNameMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
            {
                Assert.True(false, "VisitIndexerMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
            {
                Assert.True(false, "VisitOperatorMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
            {
                Assert.True(false, "VisitConversionOperatorMemberCref should not have been called.");
                return default;
            }

            public override TResult VisitCrefParameterList(CrefParameterListSyntax node)
            {
                Assert.True(false, "VisitCrefParameterList should not have been called.");
                return default;
            }

            public override TResult VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
            {
                Assert.True(false, "VisitCrefBracketedParameterList should not have been called.");
                return default;
            }

            public override TResult VisitCrefParameter(CrefParameterSyntax node)
            {
                Assert.True(false, "VisitCrefParameter should not have been called.");
                return default;
            }

            public override TResult VisitXmlElement(XmlElementSyntax node)
            {
                Assert.True(false, "VisitXmlElement should not have been called.");
                return default;
            }

            public override TResult VisitXmlElementStartTag(XmlElementStartTagSyntax node)
            {
                Assert.True(false, "VisitXmlElementStartTag should not have been called.");
                return default;
            }

            public override TResult VisitXmlElementEndTag(XmlElementEndTagSyntax node)
            {
                Assert.True(false, "VisitXmlElementEndTag should not have been called.");
                return default;
            }

            public override TResult VisitXmlEmptyElement(XmlEmptyElementSyntax node)
            {
                Assert.True(false, "VisitXmlEmptyElement should not have been called.");
                return default;
            }

            public override TResult VisitXmlName(XmlNameSyntax node)
            {
                Assert.True(false, "VisitXmlName should not have been called.");
                return default;
            }

            public override TResult VisitXmlPrefix(XmlPrefixSyntax node)
            {
                Assert.True(false, "VisitXmlPrefix should not have been called.");
                return default;
            }

            public override TResult VisitXmlTextAttribute(XmlTextAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlTextAttribute should not have been called.");
                return default;
            }

            public override TResult VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlCrefAttribute should not have been called.");
                return default;
            }

            public override TResult VisitXmlNameAttribute(XmlNameAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlNameAttribute should not have been called.");
                return default;
            }

            public override TResult VisitXmlText(XmlTextSyntax node)
            {
                Assert.True(false, "VisitXmlText should not have been called.");
                return default;
            }

            public override TResult VisitXmlCDataSection(XmlCDataSectionSyntax node)
            {
                Assert.True(false, "VisitXmlCDataSection should not have been called.");
                return default;
            }

            public override TResult VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
            {
                Assert.True(false, "VisitXmlProcessingInstruction should not have been called.");
                return default;
            }

            public override TResult VisitXmlComment(XmlCommentSyntax node)
            {
                Assert.True(false, "VisitXmlComment should not have been called.");
                return default;
            }

            public override TResult VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitIfDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitElifDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitElseDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitEndIfDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitRegionDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitEndRegionDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitErrorDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitWarningDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitBadDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitDefineDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitUndefDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLineDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitLineDirectivePosition(LineDirectivePositionSyntax node)
            {
                Assert.True(false, "VisitLineDirectivePosition should not have been called.");
                return default;
            }

            public override TResult VisitLineSpanDirectiveTrivia(LineSpanDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLineSpanDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitPragmaWarningDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitPragmaChecksumDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitReferenceDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLoadDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitShebangDirectiveTrivia should not have been called.");
                return default;
            }

            public override TResult VisitNullableDirectiveTrivia(NullableDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitNullableDirectiveTrivia should not have been called.");
                return default;
            }
        }
        internal class AssertOnEverythingButIdentifierNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIdentifierName(IdentifierNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIdentifierNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIdentifierName();
            var visitor = new AssertOnEverythingButIdentifierNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIdentifierNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIdentifierName();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQualifiedName(QualifiedNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQualifiedNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQualifiedName();
            var visitor = new AssertOnEverythingButQualifiedNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQualifiedNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQualifiedName();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGenericNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitGenericName(GenericNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGenericNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateGenericName();
            var visitor = new AssertOnEverythingButGenericNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGenericNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateGenericName();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeArgumentListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeArgumentList(TypeArgumentListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new AssertOnEverythingButTypeArgumentListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAliasQualifiedNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new AssertOnEverythingButAliasQualifiedNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPredefinedTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPredefinedType(PredefinedTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePredefinedType();
            var visitor = new AssertOnEverythingButPredefinedTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePredefinedType();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArrayType(ArrayTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrayTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArrayType();
            var visitor = new AssertOnEverythingButArrayTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrayTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArrayType();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayRankSpecifierVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new AssertOnEverythingButArrayRankSpecifierVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPointerTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPointerType(PointerTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPointerTypeNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePointerType();
            var visitor = new AssertOnEverythingButPointerTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPointerTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePointerType();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerType(FunctionPointerTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new AssertOnEverythingButFunctionPointerTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerParameterList(FunctionPointerParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new AssertOnEverythingButFunctionPointerParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerCallingConventionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerCallingConvention(FunctionPointerCallingConventionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerCallingConventionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerUnmanagedCallingConventionList(FunctionPointerUnmanagedCallingConventionListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerUnmanagedCallingConvention(FunctionPointerUnmanagedCallingConventionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNullableType(NullableTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNullableTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNullableType();
            var visitor = new AssertOnEverythingButNullableTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNullableTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNullableType();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTupleType(TupleTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTupleTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTupleType();
            var visitor = new AssertOnEverythingButTupleTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTupleTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTupleType();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleElementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTupleElement(TupleElementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTupleElementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTupleElement();
            var visitor = new AssertOnEverythingButTupleElementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTupleElementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTupleElement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedTypeArgumentVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new AssertOnEverythingButOmittedTypeArgumentVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRefType(RefTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRefType();
            var visitor = new AssertOnEverythingButRefTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRefType();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParenthesizedExpression(ParenthesizedExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new AssertOnEverythingButParenthesizedExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTupleExpression(TupleExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTupleExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTupleExpression();
            var visitor = new AssertOnEverythingButTupleExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTupleExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTupleExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrefixUnaryExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new AssertOnEverythingButPrefixUnaryExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAwaitExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAwaitExpression(AwaitExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAwaitExpression();
            var visitor = new AssertOnEverythingButAwaitExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAwaitExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPostfixUnaryExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new AssertOnEverythingButPostfixUnaryExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberAccessExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new AssertOnEverythingButMemberAccessExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalAccessExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new AssertOnEverythingButConditionalAccessExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberBindingExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitMemberBindingExpression(MemberBindingExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new AssertOnEverythingButMemberBindingExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementBindingExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElementBindingExpression(ElementBindingExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new AssertOnEverythingButElementBindingExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRangeExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRangeExpression(RangeExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRangeExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRangeExpression();
            var visitor = new AssertOnEverythingButRangeExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRangeExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRangeExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitElementAccessVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitImplicitElementAccess(ImplicitElementAccessSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new AssertOnEverythingButImplicitElementAccessVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBinaryExpression(BinaryExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBinaryExpression();
            var visitor = new AssertOnEverythingButBinaryExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBinaryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAssignmentExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAssignmentExpression(AssignmentExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new AssertOnEverythingButAssignmentExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConditionalExpression(ConditionalExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConditionalExpression();
            var visitor = new AssertOnEverythingButConditionalExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConditionalExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThisExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitThisExpression(ThisExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestThisExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateThisExpression();
            var visitor = new AssertOnEverythingButThisExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestThisExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateThisExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBaseExpression(BaseExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBaseExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBaseExpression();
            var visitor = new AssertOnEverythingButBaseExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBaseExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBaseExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLiteralExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLiteralExpression(LiteralExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLiteralExpression();
            var visitor = new AssertOnEverythingButLiteralExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLiteralExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMakeRefExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitMakeRefExpression(MakeRefExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new AssertOnEverythingButMakeRefExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRefTypeExpression(RefTypeExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new AssertOnEverythingButRefTypeExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefValueExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRefValueExpression(RefValueExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRefValueExpression();
            var visitor = new AssertOnEverythingButRefValueExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRefValueExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCheckedExpression(CheckedExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCheckedExpression();
            var visitor = new AssertOnEverythingButCheckedExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCheckedExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDefaultExpression(DefaultExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultExpression();
            var visitor = new AssertOnEverythingButDefaultExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeOfExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeOfExpression(TypeOfExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new AssertOnEverythingButTypeOfExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSizeOfExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSizeOfExpression(SizeOfExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new AssertOnEverythingButSizeOfExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInvocationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInvocationExpression(InvocationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInvocationExpression();
            var visitor = new AssertOnEverythingButInvocationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInvocationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementAccessExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElementAccessExpression(ElementAccessExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new AssertOnEverythingButElementAccessExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArgumentList(ArgumentListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArgumentListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArgumentList();
            var visitor = new AssertOnEverythingButArgumentListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArgumentListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedArgumentListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBracketedArgumentList(BracketedArgumentListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new AssertOnEverythingButBracketedArgumentListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArgument(ArgumentSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArgumentNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArgument();
            var visitor = new AssertOnEverythingButArgumentVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArgumentNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArgument();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionColonVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitExpressionColon(ExpressionColonSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExpressionColonNodeVisitOnVisitorWithResult()
        {
            var node = GenerateExpressionColon();
            var visitor = new AssertOnEverythingButExpressionColonVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExpressionColonNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateExpressionColon();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameColonVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNameColon(NameColonSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNameColonNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNameColon();
            var visitor = new AssertOnEverythingButNameColonVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNameColonNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNameColon();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDeclarationExpression(DeclarationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new AssertOnEverythingButDeclarationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCastExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCastExpression(CastExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCastExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCastExpression();
            var visitor = new AssertOnEverythingButCastExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCastExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCastExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousMethodExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new AssertOnEverythingButAnonymousMethodExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleLambdaExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new AssertOnEverythingButSimpleLambdaExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRefExpression(RefExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRefExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRefExpression();
            var visitor = new AssertOnEverythingButRefExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRefExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRefExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInitializerExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInitializerExpression(InitializerExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInitializerExpression();
            var visitor = new AssertOnEverythingButInitializerExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInitializerExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitImplicitObjectCreationExpression(ImplicitObjectCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButObjectCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new AssertOnEverythingButObjectCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWithExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWithExpression(WithExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWithExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWithExpression();
            var visitor = new AssertOnEverythingButWithExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWithExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWithExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArrayCreationExpression(ArrayCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new AssertOnEverythingButArrayCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitImplicitStackAllocArrayCreationExpression(ImplicitStackAllocArrayCreationExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQueryExpression(QueryExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQueryExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQueryExpression();
            var visitor = new AssertOnEverythingButQueryExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQueryExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQueryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryBodyVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQueryBody(QueryBodySyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQueryBodyNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQueryBody();
            var visitor = new AssertOnEverythingButQueryBodyVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQueryBodyNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQueryBody();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFromClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFromClause(FromClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFromClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFromClause();
            var visitor = new AssertOnEverythingButFromClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFromClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFromClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLetClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLetClause(LetClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLetClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLetClause();
            var visitor = new AssertOnEverythingButLetClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLetClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLetClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitJoinClause(JoinClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestJoinClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateJoinClause();
            var visitor = new AssertOnEverythingButJoinClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestJoinClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateJoinClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinIntoClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitJoinIntoClause(JoinIntoClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new AssertOnEverythingButJoinIntoClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhereClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWhereClause(WhereClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWhereClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWhereClause();
            var visitor = new AssertOnEverythingButWhereClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWhereClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWhereClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderByClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOrderByClause(OrderByClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOrderByClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOrderByClause();
            var visitor = new AssertOnEverythingButOrderByClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOrderByClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOrderByClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderingVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOrdering(OrderingSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOrderingNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOrdering();
            var visitor = new AssertOnEverythingButOrderingVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOrderingNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOrdering();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSelectClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSelectClause(SelectClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSelectClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSelectClause();
            var visitor = new AssertOnEverythingButSelectClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSelectClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSelectClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGroupClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitGroupClause(GroupClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGroupClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateGroupClause();
            var visitor = new AssertOnEverythingButGroupClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGroupClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateGroupClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryContinuationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQueryContinuation(QueryContinuationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQueryContinuationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQueryContinuation();
            var visitor = new AssertOnEverythingButQueryContinuationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQueryContinuationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQueryContinuation();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedArraySizeExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new AssertOnEverythingButOmittedArraySizeExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new AssertOnEverythingButInterpolatedStringExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIsPatternExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIsPatternExpression(IsPatternExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new AssertOnEverythingButIsPatternExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitThrowExpression(ThrowExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestThrowExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateThrowExpression();
            var visitor = new AssertOnEverythingButThrowExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestThrowExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateThrowExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhenClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWhenClause(WhenClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWhenClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWhenClause();
            var visitor = new AssertOnEverythingButWhenClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWhenClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWhenClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDiscardPattern(DiscardPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDiscardPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDiscardPattern();
            var visitor = new AssertOnEverythingButDiscardPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDiscardPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDiscardPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDeclarationPattern(DeclarationPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new AssertOnEverythingButDeclarationPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVarPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitVarPattern(VarPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestVarPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateVarPattern();
            var visitor = new AssertOnEverythingButVarPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestVarPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateVarPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecursivePatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRecursivePattern(RecursivePatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRecursivePatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRecursivePattern();
            var visitor = new AssertOnEverythingButRecursivePatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRecursivePatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRecursivePattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPositionalPatternClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPositionalPatternClause(PositionalPatternClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new AssertOnEverythingButPositionalPatternClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyPatternClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPropertyPatternClause(PropertyPatternClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new AssertOnEverythingButPropertyPatternClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSubpatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSubpattern(SubpatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSubpatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSubpattern();
            var visitor = new AssertOnEverythingButSubpatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSubpatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSubpattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstantPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConstantPattern(ConstantPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstantPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConstantPattern();
            var visitor = new AssertOnEverythingButConstantPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstantPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConstantPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParenthesizedPattern(ParenthesizedPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new AssertOnEverythingButParenthesizedPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRelationalPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRelationalPattern(RelationalPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRelationalPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRelationalPattern();
            var visitor = new AssertOnEverythingButRelationalPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRelationalPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRelationalPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypePatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypePattern(TypePatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypePatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypePattern();
            var visitor = new AssertOnEverythingButTypePatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypePatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypePattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBinaryPattern(BinaryPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBinaryPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBinaryPattern();
            var visitor = new AssertOnEverythingButBinaryPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBinaryPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBinaryPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnaryPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUnaryPattern(UnaryPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUnaryPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUnaryPattern();
            var visitor = new AssertOnEverythingButUnaryPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUnaryPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUnaryPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButListPatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitListPattern(ListPatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestListPatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateListPattern();
            var visitor = new AssertOnEverythingButListPatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestListPatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateListPattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSlicePatternVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSlicePattern(SlicePatternSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSlicePatternNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSlicePattern();
            var visitor = new AssertOnEverythingButSlicePatternVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSlicePatternNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSlicePattern();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringTextVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new AssertOnEverythingButInterpolatedStringTextVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolation(InterpolationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolation();
            var visitor = new AssertOnEverythingButInterpolationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolation();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationAlignmentClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new AssertOnEverythingButInterpolationAlignmentClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationFormatClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new AssertOnEverythingButInterpolationFormatClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGlobalStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitGlobalStatement(GlobalStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGlobalStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateGlobalStatement();
            var visitor = new AssertOnEverythingButGlobalStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGlobalStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateGlobalStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBlockVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBlock(BlockSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBlockNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBlock();
            var visitor = new AssertOnEverythingButBlockVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBlockNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBlock();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalFunctionStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new AssertOnEverythingButLocalFunctionStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalDeclarationStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new AssertOnEverythingButLocalDeclarationStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitVariableDeclaration(VariableDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new AssertOnEverythingButVariableDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclaratorVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitVariableDeclarator(VariableDeclaratorSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitOnVisitorWithResult()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new AssertOnEverythingButVariableDeclaratorVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEqualsValueClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEqualsValueClause(EqualsValueClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new AssertOnEverythingButEqualsValueClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSingleVariableDesignationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSingleVariableDesignation(SingleVariableDesignationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new AssertOnEverythingButSingleVariableDesignationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardDesignationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDiscardDesignation(DiscardDesignationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new AssertOnEverythingButDiscardDesignationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedVariableDesignationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new AssertOnEverythingButParenthesizedVariableDesignationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitExpressionStatement(ExpressionStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExpressionStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateExpressionStatement();
            var visitor = new AssertOnEverythingButExpressionStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExpressionStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateExpressionStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEmptyStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEmptyStatement(EmptyStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEmptyStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEmptyStatement();
            var visitor = new AssertOnEverythingButEmptyStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEmptyStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEmptyStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLabeledStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLabeledStatement(LabeledStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLabeledStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLabeledStatement();
            var visitor = new AssertOnEverythingButLabeledStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLabeledStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLabeledStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGotoStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitGotoStatement(GotoStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestGotoStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateGotoStatement();
            var visitor = new AssertOnEverythingButGotoStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestGotoStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateGotoStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBreakStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBreakStatement(BreakStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBreakStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBreakStatement();
            var visitor = new AssertOnEverythingButBreakStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBreakStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBreakStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButContinueStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitContinueStatement(ContinueStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestContinueStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateContinueStatement();
            var visitor = new AssertOnEverythingButContinueStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestContinueStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateContinueStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReturnStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitReturnStatement(ReturnStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestReturnStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateReturnStatement();
            var visitor = new AssertOnEverythingButReturnStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestReturnStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateReturnStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitThrowStatement(ThrowStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestThrowStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateThrowStatement();
            var visitor = new AssertOnEverythingButThrowStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestThrowStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateThrowStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButYieldStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitYieldStatement(YieldStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestYieldStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateYieldStatement();
            var visitor = new AssertOnEverythingButYieldStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestYieldStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateYieldStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhileStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWhileStatement(WhileStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWhileStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWhileStatement();
            var visitor = new AssertOnEverythingButWhileStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWhileStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWhileStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDoStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDoStatement(DoStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDoStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDoStatement();
            var visitor = new AssertOnEverythingButDoStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDoStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDoStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitForStatement(ForStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestForStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateForStatement();
            var visitor = new AssertOnEverythingButForStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestForStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateForStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitForEachStatement(ForEachStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestForEachStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateForEachStatement();
            var visitor = new AssertOnEverythingButForEachStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestForEachStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateForEachStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachVariableStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new AssertOnEverythingButForEachVariableStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUsingStatement(UsingStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUsingStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUsingStatement();
            var visitor = new AssertOnEverythingButUsingStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUsingStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUsingStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFixedStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFixedStatement(FixedStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFixedStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFixedStatement();
            var visitor = new AssertOnEverythingButFixedStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFixedStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFixedStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCheckedStatement(CheckedStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCheckedStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCheckedStatement();
            var visitor = new AssertOnEverythingButCheckedStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCheckedStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCheckedStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnsafeStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUnsafeStatement(UnsafeStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new AssertOnEverythingButUnsafeStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLockStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLockStatement(LockStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLockStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLockStatement();
            var visitor = new AssertOnEverythingButLockStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLockStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLockStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIfStatement(IfStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIfStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIfStatement();
            var visitor = new AssertOnEverythingButIfStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIfStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIfStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElseClause(ElseClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElseClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElseClause();
            var visitor = new AssertOnEverythingButElseClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElseClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElseClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSwitchStatement(SwitchStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchStatement();
            var visitor = new AssertOnEverythingButSwitchStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchSectionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSwitchSection(SwitchSectionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchSectionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchSection();
            var visitor = new AssertOnEverythingButSwitchSectionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchSectionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchSection();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCasePatternSwitchLabelVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new AssertOnEverythingButCasePatternSwitchLabelVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCaseSwitchLabelVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCaseSwitchLabel(CaseSwitchLabelSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new AssertOnEverythingButCaseSwitchLabelVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultSwitchLabelVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new AssertOnEverythingButDefaultSwitchLabelVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSwitchExpression(SwitchExpressionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchExpression();
            var visitor = new AssertOnEverythingButSwitchExpressionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchExpression();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionArmVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSwitchExpressionArm(SwitchExpressionArmSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new AssertOnEverythingButSwitchExpressionArmVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTryStatementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTryStatement(TryStatementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTryStatementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTryStatement();
            var visitor = new AssertOnEverythingButTryStatementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTryStatementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTryStatement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCatchClause(CatchClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCatchClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCatchClause();
            var visitor = new AssertOnEverythingButCatchClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCatchClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCatchClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCatchDeclaration(CatchDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new AssertOnEverythingButCatchDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchFilterClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCatchFilterClause(CatchFilterClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new AssertOnEverythingButCatchFilterClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFinallyClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFinallyClause(FinallyClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFinallyClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFinallyClause();
            var visitor = new AssertOnEverythingButFinallyClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFinallyClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFinallyClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCompilationUnitVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCompilationUnit(CompilationUnitSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCompilationUnitNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCompilationUnit();
            var visitor = new AssertOnEverythingButCompilationUnitVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCompilationUnitNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCompilationUnit();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExternAliasDirectiveVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitExternAliasDirective(ExternAliasDirectiveSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitOnVisitorWithResult()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new AssertOnEverythingButExternAliasDirectiveVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingDirectiveVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUsingDirective(UsingDirectiveSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUsingDirective();
            var visitor = new AssertOnEverythingButUsingDirectiveVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUsingDirective();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNamespaceDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new AssertOnEverythingButNamespaceDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFileScopedNamespaceDeclaration(FileScopedNamespaceDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttributeList(AttributeListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeList();
            var visitor = new AssertOnEverythingButAttributeListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeTargetSpecifierVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new AssertOnEverythingButAttributeTargetSpecifierVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttribute(AttributeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttribute();
            var visitor = new AssertOnEverythingButAttributeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttributeArgumentList(AttributeArgumentListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new AssertOnEverythingButAttributeArgumentListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAttributeArgument(AttributeArgumentSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeArgument();
            var visitor = new AssertOnEverythingButAttributeArgumentVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAttributeArgument();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameEqualsVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNameEquals(NameEqualsSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNameEqualsNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNameEquals();
            var visitor = new AssertOnEverythingButNameEqualsVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNameEqualsNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNameEquals();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeParameterList(TypeParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameterList();
            var visitor = new AssertOnEverythingButTypeParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeParameter(TypeParameterSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeParameterNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameter();
            var visitor = new AssertOnEverythingButTypeParameterVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeParameterNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameter();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitClassDeclaration(ClassDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestClassDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateClassDeclaration();
            var visitor = new AssertOnEverythingButClassDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestClassDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateClassDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStructDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitStructDeclaration(StructDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestStructDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateStructDeclaration();
            var visitor = new AssertOnEverythingButStructDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestStructDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateStructDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterfaceDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new AssertOnEverythingButInterfaceDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecordDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRecordDeclaration(RecordDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new AssertOnEverythingButRecordDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEnumDeclaration(EnumDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new AssertOnEverythingButEnumDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDelegateDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDelegateDeclaration(DelegateDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new AssertOnEverythingButDelegateDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumMemberDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new AssertOnEverythingButEnumMemberDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBaseList(BaseListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBaseListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBaseList();
            var visitor = new AssertOnEverythingButBaseListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBaseListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBaseList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleBaseTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSimpleBaseType(SimpleBaseTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new AssertOnEverythingButSimpleBaseTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPrimaryConstructorBaseType(PrimaryConstructorBaseTypeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterConstraintClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new AssertOnEverythingButTypeParameterConstraintClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorConstraintVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConstructorConstraint(ConstructorConstraintSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new AssertOnEverythingButConstructorConstraintVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassOrStructConstraintVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitOnVisitorWithResult()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new AssertOnEverythingButClassOrStructConstraintVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeConstraintVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeConstraint(TypeConstraintSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeConstraintNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeConstraint();
            var visitor = new AssertOnEverythingButTypeConstraintVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeConstraintNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultConstraintVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDefaultConstraint(DefaultConstraintSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new AssertOnEverythingButDefaultConstraintVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFieldDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFieldDeclaration(FieldDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new AssertOnEverythingButFieldDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventFieldDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new AssertOnEverythingButEventFieldDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitOnVisitorWithResult()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMethodDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitMethodDeclaration(MethodDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new AssertOnEverythingButMethodDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOperatorDeclaration(OperatorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new AssertOnEverythingButOperatorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new AssertOnEverythingButConversionOperatorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new AssertOnEverythingButConstructorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorInitializerVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConstructorInitializer(ConstructorInitializerSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new AssertOnEverythingButConstructorInitializerVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDestructorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDestructorDeclaration(DestructorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new AssertOnEverythingButDestructorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPropertyDeclaration(PropertyDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new AssertOnEverythingButPropertyDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrowExpressionClauseVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitArrowExpressionClause(ArrowExpressionClauseSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitOnVisitorWithResult()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new AssertOnEverythingButArrowExpressionClauseVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEventDeclaration(EventDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEventDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEventDeclaration();
            var visitor = new AssertOnEverythingButEventDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEventDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEventDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIndexerDeclaration(IndexerDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new AssertOnEverythingButIndexerDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAccessorList(AccessorListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAccessorListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAccessorList();
            var visitor = new AssertOnEverythingButAccessorListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAccessorListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAccessorList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorDeclarationVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitAccessorDeclaration(AccessorDeclarationSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitOnVisitorWithResult()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new AssertOnEverythingButAccessorDeclarationVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParameterList(ParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParameterList();
            var visitor = new AssertOnEverythingButParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBracketedParameterList(BracketedParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new AssertOnEverythingButBracketedParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitParameter(ParameterSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestParameterNodeVisitOnVisitorWithResult()
        {
            var node = GenerateParameter();
            var visitor = new AssertOnEverythingButParameterVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestParameterNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateParameter();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitFunctionPointerParameter(FunctionPointerParameterSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new AssertOnEverythingButFunctionPointerParameterVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIncompleteMemberVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIncompleteMember(IncompleteMemberSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIncompleteMember();
            var visitor = new AssertOnEverythingButIncompleteMemberVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIncompleteMember();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSkippedTokensTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new AssertOnEverythingButSkippedTokensTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDocumentationCommentTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new AssertOnEverythingButDocumentationCommentTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitTypeCref(TypeCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestTypeCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateTypeCref();
            var visitor = new AssertOnEverythingButTypeCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestTypeCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateTypeCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitQualifiedCref(QualifiedCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateQualifiedCref();
            var visitor = new AssertOnEverythingButQualifiedCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateQualifiedCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameMemberCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNameMemberCref(NameMemberCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNameMemberCref();
            var visitor = new AssertOnEverythingButNameMemberCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNameMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerMemberCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new AssertOnEverythingButIndexerMemberCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorMemberCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new AssertOnEverythingButOperatorMemberCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorMemberCrefVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitOnVisitorWithResult()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new AssertOnEverythingButConversionOperatorMemberCrefVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCrefParameterList(CrefParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCrefParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCrefParameterList();
            var visitor = new AssertOnEverythingButCrefParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCrefParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCrefParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefBracketedParameterListVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new AssertOnEverythingButCrefBracketedParameterListVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitCrefParameter(CrefParameterSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestCrefParameterNodeVisitOnVisitorWithResult()
        {
            var node = GenerateCrefParameter();
            var visitor = new AssertOnEverythingButCrefParameterVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestCrefParameterNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateCrefParameter();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlElement(XmlElementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlElementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElement();
            var visitor = new AssertOnEverythingButXmlElementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlElementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementStartTagVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlElementStartTag(XmlElementStartTagSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new AssertOnEverythingButXmlElementStartTagVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementEndTagVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlElementEndTag(XmlElementEndTagSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new AssertOnEverythingButXmlElementEndTagVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlEmptyElementVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlEmptyElement(XmlEmptyElementSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new AssertOnEverythingButXmlEmptyElementVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlName(XmlNameSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlNameNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlName();
            var visitor = new AssertOnEverythingButXmlNameVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlNameNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlName();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlPrefixVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlPrefix(XmlPrefixSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlPrefixNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlPrefix();
            var visitor = new AssertOnEverythingButXmlPrefixVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlPrefixNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlPrefix();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextAttributeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlTextAttribute(XmlTextAttributeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new AssertOnEverythingButXmlTextAttributeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCrefAttributeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new AssertOnEverythingButXmlCrefAttributeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameAttributeVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlNameAttribute(XmlNameAttributeSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new AssertOnEverythingButXmlNameAttributeVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlText(XmlTextSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlTextNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlText();
            var visitor = new AssertOnEverythingButXmlTextVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlTextNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlText();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCDataSectionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlCDataSection(XmlCDataSectionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new AssertOnEverythingButXmlCDataSectionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlProcessingInstructionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new AssertOnEverythingButXmlProcessingInstructionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCommentVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitXmlComment(XmlCommentSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestXmlCommentNodeVisitOnVisitorWithResult()
        {
            var node = GenerateXmlComment();
            var visitor = new AssertOnEverythingButXmlCommentVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestXmlCommentNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateXmlComment();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButIfDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElifDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new AssertOnEverythingButElifDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new AssertOnEverythingButElseDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndIfDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndIfDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRegionDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButRegionDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButErrorDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new AssertOnEverythingButErrorDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWarningDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButWarningDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBadDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new AssertOnEverythingButBadDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefineDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new AssertOnEverythingButDefineDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUndefDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new AssertOnEverythingButUndefDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectivePositionVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLineDirectivePosition(LineDirectivePositionSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new AssertOnEverythingButLineDirectivePositionVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLineSpanDirectiveTrivia(LineSpanDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReferenceDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new AssertOnEverythingButReferenceDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLoadDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new AssertOnEverythingButLoadDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButShebangDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new AssertOnEverythingButShebangDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableDirectiveTriviaVisitVisitorWithResult : AssertOnVisitVisitor<int>
        {
            public override int VisitNullableDirectiveTrivia(NullableDirectiveTriviaSyntax node)
            {
                return int.MaxValue;
            }
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitOnVisitorWithResult()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new AssertOnEverythingButNullableDirectiveTriviaVisitVisitorWithResult();
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitorWithResult()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor<int>(int.MaxValue);
            var result = visitor.Visit(node);
            Assert.Equal(int.MaxValue, result);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal partial class AssertOnVisitVisitor : CSharpSyntaxVisitor
        {
            public override void VisitIdentifierName(IdentifierNameSyntax node)
            {
                Assert.True(false, "VisitIdentifierName should not have been called.");
            }

            public override void VisitQualifiedName(QualifiedNameSyntax node)
            {
                Assert.True(false, "VisitQualifiedName should not have been called.");
            }

            public override void VisitGenericName(GenericNameSyntax node)
            {
                Assert.True(false, "VisitGenericName should not have been called.");
            }

            public override void VisitTypeArgumentList(TypeArgumentListSyntax node)
            {
                Assert.True(false, "VisitTypeArgumentList should not have been called.");
            }

            public override void VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
            {
                Assert.True(false, "VisitAliasQualifiedName should not have been called.");
            }

            public override void VisitPredefinedType(PredefinedTypeSyntax node)
            {
                Assert.True(false, "VisitPredefinedType should not have been called.");
            }

            public override void VisitArrayType(ArrayTypeSyntax node)
            {
                Assert.True(false, "VisitArrayType should not have been called.");
            }

            public override void VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
            {
                Assert.True(false, "VisitArrayRankSpecifier should not have been called.");
            }

            public override void VisitPointerType(PointerTypeSyntax node)
            {
                Assert.True(false, "VisitPointerType should not have been called.");
            }

            public override void VisitFunctionPointerType(FunctionPointerTypeSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerType should not have been called.");
            }

            public override void VisitFunctionPointerParameterList(FunctionPointerParameterListSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerParameterList should not have been called.");
            }

            public override void VisitFunctionPointerCallingConvention(FunctionPointerCallingConventionSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerCallingConvention should not have been called.");
            }

            public override void VisitFunctionPointerUnmanagedCallingConventionList(FunctionPointerUnmanagedCallingConventionListSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConventionList should not have been called.");
            }

            public override void VisitFunctionPointerUnmanagedCallingConvention(FunctionPointerUnmanagedCallingConventionSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerUnmanagedCallingConvention should not have been called.");
            }

            public override void VisitNullableType(NullableTypeSyntax node)
            {
                Assert.True(false, "VisitNullableType should not have been called.");
            }

            public override void VisitTupleType(TupleTypeSyntax node)
            {
                Assert.True(false, "VisitTupleType should not have been called.");
            }

            public override void VisitTupleElement(TupleElementSyntax node)
            {
                Assert.True(false, "VisitTupleElement should not have been called.");
            }

            public override void VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node)
            {
                Assert.True(false, "VisitOmittedTypeArgument should not have been called.");
            }

            public override void VisitRefType(RefTypeSyntax node)
            {
                Assert.True(false, "VisitRefType should not have been called.");
            }

            public override void VisitParenthesizedExpression(ParenthesizedExpressionSyntax node)
            {
                Assert.True(false, "VisitParenthesizedExpression should not have been called.");
            }

            public override void VisitTupleExpression(TupleExpressionSyntax node)
            {
                Assert.True(false, "VisitTupleExpression should not have been called.");
            }

            public override void VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
            {
                Assert.True(false, "VisitPrefixUnaryExpression should not have been called.");
            }

            public override void VisitAwaitExpression(AwaitExpressionSyntax node)
            {
                Assert.True(false, "VisitAwaitExpression should not have been called.");
            }

            public override void VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node)
            {
                Assert.True(false, "VisitPostfixUnaryExpression should not have been called.");
            }

            public override void VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitMemberAccessExpression should not have been called.");
            }

            public override void VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitConditionalAccessExpression should not have been called.");
            }

            public override void VisitMemberBindingExpression(MemberBindingExpressionSyntax node)
            {
                Assert.True(false, "VisitMemberBindingExpression should not have been called.");
            }

            public override void VisitElementBindingExpression(ElementBindingExpressionSyntax node)
            {
                Assert.True(false, "VisitElementBindingExpression should not have been called.");
            }

            public override void VisitRangeExpression(RangeExpressionSyntax node)
            {
                Assert.True(false, "VisitRangeExpression should not have been called.");
            }

            public override void VisitImplicitElementAccess(ImplicitElementAccessSyntax node)
            {
                Assert.True(false, "VisitImplicitElementAccess should not have been called.");
            }

            public override void VisitBinaryExpression(BinaryExpressionSyntax node)
            {
                Assert.True(false, "VisitBinaryExpression should not have been called.");
            }

            public override void VisitAssignmentExpression(AssignmentExpressionSyntax node)
            {
                Assert.True(false, "VisitAssignmentExpression should not have been called.");
            }

            public override void VisitConditionalExpression(ConditionalExpressionSyntax node)
            {
                Assert.True(false, "VisitConditionalExpression should not have been called.");
            }

            public override void VisitThisExpression(ThisExpressionSyntax node)
            {
                Assert.True(false, "VisitThisExpression should not have been called.");
            }

            public override void VisitBaseExpression(BaseExpressionSyntax node)
            {
                Assert.True(false, "VisitBaseExpression should not have been called.");
            }

            public override void VisitLiteralExpression(LiteralExpressionSyntax node)
            {
                Assert.True(false, "VisitLiteralExpression should not have been called.");
            }

            public override void VisitMakeRefExpression(MakeRefExpressionSyntax node)
            {
                Assert.True(false, "VisitMakeRefExpression should not have been called.");
            }

            public override void VisitRefTypeExpression(RefTypeExpressionSyntax node)
            {
                Assert.True(false, "VisitRefTypeExpression should not have been called.");
            }

            public override void VisitRefValueExpression(RefValueExpressionSyntax node)
            {
                Assert.True(false, "VisitRefValueExpression should not have been called.");
            }

            public override void VisitCheckedExpression(CheckedExpressionSyntax node)
            {
                Assert.True(false, "VisitCheckedExpression should not have been called.");
            }

            public override void VisitDefaultExpression(DefaultExpressionSyntax node)
            {
                Assert.True(false, "VisitDefaultExpression should not have been called.");
            }

            public override void VisitTypeOfExpression(TypeOfExpressionSyntax node)
            {
                Assert.True(false, "VisitTypeOfExpression should not have been called.");
            }

            public override void VisitSizeOfExpression(SizeOfExpressionSyntax node)
            {
                Assert.True(false, "VisitSizeOfExpression should not have been called.");
            }

            public override void VisitInvocationExpression(InvocationExpressionSyntax node)
            {
                Assert.True(false, "VisitInvocationExpression should not have been called.");
            }

            public override void VisitElementAccessExpression(ElementAccessExpressionSyntax node)
            {
                Assert.True(false, "VisitElementAccessExpression should not have been called.");
            }

            public override void VisitArgumentList(ArgumentListSyntax node)
            {
                Assert.True(false, "VisitArgumentList should not have been called.");
            }

            public override void VisitBracketedArgumentList(BracketedArgumentListSyntax node)
            {
                Assert.True(false, "VisitBracketedArgumentList should not have been called.");
            }

            public override void VisitArgument(ArgumentSyntax node)
            {
                Assert.True(false, "VisitArgument should not have been called.");
            }

            public override void VisitExpressionColon(ExpressionColonSyntax node)
            {
                Assert.True(false, "VisitExpressionColon should not have been called.");
            }

            public override void VisitNameColon(NameColonSyntax node)
            {
                Assert.True(false, "VisitNameColon should not have been called.");
            }

            public override void VisitDeclarationExpression(DeclarationExpressionSyntax node)
            {
                Assert.True(false, "VisitDeclarationExpression should not have been called.");
            }

            public override void VisitCastExpression(CastExpressionSyntax node)
            {
                Assert.True(false, "VisitCastExpression should not have been called.");
            }

            public override void VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node)
            {
                Assert.True(false, "VisitAnonymousMethodExpression should not have been called.");
            }

            public override void VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
            {
                Assert.True(false, "VisitSimpleLambdaExpression should not have been called.");
            }

            public override void VisitRefExpression(RefExpressionSyntax node)
            {
                Assert.True(false, "VisitRefExpression should not have been called.");
            }

            public override void VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node)
            {
                Assert.True(false, "VisitParenthesizedLambdaExpression should not have been called.");
            }

            public override void VisitInitializerExpression(InitializerExpressionSyntax node)
            {
                Assert.True(false, "VisitInitializerExpression should not have been called.");
            }

            public override void VisitImplicitObjectCreationExpression(ImplicitObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitObjectCreationExpression should not have been called.");
            }

            public override void VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitObjectCreationExpression should not have been called.");
            }

            public override void VisitWithExpression(WithExpressionSyntax node)
            {
                Assert.True(false, "VisitWithExpression should not have been called.");
            }

            public override void VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node)
            {
                Assert.True(false, "VisitAnonymousObjectMemberDeclarator should not have been called.");
            }

            public override void VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitAnonymousObjectCreationExpression should not have been called.");
            }

            public override void VisitArrayCreationExpression(ArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitArrayCreationExpression should not have been called.");
            }

            public override void VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitArrayCreationExpression should not have been called.");
            }

            public override void VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitStackAllocArrayCreationExpression should not have been called.");
            }

            public override void VisitImplicitStackAllocArrayCreationExpression(ImplicitStackAllocArrayCreationExpressionSyntax node)
            {
                Assert.True(false, "VisitImplicitStackAllocArrayCreationExpression should not have been called.");
            }

            public override void VisitQueryExpression(QueryExpressionSyntax node)
            {
                Assert.True(false, "VisitQueryExpression should not have been called.");
            }

            public override void VisitQueryBody(QueryBodySyntax node)
            {
                Assert.True(false, "VisitQueryBody should not have been called.");
            }

            public override void VisitFromClause(FromClauseSyntax node)
            {
                Assert.True(false, "VisitFromClause should not have been called.");
            }

            public override void VisitLetClause(LetClauseSyntax node)
            {
                Assert.True(false, "VisitLetClause should not have been called.");
            }

            public override void VisitJoinClause(JoinClauseSyntax node)
            {
                Assert.True(false, "VisitJoinClause should not have been called.");
            }

            public override void VisitJoinIntoClause(JoinIntoClauseSyntax node)
            {
                Assert.True(false, "VisitJoinIntoClause should not have been called.");
            }

            public override void VisitWhereClause(WhereClauseSyntax node)
            {
                Assert.True(false, "VisitWhereClause should not have been called.");
            }

            public override void VisitOrderByClause(OrderByClauseSyntax node)
            {
                Assert.True(false, "VisitOrderByClause should not have been called.");
            }

            public override void VisitOrdering(OrderingSyntax node)
            {
                Assert.True(false, "VisitOrdering should not have been called.");
            }

            public override void VisitSelectClause(SelectClauseSyntax node)
            {
                Assert.True(false, "VisitSelectClause should not have been called.");
            }

            public override void VisitGroupClause(GroupClauseSyntax node)
            {
                Assert.True(false, "VisitGroupClause should not have been called.");
            }

            public override void VisitQueryContinuation(QueryContinuationSyntax node)
            {
                Assert.True(false, "VisitQueryContinuation should not have been called.");
            }

            public override void VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node)
            {
                Assert.True(false, "VisitOmittedArraySizeExpression should not have been called.");
            }

            public override void VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node)
            {
                Assert.True(false, "VisitInterpolatedStringExpression should not have been called.");
            }

            public override void VisitIsPatternExpression(IsPatternExpressionSyntax node)
            {
                Assert.True(false, "VisitIsPatternExpression should not have been called.");
            }

            public override void VisitThrowExpression(ThrowExpressionSyntax node)
            {
                Assert.True(false, "VisitThrowExpression should not have been called.");
            }

            public override void VisitWhenClause(WhenClauseSyntax node)
            {
                Assert.True(false, "VisitWhenClause should not have been called.");
            }

            public override void VisitDiscardPattern(DiscardPatternSyntax node)
            {
                Assert.True(false, "VisitDiscardPattern should not have been called.");
            }

            public override void VisitDeclarationPattern(DeclarationPatternSyntax node)
            {
                Assert.True(false, "VisitDeclarationPattern should not have been called.");
            }

            public override void VisitVarPattern(VarPatternSyntax node)
            {
                Assert.True(false, "VisitVarPattern should not have been called.");
            }

            public override void VisitRecursivePattern(RecursivePatternSyntax node)
            {
                Assert.True(false, "VisitRecursivePattern should not have been called.");
            }

            public override void VisitPositionalPatternClause(PositionalPatternClauseSyntax node)
            {
                Assert.True(false, "VisitPositionalPatternClause should not have been called.");
            }

            public override void VisitPropertyPatternClause(PropertyPatternClauseSyntax node)
            {
                Assert.True(false, "VisitPropertyPatternClause should not have been called.");
            }

            public override void VisitSubpattern(SubpatternSyntax node)
            {
                Assert.True(false, "VisitSubpattern should not have been called.");
            }

            public override void VisitConstantPattern(ConstantPatternSyntax node)
            {
                Assert.True(false, "VisitConstantPattern should not have been called.");
            }

            public override void VisitParenthesizedPattern(ParenthesizedPatternSyntax node)
            {
                Assert.True(false, "VisitParenthesizedPattern should not have been called.");
            }

            public override void VisitRelationalPattern(RelationalPatternSyntax node)
            {
                Assert.True(false, "VisitRelationalPattern should not have been called.");
            }

            public override void VisitTypePattern(TypePatternSyntax node)
            {
                Assert.True(false, "VisitTypePattern should not have been called.");
            }

            public override void VisitBinaryPattern(BinaryPatternSyntax node)
            {
                Assert.True(false, "VisitBinaryPattern should not have been called.");
            }

            public override void VisitUnaryPattern(UnaryPatternSyntax node)
            {
                Assert.True(false, "VisitUnaryPattern should not have been called.");
            }

            public override void VisitListPattern(ListPatternSyntax node)
            {
                Assert.True(false, "VisitListPattern should not have been called.");
            }

            public override void VisitSlicePattern(SlicePatternSyntax node)
            {
                Assert.True(false, "VisitSlicePattern should not have been called.");
            }

            public override void VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
            {
                Assert.True(false, "VisitInterpolatedStringText should not have been called.");
            }

            public override void VisitInterpolation(InterpolationSyntax node)
            {
                Assert.True(false, "VisitInterpolation should not have been called.");
            }

            public override void VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
            {
                Assert.True(false, "VisitInterpolationAlignmentClause should not have been called.");
            }

            public override void VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
            {
                Assert.True(false, "VisitInterpolationFormatClause should not have been called.");
            }

            public override void VisitGlobalStatement(GlobalStatementSyntax node)
            {
                Assert.True(false, "VisitGlobalStatement should not have been called.");
            }

            public override void VisitBlock(BlockSyntax node)
            {
                Assert.True(false, "VisitBlock should not have been called.");
            }

            public override void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
            {
                Assert.True(false, "VisitLocalFunctionStatement should not have been called.");
            }

            public override void VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
            {
                Assert.True(false, "VisitLocalDeclarationStatement should not have been called.");
            }

            public override void VisitVariableDeclaration(VariableDeclarationSyntax node)
            {
                Assert.True(false, "VisitVariableDeclaration should not have been called.");
            }

            public override void VisitVariableDeclarator(VariableDeclaratorSyntax node)
            {
                Assert.True(false, "VisitVariableDeclarator should not have been called.");
            }

            public override void VisitEqualsValueClause(EqualsValueClauseSyntax node)
            {
                Assert.True(false, "VisitEqualsValueClause should not have been called.");
            }

            public override void VisitSingleVariableDesignation(SingleVariableDesignationSyntax node)
            {
                Assert.True(false, "VisitSingleVariableDesignation should not have been called.");
            }

            public override void VisitDiscardDesignation(DiscardDesignationSyntax node)
            {
                Assert.True(false, "VisitDiscardDesignation should not have been called.");
            }

            public override void VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node)
            {
                Assert.True(false, "VisitParenthesizedVariableDesignation should not have been called.");
            }

            public override void VisitExpressionStatement(ExpressionStatementSyntax node)
            {
                Assert.True(false, "VisitExpressionStatement should not have been called.");
            }

            public override void VisitEmptyStatement(EmptyStatementSyntax node)
            {
                Assert.True(false, "VisitEmptyStatement should not have been called.");
            }

            public override void VisitLabeledStatement(LabeledStatementSyntax node)
            {
                Assert.True(false, "VisitLabeledStatement should not have been called.");
            }

            public override void VisitGotoStatement(GotoStatementSyntax node)
            {
                Assert.True(false, "VisitGotoStatement should not have been called.");
            }

            public override void VisitBreakStatement(BreakStatementSyntax node)
            {
                Assert.True(false, "VisitBreakStatement should not have been called.");
            }

            public override void VisitContinueStatement(ContinueStatementSyntax node)
            {
                Assert.True(false, "VisitContinueStatement should not have been called.");
            }

            public override void VisitReturnStatement(ReturnStatementSyntax node)
            {
                Assert.True(false, "VisitReturnStatement should not have been called.");
            }

            public override void VisitThrowStatement(ThrowStatementSyntax node)
            {
                Assert.True(false, "VisitThrowStatement should not have been called.");
            }

            public override void VisitYieldStatement(YieldStatementSyntax node)
            {
                Assert.True(false, "VisitYieldStatement should not have been called.");
            }

            public override void VisitWhileStatement(WhileStatementSyntax node)
            {
                Assert.True(false, "VisitWhileStatement should not have been called.");
            }

            public override void VisitDoStatement(DoStatementSyntax node)
            {
                Assert.True(false, "VisitDoStatement should not have been called.");
            }

            public override void VisitForStatement(ForStatementSyntax node)
            {
                Assert.True(false, "VisitForStatement should not have been called.");
            }

            public override void VisitForEachStatement(ForEachStatementSyntax node)
            {
                Assert.True(false, "VisitForEachStatement should not have been called.");
            }

            public override void VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
            {
                Assert.True(false, "VisitForEachVariableStatement should not have been called.");
            }

            public override void VisitUsingStatement(UsingStatementSyntax node)
            {
                Assert.True(false, "VisitUsingStatement should not have been called.");
            }

            public override void VisitFixedStatement(FixedStatementSyntax node)
            {
                Assert.True(false, "VisitFixedStatement should not have been called.");
            }

            public override void VisitCheckedStatement(CheckedStatementSyntax node)
            {
                Assert.True(false, "VisitCheckedStatement should not have been called.");
            }

            public override void VisitUnsafeStatement(UnsafeStatementSyntax node)
            {
                Assert.True(false, "VisitUnsafeStatement should not have been called.");
            }

            public override void VisitLockStatement(LockStatementSyntax node)
            {
                Assert.True(false, "VisitLockStatement should not have been called.");
            }

            public override void VisitIfStatement(IfStatementSyntax node)
            {
                Assert.True(false, "VisitIfStatement should not have been called.");
            }

            public override void VisitElseClause(ElseClauseSyntax node)
            {
                Assert.True(false, "VisitElseClause should not have been called.");
            }

            public override void VisitSwitchStatement(SwitchStatementSyntax node)
            {
                Assert.True(false, "VisitSwitchStatement should not have been called.");
            }

            public override void VisitSwitchSection(SwitchSectionSyntax node)
            {
                Assert.True(false, "VisitSwitchSection should not have been called.");
            }

            public override void VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitCasePatternSwitchLabel should not have been called.");
            }

            public override void VisitCaseSwitchLabel(CaseSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitCaseSwitchLabel should not have been called.");
            }

            public override void VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node)
            {
                Assert.True(false, "VisitDefaultSwitchLabel should not have been called.");
            }

            public override void VisitSwitchExpression(SwitchExpressionSyntax node)
            {
                Assert.True(false, "VisitSwitchExpression should not have been called.");
            }

            public override void VisitSwitchExpressionArm(SwitchExpressionArmSyntax node)
            {
                Assert.True(false, "VisitSwitchExpressionArm should not have been called.");
            }

            public override void VisitTryStatement(TryStatementSyntax node)
            {
                Assert.True(false, "VisitTryStatement should not have been called.");
            }

            public override void VisitCatchClause(CatchClauseSyntax node)
            {
                Assert.True(false, "VisitCatchClause should not have been called.");
            }

            public override void VisitCatchDeclaration(CatchDeclarationSyntax node)
            {
                Assert.True(false, "VisitCatchDeclaration should not have been called.");
            }

            public override void VisitCatchFilterClause(CatchFilterClauseSyntax node)
            {
                Assert.True(false, "VisitCatchFilterClause should not have been called.");
            }

            public override void VisitFinallyClause(FinallyClauseSyntax node)
            {
                Assert.True(false, "VisitFinallyClause should not have been called.");
            }

            public override void VisitCompilationUnit(CompilationUnitSyntax node)
            {
                Assert.True(false, "VisitCompilationUnit should not have been called.");
            }

            public override void VisitExternAliasDirective(ExternAliasDirectiveSyntax node)
            {
                Assert.True(false, "VisitExternAliasDirective should not have been called.");
            }

            public override void VisitUsingDirective(UsingDirectiveSyntax node)
            {
                Assert.True(false, "VisitUsingDirective should not have been called.");
            }

            public override void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitNamespaceDeclaration should not have been called.");
            }

            public override void VisitFileScopedNamespaceDeclaration(FileScopedNamespaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitFileScopedNamespaceDeclaration should not have been called.");
            }

            public override void VisitAttributeList(AttributeListSyntax node)
            {
                Assert.True(false, "VisitAttributeList should not have been called.");
            }

            public override void VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node)
            {
                Assert.True(false, "VisitAttributeTargetSpecifier should not have been called.");
            }

            public override void VisitAttribute(AttributeSyntax node)
            {
                Assert.True(false, "VisitAttribute should not have been called.");
            }

            public override void VisitAttributeArgumentList(AttributeArgumentListSyntax node)
            {
                Assert.True(false, "VisitAttributeArgumentList should not have been called.");
            }

            public override void VisitAttributeArgument(AttributeArgumentSyntax node)
            {
                Assert.True(false, "VisitAttributeArgument should not have been called.");
            }

            public override void VisitNameEquals(NameEqualsSyntax node)
            {
                Assert.True(false, "VisitNameEquals should not have been called.");
            }

            public override void VisitTypeParameterList(TypeParameterListSyntax node)
            {
                Assert.True(false, "VisitTypeParameterList should not have been called.");
            }

            public override void VisitTypeParameter(TypeParameterSyntax node)
            {
                Assert.True(false, "VisitTypeParameter should not have been called.");
            }

            public override void VisitClassDeclaration(ClassDeclarationSyntax node)
            {
                Assert.True(false, "VisitClassDeclaration should not have been called.");
            }

            public override void VisitStructDeclaration(StructDeclarationSyntax node)
            {
                Assert.True(false, "VisitStructDeclaration should not have been called.");
            }

            public override void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
            {
                Assert.True(false, "VisitInterfaceDeclaration should not have been called.");
            }

            public override void VisitRecordDeclaration(RecordDeclarationSyntax node)
            {
                Assert.True(false, "VisitRecordDeclaration should not have been called.");
            }

            public override void VisitEnumDeclaration(EnumDeclarationSyntax node)
            {
                Assert.True(false, "VisitEnumDeclaration should not have been called.");
            }

            public override void VisitDelegateDeclaration(DelegateDeclarationSyntax node)
            {
                Assert.True(false, "VisitDelegateDeclaration should not have been called.");
            }

            public override void VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node)
            {
                Assert.True(false, "VisitEnumMemberDeclaration should not have been called.");
            }

            public override void VisitBaseList(BaseListSyntax node)
            {
                Assert.True(false, "VisitBaseList should not have been called.");
            }

            public override void VisitSimpleBaseType(SimpleBaseTypeSyntax node)
            {
                Assert.True(false, "VisitSimpleBaseType should not have been called.");
            }

            public override void VisitPrimaryConstructorBaseType(PrimaryConstructorBaseTypeSyntax node)
            {
                Assert.True(false, "VisitPrimaryConstructorBaseType should not have been called.");
            }

            public override void VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node)
            {
                Assert.True(false, "VisitTypeParameterConstraintClause should not have been called.");
            }

            public override void VisitConstructorConstraint(ConstructorConstraintSyntax node)
            {
                Assert.True(false, "VisitConstructorConstraint should not have been called.");
            }

            public override void VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node)
            {
                Assert.True(false, "VisitClassOrStructConstraint should not have been called.");
            }

            public override void VisitTypeConstraint(TypeConstraintSyntax node)
            {
                Assert.True(false, "VisitTypeConstraint should not have been called.");
            }

            public override void VisitDefaultConstraint(DefaultConstraintSyntax node)
            {
                Assert.True(false, "VisitDefaultConstraint should not have been called.");
            }

            public override void VisitFieldDeclaration(FieldDeclarationSyntax node)
            {
                Assert.True(false, "VisitFieldDeclaration should not have been called.");
            }

            public override void VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
            {
                Assert.True(false, "VisitEventFieldDeclaration should not have been called.");
            }

            public override void VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node)
            {
                Assert.True(false, "VisitExplicitInterfaceSpecifier should not have been called.");
            }

            public override void VisitMethodDeclaration(MethodDeclarationSyntax node)
            {
                Assert.True(false, "VisitMethodDeclaration should not have been called.");
            }

            public override void VisitOperatorDeclaration(OperatorDeclarationSyntax node)
            {
                Assert.True(false, "VisitOperatorDeclaration should not have been called.");
            }

            public override void VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node)
            {
                Assert.True(false, "VisitConversionOperatorDeclaration should not have been called.");
            }

            public override void VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
            {
                Assert.True(false, "VisitConstructorDeclaration should not have been called.");
            }

            public override void VisitConstructorInitializer(ConstructorInitializerSyntax node)
            {
                Assert.True(false, "VisitConstructorInitializer should not have been called.");
            }

            public override void VisitDestructorDeclaration(DestructorDeclarationSyntax node)
            {
                Assert.True(false, "VisitDestructorDeclaration should not have been called.");
            }

            public override void VisitPropertyDeclaration(PropertyDeclarationSyntax node)
            {
                Assert.True(false, "VisitPropertyDeclaration should not have been called.");
            }

            public override void VisitArrowExpressionClause(ArrowExpressionClauseSyntax node)
            {
                Assert.True(false, "VisitArrowExpressionClause should not have been called.");
            }

            public override void VisitEventDeclaration(EventDeclarationSyntax node)
            {
                Assert.True(false, "VisitEventDeclaration should not have been called.");
            }

            public override void VisitIndexerDeclaration(IndexerDeclarationSyntax node)
            {
                Assert.True(false, "VisitIndexerDeclaration should not have been called.");
            }

            public override void VisitAccessorList(AccessorListSyntax node)
            {
                Assert.True(false, "VisitAccessorList should not have been called.");
            }

            public override void VisitAccessorDeclaration(AccessorDeclarationSyntax node)
            {
                Assert.True(false, "VisitAccessorDeclaration should not have been called.");
            }

            public override void VisitParameterList(ParameterListSyntax node)
            {
                Assert.True(false, "VisitParameterList should not have been called.");
            }

            public override void VisitBracketedParameterList(BracketedParameterListSyntax node)
            {
                Assert.True(false, "VisitBracketedParameterList should not have been called.");
            }

            public override void VisitParameter(ParameterSyntax node)
            {
                Assert.True(false, "VisitParameter should not have been called.");
            }

            public override void VisitFunctionPointerParameter(FunctionPointerParameterSyntax node)
            {
                Assert.True(false, "VisitFunctionPointerParameter should not have been called.");
            }

            public override void VisitIncompleteMember(IncompleteMemberSyntax node)
            {
                Assert.True(false, "VisitIncompleteMember should not have been called.");
            }

            public override void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
            {
                Assert.True(false, "VisitSkippedTokensTrivia should not have been called.");
            }

            public override void VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
            {
                Assert.True(false, "VisitDocumentationCommentTrivia should not have been called.");
            }

            public override void VisitTypeCref(TypeCrefSyntax node)
            {
                Assert.True(false, "VisitTypeCref should not have been called.");
            }

            public override void VisitQualifiedCref(QualifiedCrefSyntax node)
            {
                Assert.True(false, "VisitQualifiedCref should not have been called.");
            }

            public override void VisitNameMemberCref(NameMemberCrefSyntax node)
            {
                Assert.True(false, "VisitNameMemberCref should not have been called.");
            }

            public override void VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
            {
                Assert.True(false, "VisitIndexerMemberCref should not have been called.");
            }

            public override void VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
            {
                Assert.True(false, "VisitOperatorMemberCref should not have been called.");
            }

            public override void VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
            {
                Assert.True(false, "VisitConversionOperatorMemberCref should not have been called.");
            }

            public override void VisitCrefParameterList(CrefParameterListSyntax node)
            {
                Assert.True(false, "VisitCrefParameterList should not have been called.");
            }

            public override void VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
            {
                Assert.True(false, "VisitCrefBracketedParameterList should not have been called.");
            }

            public override void VisitCrefParameter(CrefParameterSyntax node)
            {
                Assert.True(false, "VisitCrefParameter should not have been called.");
            }

            public override void VisitXmlElement(XmlElementSyntax node)
            {
                Assert.True(false, "VisitXmlElement should not have been called.");
            }

            public override void VisitXmlElementStartTag(XmlElementStartTagSyntax node)
            {
                Assert.True(false, "VisitXmlElementStartTag should not have been called.");
            }

            public override void VisitXmlElementEndTag(XmlElementEndTagSyntax node)
            {
                Assert.True(false, "VisitXmlElementEndTag should not have been called.");
            }

            public override void VisitXmlEmptyElement(XmlEmptyElementSyntax node)
            {
                Assert.True(false, "VisitXmlEmptyElement should not have been called.");
            }

            public override void VisitXmlName(XmlNameSyntax node)
            {
                Assert.True(false, "VisitXmlName should not have been called.");
            }

            public override void VisitXmlPrefix(XmlPrefixSyntax node)
            {
                Assert.True(false, "VisitXmlPrefix should not have been called.");
            }

            public override void VisitXmlTextAttribute(XmlTextAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlTextAttribute should not have been called.");
            }

            public override void VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlCrefAttribute should not have been called.");
            }

            public override void VisitXmlNameAttribute(XmlNameAttributeSyntax node)
            {
                Assert.True(false, "VisitXmlNameAttribute should not have been called.");
            }

            public override void VisitXmlText(XmlTextSyntax node)
            {
                Assert.True(false, "VisitXmlText should not have been called.");
            }

            public override void VisitXmlCDataSection(XmlCDataSectionSyntax node)
            {
                Assert.True(false, "VisitXmlCDataSection should not have been called.");
            }

            public override void VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
            {
                Assert.True(false, "VisitXmlProcessingInstruction should not have been called.");
            }

            public override void VisitXmlComment(XmlCommentSyntax node)
            {
                Assert.True(false, "VisitXmlComment should not have been called.");
            }

            public override void VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitIfDirectiveTrivia should not have been called.");
            }

            public override void VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitElifDirectiveTrivia should not have been called.");
            }

            public override void VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitElseDirectiveTrivia should not have been called.");
            }

            public override void VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitEndIfDirectiveTrivia should not have been called.");
            }

            public override void VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitRegionDirectiveTrivia should not have been called.");
            }

            public override void VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitEndRegionDirectiveTrivia should not have been called.");
            }

            public override void VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitErrorDirectiveTrivia should not have been called.");
            }

            public override void VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitWarningDirectiveTrivia should not have been called.");
            }

            public override void VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitBadDirectiveTrivia should not have been called.");
            }

            public override void VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitDefineDirectiveTrivia should not have been called.");
            }

            public override void VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitUndefDirectiveTrivia should not have been called.");
            }

            public override void VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLineDirectiveTrivia should not have been called.");
            }

            public override void VisitLineDirectivePosition(LineDirectivePositionSyntax node)
            {
                Assert.True(false, "VisitLineDirectivePosition should not have been called.");
            }

            public override void VisitLineSpanDirectiveTrivia(LineSpanDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLineSpanDirectiveTrivia should not have been called.");
            }

            public override void VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitPragmaWarningDirectiveTrivia should not have been called.");
            }

            public override void VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitPragmaChecksumDirectiveTrivia should not have been called.");
            }

            public override void VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitReferenceDirectiveTrivia should not have been called.");
            }

            public override void VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitLoadDirectiveTrivia should not have been called.");
            }

            public override void VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitShebangDirectiveTrivia should not have been called.");
            }

            public override void VisitNullableDirectiveTrivia(NullableDirectiveTriviaSyntax node)
            {
                Assert.True(false, "VisitNullableDirectiveTrivia should not have been called.");
            }
        }
        internal class AssertOnEverythingButIdentifierNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIdentifierName(IdentifierNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestIdentifierNameNodeVisitOnVisitor()
        {
            var node = GenerateIdentifierName();
            var visitor = new AssertOnEverythingButIdentifierNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIdentifierNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIdentifierName();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQualifiedName(QualifiedNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestQualifiedNameNodeVisitOnVisitor()
        {
            var node = GenerateQualifiedName();
            var visitor = new AssertOnEverythingButQualifiedNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQualifiedNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQualifiedName();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGenericNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitGenericName(GenericNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestGenericNameNodeVisitOnVisitor()
        {
            var node = GenerateGenericName();
            var visitor = new AssertOnEverythingButGenericNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestGenericNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateGenericName();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeArgumentListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeArgumentList(TypeArgumentListSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitOnVisitor()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new AssertOnEverythingButTypeArgumentListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeArgumentListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAliasQualifiedNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitOnVisitor()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new AssertOnEverythingButAliasQualifiedNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAliasQualifiedNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAliasQualifiedName();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPredefinedTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPredefinedType(PredefinedTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitOnVisitor()
        {
            var node = GeneratePredefinedType();
            var visitor = new AssertOnEverythingButPredefinedTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPredefinedTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePredefinedType();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArrayType(ArrayTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestArrayTypeNodeVisitOnVisitor()
        {
            var node = GenerateArrayType();
            var visitor = new AssertOnEverythingButArrayTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArrayTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArrayType();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayRankSpecifierVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
            {
            }
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitOnVisitor()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new AssertOnEverythingButArrayRankSpecifierVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArrayRankSpecifierNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArrayRankSpecifier();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPointerTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPointerType(PointerTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestPointerTypeNodeVisitOnVisitor()
        {
            var node = GeneratePointerType();
            var visitor = new AssertOnEverythingButPointerTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPointerTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePointerType();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerType(FunctionPointerTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new AssertOnEverythingButFunctionPointerTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerType();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerParameterList(FunctionPointerParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new AssertOnEverythingButFunctionPointerParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerCallingConventionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerCallingConvention(FunctionPointerCallingConventionSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerCallingConventionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerCallingConventionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerCallingConvention();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerUnmanagedCallingConventionList(FunctionPointerUnmanagedCallingConventionListSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConventionList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerUnmanagedCallingConvention(FunctionPointerUnmanagedCallingConventionSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new AssertOnEverythingButFunctionPointerUnmanagedCallingConventionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerUnmanagedCallingConventionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerUnmanagedCallingConvention();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNullableType(NullableTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestNullableTypeNodeVisitOnVisitor()
        {
            var node = GenerateNullableType();
            var visitor = new AssertOnEverythingButNullableTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNullableTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNullableType();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTupleType(TupleTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestTupleTypeNodeVisitOnVisitor()
        {
            var node = GenerateTupleType();
            var visitor = new AssertOnEverythingButTupleTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTupleTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTupleType();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleElementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTupleElement(TupleElementSyntax node)
            {
            }
        }

        [Fact]
        public void TestTupleElementNodeVisitOnVisitor()
        {
            var node = GenerateTupleElement();
            var visitor = new AssertOnEverythingButTupleElementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTupleElementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTupleElement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedTypeArgumentVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node)
            {
            }
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitOnVisitor()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new AssertOnEverythingButOmittedTypeArgumentVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOmittedTypeArgumentNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOmittedTypeArgument();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRefType(RefTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestRefTypeNodeVisitOnVisitor()
        {
            var node = GenerateRefType();
            var visitor = new AssertOnEverythingButRefTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRefTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRefType();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParenthesizedExpression(ParenthesizedExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitOnVisitor()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new AssertOnEverythingButParenthesizedExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParenthesizedExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParenthesizedExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTupleExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTupleExpression(TupleExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestTupleExpressionNodeVisitOnVisitor()
        {
            var node = GenerateTupleExpression();
            var visitor = new AssertOnEverythingButTupleExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTupleExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTupleExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrefixUnaryExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitOnVisitor()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new AssertOnEverythingButPrefixUnaryExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPrefixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePrefixUnaryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAwaitExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAwaitExpression(AwaitExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitOnVisitor()
        {
            var node = GenerateAwaitExpression();
            var visitor = new AssertOnEverythingButAwaitExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAwaitExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAwaitExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPostfixUnaryExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitOnVisitor()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new AssertOnEverythingButPostfixUnaryExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPostfixUnaryExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePostfixUnaryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberAccessExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitOnVisitor()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new AssertOnEverythingButMemberAccessExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestMemberAccessExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateMemberAccessExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalAccessExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitOnVisitor()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new AssertOnEverythingButConditionalAccessExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConditionalAccessExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConditionalAccessExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMemberBindingExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitMemberBindingExpression(MemberBindingExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitOnVisitor()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new AssertOnEverythingButMemberBindingExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestMemberBindingExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateMemberBindingExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementBindingExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElementBindingExpression(ElementBindingExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitOnVisitor()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new AssertOnEverythingButElementBindingExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElementBindingExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElementBindingExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRangeExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRangeExpression(RangeExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestRangeExpressionNodeVisitOnVisitor()
        {
            var node = GenerateRangeExpression();
            var visitor = new AssertOnEverythingButRangeExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRangeExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRangeExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitElementAccessVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitImplicitElementAccess(ImplicitElementAccessSyntax node)
            {
            }
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitOnVisitor()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new AssertOnEverythingButImplicitElementAccessVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestImplicitElementAccessNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateImplicitElementAccess();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBinaryExpression(BinaryExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitOnVisitor()
        {
            var node = GenerateBinaryExpression();
            var visitor = new AssertOnEverythingButBinaryExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBinaryExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBinaryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAssignmentExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAssignmentExpression(AssignmentExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitOnVisitor()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new AssertOnEverythingButAssignmentExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAssignmentExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAssignmentExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConditionalExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConditionalExpression(ConditionalExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitOnVisitor()
        {
            var node = GenerateConditionalExpression();
            var visitor = new AssertOnEverythingButConditionalExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConditionalExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConditionalExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThisExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitThisExpression(ThisExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestThisExpressionNodeVisitOnVisitor()
        {
            var node = GenerateThisExpression();
            var visitor = new AssertOnEverythingButThisExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestThisExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateThisExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBaseExpression(BaseExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestBaseExpressionNodeVisitOnVisitor()
        {
            var node = GenerateBaseExpression();
            var visitor = new AssertOnEverythingButBaseExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBaseExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBaseExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLiteralExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLiteralExpression(LiteralExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitOnVisitor()
        {
            var node = GenerateLiteralExpression();
            var visitor = new AssertOnEverythingButLiteralExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLiteralExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLiteralExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMakeRefExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitMakeRefExpression(MakeRefExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitOnVisitor()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new AssertOnEverythingButMakeRefExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestMakeRefExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateMakeRefExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefTypeExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRefTypeExpression(RefTypeExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitOnVisitor()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new AssertOnEverythingButRefTypeExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRefTypeExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRefTypeExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefValueExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRefValueExpression(RefValueExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitOnVisitor()
        {
            var node = GenerateRefValueExpression();
            var visitor = new AssertOnEverythingButRefValueExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRefValueExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRefValueExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCheckedExpression(CheckedExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitOnVisitor()
        {
            var node = GenerateCheckedExpression();
            var visitor = new AssertOnEverythingButCheckedExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCheckedExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCheckedExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDefaultExpression(DefaultExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitOnVisitor()
        {
            var node = GenerateDefaultExpression();
            var visitor = new AssertOnEverythingButDefaultExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDefaultExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDefaultExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeOfExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeOfExpression(TypeOfExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitOnVisitor()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new AssertOnEverythingButTypeOfExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeOfExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeOfExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSizeOfExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSizeOfExpression(SizeOfExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitOnVisitor()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new AssertOnEverythingButSizeOfExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSizeOfExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSizeOfExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInvocationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInvocationExpression(InvocationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateInvocationExpression();
            var visitor = new AssertOnEverythingButInvocationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInvocationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInvocationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElementAccessExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElementAccessExpression(ElementAccessExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitOnVisitor()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new AssertOnEverythingButElementAccessExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElementAccessExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElementAccessExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArgumentList(ArgumentListSyntax node)
            {
            }
        }

        [Fact]
        public void TestArgumentListNodeVisitOnVisitor()
        {
            var node = GenerateArgumentList();
            var visitor = new AssertOnEverythingButArgumentListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArgumentListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedArgumentListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBracketedArgumentList(BracketedArgumentListSyntax node)
            {
            }
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitOnVisitor()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new AssertOnEverythingButBracketedArgumentListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBracketedArgumentListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBracketedArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArgumentVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArgument(ArgumentSyntax node)
            {
            }
        }

        [Fact]
        public void TestArgumentNodeVisitOnVisitor()
        {
            var node = GenerateArgument();
            var visitor = new AssertOnEverythingButArgumentVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArgumentNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArgument();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionColonVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitExpressionColon(ExpressionColonSyntax node)
            {
            }
        }

        [Fact]
        public void TestExpressionColonNodeVisitOnVisitor()
        {
            var node = GenerateExpressionColon();
            var visitor = new AssertOnEverythingButExpressionColonVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestExpressionColonNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateExpressionColon();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameColonVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNameColon(NameColonSyntax node)
            {
            }
        }

        [Fact]
        public void TestNameColonNodeVisitOnVisitor()
        {
            var node = GenerateNameColon();
            var visitor = new AssertOnEverythingButNameColonVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNameColonNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNameColon();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDeclarationExpression(DeclarationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new AssertOnEverythingButDeclarationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDeclarationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDeclarationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCastExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCastExpression(CastExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestCastExpressionNodeVisitOnVisitor()
        {
            var node = GenerateCastExpression();
            var visitor = new AssertOnEverythingButCastExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCastExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCastExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousMethodExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitOnVisitor()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new AssertOnEverythingButAnonymousMethodExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAnonymousMethodExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAnonymousMethodExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleLambdaExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitOnVisitor()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new AssertOnEverythingButSimpleLambdaExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSimpleLambdaExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSimpleLambdaExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRefExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRefExpression(RefExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestRefExpressionNodeVisitOnVisitor()
        {
            var node = GenerateRefExpression();
            var visitor = new AssertOnEverythingButRefExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRefExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRefExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitOnVisitor()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new AssertOnEverythingButParenthesizedLambdaExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParenthesizedLambdaExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParenthesizedLambdaExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInitializerExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInitializerExpression(InitializerExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitOnVisitor()
        {
            var node = GenerateInitializerExpression();
            var visitor = new AssertOnEverythingButInitializerExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInitializerExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInitializerExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitImplicitObjectCreationExpression(ImplicitObjectCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new AssertOnEverythingButImplicitObjectCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestImplicitObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateImplicitObjectCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButObjectCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new AssertOnEverythingButObjectCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateObjectCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWithExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWithExpression(WithExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestWithExpressionNodeVisitOnVisitor()
        {
            var node = GenerateWithExpression();
            var visitor = new AssertOnEverythingButWithExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWithExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWithExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node)
            {
            }
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitOnVisitor()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new AssertOnEverythingButAnonymousObjectMemberDeclaratorVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAnonymousObjectMemberDeclaratorNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAnonymousObjectMemberDeclarator();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new AssertOnEverythingButAnonymousObjectCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAnonymousObjectCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAnonymousObjectCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrayCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArrayCreationExpression(ArrayCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new AssertOnEverythingButArrayCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitArrayCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestImplicitArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateImplicitArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButStackAllocArrayCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateStackAllocArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitImplicitStackAllocArrayCreationExpression(ImplicitStackAllocArrayCreationExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitOnVisitor()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new AssertOnEverythingButImplicitStackAllocArrayCreationExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestImplicitStackAllocArrayCreationExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateImplicitStackAllocArrayCreationExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQueryExpression(QueryExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestQueryExpressionNodeVisitOnVisitor()
        {
            var node = GenerateQueryExpression();
            var visitor = new AssertOnEverythingButQueryExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQueryExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQueryExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryBodyVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQueryBody(QueryBodySyntax node)
            {
            }
        }

        [Fact]
        public void TestQueryBodyNodeVisitOnVisitor()
        {
            var node = GenerateQueryBody();
            var visitor = new AssertOnEverythingButQueryBodyVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQueryBodyNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQueryBody();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFromClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFromClause(FromClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestFromClauseNodeVisitOnVisitor()
        {
            var node = GenerateFromClause();
            var visitor = new AssertOnEverythingButFromClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFromClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFromClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLetClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLetClause(LetClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestLetClauseNodeVisitOnVisitor()
        {
            var node = GenerateLetClause();
            var visitor = new AssertOnEverythingButLetClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLetClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLetClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitJoinClause(JoinClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestJoinClauseNodeVisitOnVisitor()
        {
            var node = GenerateJoinClause();
            var visitor = new AssertOnEverythingButJoinClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestJoinClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateJoinClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButJoinIntoClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitJoinIntoClause(JoinIntoClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitOnVisitor()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new AssertOnEverythingButJoinIntoClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestJoinIntoClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateJoinIntoClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhereClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWhereClause(WhereClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestWhereClauseNodeVisitOnVisitor()
        {
            var node = GenerateWhereClause();
            var visitor = new AssertOnEverythingButWhereClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWhereClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWhereClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderByClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOrderByClause(OrderByClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestOrderByClauseNodeVisitOnVisitor()
        {
            var node = GenerateOrderByClause();
            var visitor = new AssertOnEverythingButOrderByClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOrderByClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOrderByClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOrderingVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOrdering(OrderingSyntax node)
            {
            }
        }

        [Fact]
        public void TestOrderingNodeVisitOnVisitor()
        {
            var node = GenerateOrdering();
            var visitor = new AssertOnEverythingButOrderingVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOrderingNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOrdering();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSelectClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSelectClause(SelectClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestSelectClauseNodeVisitOnVisitor()
        {
            var node = GenerateSelectClause();
            var visitor = new AssertOnEverythingButSelectClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSelectClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSelectClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGroupClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitGroupClause(GroupClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestGroupClauseNodeVisitOnVisitor()
        {
            var node = GenerateGroupClause();
            var visitor = new AssertOnEverythingButGroupClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestGroupClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateGroupClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQueryContinuationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQueryContinuation(QueryContinuationSyntax node)
            {
            }
        }

        [Fact]
        public void TestQueryContinuationNodeVisitOnVisitor()
        {
            var node = GenerateQueryContinuation();
            var visitor = new AssertOnEverythingButQueryContinuationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQueryContinuationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQueryContinuation();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOmittedArraySizeExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitOnVisitor()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new AssertOnEverythingButOmittedArraySizeExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOmittedArraySizeExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOmittedArraySizeExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitOnVisitor()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new AssertOnEverythingButInterpolatedStringExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolatedStringExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolatedStringExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIsPatternExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIsPatternExpression(IsPatternExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitOnVisitor()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new AssertOnEverythingButIsPatternExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIsPatternExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIsPatternExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitThrowExpression(ThrowExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestThrowExpressionNodeVisitOnVisitor()
        {
            var node = GenerateThrowExpression();
            var visitor = new AssertOnEverythingButThrowExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestThrowExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateThrowExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhenClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWhenClause(WhenClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestWhenClauseNodeVisitOnVisitor()
        {
            var node = GenerateWhenClause();
            var visitor = new AssertOnEverythingButWhenClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWhenClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWhenClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDiscardPattern(DiscardPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestDiscardPatternNodeVisitOnVisitor()
        {
            var node = GenerateDiscardPattern();
            var visitor = new AssertOnEverythingButDiscardPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDiscardPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDiscardPattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDeclarationPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDeclarationPattern(DeclarationPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitOnVisitor()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new AssertOnEverythingButDeclarationPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDeclarationPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDeclarationPattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVarPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitVarPattern(VarPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestVarPatternNodeVisitOnVisitor()
        {
            var node = GenerateVarPattern();
            var visitor = new AssertOnEverythingButVarPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestVarPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateVarPattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecursivePatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRecursivePattern(RecursivePatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestRecursivePatternNodeVisitOnVisitor()
        {
            var node = GenerateRecursivePattern();
            var visitor = new AssertOnEverythingButRecursivePatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRecursivePatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRecursivePattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPositionalPatternClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPositionalPatternClause(PositionalPatternClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitOnVisitor()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new AssertOnEverythingButPositionalPatternClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPositionalPatternClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePositionalPatternClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyPatternClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPropertyPatternClause(PropertyPatternClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitOnVisitor()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new AssertOnEverythingButPropertyPatternClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPropertyPatternClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePropertyPatternClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSubpatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSubpattern(SubpatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestSubpatternNodeVisitOnVisitor()
        {
            var node = GenerateSubpattern();
            var visitor = new AssertOnEverythingButSubpatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSubpatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSubpattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstantPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConstantPattern(ConstantPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestConstantPatternNodeVisitOnVisitor()
        {
            var node = GenerateConstantPattern();
            var visitor = new AssertOnEverythingButConstantPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConstantPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConstantPattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParenthesizedPattern(ParenthesizedPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitOnVisitor()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new AssertOnEverythingButParenthesizedPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParenthesizedPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParenthesizedPattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRelationalPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRelationalPattern(RelationalPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestRelationalPatternNodeVisitOnVisitor()
        {
            var node = GenerateRelationalPattern();
            var visitor = new AssertOnEverythingButRelationalPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRelationalPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRelationalPattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypePatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypePattern(TypePatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypePatternNodeVisitOnVisitor()
        {
            var node = GenerateTypePattern();
            var visitor = new AssertOnEverythingButTypePatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypePatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypePattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBinaryPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBinaryPattern(BinaryPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestBinaryPatternNodeVisitOnVisitor()
        {
            var node = GenerateBinaryPattern();
            var visitor = new AssertOnEverythingButBinaryPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBinaryPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBinaryPattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnaryPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUnaryPattern(UnaryPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestUnaryPatternNodeVisitOnVisitor()
        {
            var node = GenerateUnaryPattern();
            var visitor = new AssertOnEverythingButUnaryPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUnaryPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUnaryPattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButListPatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitListPattern(ListPatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestListPatternNodeVisitOnVisitor()
        {
            var node = GenerateListPattern();
            var visitor = new AssertOnEverythingButListPatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestListPatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateListPattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSlicePatternVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSlicePattern(SlicePatternSyntax node)
            {
            }
        }

        [Fact]
        public void TestSlicePatternNodeVisitOnVisitor()
        {
            var node = GenerateSlicePattern();
            var visitor = new AssertOnEverythingButSlicePatternVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSlicePatternNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSlicePattern();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolatedStringTextVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitOnVisitor()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new AssertOnEverythingButInterpolatedStringTextVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolatedStringTextNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolatedStringText();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolation(InterpolationSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolationNodeVisitOnVisitor()
        {
            var node = GenerateInterpolation();
            var visitor = new AssertOnEverythingButInterpolationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolation();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationAlignmentClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitOnVisitor()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new AssertOnEverythingButInterpolationAlignmentClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolationAlignmentClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolationAlignmentClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterpolationFormatClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitOnVisitor()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new AssertOnEverythingButInterpolationFormatClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterpolationFormatClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterpolationFormatClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGlobalStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitGlobalStatement(GlobalStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestGlobalStatementNodeVisitOnVisitor()
        {
            var node = GenerateGlobalStatement();
            var visitor = new AssertOnEverythingButGlobalStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestGlobalStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateGlobalStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBlockVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBlock(BlockSyntax node)
            {
            }
        }

        [Fact]
        public void TestBlockNodeVisitOnVisitor()
        {
            var node = GenerateBlock();
            var visitor = new AssertOnEverythingButBlockVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBlockNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBlock();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalFunctionStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitOnVisitor()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new AssertOnEverythingButLocalFunctionStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLocalFunctionStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLocalFunctionStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLocalDeclarationStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitOnVisitor()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new AssertOnEverythingButLocalDeclarationStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLocalDeclarationStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLocalDeclarationStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitVariableDeclaration(VariableDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new AssertOnEverythingButVariableDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestVariableDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateVariableDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButVariableDeclaratorVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitVariableDeclarator(VariableDeclaratorSyntax node)
            {
            }
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitOnVisitor()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new AssertOnEverythingButVariableDeclaratorVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestVariableDeclaratorNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateVariableDeclarator();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEqualsValueClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEqualsValueClause(EqualsValueClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitOnVisitor()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new AssertOnEverythingButEqualsValueClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEqualsValueClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEqualsValueClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSingleVariableDesignationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSingleVariableDesignation(SingleVariableDesignationSyntax node)
            {
            }
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitOnVisitor()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new AssertOnEverythingButSingleVariableDesignationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSingleVariableDesignationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSingleVariableDesignation();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDiscardDesignationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDiscardDesignation(DiscardDesignationSyntax node)
            {
            }
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitOnVisitor()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new AssertOnEverythingButDiscardDesignationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDiscardDesignationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDiscardDesignation();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParenthesizedVariableDesignationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node)
            {
            }
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitOnVisitor()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new AssertOnEverythingButParenthesizedVariableDesignationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParenthesizedVariableDesignationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParenthesizedVariableDesignation();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExpressionStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitExpressionStatement(ExpressionStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestExpressionStatementNodeVisitOnVisitor()
        {
            var node = GenerateExpressionStatement();
            var visitor = new AssertOnEverythingButExpressionStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestExpressionStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateExpressionStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEmptyStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEmptyStatement(EmptyStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestEmptyStatementNodeVisitOnVisitor()
        {
            var node = GenerateEmptyStatement();
            var visitor = new AssertOnEverythingButEmptyStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEmptyStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEmptyStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLabeledStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLabeledStatement(LabeledStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestLabeledStatementNodeVisitOnVisitor()
        {
            var node = GenerateLabeledStatement();
            var visitor = new AssertOnEverythingButLabeledStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLabeledStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLabeledStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButGotoStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitGotoStatement(GotoStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestGotoStatementNodeVisitOnVisitor()
        {
            var node = GenerateGotoStatement();
            var visitor = new AssertOnEverythingButGotoStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestGotoStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateGotoStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBreakStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBreakStatement(BreakStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestBreakStatementNodeVisitOnVisitor()
        {
            var node = GenerateBreakStatement();
            var visitor = new AssertOnEverythingButBreakStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBreakStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBreakStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButContinueStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitContinueStatement(ContinueStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestContinueStatementNodeVisitOnVisitor()
        {
            var node = GenerateContinueStatement();
            var visitor = new AssertOnEverythingButContinueStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestContinueStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateContinueStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReturnStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitReturnStatement(ReturnStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestReturnStatementNodeVisitOnVisitor()
        {
            var node = GenerateReturnStatement();
            var visitor = new AssertOnEverythingButReturnStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestReturnStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateReturnStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButThrowStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitThrowStatement(ThrowStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestThrowStatementNodeVisitOnVisitor()
        {
            var node = GenerateThrowStatement();
            var visitor = new AssertOnEverythingButThrowStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestThrowStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateThrowStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButYieldStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitYieldStatement(YieldStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestYieldStatementNodeVisitOnVisitor()
        {
            var node = GenerateYieldStatement();
            var visitor = new AssertOnEverythingButYieldStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestYieldStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateYieldStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWhileStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWhileStatement(WhileStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestWhileStatementNodeVisitOnVisitor()
        {
            var node = GenerateWhileStatement();
            var visitor = new AssertOnEverythingButWhileStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWhileStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWhileStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDoStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDoStatement(DoStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestDoStatementNodeVisitOnVisitor()
        {
            var node = GenerateDoStatement();
            var visitor = new AssertOnEverythingButDoStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDoStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDoStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitForStatement(ForStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestForStatementNodeVisitOnVisitor()
        {
            var node = GenerateForStatement();
            var visitor = new AssertOnEverythingButForStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestForStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateForStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitForEachStatement(ForEachStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestForEachStatementNodeVisitOnVisitor()
        {
            var node = GenerateForEachStatement();
            var visitor = new AssertOnEverythingButForEachStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestForEachStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateForEachStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButForEachVariableStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitOnVisitor()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new AssertOnEverythingButForEachVariableStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestForEachVariableStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateForEachVariableStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUsingStatement(UsingStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestUsingStatementNodeVisitOnVisitor()
        {
            var node = GenerateUsingStatement();
            var visitor = new AssertOnEverythingButUsingStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUsingStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUsingStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFixedStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFixedStatement(FixedStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestFixedStatementNodeVisitOnVisitor()
        {
            var node = GenerateFixedStatement();
            var visitor = new AssertOnEverythingButFixedStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFixedStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFixedStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCheckedStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCheckedStatement(CheckedStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestCheckedStatementNodeVisitOnVisitor()
        {
            var node = GenerateCheckedStatement();
            var visitor = new AssertOnEverythingButCheckedStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCheckedStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCheckedStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUnsafeStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUnsafeStatement(UnsafeStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitOnVisitor()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new AssertOnEverythingButUnsafeStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUnsafeStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUnsafeStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLockStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLockStatement(LockStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestLockStatementNodeVisitOnVisitor()
        {
            var node = GenerateLockStatement();
            var visitor = new AssertOnEverythingButLockStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLockStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLockStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIfStatement(IfStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestIfStatementNodeVisitOnVisitor()
        {
            var node = GenerateIfStatement();
            var visitor = new AssertOnEverythingButIfStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIfStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIfStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElseClause(ElseClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestElseClauseNodeVisitOnVisitor()
        {
            var node = GenerateElseClause();
            var visitor = new AssertOnEverythingButElseClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElseClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElseClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSwitchStatement(SwitchStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestSwitchStatementNodeVisitOnVisitor()
        {
            var node = GenerateSwitchStatement();
            var visitor = new AssertOnEverythingButSwitchStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSwitchStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSwitchStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchSectionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSwitchSection(SwitchSectionSyntax node)
            {
            }
        }

        [Fact]
        public void TestSwitchSectionNodeVisitOnVisitor()
        {
            var node = GenerateSwitchSection();
            var visitor = new AssertOnEverythingButSwitchSectionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSwitchSectionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSwitchSection();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCasePatternSwitchLabelVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node)
            {
            }
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitOnVisitor()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new AssertOnEverythingButCasePatternSwitchLabelVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCasePatternSwitchLabelNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCasePatternSwitchLabel();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCaseSwitchLabelVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCaseSwitchLabel(CaseSwitchLabelSyntax node)
            {
            }
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitOnVisitor()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new AssertOnEverythingButCaseSwitchLabelVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCaseSwitchLabelNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCaseSwitchLabel();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultSwitchLabelVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node)
            {
            }
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitOnVisitor()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new AssertOnEverythingButDefaultSwitchLabelVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDefaultSwitchLabelNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDefaultSwitchLabel();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSwitchExpression(SwitchExpressionSyntax node)
            {
            }
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitOnVisitor()
        {
            var node = GenerateSwitchExpression();
            var visitor = new AssertOnEverythingButSwitchExpressionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSwitchExpressionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSwitchExpression();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSwitchExpressionArmVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSwitchExpressionArm(SwitchExpressionArmSyntax node)
            {
            }
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitOnVisitor()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new AssertOnEverythingButSwitchExpressionArmVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSwitchExpressionArmNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSwitchExpressionArm();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTryStatementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTryStatement(TryStatementSyntax node)
            {
            }
        }

        [Fact]
        public void TestTryStatementNodeVisitOnVisitor()
        {
            var node = GenerateTryStatement();
            var visitor = new AssertOnEverythingButTryStatementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTryStatementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTryStatement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCatchClause(CatchClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestCatchClauseNodeVisitOnVisitor()
        {
            var node = GenerateCatchClause();
            var visitor = new AssertOnEverythingButCatchClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCatchClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCatchClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCatchDeclaration(CatchDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new AssertOnEverythingButCatchDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCatchDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCatchDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCatchFilterClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCatchFilterClause(CatchFilterClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitOnVisitor()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new AssertOnEverythingButCatchFilterClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCatchFilterClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCatchFilterClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFinallyClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFinallyClause(FinallyClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestFinallyClauseNodeVisitOnVisitor()
        {
            var node = GenerateFinallyClause();
            var visitor = new AssertOnEverythingButFinallyClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFinallyClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFinallyClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCompilationUnitVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCompilationUnit(CompilationUnitSyntax node)
            {
            }
        }

        [Fact]
        public void TestCompilationUnitNodeVisitOnVisitor()
        {
            var node = GenerateCompilationUnit();
            var visitor = new AssertOnEverythingButCompilationUnitVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCompilationUnitNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCompilationUnit();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExternAliasDirectiveVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitExternAliasDirective(ExternAliasDirectiveSyntax node)
            {
            }
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitOnVisitor()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new AssertOnEverythingButExternAliasDirectiveVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestExternAliasDirectiveNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateExternAliasDirective();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUsingDirectiveVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUsingDirective(UsingDirectiveSyntax node)
            {
            }
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitOnVisitor()
        {
            var node = GenerateUsingDirective();
            var visitor = new AssertOnEverythingButUsingDirectiveVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUsingDirectiveNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUsingDirective();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNamespaceDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new AssertOnEverythingButNamespaceDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNamespaceDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFileScopedNamespaceDeclaration(FileScopedNamespaceDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new AssertOnEverythingButFileScopedNamespaceDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFileScopedNamespaceDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFileScopedNamespaceDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttributeList(AttributeListSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeListNodeVisitOnVisitor()
        {
            var node = GenerateAttributeList();
            var visitor = new AssertOnEverythingButAttributeListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttributeList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeTargetSpecifierVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitOnVisitor()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new AssertOnEverythingButAttributeTargetSpecifierVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeTargetSpecifierNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttributeTargetSpecifier();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttribute(AttributeSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeNodeVisitOnVisitor()
        {
            var node = GenerateAttribute();
            var visitor = new AssertOnEverythingButAttributeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttributeArgumentList(AttributeArgumentListSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitOnVisitor()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new AssertOnEverythingButAttributeArgumentListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeArgumentListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttributeArgumentList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAttributeArgumentVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAttributeArgument(AttributeArgumentSyntax node)
            {
            }
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitOnVisitor()
        {
            var node = GenerateAttributeArgument();
            var visitor = new AssertOnEverythingButAttributeArgumentVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAttributeArgumentNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAttributeArgument();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameEqualsVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNameEquals(NameEqualsSyntax node)
            {
            }
        }

        [Fact]
        public void TestNameEqualsNodeVisitOnVisitor()
        {
            var node = GenerateNameEquals();
            var visitor = new AssertOnEverythingButNameEqualsVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNameEqualsNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNameEquals();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeParameterList(TypeParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeParameterListNodeVisitOnVisitor()
        {
            var node = GenerateTypeParameterList();
            var visitor = new AssertOnEverythingButTypeParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeParameter(TypeParameterSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeParameterNodeVisitOnVisitor()
        {
            var node = GenerateTypeParameter();
            var visitor = new AssertOnEverythingButTypeParameterVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeParameterNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeParameter();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitClassDeclaration(ClassDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestClassDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateClassDeclaration();
            var visitor = new AssertOnEverythingButClassDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestClassDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateClassDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButStructDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitStructDeclaration(StructDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestStructDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateStructDeclaration();
            var visitor = new AssertOnEverythingButStructDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestStructDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateStructDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButInterfaceDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new AssertOnEverythingButInterfaceDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestInterfaceDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateInterfaceDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRecordDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRecordDeclaration(RecordDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new AssertOnEverythingButRecordDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRecordDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRecordDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEnumDeclaration(EnumDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new AssertOnEverythingButEnumDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEnumDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEnumDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDelegateDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDelegateDeclaration(DelegateDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new AssertOnEverythingButDelegateDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDelegateDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDelegateDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEnumMemberDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new AssertOnEverythingButEnumMemberDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEnumMemberDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEnumMemberDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBaseListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBaseList(BaseListSyntax node)
            {
            }
        }

        [Fact]
        public void TestBaseListNodeVisitOnVisitor()
        {
            var node = GenerateBaseList();
            var visitor = new AssertOnEverythingButBaseListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBaseListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBaseList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSimpleBaseTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSimpleBaseType(SimpleBaseTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitOnVisitor()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new AssertOnEverythingButSimpleBaseTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSimpleBaseTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSimpleBaseType();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPrimaryConstructorBaseType(PrimaryConstructorBaseTypeSyntax node)
            {
            }
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitOnVisitor()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new AssertOnEverythingButPrimaryConstructorBaseTypeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPrimaryConstructorBaseTypeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePrimaryConstructorBaseType();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeParameterConstraintClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitOnVisitor()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new AssertOnEverythingButTypeParameterConstraintClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeParameterConstraintClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeParameterConstraintClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorConstraintVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConstructorConstraint(ConstructorConstraintSyntax node)
            {
            }
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitOnVisitor()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new AssertOnEverythingButConstructorConstraintVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConstructorConstraintNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConstructorConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButClassOrStructConstraintVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node)
            {
            }
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitOnVisitor()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new AssertOnEverythingButClassOrStructConstraintVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestClassOrStructConstraintNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateClassOrStructConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeConstraintVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeConstraint(TypeConstraintSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeConstraintNodeVisitOnVisitor()
        {
            var node = GenerateTypeConstraint();
            var visitor = new AssertOnEverythingButTypeConstraintVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeConstraintNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefaultConstraintVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDefaultConstraint(DefaultConstraintSyntax node)
            {
            }
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitOnVisitor()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new AssertOnEverythingButDefaultConstraintVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDefaultConstraintNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDefaultConstraint();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFieldDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFieldDeclaration(FieldDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new AssertOnEverythingButFieldDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFieldDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFieldDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventFieldDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new AssertOnEverythingButEventFieldDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEventFieldDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEventFieldDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node)
            {
            }
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitOnVisitor()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new AssertOnEverythingButExplicitInterfaceSpecifierVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestExplicitInterfaceSpecifierNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateExplicitInterfaceSpecifier();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButMethodDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitMethodDeclaration(MethodDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new AssertOnEverythingButMethodDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestMethodDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateMethodDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOperatorDeclaration(OperatorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new AssertOnEverythingButOperatorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOperatorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new AssertOnEverythingButConversionOperatorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConversionOperatorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConversionOperatorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new AssertOnEverythingButConstructorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConstructorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConstructorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConstructorInitializerVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConstructorInitializer(ConstructorInitializerSyntax node)
            {
            }
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitOnVisitor()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new AssertOnEverythingButConstructorInitializerVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConstructorInitializerNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConstructorInitializer();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDestructorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDestructorDeclaration(DestructorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new AssertOnEverythingButDestructorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDestructorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDestructorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPropertyDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPropertyDeclaration(PropertyDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitOnVisitor()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new AssertOnEverythingButPropertyDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPropertyDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePropertyDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButArrowExpressionClauseVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitArrowExpressionClause(ArrowExpressionClauseSyntax node)
            {
            }
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitOnVisitor()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new AssertOnEverythingButArrowExpressionClauseVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestArrowExpressionClauseNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateArrowExpressionClause();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEventDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEventDeclaration(EventDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestEventDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateEventDeclaration();
            var visitor = new AssertOnEverythingButEventDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEventDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEventDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIndexerDeclaration(IndexerDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new AssertOnEverythingButIndexerDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIndexerDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIndexerDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAccessorList(AccessorListSyntax node)
            {
            }
        }

        [Fact]
        public void TestAccessorListNodeVisitOnVisitor()
        {
            var node = GenerateAccessorList();
            var visitor = new AssertOnEverythingButAccessorListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAccessorListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAccessorList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButAccessorDeclarationVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitAccessorDeclaration(AccessorDeclarationSyntax node)
            {
            }
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitOnVisitor()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new AssertOnEverythingButAccessorDeclarationVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestAccessorDeclarationNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateAccessorDeclaration();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParameterList(ParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestParameterListNodeVisitOnVisitor()
        {
            var node = GenerateParameterList();
            var visitor = new AssertOnEverythingButParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBracketedParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBracketedParameterList(BracketedParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitOnVisitor()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new AssertOnEverythingButBracketedParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBracketedParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBracketedParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButParameterVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitParameter(ParameterSyntax node)
            {
            }
        }

        [Fact]
        public void TestParameterNodeVisitOnVisitor()
        {
            var node = GenerateParameter();
            var visitor = new AssertOnEverythingButParameterVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestParameterNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateParameter();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButFunctionPointerParameterVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitFunctionPointerParameter(FunctionPointerParameterSyntax node)
            {
            }
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitOnVisitor()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new AssertOnEverythingButFunctionPointerParameterVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestFunctionPointerParameterNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateFunctionPointerParameter();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIncompleteMemberVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIncompleteMember(IncompleteMemberSyntax node)
            {
            }
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitOnVisitor()
        {
            var node = GenerateIncompleteMember();
            var visitor = new AssertOnEverythingButIncompleteMemberVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIncompleteMemberNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIncompleteMember();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButSkippedTokensTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitOnVisitor()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new AssertOnEverythingButSkippedTokensTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestSkippedTokensTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateSkippedTokensTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDocumentationCommentTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitOnVisitor()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new AssertOnEverythingButDocumentationCommentTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDocumentationCommentTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDocumentationCommentTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButTypeCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitTypeCref(TypeCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestTypeCrefNodeVisitOnVisitor()
        {
            var node = GenerateTypeCref();
            var visitor = new AssertOnEverythingButTypeCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestTypeCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateTypeCref();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButQualifiedCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitQualifiedCref(QualifiedCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitOnVisitor()
        {
            var node = GenerateQualifiedCref();
            var visitor = new AssertOnEverythingButQualifiedCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestQualifiedCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateQualifiedCref();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNameMemberCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNameMemberCref(NameMemberCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitOnVisitor()
        {
            var node = GenerateNameMemberCref();
            var visitor = new AssertOnEverythingButNameMemberCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNameMemberCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNameMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIndexerMemberCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitOnVisitor()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new AssertOnEverythingButIndexerMemberCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIndexerMemberCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIndexerMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButOperatorMemberCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitOnVisitor()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new AssertOnEverythingButOperatorMemberCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateOperatorMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButConversionOperatorMemberCrefVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
            {
            }
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitOnVisitor()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new AssertOnEverythingButConversionOperatorMemberCrefVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestConversionOperatorMemberCrefNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateConversionOperatorMemberCref();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCrefParameterList(CrefParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestCrefParameterListNodeVisitOnVisitor()
        {
            var node = GenerateCrefParameterList();
            var visitor = new AssertOnEverythingButCrefParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCrefParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCrefParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefBracketedParameterListVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
            {
            }
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitOnVisitor()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new AssertOnEverythingButCrefBracketedParameterListVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCrefBracketedParameterListNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCrefBracketedParameterList();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButCrefParameterVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitCrefParameter(CrefParameterSyntax node)
            {
            }
        }

        [Fact]
        public void TestCrefParameterNodeVisitOnVisitor()
        {
            var node = GenerateCrefParameter();
            var visitor = new AssertOnEverythingButCrefParameterVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestCrefParameterNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateCrefParameter();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlElement(XmlElementSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlElementNodeVisitOnVisitor()
        {
            var node = GenerateXmlElement();
            var visitor = new AssertOnEverythingButXmlElementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlElementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlElement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementStartTagVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlElementStartTag(XmlElementStartTagSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitOnVisitor()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new AssertOnEverythingButXmlElementStartTagVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlElementStartTagNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlElementStartTag();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlElementEndTagVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlElementEndTag(XmlElementEndTagSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitOnVisitor()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new AssertOnEverythingButXmlElementEndTagVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlElementEndTagNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlElementEndTag();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlEmptyElementVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlEmptyElement(XmlEmptyElementSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitOnVisitor()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new AssertOnEverythingButXmlEmptyElementVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlEmptyElementNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlEmptyElement();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlName(XmlNameSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlNameNodeVisitOnVisitor()
        {
            var node = GenerateXmlName();
            var visitor = new AssertOnEverythingButXmlNameVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlNameNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlName();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlPrefixVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlPrefix(XmlPrefixSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlPrefixNodeVisitOnVisitor()
        {
            var node = GenerateXmlPrefix();
            var visitor = new AssertOnEverythingButXmlPrefixVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlPrefixNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlPrefix();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextAttributeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlTextAttribute(XmlTextAttributeSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitOnVisitor()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new AssertOnEverythingButXmlTextAttributeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlTextAttributeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlTextAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCrefAttributeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitOnVisitor()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new AssertOnEverythingButXmlCrefAttributeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlCrefAttributeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlCrefAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlNameAttributeVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlNameAttribute(XmlNameAttributeSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitOnVisitor()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new AssertOnEverythingButXmlNameAttributeVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlNameAttributeNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlNameAttribute();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlTextVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlText(XmlTextSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlTextNodeVisitOnVisitor()
        {
            var node = GenerateXmlText();
            var visitor = new AssertOnEverythingButXmlTextVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlTextNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlText();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCDataSectionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlCDataSection(XmlCDataSectionSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitOnVisitor()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new AssertOnEverythingButXmlCDataSectionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlCDataSectionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlCDataSection();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlProcessingInstructionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitOnVisitor()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new AssertOnEverythingButXmlProcessingInstructionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlProcessingInstructionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlProcessingInstruction();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButXmlCommentVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitXmlComment(XmlCommentSyntax node)
            {
            }
        }

        [Fact]
        public void TestXmlCommentNodeVisitOnVisitor()
        {
            var node = GenerateXmlComment();
            var visitor = new AssertOnEverythingButXmlCommentVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestXmlCommentNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateXmlComment();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButIfDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButIfDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateIfDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElifDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new AssertOnEverythingButElifDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElifDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElifDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButElseDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new AssertOnEverythingButElseDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestElseDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateElseDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndIfDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndIfDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEndIfDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEndIfDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButRegionDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButRegionDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateRegionDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new AssertOnEverythingButEndRegionDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestEndRegionDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateEndRegionDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButErrorDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new AssertOnEverythingButErrorDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestErrorDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateErrorDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButWarningDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButWarningDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateWarningDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButBadDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new AssertOnEverythingButBadDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestBadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateBadDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButDefineDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new AssertOnEverythingButDefineDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestDefineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateDefineDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButUndefDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new AssertOnEverythingButUndefDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestUndefDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateUndefDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLineDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLineDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineDirectivePositionVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLineDirectivePosition(LineDirectivePositionSyntax node)
            {
            }
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitOnVisitor()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new AssertOnEverythingButLineDirectivePositionVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLineDirectivePositionNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLineDirectivePosition();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLineSpanDirectiveTrivia(LineSpanDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new AssertOnEverythingButLineSpanDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLineSpanDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLineSpanDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaWarningDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPragmaWarningDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePragmaWarningDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new AssertOnEverythingButPragmaChecksumDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestPragmaChecksumDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GeneratePragmaChecksumDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButReferenceDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new AssertOnEverythingButReferenceDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestReferenceDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateReferenceDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButLoadDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new AssertOnEverythingButLoadDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestLoadDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateLoadDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButShebangDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new AssertOnEverythingButShebangDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestShebangDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateShebangDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }

        internal class AssertOnEverythingButNullableDirectiveTriviaVisitVisitor : AssertOnVisitVisitor
        {
            public override void VisitNullableDirectiveTrivia(NullableDirectiveTriviaSyntax node)
            {
            }
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitOnVisitor()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new AssertOnEverythingButNullableDirectiveTriviaVisitVisitor();
            visitor.Visit(node);
        }

        [Fact]
        public void TestNullableDirectiveTriviaNodeVisitCallsDefaultVisitOnVisitor()
        {
            var node = GenerateNullableDirectiveTrivia();
            var visitor = new RedVisitorTests.DefaultVisitor();
            visitor.Visit(node);
            Assert.True(visitor.DefaultVisitWasCalled);
        }
        #endregion Red Visitors
    }
}
