#nullable enable
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCompletionProviderBase.ShouldTriggerCompletionImpl(Microsoft.CodeAnalysis.Text.SourceText! text, int caretPosition, Microsoft.CodeAnalysis.Completion.CompletionTrigger trigger) -> bool
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCompletionServiceWithProviders.GetRulesImpl() -> Microsoft.CodeAnalysis.Completion.CompletionRules!
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.CanRename.get -> bool
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.DefinitionLocations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation>
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.ForceRenameOverloads.get -> bool
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.GetReferenceEditSpan(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation location, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.Text.TextSpan
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.Glyph.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.HasOverloads.get -> bool
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.TriggerSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementInfo.ReplacementTextValid.get -> bool
abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameServiceImplementation.GetRenameInfoAsync(Microsoft.CodeAnalysis.Document! document, int position, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo?>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Classification.FSharpClassificationTags
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Classification.IFSharpClassificationService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionItem
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionProvider
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionProviderBase
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionProviderBase.FSharpCommonCompletionProviderBase() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionUtilities
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCompletionProviderBase
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCompletionProviderBase.FSharpCompletionProviderBase() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCompletionServiceWithProviders
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCompletionServiceWithProviders.FSharpCompletionServiceWithProviders(Microsoft.CodeAnalysis.Workspace! workspace) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpFileSystemCompletionHelper
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.FSharpDiagnosticCustomTags
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.FSharpIDEDiagnosticIds
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpDiagnosticAnalyzerService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpDocumentDiagnosticAnalyzer
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpSimplifyNameDiagnosticAnalyzer
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpUnusedDeclarationsDiagnosticAnalyzer
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpUnusedOpensDiagnosticAnalyzer
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpDocumentHighlights
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpDocumentHighlights.FSharpDocumentHighlights() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpDocumentHighlights.HighlightSpans.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpan>
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpan.FSharpHighlightSpan() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpan.FSharpHighlightSpan(Microsoft.CodeAnalysis.Text.TextSpan textSpan, Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind kind) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpan.Kind.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpan.TextSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind.Definition = 1 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind.None = 0 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind.Reference = 2 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind.WrittenReference = 3 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpanKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.IFSharpDocumentHighlightsService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.AutoFormattingOptionsWrapper
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.AutoFormattingOptionsWrapper.AutoFormattingOptionsWrapper() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.AutoFormattingOptionsWrapper.AutoFormattingOptionsWrapper(Microsoft.CodeAnalysis.Formatting.AutoFormattingOptions underlyingObject, Microsoft.CodeAnalysis.Formatting.FormattingOptions2.IndentStyle indentStyle) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.AutoFormattingOptionsWrapper.IndentStyle.get -> Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesContext
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpBraceMatchingResult
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpBraceMatchingResult.FSharpBraceMatchingResult() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpBraceMatchingResult.FSharpBraceMatchingResult(Microsoft.CodeAnalysis.Text.TextSpan leftSpan, Microsoft.CodeAnalysis.Text.TextSpan rightSpan) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpBraceMatchingResult.LeftSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpBraceMatchingResult.RightSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpContentTypeNames
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.Deconstruct(out int TabSize, out Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle IndentStyle) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.Equals(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions other) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.FSharpIndentationOptions() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.FSharpIndentationOptions(int TabSize, Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle IndentStyle) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.IndentStyle.get -> Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.IndentStyle.init -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.TabSize.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.TabSize.init -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationResult
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationResult.BasePosition.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationResult.FSharpIndentationResult() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationResult.FSharpIndentationResult(int basePosition, int offset) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationResult.Offset.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.FSharpInlineRenameInfo() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.GetFileRenameInfo() -> Microsoft.CodeAnalysis.Editor.InlineRenameFileRenameInfo
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation.FSharpInlineRenameLocation() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation.TextSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocationSet
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocationSet.FSharpInlineRenameLocationSet() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacement
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacement.FSharpInlineRenameReplacement() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacement.FSharpInlineRenameReplacement(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind kind, Microsoft.CodeAnalysis.Text.TextSpan originalSpan, Microsoft.CodeAnalysis.Text.TextSpan newSpan) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacement.Kind.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacement.NewSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacement.OriginalSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementInfo
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementInfo.FSharpInlineRenameReplacementInfo() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind.Complexified = 4 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind.NoConflict = 0 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind.ResolvedNonReferenceConflict = 2 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind.ResolvedReferenceConflict = 1 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind.UnresolvedConflict = 3 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameServiceImplementation
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameServiceImplementation.FSharpInlineRenameServiceImplementation() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.Bolded.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.Glyph.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.Grayed.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.Indent.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpBraceMatcher
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService.GetFormattingChangesAsync(Microsoft.CodeAnalysis.Document! document, char typedChar, int position, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextChange>?>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService.GetFormattingChangesAsync(Microsoft.CodeAnalysis.Document! document, Microsoft.CodeAnalysis.Text.TextSpan? textSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextChange>!>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService.GetFormattingChangesOnPasteAsync(Microsoft.CodeAnalysis.Document! document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextChange>!>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService.GetFormattingChangesOnReturnAsync(Microsoft.CodeAnalysis.Document! document, int position, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextChange>?>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService.SupportsFormatDocument.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService.SupportsFormatOnPaste.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService.SupportsFormatOnReturn.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService.SupportsFormatSelection.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingService.SupportsFormattingOnTypedCharacter(Microsoft.CodeAnalysis.Document! document, char ch) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingServiceWithOptions
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorFormattingServiceWithOptions.SupportsFormattingOnTypedCharacter(Microsoft.CodeAnalysis.Document! document, Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.AutoFormattingOptionsWrapper options, char ch) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorInlineRenameService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpGoToDefinitionService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpIndentationService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpIndentationService.GetDesiredIndentation(Microsoft.CodeAnalysis.Host.HostLanguageServices! services, Microsoft.CodeAnalysis.Text.SourceText! text, Microsoft.CodeAnalysis.DocumentId! documentId, string! path, int lineNumber, Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions options) -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationResult?
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.CanRename.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.ForceRenameOverloads.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.GetReferenceEditSpan(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation location, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.Glyph.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.HasOverloads.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.TriggerSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameLocationSet
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameReplacementInfo
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameReplacementInfo.ReplacementTextValid.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpNavigationBarItemService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpSynchronousIndentationService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpSynchronousIndentationService.GetDesiredIndentation(Microsoft.CodeAnalysis.Document! document, int lineNumber, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationResult?
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult.Document.get -> Microsoft.CodeAnalysis.Document!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult.IsLineBreakpoint.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult.LocationNameOpt.get -> string?
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult.TextSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugDataTipInfo
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugDataTipInfo.FSharpDebugDataTipInfo() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugDataTipInfo.FSharpDebugDataTipInfo(Microsoft.CodeAnalysis.Text.TextSpan span, string! text) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugDataTipInfo.IsDefault.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugDataTipInfo.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugDataTipInfo.Text.get -> string!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugLocationInfo
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugLocationInfo.FSharpDebugLocationInfo() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugLocationInfo.FSharpDebugLocationInfo(string! name, int lineOffset) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugLocationInfo.IsDefault.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugLocationInfo.LineOffset.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugLocationInfo.Name.get -> string!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.IFSharpBreakpointResolutionService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.IFSharpBreakpointResolutionService.ResolveBreakpointAsync(Microsoft.CodeAnalysis.Document! document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult?>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.IFSharpBreakpointResolutionService.ResolveBreakpointsAsync(Microsoft.CodeAnalysis.Solution! solution, string! name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult!>!>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.IFSharpLanguageDebugInfoService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.IFSharpLanguageDebugInfoService.GetDataTipInfoAsync(Microsoft.CodeAnalysis.Document! document, int position, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugDataTipInfo>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.IFSharpLanguageDebugInfoService.GetLocationInfoAsync(Microsoft.CodeAnalysis.Document! document, int position, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugLocationInfo>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Shared.Extensions.FSharpDependencyObjectExtensions
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Shared.Utilities.FSharpClassificationTypeMap
Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources
Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.ExternalAccessFSharpResources() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpDefinitionItem
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpSourceReferenceItem
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.Equals(Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan obj) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.FSharpDocumentSpan() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.SourceSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.ToRoslynDocumentSpan() -> Microsoft.CodeAnalysis.DocumentSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpEditorFeaturesResources
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlobalOptions
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlobalOptions.BlockForCompletionItems.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlobalOptions.BlockForCompletionItems.set -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlobalOptions.FSharpGlobalOptions(Microsoft.CodeAnalysis.Options.IGlobalOptionService! globalOptions) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlobalOptions.SetBackgroundAnalysisScope(bool openFilesOnly) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.AddReference = 73 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Assembly = 1 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.BasicFile = 2 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.BasicProject = 3 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ClassInternal = 7 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ClassPrivate = 6 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ClassProtected = 5 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ClassPublic = 4 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.CompletionWarning = 72 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ConstantInternal = 13 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ConstantPrivate = 12 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ConstantProtected = 11 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ConstantPublic = 10 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.CSharpFile = 8 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.CSharpProject = 9 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.DelegateInternal = 17 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.DelegatePrivate = 16 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.DelegateProtected = 15 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.DelegatePublic = 14 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EnumInternal = 21 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EnumMemberInternal = 25 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EnumMemberPrivate = 24 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EnumMemberProtected = 23 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EnumMemberPublic = 22 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EnumPrivate = 20 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EnumProtected = 19 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EnumPublic = 18 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Error = 26 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EventInternal = 31 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EventPrivate = 30 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EventProtected = 29 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.EventPublic = 28 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ExtensionMethodInternal = 35 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ExtensionMethodPrivate = 34 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ExtensionMethodProtected = 33 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ExtensionMethodPublic = 32 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.FieldInternal = 39 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.FieldPrivate = 38 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.FieldProtected = 37 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.FieldPublic = 36 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.InterfaceInternal = 43 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.InterfacePrivate = 42 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.InterfaceProtected = 41 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.InterfacePublic = 40 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Intrinsic = 44 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Keyword = 45 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Label = 46 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Local = 47 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.MethodInternal = 52 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.MethodPrivate = 51 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.MethodProtected = 50 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.MethodPublic = 49 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ModuleInternal = 56 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ModulePrivate = 55 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ModuleProtected = 54 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.ModulePublic = 53 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Namespace = 48 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.None = 0 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.NuGet = 74 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.OpenFolder = 57 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Operator = 58 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Parameter = 59 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.PropertyInternal = 63 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.PropertyPrivate = 62 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.PropertyProtected = 61 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.PropertyPublic = 60 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.RangeVariable = 64 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Reference = 65 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.Snippet = 71 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.StatusInformation = 27 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.StructureInternal = 69 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.StructurePrivate = 68 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.StructureProtected = 67 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.StructurePublic = 66 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.TargetTypeMatch = 75 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph.TypeParameter = 70 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyphTags
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.AddMetadataReference(string! referencePath) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.AddSourceFile(string! path, Microsoft.CodeAnalysis.SourceCodeKind kind) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.BinOutputPath.get -> string!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.BinOutputPath.set -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.BuildErrorReporter.get -> Microsoft.VisualStudio.Shell.Interop.IVsLanguageServiceBuildErrorReporter2?
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.DisplayName.get -> string!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.DisplayName.set -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.Dispose() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.FilePath.get -> string!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.FSharpWorkspaceProjectContext(Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContext! vsProjectContext) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.HasMetadataReference(string! referencePath) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.HasProjectReference(string! filePath) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.Id.get -> Microsoft.CodeAnalysis.ProjectId!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.MetadataReferenceCount.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.ProjectReferenceCount.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.RemoveMetadataReference(string! referencePath) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.RemoveSourceFile(string! path) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.SetMetadataReferences(System.Collections.Generic.IEnumerable<string!>! referencePaths) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext.SetProjectReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext!>! projRefs) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContextFactory
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContextFactory.CreateProjectContext(string! filePath, string! uniqueName) -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContextFactory.CreateProjectContext(string! projectUniqueName, string! projectFilePath, System.Guid projectGuid, object? hierarchy, string? binOutputPath) -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContext!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpWorkspaceProjectContextFactory.FSharpWorkspaceProjectContextFactory(Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContextFactory! factory, Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext! threadingContext) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.GoToDefinition.IFSharpFindDefinitionService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.GoToDefinition.IFSharpFindDefinitionService.FindDefinitionsAsync(Microsoft.CodeAnalysis.Document! document, int position, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem!>>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.AddMetadataReference(string! referencePath) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.AddSourceFile(string! path, Microsoft.CodeAnalysis.SourceCodeKind kind) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.DisplayName.get -> string!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.DisplayName.set -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.FilePath.get -> string!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.HasMetadataReference(string! referencePath) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.HasProjectReference(string! filePath) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.Id.get -> Microsoft.CodeAnalysis.ProjectId!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.MetadataReferenceCount.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.ProjectReferenceCount.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.SetMetadataReferences(System.Collections.Generic.IEnumerable<string!>! referencePaths) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext.SetProjectReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext!>! projRefs) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContextFactory
Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContextFactory.CreateProjectContext(string! filePath, string! uniqueName) -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.IFSharpWorkspaceProjectContext!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.InlineHints.FSharpInlineHint
Microsoft.CodeAnalysis.ExternalAccess.FSharp.InlineHints.FSharpInlineHint.FSharpInlineHint() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.InlineHints.FSharpInlineHint.FSharpInlineHint(Microsoft.CodeAnalysis.Text.TextSpan span, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText> displayParts, System.Func<Microsoft.CodeAnalysis.Document!, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText>>!>? getDescriptionAsync = null) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.InlineHints.FSharpInlineHint.GetDescriptionAsync(Microsoft.CodeAnalysis.Document! document, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText>>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.InlineHints.IFSharpInlineHintsService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.InlineHints.IFSharpInlineHintsService.GetInlineHintsAsync(Microsoft.CodeAnalysis.Document! document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.InlineHints.FSharpInlineHint>>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.LanguageServices.FSharpVisualStudioWorkspaceExtensions
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.CamelCaseExact = 5 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.CamelCaseNonContiguousPrefix = 7 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.CamelCaseNonContiguousSubstring = 9 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.CamelCasePrefix = 6 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.CamelCaseSubstring = 8 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.Exact = 0 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.Fuzzy = 10 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.None = 4 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.Prefix = 1 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.Regular = 3 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind.Substring = 2 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToSearchResult
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToSearchResult.MatchKind.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.IFSharpNavigateToSearchService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.IFSharpNavigateToSearchService.CanFilter.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.IFSharpNavigateToSearchService.KindsProvided.get -> System.Collections.Immutable.IImmutableSet<string!>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.IFSharpNavigateToSearchService.SearchDocumentAsync(Microsoft.CodeAnalysis.Document! document, string! searchPattern, System.Collections.Immutable.IImmutableSet<string!>! kinds, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToSearchResult!>>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.IFSharpNavigateToSearchService.SearchProjectAsync(Microsoft.CodeAnalysis.Project! project, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Document!> priorityDocuments, string! searchPattern, System.Collections.Immutable.IImmutableSet<string!>! kinds, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToSearchResult!>>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem.DisplayTaggedParts.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText>
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem.Glyph.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem.SourceSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.<Clone>$() -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.ActivateTab.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.ActivateTab.init -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.Deconstruct(out bool PreferProvisionalTab, out bool ActivateTab) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.Equals(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2? other) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.FSharpNavigationOptions2(bool PreferProvisionalTab, bool ActivateTab) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.PreferProvisionalTab.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.PreferProvisionalTab.init -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpCrossLanguageSymbolNavigationService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpCrossLanguageSymbolNavigationService.TryGetNavigableLocationAsync(string! assemblyName, string! documentationCommentId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpNavigableLocation?>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpNavigableLocation
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpNavigableLocation.NavigateToAsync(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2! options, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.DescriptionParts.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText>
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.DescriptionParts.set -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.IsVariadic.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.PrefixDisplayParts.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText>
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.SeparatorDisplayParts.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText>
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.SuffixDisplayParts.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText>
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItems
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItems.ApplicableSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItems.ArgumentCount.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItems.ArgumentIndex.get -> int
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItems.SelectedItemIndex.get -> int?
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.IsOptional.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerInfo
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerInfo.FSharpSignatureHelpTriggerInfo() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerInfo.FSharpSignatureHelpTriggerInfo(Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerReason triggerReason, char? triggerCharacter = null) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerInfo.TriggerCharacter.get -> char?
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerInfo.TriggerReason.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerReason
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerReason
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerReason.InvokeSignatureHelpCommand = 0 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerReason
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerReason.RetriggerCommand = 2 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerReason
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerReason.TypeCharCommand = 1 -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerReason
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.IFSharpSignatureHelpProvider
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.IFSharpSignatureHelpProvider.IsRetriggerCharacter(char ch) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.IFSharpSignatureHelpProvider.IsTriggerCharacter(char ch) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.AutoCollapse.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.FSharpBlockSpan() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.HintSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.IsCollapsible.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.IsDefaultCollapsed.get -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.TextSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockStructure
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockStructure.FSharpBlockStructure(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan> spans) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockStructure.Spans.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan>
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes
Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.IFSharpBlockStructureService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListDescriptor
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListDescriptor.FSharpTaskListDescriptor() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListDescriptor.FSharpTaskListDescriptor(Microsoft.CodeAnalysis.TaskList.TaskListItemDescriptor descriptor) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListDescriptor.Text.get -> string!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.Deconstruct(out Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListDescriptor TaskDescriptor, out string! Message, out Microsoft.CodeAnalysis.Document! Document, out Microsoft.CodeAnalysis.Text.TextSpan Span) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.Document.get -> Microsoft.CodeAnalysis.Document!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.Document.init -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.Equals(Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem other) -> bool
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.FSharpTaskListItem() -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.FSharpTaskListItem(Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListDescriptor TaskDescriptor, string! Message, Microsoft.CodeAnalysis.Document! Document, Microsoft.CodeAnalysis.Text.TextSpan Span) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.Message.get -> string!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.Message.init -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.Span.get -> Microsoft.CodeAnalysis.Text.TextSpan
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.Span.init -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.TaskDescriptor.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListDescriptor
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.TaskDescriptor.init -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListService.FSharpTaskListService(Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.IFSharpTaskListService! impl) -> void
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListService.GetTaskListItemsAsync(Microsoft.CodeAnalysis.Document! document, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaskList.TaskListItemDescriptor> descriptors, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaskList.TaskListItem>>!
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.IFSharpTaskListService
Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.IFSharpTaskListService.GetTaskListItemsAsync(Microsoft.CodeAnalysis.Document! document, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListDescriptor> descriptors, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem>>!
override Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.GetHashCode() -> int
override Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.GetHashCode() -> int
override Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.Equals(object? obj) -> bool
override Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.GetHashCode() -> int
override Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.ToString() -> string!
override Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.GetHashCode() -> int
override sealed Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCompletionProviderBase.ShouldTriggerCompletion(Microsoft.CodeAnalysis.Host.LanguageServices! languageServices, Microsoft.CodeAnalysis.Text.SourceText! text, int caretPosition, Microsoft.CodeAnalysis.Completion.CompletionTrigger trigger, Microsoft.CodeAnalysis.Completion.CompletionOptions! options, Microsoft.CodeAnalysis.Options.OptionSet! passthroughOptions) -> bool
override sealed Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCompletionProviderBase.ShouldTriggerCompletion(Microsoft.CodeAnalysis.Text.SourceText! text, int caretPosition, Microsoft.CodeAnalysis.Completion.CompletionTrigger trigger, Microsoft.CodeAnalysis.Options.OptionSet! options) -> bool
override sealed Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCompletionServiceWithProviders.GetRules(Microsoft.CodeAnalysis.Completion.CompletionOptions! options) -> Microsoft.CodeAnalysis.Completion.CompletionRules!
readonly Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.AutoFormattingOptionsWrapper.UnderlyingObject -> Microsoft.CodeAnalysis.Formatting.AutoFormattingOptions
readonly Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult.UnderlyingObject -> Microsoft.CodeAnalysis.Debugging.BreakpointResolutionResult!
readonly Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugDataTipInfo.UnderlyingObject -> Microsoft.CodeAnalysis.Debugging.DebugDataTipInfo
readonly Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpDebugLocationInfo.UnderlyingObject -> Microsoft.CodeAnalysis.Debugging.DebugLocationInfo
readonly Microsoft.CodeAnalysis.ExternalAccess.FSharp.InlineHints.FSharpInlineHint.DisplayParts -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText>
readonly Microsoft.CodeAnalysis.ExternalAccess.FSharp.InlineHints.FSharpInlineHint.Span -> Microsoft.CodeAnalysis.Text.TextSpan
readonly Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListDescriptor.Descriptor -> Microsoft.CodeAnalysis.TaskList.TaskListItemDescriptor
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.operator !=(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions left, Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions right) -> bool
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.operator ==(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions left, Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions right) -> bool
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult.CreateLineResult(Microsoft.CodeAnalysis.Document! document, string? locationNameOpt = null) -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult!
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult.CreateSpanResult(Microsoft.CodeAnalysis.Document! document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, string? locationNameOpt = null) -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Implementation.Debugging.FSharpBreakpointResolutionResult!
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.operator !=(Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan d1, Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan d2) -> bool
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.operator ==(Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan d1, Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan d2) -> bool
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.LanguageServices.FSharpVisualStudioWorkspaceExtensions.GetMetadata(this Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace! workspace, string! fullPath, System.DateTime snapshotTimestamp) -> Microsoft.CodeAnalysis.Metadata!
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.LanguageServices.FSharpVisualStudioWorkspaceExtensions.GetOrCreateProjectIdForPath(this Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace! workspace, string! filePath, string! projectDisplayName) -> Microsoft.CodeAnalysis.ProjectId!
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.LanguageServices.FSharpVisualStudioWorkspaceExtensions.GetProjectFilePath(this Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace! workspace, Microsoft.CodeAnalysis.ProjectId! projectId) -> string?
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.LanguageServices.FSharpVisualStudioWorkspaceExtensions.TryGetProjectIdByBinPath(this Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace! workspace, string! filePath, out Microsoft.CodeAnalysis.ProjectId? projectId) -> bool
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.operator !=(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2? left, Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2? right) -> bool
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2.operator ==(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2? left, Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions2? right) -> bool
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.operator !=(Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem left, Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem right) -> bool
static Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.operator ==(Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem left, Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem right) -> bool
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionProviderBase.GetTextChangeAsync(System.Func<Microsoft.CodeAnalysis.Completion.CompletionItem, char?, System.Threading.CancellationToken, System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Text.TextChange?>> baseGetTextChangeAsync, Microsoft.CodeAnalysis.Completion.CompletionItem selectedItem, char? ch, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Text.TextChange?>
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionProviderBase.IsInsertionTrigger(Microsoft.CodeAnalysis.Text.SourceText text, int insertedCharacterPosition) -> bool
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionProviderBase.ProvideCompletionsAsync(Microsoft.CodeAnalysis.Completion.CompletionContext context) -> System.Threading.Tasks.Task
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.DisplayName.get -> string
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.FindRenameLocationsAsync(bool renameInStrings, bool renameInComments, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocationSet>
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.FullDisplayName.get -> string
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.GetConflictEditSpan(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation location, string replacementText, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.Text.TextSpan?
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.GetFinalSymbolName(string replacementText) -> string
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameInfo.LocalizedErrorMessage.get -> string
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocationSet.GetReplacementsAsync(string replacementText, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementInfo>
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocationSet.Locations.get -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation>
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementInfo.DocumentIds.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentId>
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementInfo.GetReplacements(Microsoft.CodeAnalysis.DocumentId documentId) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacement>
~abstract Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacementInfo.NewSolution.get -> Microsoft.CodeAnalysis.Solution
~const Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpContentTypeNames.FSharpContentType = "F#" -> string
~const Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpContentTypeNames.FSharpSignatureHelpContentType = "F# Signature Help" -> string
~const Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpContentTypeNames.RoslynContentType = "Roslyn Languages" -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Classification.IFSharpClassificationService.AddLexicalClassifications(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Collections.Generic.List<Microsoft.CodeAnalysis.Classification.ClassifiedSpan> result, System.Threading.CancellationToken cancellationToken) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Classification.IFSharpClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Collections.Generic.List<Microsoft.CodeAnalysis.Classification.ClassifiedSpan> result, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Classification.IFSharpClassificationService.AddSyntacticClassificationsAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Collections.Generic.List<Microsoft.CodeAnalysis.Classification.ClassifiedSpan> result, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Classification.IFSharpClassificationService.AdjustStaleClassification(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.Classification.ClassifiedSpan classifiedSpan) -> Microsoft.CodeAnalysis.Classification.ClassifiedSpan
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpFileSystemCompletionHelper.FSharpFileSystemCompletionHelper(Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph folderGlyph, Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph fileGlyph, System.Collections.Immutable.ImmutableArray<string> searchPaths, string baseDirectoryOpt, System.Collections.Immutable.ImmutableArray<string> allowableExtensions, Microsoft.CodeAnalysis.Completion.CompletionItemRules itemRules) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpFileSystemCompletionHelper.GetItemsAsync(string directoryPath, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Completion.CompletionItem>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpDiagnosticAnalyzerService.Reanalyze(Microsoft.CodeAnalysis.Workspace workspace, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ProjectId> projectIds = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentId> documentIds = null, bool highPriority = false) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpDocumentDiagnosticAnalyzer.AnalyzeSemanticsAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpDocumentDiagnosticAnalyzer.AnalyzeSyntaxAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpSimplifyNameDiagnosticAnalyzer.AnalyzeSemanticsAsync(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpUnusedDeclarationsDiagnosticAnalyzer.AnalyzeSemanticsAsync(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.IFSharpUnusedOpensDiagnosticAnalyzer.AnalyzeSemanticsAsync(Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpDocumentHighlights.Document.get -> Microsoft.CodeAnalysis.Document
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpDocumentHighlights.FSharpDocumentHighlights(Microsoft.CodeAnalysis.Document document, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpHighlightSpan> highlightSpans) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.IFSharpDocumentHighlightsService.GetDocumentHighlightsAsync(Microsoft.CodeAnalysis.Document document, int position, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Document> documentsToSearch, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.DocumentHighlighting.FSharpDocumentHighlights>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesContext.OnDefinitionFoundAsync(Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpDefinitionItem definition) -> System.Threading.Tasks.Task
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesContext.OnReferenceFoundAsync(Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpSourceReferenceItem reference) -> System.Threading.Tasks.Task
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesContext.ReportMessageAsync(string message) -> System.Threading.Tasks.Task
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesContext.ReportProgressAsync(int current, int maximum) -> System.Threading.Tasks.Task
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesContext.SetSearchTitleAsync(string title) -> System.Threading.Tasks.Task
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesService.FindImplementationsAsync(Microsoft.CodeAnalysis.Document document, int position, Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesContext context) -> System.Threading.Tasks.Task
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesService.FindReferencesAsync(Microsoft.CodeAnalysis.Document document, int position, Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages.IFSharpFindUsagesContext context) -> System.Threading.Tasks.Task
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation.Document.get -> Microsoft.CodeAnalysis.Document
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation.FSharpInlineRenameLocation(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.ChildItems.get -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.FSharpNavigationBarItem(string text, Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph glyph, System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextSpan> spans, System.Collections.Generic.IList<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem> childItems = null, int indent = 0, bool bolded = false, bool grayed = false) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.Spans.get -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextSpan>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.Spans.set -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.Text.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.TrackingSpans.get -> System.Collections.Generic.IList<Microsoft.VisualStudio.Text.ITrackingSpan>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem.TrackingSpans.set -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpBraceMatcher.FindBracesAsync(Microsoft.CodeAnalysis.Document document, int position, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpBraceMatchingResult?>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpEditorInlineRenameService.GetRenameInfoAsync(Microsoft.CodeAnalysis.Document document, int position, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpGoToDefinitionService.FindDefinitionsAsync(Microsoft.CodeAnalysis.Document document, int position, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpGoToDefinitionService.TryGoToDefinition(Microsoft.CodeAnalysis.Document document, int position, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.DisplayName.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.FindRenameLocationsAsync(Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameLocationSet>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.FullDisplayName.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.GetConflictEditSpan(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation location, string replacementText, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.Text.TextSpan?
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.GetFinalSymbolName(string replacementText) -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.LocalizedErrorMessage.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.TryOnAfterGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace workspace, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentId> changedDocumentIDs, string replacementText) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameInfo.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace workspace, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentId> changedDocumentIDs, string replacementText) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameLocationSet.GetReplacementsAsync(string replacementText, Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameReplacementInfo>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameLocationSet.Locations.get -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameLocation>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameReplacementInfo.DocumentIds.get -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentId>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameReplacementInfo.GetReplacements(Microsoft.CodeAnalysis.DocumentId documentId) -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpInlineRenameReplacement>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpInlineRenameReplacementInfo.NewSolution.get -> Microsoft.CodeAnalysis.Solution
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.IFSharpNavigationBarItemService.GetItemsAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpNavigationBarItem>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Shared.Utilities.FSharpClassificationTypeMap.FSharpClassificationTypeMap(Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService registryService) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Shared.Utilities.FSharpClassificationTypeMap.GetClassificationType(string name) -> Microsoft.VisualStudio.Text.Classification.IClassificationType
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpDefinitionItem.RoslynDefinitionItem.get -> Microsoft.CodeAnalysis.FindUsages.DefinitionItem
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpSourceReferenceItem.FSharpSourceReferenceItem(Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpDefinitionItem definition, Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan sourceSpan) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpSourceReferenceItem.RoslynSourceReferenceItem.get -> Microsoft.CodeAnalysis.FindUsages.SourceReferenceItem
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.Document.get -> Microsoft.CodeAnalysis.Document
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.FSharpDocumentSpan(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan sourceSpan) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.FSharpDocumentSpan(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan sourceSpan, System.Collections.Immutable.ImmutableDictionary<string, object> properties) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.Properties.get -> System.Collections.Immutable.ImmutableDictionary<string, object>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToSearchResult.AdditionalInformation.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToSearchResult.FSharpNavigateToSearchResult(string additionalInformation, string kind, Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToMatchKind matchKind, string name, Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem navigateItem) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToSearchResult.Kind.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToSearchResult.Name.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToSearchResult.NavigableItem.get -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.CanNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int lineNumber, int offset) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.CanNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int lineNumber, int offset, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.CanNavigateToPosition(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int position, int virtualSpace) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.CanNavigateToPosition(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int position, int virtualSpace, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.CanNavigateToSpan(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.TextSpan textSpan) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.CanNavigateToSpan(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.FSharpDocumentNavigationService(Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext threadingContext) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.TryNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int lineNumber, int offset, Microsoft.CodeAnalysis.Options.OptionSet options) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.TryNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int lineNumber, int offset, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.TryNavigateToPosition(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int position, int virtualSpace, Microsoft.CodeAnalysis.Options.OptionSet options) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.TryNavigateToPosition(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int position, int virtualSpace, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.TryNavigateToSpan(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.TextSpan textSpan, Microsoft.CodeAnalysis.Options.OptionSet options) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpDocumentNavigationService.TryNavigateToSpan(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem.Document.get -> Microsoft.CodeAnalysis.Document
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigableItem.FSharpNavigableItem(Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph glyph, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText> displayTaggedParts, Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan sourceSpan) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.CanNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int lineNumber, int offset) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.CanNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int lineNumber, int offset, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.CanNavigateToPosition(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int position, int virtualSpace = 0) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.CanNavigateToPosition(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int position, int virtualSpace, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.CanNavigateToSpan(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.TextSpan textSpan) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.CanNavigateToSpan(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.TryNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int lineNumber, int offset, Microsoft.CodeAnalysis.Options.OptionSet options = null) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.TryNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int lineNumber, int offset, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.TryNavigateToPosition(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int position, int virtualSpace = 0, Microsoft.CodeAnalysis.Options.OptionSet options = null) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.TryNavigateToPosition(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, int position, int virtualSpace, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.TryNavigateToSpan(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.TextSpan textSpan, Microsoft.CodeAnalysis.Options.OptionSet options = null) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.IFSharpDocumentNavigationService.TryNavigateToSpan(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) -> bool
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.DocumentationFactory.get -> System.Func<System.Threading.CancellationToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.FSharpSignatureHelpItem(bool isVariadic, System.Func<System.Threading.CancellationToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText>> documentationFactory, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText> prefixParts, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText> separatorParts, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText> suffixParts, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter> parameters, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText> descriptionParts) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.GetAllParts() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.Parameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItems.ArgumentName.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItems.FSharpSignatureHelpItems(System.Collections.Generic.IList<Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem> items, Microsoft.CodeAnalysis.Text.TextSpan applicableSpan, int argumentIndex, int argumentCount, string argumentName, int? selectedItem = null) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItems.Items.get -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.DisplayParts.get -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.TaggedText>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.DocumentationFactory.get -> System.Func<System.Threading.CancellationToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText>>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.FSharpSignatureHelpParameter(string name, bool isOptional, System.Func<System.Threading.CancellationToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText>> documentationFactory, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText> displayParts, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText> prefixDisplayParts = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText> suffixDisplayParts = null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText> selectedDisplayParts = null) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.GetAllParts() -> System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.TaggedText>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.Name.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.PrefixDisplayParts.get -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.TaggedText>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.SelectedDisplayParts.get -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.TaggedText>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.SuffixDisplayParts.get -> System.Collections.Generic.IList<Microsoft.CodeAnalysis.TaggedText>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.IFSharpSignatureHelpProvider.GetItemsAsync(Microsoft.CodeAnalysis.Document document, int position, Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpTriggerInfo triggerInfo, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItems>
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.BannerText.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.FSharpBlockSpan(string type, bool isCollapsible, Microsoft.CodeAnalysis.Text.TextSpan textSpan, Microsoft.CodeAnalysis.Text.TextSpan hintSpan, string bannerText = "...", bool autoCollapse = false, bool isDefaultCollapsed = false) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.FSharpBlockSpan(string type, bool isCollapsible, Microsoft.CodeAnalysis.Text.TextSpan textSpan, string bannerText = "...", bool autoCollapse = false, bool isDefaultCollapsed = false) -> void
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.Type.get -> string
~Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.IFSharpBlockStructureService.GetBlockStructureAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockStructure>
~override Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.Equals(object obj) -> bool
~override Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FSharpIndentationOptions.ToString() -> string
~override Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan.Equals(object obj) -> bool
~override Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpItem.ToString() -> string
~override Microsoft.CodeAnalysis.ExternalAccess.FSharp.SignatureHelp.FSharpSignatureHelpParameter.ToString() -> string
~override Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockSpan.ToString() -> string
~override Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.Equals(object obj) -> bool
~override Microsoft.CodeAnalysis.ExternalAccess.FSharp.TaskList.FSharpTaskListItem.ToString() -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Classification.FSharpClassificationTags.GetClassificationTypeName(string textTag) -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionItem.Create(string displayText, string displayTextSuffix, Microsoft.CodeAnalysis.Completion.CompletionItemRules rules, Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph? glyph = null, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SymbolDisplayPart> description = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SymbolDisplayPart>), string sortText = null, string filterText = null, bool showsWarningIcon = false, System.Collections.Immutable.ImmutableDictionary<string, string> properties = null, System.Collections.Immutable.ImmutableArray<string> tags = default(System.Collections.Immutable.ImmutableArray<string>), string inlineDescription = null) -> Microsoft.CodeAnalysis.Completion.CompletionItem
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionProvider.Create(Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionProviderBase fsharpCommonCompletionProvider) -> Microsoft.CodeAnalysis.Completion.CompletionProvider
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Completion.FSharpCommonCompletionUtilities.IsStartingNewWord(Microsoft.CodeAnalysis.Text.SourceText text, int characterPosition, System.Func<char, bool> isWordStartCharacter, System.Func<char, bool> isWordCharacter) -> bool
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.FSharpDiagnosticCustomTags.EditAndContinue.get -> string[]
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.FSharpDiagnosticCustomTags.Microsoft.get -> string[]
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.FSharpDiagnosticCustomTags.Unnecessary.get -> string[]
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.FSharpIDEDiagnosticIds.RemoveUnnecessaryImportsDiagnosticId.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Diagnostics.FSharpIDEDiagnosticIds.SimplifyNamesDiagnosticId.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Shared.Extensions.FSharpDependencyObjectExtensions.SetDefaultTextProperties(this System.Windows.DependencyObject dependencyObject, Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap formatMap) -> void
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.Shared.Extensions.FSharpDependencyObjectExtensions.SetTextProperties(this System.Windows.DependencyObject dependencyObject, Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties textProperties) -> void
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.CannotDetermineSymbol.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.CannotNavigateUnknown.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.Culture.get -> System.Globalization.CultureInfo
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.Culture.set -> void
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.FSharpDisposablesClassificationType.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.FSharpFunctionsOrMethodsClassificationType.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.FSharpMutableVarsClassificationType.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.FSharpPrintfFormatClassificationType.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.FSharpPropertiesClassificationType.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.ImplementInterface.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.ImplementInterfaceWithoutTypeAnnotation.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.LocatingSymbol.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.NameCanBeSimplified.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.NavigateToFailed.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.NavigatingTo.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.RemoveUnusedOpens.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.ResourceManager.get -> System.Resources.ResourceManager
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.SimplifyName.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.TheValueIsUnused.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.ExternalAccessFSharpResources.UnusedOpens.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpDefinitionItem.Create(System.Collections.Immutable.ImmutableArray<string> tags, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText> displayParts, Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpDocumentSpan sourceSpan) -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpDefinitionItem
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpDefinitionItem.CreateNonNavigableItem(System.Collections.Immutable.ImmutableArray<string> tags, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText> displayParts, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.TaggedText> originationParts) -> Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages.FSharpDefinitionItem
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpEditorFeaturesResources.You_cannot_rename_this_element.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyphTags.GetTags(Microsoft.CodeAnalysis.ExternalAccess.FSharp.FSharpGlyph glyph) -> System.Collections.Immutable.ImmutableArray<string>
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Class.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Constant.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Delegate.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Enum.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.EnumItem.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Event.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Field.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.File -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Interface.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Line.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Method.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Module.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.OtherSymbol.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Property.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.NavigateTo.FSharpNavigateToItemKind.Structure.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Navigation.FSharpNavigationOptions.PreferProvisionalTab.get -> Microsoft.CodeAnalysis.Options.Option<bool>
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Comment.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Conditional.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Expression.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Imports.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Loop.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Member.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Namespace.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Nonstructural.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.PreprocessorRegion.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Statement.get -> string
~static Microsoft.CodeAnalysis.ExternalAccess.FSharp.Structure.FSharpBlockTypes.Type.get -> string
