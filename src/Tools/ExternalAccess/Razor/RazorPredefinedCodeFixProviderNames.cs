// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Microsoft.CodeAnalysis.CodeFixes;

namespace Microsoft.CodeAnalysis.ExternalAccess.Razor
{
    internal static class RazorPredefinedCodeFixProviderNames
    {
        internal static string ApplyPrefix(string name) => $"{CodeFixService.ProviderTagPrefix}{name}";

        public static string AddDocCommentNodes => ApplyPrefix(PredefinedCodeFixProviderNames.AddDocCommentNodes);
        public static string AddAsync => ApplyPrefix(PredefinedCodeFixProviderNames.AddAsync);
        public static string AddParameter => ApplyPrefix(PredefinedCodeFixProviderNames.AddParameter);
        public static string AddParenthesesAroundConditionalExpressionInInterpolatedString => ApplyPrefix(PredefinedCodeFixProviderNames.AddParenthesesAroundConditionalExpressionInInterpolatedString);
        public static string AliasAmbiguousType => ApplyPrefix(PredefinedCodeFixProviderNames.AliasAmbiguousType);
        public static string ApplyNamingStyle => ApplyPrefix(PredefinedCodeFixProviderNames.ApplyNamingStyle);
        public static string AddBraces => ApplyPrefix(PredefinedCodeFixProviderNames.AddBraces);
        public static string ChangeReturnType => ApplyPrefix(PredefinedCodeFixProviderNames.ChangeReturnType);
        public static string ChangeToYield => ApplyPrefix(PredefinedCodeFixProviderNames.ChangeToYield);
        public static string ConvertToAsync => ApplyPrefix(PredefinedCodeFixProviderNames.ConvertToAsync);
        public static string ConvertToIterator => ApplyPrefix(PredefinedCodeFixProviderNames.ConvertToIterator);
        public static string CorrectNextControlVariable => ApplyPrefix(PredefinedCodeFixProviderNames.CorrectNextControlVariable);
        public static string ConvertTypeOfToNameOf => ApplyPrefix(PredefinedCodeFixProviderNames.ConvertTypeOfToNameOf);
        public static string RemoveDocCommentNode => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveDocCommentNode);
        public static string AddMissingReference => ApplyPrefix(PredefinedCodeFixProviderNames.AddMissingReference);
        public static string AddImport => ApplyPrefix(PredefinedCodeFixProviderNames.AddImport);
        public static string FullyQualify => ApplyPrefix(PredefinedCodeFixProviderNames.FullyQualify);
        public static string FixFormatting => ApplyPrefix(PredefinedCodeFixProviderNames.FixFormatting);
        public static string FixIncorrectFunctionReturnType => ApplyPrefix(PredefinedCodeFixProviderNames.FixIncorrectFunctionReturnType);
        public static string FixIncorrectExitContinue => ApplyPrefix(PredefinedCodeFixProviderNames.FixIncorrectExitContinue);
        public static string FixReturnType => ApplyPrefix(PredefinedCodeFixProviderNames.FixReturnType);
        public static string GenerateConstructor => ApplyPrefix(PredefinedCodeFixProviderNames.GenerateConstructor);
        public static string GenerateEndConstruct => ApplyPrefix(PredefinedCodeFixProviderNames.GenerateEndConstruct);
        public static string GenerateEnumMember => ApplyPrefix(PredefinedCodeFixProviderNames.GenerateEnumMember);
        public static string GenerateEvent => ApplyPrefix(PredefinedCodeFixProviderNames.GenerateEvent);
        public static string GenerateVariable => ApplyPrefix(PredefinedCodeFixProviderNames.GenerateVariable);
        public static string GenerateMethod => ApplyPrefix(PredefinedCodeFixProviderNames.GenerateMethod);
        public static string GenerateConversion => ApplyPrefix(PredefinedCodeFixProviderNames.GenerateConversion);
        public static string GenerateDeconstructMethod => ApplyPrefix(PredefinedCodeFixProviderNames.GenerateDeconstructMethod);
        public static string GenerateType => ApplyPrefix(PredefinedCodeFixProviderNames.GenerateType);
        public static string ImplementAbstractClass => ApplyPrefix(PredefinedCodeFixProviderNames.ImplementAbstractClass);
        public static string ImplementInterface => ApplyPrefix(PredefinedCodeFixProviderNames.ImplementInterface);
        public static string MakeFieldReadonly => ApplyPrefix(PredefinedCodeFixProviderNames.MakeFieldReadonly);
        public static string MakeStatementAsynchronous => ApplyPrefix(PredefinedCodeFixProviderNames.MakeStatementAsynchronous);
        public static string MakeMethodSynchronous => ApplyPrefix(PredefinedCodeFixProviderNames.MakeMethodSynchronous);
        public static string MoveMisplacedUsingDirectives => ApplyPrefix(PredefinedCodeFixProviderNames.MoveMisplacedUsingDirectives);
        public static string MoveToTopOfFile => ApplyPrefix(PredefinedCodeFixProviderNames.MoveToTopOfFile);
        public static string PopulateSwitch => ApplyPrefix(PredefinedCodeFixProviderNames.PopulateSwitch);
        public static string QualifyMemberAccess => ApplyPrefix(PredefinedCodeFixProviderNames.QualifyMemberAccess);
        public static string ReplaceDefaultLiteral => ApplyPrefix(PredefinedCodeFixProviderNames.ReplaceDefaultLiteral);
        public static string RemoveUnnecessaryCast => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnnecessaryCast);
        public static string DeclareAsNullable => ApplyPrefix(PredefinedCodeFixProviderNames.DeclareAsNullable);
        public static string RemoveAsyncModifier => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveAsyncModifier);
        public static string RemoveUnnecessaryImports => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnnecessaryImports);
        public static string RemoveUnnecessaryAttributeSuppressions => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnnecessaryAttributeSuppressions);
        public static string RemoveUnnecessaryPragmaSuppressions => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnnecessaryPragmaSuppressions);
        public static string RemoveUnreachableCode => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnreachableCode);
        public static string RemoveUnusedValues => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnusedValues);
        public static string RemoveUnusedLocalFunction => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnusedLocalFunction);
        public static string RemoveUnusedMembers => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnusedMembers);
        public static string RemoveUnusedVariable => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnusedVariable);
        public static string SimplifyNames => ApplyPrefix(PredefinedCodeFixProviderNames.SimplifyNames);
        public static string SimplifyThisOrMe => ApplyPrefix(PredefinedCodeFixProviderNames.SimplifyThisOrMe);
        public static string SpellCheck => ApplyPrefix(PredefinedCodeFixProviderNames.SpellCheck);
        public static string AddOverloads => ApplyPrefix(PredefinedCodeFixProviderNames.AddOverloads);
        public static string AddNew => ApplyPrefix(PredefinedCodeFixProviderNames.AddNew);
        public static string RemoveNew => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveNew);
        public static string UpdateLegacySuppressions => ApplyPrefix(PredefinedCodeFixProviderNames.UpdateLegacySuppressions);
        public static string UnsealClass => ApplyPrefix(PredefinedCodeFixProviderNames.UnsealClass);
        public static string UseImplicitType => ApplyPrefix(PredefinedCodeFixProviderNames.UseImplicitType);
        public static string UseExplicitType => ApplyPrefix(PredefinedCodeFixProviderNames.UseExplicitType);
        public static string UseExplicitTypeForConst => ApplyPrefix(PredefinedCodeFixProviderNames.UseExplicitTypeForConst);
        public static string UseCollectionInitializer => ApplyPrefix(PredefinedCodeFixProviderNames.UseCollectionInitializer);
        public static string UseObjectInitializer => ApplyPrefix(PredefinedCodeFixProviderNames.UseObjectInitializer);
        public static string UseThrowExpression => ApplyPrefix(PredefinedCodeFixProviderNames.UseThrowExpression);
        public static string PreferFrameworkType => ApplyPrefix(PredefinedCodeFixProviderNames.PreferFrameworkType);
        public static string MakeStructFieldsWritable => ApplyPrefix(PredefinedCodeFixProviderNames.MakeStructFieldsWritable);
        public static string AddExplicitCast => ApplyPrefix(PredefinedCodeFixProviderNames.AddExplicitCast);
        public static string RemoveIn => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveIn);
        public static string SimplifyLinqExpression => ApplyPrefix(PredefinedCodeFixProviderNames.SimplifyLinqExpression);
        public static string ChangeNamespaceToMatchFolder => ApplyPrefix(PredefinedCodeFixProviderNames.ChangeNamespaceToMatchFolder);
        public static string SimplifyObjectCreation => ApplyPrefix(PredefinedCodeFixProviderNames.SimplifyObjectCreation);
        public static string ConvertAnonymousTypeToTuple => ApplyPrefix(PredefinedCodeFixProviderNames.ConvertAnonymousTypeToTuple);
        public static string AddRequiredParentheses => ApplyPrefix(PredefinedCodeFixProviderNames.AddRequiredParentheses);
        public static string AddAccessibilityModifiers => ApplyPrefix(PredefinedCodeFixProviderNames.AddAccessibilityModifiers);
        public static string FileHeader => ApplyPrefix(PredefinedCodeFixProviderNames.FileHeader);
        public static string UseSystemHashCode => ApplyPrefix(PredefinedCodeFixProviderNames.UseSystemHashCode);
        public static string RemoveBlankLines => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveBlankLines);
        public static string OrderModifiers => ApplyPrefix(PredefinedCodeFixProviderNames.OrderModifiers);
        public static string RemoveRedundantEquality => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveRedundantEquality);
        public static string RemoveUnnecessaryParentheses => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnnecessaryParentheses);
        public static string SimplifyConditionalExpression => ApplyPrefix(PredefinedCodeFixProviderNames.SimplifyConditionalExpression);
        public static string SimplifyInterpolation => ApplyPrefix(PredefinedCodeFixProviderNames.SimplifyInterpolation);
        public static string UseCoalesceExpression => ApplyPrefix(PredefinedCodeFixProviderNames.UseCoalesceExpression);
        public static string UseCompoundAssignment => ApplyPrefix(PredefinedCodeFixProviderNames.UseCompoundAssignment);
        public static string UseConditionalExpressionForAssignment => ApplyPrefix(PredefinedCodeFixProviderNames.UseConditionalExpressionForAssignment);
        public static string UseConditionalExpressionForReturn => ApplyPrefix(PredefinedCodeFixProviderNames.UseConditionalExpressionForReturn);
        public static string UseExplicitTupleName => ApplyPrefix(PredefinedCodeFixProviderNames.UseExplicitTupleName);
        public static string UseInferredMemberName => ApplyPrefix(PredefinedCodeFixProviderNames.UseInferredMemberName);
        public static string UseIsNullCheck => ApplyPrefix(PredefinedCodeFixProviderNames.UseIsNullCheck);
        public static string UseNullPropagation => ApplyPrefix(PredefinedCodeFixProviderNames.UseNullPropagation);
        public static string UseAutoProperty => ApplyPrefix(PredefinedCodeFixProviderNames.UseAutoProperty);
        public static string ConsecutiveStatementPlacement => ApplyPrefix(PredefinedCodeFixProviderNames.ConsecutiveStatementPlacement);
        public static string UsePatternCombinators => ApplyPrefix(PredefinedCodeFixProviderNames.UsePatternCombinators);
        public static string ConvertSwitchStatementToExpression => ApplyPrefix(PredefinedCodeFixProviderNames.ConvertSwitchStatementToExpression);
        public static string InvokeDelegateWithConditionalAccess => ApplyPrefix(PredefinedCodeFixProviderNames.InvokeDelegateWithConditionalAccess);
        public static string RemoveUnnecessaryByVal => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnnecessaryByVal);
        public static string UseIsNotExpression => ApplyPrefix(PredefinedCodeFixProviderNames.UseIsNotExpression);
        public static string UseExpressionBody => ApplyPrefix(PredefinedCodeFixProviderNames.UseExpressionBody);
        public static string ConstructorInitializerPlacement => ApplyPrefix(PredefinedCodeFixProviderNames.ConstructorInitializerPlacement);
        public static string EmbeddedStatementPlacement => ApplyPrefix(PredefinedCodeFixProviderNames.EmbeddedStatementPlacement);
        public static string RemoveConfusingSuppression => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveConfusingSuppression);
        public static string RemoveUnnecessaryDiscardDesignation => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveUnnecessaryDiscardDesignation);
        public static string UseCompoundCoalesceAssignment => ApplyPrefix(PredefinedCodeFixProviderNames.UseCompoundCoalesceAssignment);
        public static string UseDeconstruction => ApplyPrefix(PredefinedCodeFixProviderNames.UseDeconstruction);
        public static string UseDefaultLiteral => ApplyPrefix(PredefinedCodeFixProviderNames.UseDefaultLiteral);
        public static string UseImplicitObjectCreation => ApplyPrefix(PredefinedCodeFixProviderNames.UseImplicitObjectCreation);
        public static string UseIndexOperator => ApplyPrefix(PredefinedCodeFixProviderNames.UseIndexOperator);
        public static string UseRangeOperator => ApplyPrefix(PredefinedCodeFixProviderNames.UseRangeOperator);
        public static string UseSimpleUsingStatement => ApplyPrefix(PredefinedCodeFixProviderNames.UseSimpleUsingStatement);
        public static string MakeLocalFunctionStatic => ApplyPrefix(PredefinedCodeFixProviderNames.MakeLocalFunctionStatic);
        public static string PassInCapturedVariables => ApplyPrefix(PredefinedCodeFixProviderNames.PassInCapturedVariables);
        public static string UseLocalFunction => ApplyPrefix(PredefinedCodeFixProviderNames.UseLocalFunction);
        public static string InlineDeclaration => ApplyPrefix(PredefinedCodeFixProviderNames.InlineDeclaration);
        public static string ConsecutiveBracePlacement => ApplyPrefix(PredefinedCodeFixProviderNames.ConsecutiveBracePlacement);
        public static string AddPackage => ApplyPrefix(PredefinedCodeFixProviderNames.AddPackage);
        public static string UpgradeProject => ApplyPrefix(PredefinedCodeFixProviderNames.UpgradeProject);
        public static string AddAnonymousTypeMemberName => ApplyPrefix(PredefinedCodeFixProviderNames.AddAnonymousTypeMemberName);
        public static string RemoveSharedFromModuleMembers => ApplyPrefix(PredefinedCodeFixProviderNames.RemoveSharedFromModuleMembers);
        public static string DisambiguateSameVariable => ApplyPrefix(PredefinedCodeFixProviderNames.DisambiguateSameVariable);
        public static string UseInterpolatedVerbatimString => ApplyPrefix(PredefinedCodeFixProviderNames.UseInterpolatedVerbatimString);
        public static string MakeRefStruct => ApplyPrefix(PredefinedCodeFixProviderNames.MakeRefStruct);
        public static string AddObsoleteAttribute => ApplyPrefix(PredefinedCodeFixProviderNames.AddObsoleteAttribute);
        public static string ConflictMarkerResolution => ApplyPrefix(PredefinedCodeFixProviderNames.ConflictMarkerResolution);
        public static string MakeTypeAbstract => ApplyPrefix(PredefinedCodeFixProviderNames.MakeTypeAbstract);
        public static string MakeMemberStatic => ApplyPrefix(PredefinedCodeFixProviderNames.MakeMemberStatic);
        public static string AssignOutParametersAtStart => ApplyPrefix(PredefinedCodeFixProviderNames.AssignOutParametersAtStart);
        public static string AssignOutParametersAboveReturn => ApplyPrefix(PredefinedCodeFixProviderNames.AssignOutParametersAboveReturn);
        public static string UseCoalesceExpressionForNullable => ApplyPrefix(PredefinedCodeFixProviderNames.UseCoalesceExpressionForNullable);
        public static string UpdateProjectToAllowUnsafe => ApplyPrefix(PredefinedCodeFixProviderNames.UpdateProjectToAllowUnsafe);
        public static string UseExpressionBodyForLambda => ApplyPrefix(PredefinedCodeFixProviderNames.UseExpressionBodyForLambda);
        public static string PopulateSwitchExpression => ApplyPrefix(PredefinedCodeFixProviderNames.PopulateSwitchExpression);
        public static string UseIsNullCheckForCastAndEqualityOperator => ApplyPrefix(PredefinedCodeFixProviderNames.UseIsNullCheckForCastAndEqualityOperator);
        public static string UseIsNullCheckForReferenceEquals => ApplyPrefix(PredefinedCodeFixProviderNames.UseIsNullCheckForReferenceEquals);
        public static string UsePatternMatchingIsAndCastCheckWithoutName => ApplyPrefix(PredefinedCodeFixProviderNames.UsePatternMatchingIsAndCastCheckWithoutName);
        public static string UsePatternMatchingIsAndCastCheck => ApplyPrefix(PredefinedCodeFixProviderNames.UsePatternMatchingIsAndCastCheck);
        public static string UsePatternMatchingAsAndNullCheck => ApplyPrefix(PredefinedCodeFixProviderNames.UsePatternMatchingAsAndNullCheck);
        public static string UseNotPattern => ApplyPrefix(PredefinedCodeFixProviderNames.UseNotPattern);
    }
}
