<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Library</OutputType>
    <RootNamespace>Roslyn.InteractiveHost.UnitTests</RootNamespace>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup Label="Project References">
    <ProjectReference Include="..\..\Compilers\Core\Portable\Microsoft.CodeAnalysis.csproj" />
    <ProjectReference Include="..\..\Compilers\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.csproj" />
    <ProjectReference Include="..\..\Compilers\VisualBasic\Portable\Microsoft.CodeAnalysis.VisualBasic.vbproj" />
    <ProjectReference Include="..\..\Compilers\Test\Resources\Core\Microsoft.CodeAnalysis.Compiler.Test.Resources.csproj" />
    <ProjectReference Include="..\..\Compilers\Test\Utilities\CSharp\Microsoft.CodeAnalysis.CSharp.Test.Utilities.csproj" />
    <ProjectReference Include="..\..\Scripting\Core\Microsoft.CodeAnalysis.Scripting.csproj" />
    <ProjectReference Include="..\..\Compilers\Test\Core\Microsoft.CodeAnalysis.Test.Utilities.csproj" />
    <ProjectReference Include="..\Host\Microsoft.CodeAnalysis.InteractiveHost.csproj">
      <Aliases>InteractiveHost</Aliases>
    </ProjectReference>
    <ProjectReference Include="..\..\Scripting\CSharp\Microsoft.CodeAnalysis.CSharp.Scripting.csproj" />
    <ProjectReference Include="..\..\Test\PdbUtilities\Roslyn.Test.PdbUtilities.csproj" />
  </ItemGroup>
  <ItemGroup>
    <!--
      Not using ProjectReference since it does not execute the specified targets when building in VS.
      See https://github.com/microsoft/msbuild/issues/5434.

      Note: do not set TargetFramework=net472 for InteractiveHost32. The project is not multi-targeted.
      Setting the property would create a build configuration that's different from the one the solution uses
      and thus would result in building the project twice.
    -->
    
    <CopyPublishedOutputProjectReference Include="..\HostProcess\InteractiveHost32.csproj">
      <OutputItemType>InteractiveHostFiles_Desktop32</OutputItemType>
    </CopyPublishedOutputProjectReference>

    <CopyPublishedOutputProjectReference Include="..\HostProcess\InteractiveHost64.csproj">
      <SetTargetFramework>TargetFramework=net472</SetTargetFramework>
      <OutputItemType>InteractiveHostFiles_Desktop64</OutputItemType>
    </CopyPublishedOutputProjectReference>

    <CopyPublishedOutputProjectReference Include="..\HostProcess\InteractiveHost64.csproj">
      <SetTargetFramework>TargetFramework=net5.0-windows7.0</SetTargetFramework>
      <OutputItemType>InteractiveHostFiles_Core</OutputItemType>
    </CopyPublishedOutputProjectReference>
  </ItemGroup>

  <!--
    Creates the same directory structure containing flavors of InteractiveHost under the output directory as is used in VSIX.
  -->
  <Target Name="_DeployInteractiveHosts" AfterTargets="ResolveProjectReferences" Condition="'$(DesignTimeBuild)' != 'true'">

    <MSBuild Projects="@(CopyPublishedOutputProjectReference)" Targets="PublishProjectOutputGroup" BuildInParallel="$(BuildInParallel)" Properties="%(CopyPublishedOutputProjectReference.SetTargetFramework)">

      <Output TaskParameter="TargetOutputs" ItemName="%(CopyPublishedOutputProjectReference.OutputItemType)" />
    </MSBuild>

    <ItemGroup>
      <_SourceFiles Include="@(InteractiveHostFiles_Desktop64)" TargetDirectory="Host\Desktop\" />
      <_SourceFiles Include="@(InteractiveHostFiles_Desktop32)" TargetDirectory="Host\Desktop\" />
      <_SourceFiles Include="@(InteractiveHostFiles_Core)" TargetDirectory="Host\Core\" />
      <Content Include="%(_SourceFiles.Identity)" Link="%(_SourceFiles.TargetDirectory)%(_SourceFiles.TargetPath)" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>
</Project>