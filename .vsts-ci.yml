resources:
- repo: self
  clean: true
queue:
  name: VSEng-MicroBuildVS2017
  timeoutInMinutes: 360
  demands: 
  - msbuild
  - visualstudio
  - DotNetFramework

variables:
  BuildPlatform: 'Any CPU'
steps:
- task: NuGetCommand@2
  inputs:
    command: custom
    arguments: 'locals all -clear'

- task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
  inputs:
    signType: real
  condition: and(succeeded(), in(variables['PB_SignType'], 'test', 'real'))

- task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1
  inputs:
    feedSource: 'https://devdiv-test.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json'

- task: NuGetRestore@1
  inputs:
    solution: 'build\ToolsetPackages\InternalToolset.csproj'
    feed: '8f470c7e-ac49-4afe-a6ee-cf784e438b93'

- task: CmdLine@1
  inputs:
    filename: mkdir
    arguments: 'Binaries\$(BuildConfiguration)'

- task: VSBuild@1
  inputs:
    solution: 'src/Tools/MicroBuild/Build.proj'
    vsVersion: 15.0
    msbuildArgs: >- 
        /p:TreatWarningsAsErrors=true 
        /p:DeployExtension=false 
        /p:TrackFileAccess=false
        /p:OfficialBuild=true 
        /p:VisualStudioVersion=14.0 
        /flp1:Summary;Verbosity=diagnostic;Encoding=UTF-8;LogFile=$(Build.SourcesDirectory)\Binaries\$(BuildConfiguration)\Roslyn.log 
        /flp2:WarningsOnly;Verbosity=diagnostic;Encoding=UTF-8;LogFile=$(Build.SourcesDirectory)\Binaries\$(BuildConfiguration)\Roslyn.wrn 
        /flp3:ErrorsOnly;Verbosity=diagnostic;Encoding=UTF-8;LogFile=$(Build.SourcesDirectory)\Binaries\$(BuildConfiguration)\Roslyn.err 
        /p:RoslynMyGetApiKey=$(Roslyn.MyGetApiKey) 
        /p:RoslynNuGetApiKey=$(Roslyn.NuGetApiKey) 
        /p:RoslynGitHubEmail=$(Roslyn.GitHubEmail) 
        /p:RoslynGitHubToken=$(Roslyn.GitHubToken) 
        /p:RoslynGitHubUserName=$(Roslyn.GitHubUserName) 
        /p:PB_PublishBlobFeedKey=$(PB_PublishBlobFeedKey) 
        /p:PublishStableVersions=false 
        /p:VersionStampToPublish=prerelease
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    maximumCpuCount: true
    logProjectEvents: false

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)\Binaries\$(BuildConfiguration)\Logs'
    ArtifactName: 'Build Diagnostic Files'
    publishLocation: Container
  continueOnError: true
  condition: succeededOrFailed()

- task: PublishTestResults@1
  inputs:
    testRunner: XUnit
    testResultsFiles: '**/xUnitResults/*.xml'
    mergeTestResults: true
    testRunTitle: 'Unit Tests'
  condition: succeededOrFailed()

- task: PublishSymbols@1
  inputs:
    SymbolsPath: '$(DropRoot)\$(Build.DefinitionName)\$(Build.SourceBranchName)\$(BuildConfiguration)\$(Build.BuildNumber)\Symbols'
    SearchPattern: '*.dll;*.exe;*.pdb;Dlls\**\*.dll;Dlls\**\*.exe;Dlls\**\*.pdb;Exes\**\*.dll;Exes\**\*.exe;Exes\**\*.pdb;Vsix\**\*.dll;Vsix\**\*.exe;Vsix\**\*.pdb'
    SymbolsFolder: '$(Build.SourcesDirectory)\Binaries\$(BuildConfiguration)'
    SkipIndexing: true
    TreatNotIndexedAsWarning: true
    SymbolsProduct: Roslyn
    SymbolsVersion: '$(Build.BuildNumber)'
    SymbolsArtifactName: Symbols
  condition: and(succeeded(), and(eq(variables['SymStoreDirectoryExists'], False), contains(variables['PB_PublishType'], 'vsts')))

- task: PublishSymbols@1
  inputs:
    SymbolsPath: '$(DropRoot)\$(Build.DefinitionName)\$(Build.SourceBranchName)\$(BuildConfiguration)\$(Build.BuildNumber)\Symbols'
    SearchPattern: '**\*.dll;**\*.exe;**\*.pdb'
    SymbolsFolder: '$(Build.SourcesDirectory)\Binaries\$(BuildConfiguration)\SymStore'
    SkipIndexing: true
    TreatNotIndexedAsWarning: true
    SymbolsProduct: Roslyn
    SymbolsVersion: '$(Build.BuildNumber)'
    SymbolsArtifactName: Symbols
  condition: and(succeeded(), eq(variables['SymStoreDirectoryExists'], True))

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(DropRoot)\$(Build.DefinitionName)\$(Build.SourceBranchName)\$(BuildConfiguration)\$(Build.BuildNumber)\Symbols'
    TargetFolder: '$(Build.StagingDirectory)\SymbolsForPublish'
  condition: and(succeeded(), contains(variables['PB_PublishType'], 'vsts'))

- task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
  inputs:
    symbolServiceURI: 'https://microsoft.artifacts.visualstudio.com/DefaultCollection'
    requestName: '$(system.teamProject)/$(Build.DefinitionName)/$(Build.BuildNumber)/$(Build.BuildId)'
    sourcePath: '$(Build.StagingDirectory)\SymbolsForPublish'
    usePat: false
  continueOnError: true
  condition: and(succeeded(), contains(variables['PB_PublishType'], 'vsts'))

- task: ms-vseng.MicroBuildTasks.4305a8de-ba66-4d8b-b2d1-0dc4ecbbf5e8.MicroBuildUploadVstsDropFolder@1
  displayName: Upload VSTS Drop
  inputs:
    DropFolder: 'Binaries\$(BuildConfiguration)\Insertion'
  condition: and(succeeded(), contains(variables['PB_PublishType'], 'vsts'))

- task: NuGetCommand@2
  inputs:
    command: push
    feedsToUse: config
    packagesToPush: '$(Build.SourcesDirectory)\Binaries\$(BuildConfiguration)\DevDivPackages\**\*.nupkg'
    publishVstsFeed: '97a41293-2972-4f48-8c0e-05493ae82010'
    allowPackageConflicts: true
  condition: and(succeeded(), contains(variables['PB_PublishType'], 'vsts'))

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'Binaries\$(BuildConfiguration)'
    ArtifactName: '$(Build.BuildNumber)'
    publishLocation: FilePath
    TargetPath: '$(DropRoot)\$(Build.DefinitionName)\$(Build.SourceBranchName)\$(BuildConfiguration)'
    Parallel: true
    ParallelCount: 64

- task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\MicroBuild\Output'
    ArtifactName: '$(Build.BuildNumber)'
    publishLocation: FilePath
    TargetPath: '$(DropRoot)\$(Build.DefinitionName)\$(Build.SourceBranchName)\$(BuildConfiguration)'
  condition: and(succeededOrFailed(), contains(variables['PB_PublishType'], 'vsts'))


