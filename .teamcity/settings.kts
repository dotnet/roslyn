// This file is automatically generated by `Build.ps1 generate-scripts`.

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildFeatures.*
import jetbrains.buildServer.configs.kotlin.buildSteps.powerShell
import jetbrains.buildServer.configs.kotlin.failureConditions.*
import jetbrains.buildServer.configs.kotlin.triggers.*
import jetbrains.buildServer.configs.kotlin.projectFeatures.*

version = "2025.07"

project {

    buildType(DebugBuild)
    buildType(ReleaseBuild)
    buildType(PublicBuild)
    buildType(PublicDeployment)
    buildType(DownstreamMerge)

    features {
         untrustedBuildsSettings {
             id = "UNTRUSTED_BUILD_SETTINGS_EXT"
             defaultAction = UntrustedBuildsSettings.DefaultAction.APPROVE
             enableLog = true
             approvalRules = "group:UNTRUSTED_BUILD_APPROVERS:1"
         }
     }

    buildTypesOrder = arrayListOf(DebugBuild,ReleaseBuild,PublicBuild,PublicDeployment,DownstreamMerge)

}

object DebugBuild : BuildType({

    name = "Build [Debug]"

    artifactRules = """+:artifacts/publish/public/**/*=>artifacts/publish/public
+:artifacts/packages/Debug/Shipping/**/*=>artifacts/packages/Debug/Shipping
+:artifacts/testResults/**/*=>artifacts/testResults
+:artifacts/logs/**/*=>logs
+:artifacts/dumps/**/*=>dumps
"""

    params {
        text("Build.Arguments", "", label = "DockerBuild.ps1 Arguments", description = "Arguments to append to the 'Build' build step.", allowEmpty = true)
        param("Build.Timeout", "30")
    }

    vcs {
        root(AbsoluteId("Metalama_Metalama20252_MetalamaCompiler"))
    }

    steps {
        powerShell {
            name = "Prepare Docker image metalamacompiler-2025.2"
            id = "PrepareImage"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-BuildImage -ImageName metalamacompiler-2025.2"
        }
        powerShell {
            name = "Build"
            id = "Build"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-Script Build.ps1 -ImageName metalamacompiler-2025.2 -NoBuildImage test --configuration Debug --buildNumber %build.number% --buildType %system.teamcity.buildType.id% %Build.Arguments% --timeout %Build.Timeout%"
        }
    }

    requirements {
        equals("env.BuildAgentType", "docker-win-x64-md")
    }

    features {
        swabra {
            lockingProcesses = Swabra.LockingProcessPolicy.KILL
            verbose = true
        }
    commitStatusPublisher {
        vcsRootExtId = "Metalama_Metalama20252_MetalamaCompiler"
        publisher = github {
            githubUrl = "https://api.github.com"
            authType = personalToken {
                token = "%env.GITHUB_TOKEN%"
            }
        }
    }
pullRequests {
       vcsRootExtId = "Metalama_Metalama20252_MetalamaCompiler"
        provider = github {
            authType = token {
                token = "%env.GITHUB_TOKEN%"
            }
           filterTargetBranch = "+:refs/heads/develop/2025.2"
           filterAuthorRole = PullRequests.GitHubRoleFilter.EVERYBODY
       }
   }


    }

    triggers {
        vcs {
            watchChangesInDependencies = true
            branchFilter = "+:develop/2025.2"
            // Build will not trigger automatically if the commit message contains comment value.
            triggerRules = "-:comment=<<VERSION_BUMP>>|<<DEPENDENCIES_UPDATED>>:**"
        }
    }

})

object ReleaseBuild : BuildType({

    name = "Build [Release]"

    artifactRules = """+:artifacts/publish/public/**/*=>artifacts/publish/public
+:artifacts/packages/Release/Shipping/**/*=>artifacts/packages/Release/Shipping
+:artifacts/testResults/**/*=>artifacts/testResults
+:artifacts/logs/**/*=>logs
+:artifacts/dumps/**/*=>dumps
"""

    params {
        text("Build.Arguments", "", label = "DockerBuild.ps1 Arguments", description = "Arguments to append to the 'Build' build step.", allowEmpty = true)
        param("Build.Timeout", "30")
    }

    vcs {
        root(AbsoluteId("Metalama_Metalama20252_MetalamaCompiler"))
    }

    steps {
        powerShell {
            name = "Prepare Docker image metalamacompiler-2025.2"
            id = "PrepareImage"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-BuildImage -ImageName metalamacompiler-2025.2"
        }
        powerShell {
            name = "Build"
            id = "Build"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-Script Build.ps1 -ImageName metalamacompiler-2025.2 -NoBuildImage test --configuration Release --buildNumber %build.number% --buildType %system.teamcity.buildType.id% %Build.Arguments% --timeout %Build.Timeout%"
        }
    }

    requirements {
        equals("env.BuildAgentType", "docker-win-x64-md")
    }

    features {
        swabra {
            lockingProcesses = Swabra.LockingProcessPolicy.KILL
            verbose = true
        }
    commitStatusPublisher {
        vcsRootExtId = "Metalama_Metalama20252_MetalamaCompiler"
        publisher = github {
            githubUrl = "https://api.github.com"
            authType = personalToken {
                token = "%env.GITHUB_TOKEN%"
            }
        }
    }
pullRequests {
       vcsRootExtId = "Metalama_Metalama20252_MetalamaCompiler"
        provider = github {
            authType = token {
                token = "%env.GITHUB_TOKEN%"
            }
           filterTargetBranch = "+:refs/heads/develop/2025.2"
           filterAuthorRole = PullRequests.GitHubRoleFilter.EVERYBODY
       }
   }


    }

})

object PublicBuild : BuildType({

    name = "Build [Public]"

    artifactRules = """+:artifacts/publish/public/**/*=>artifacts/publish/public
+:artifacts/packages/Release/Shipping/**/*=>artifacts/packages/Release/Shipping
+:artifacts/testResults/**/*=>artifacts/testResults
+:artifacts/logs/**/*=>logs
+:artifacts/dumps/**/*=>dumps
"""

    params {
        text("Build.Arguments", "", label = "DockerBuild.ps1 Arguments", description = "Arguments to append to the 'Build' build step.", allowEmpty = true)
        param("Build.Timeout", "30")
    }

    vcs {
        root(AbsoluteId("Metalama_Metalama20252_MetalamaCompiler"))
    }

    steps {
        powerShell {
            name = "Prepare Docker image metalamacompiler-2025.2"
            id = "PrepareImage"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-BuildImage -ImageName metalamacompiler-2025.2"
        }
        powerShell {
            name = "Build"
            id = "Build"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-Script Build.ps1 -ImageName metalamacompiler-2025.2 -NoBuildImage test --configuration Public --buildNumber %build.number% --buildType %system.teamcity.buildType.id% %Build.Arguments% --timeout %Build.Timeout%"
        }
    }

    requirements {
        equals("env.BuildAgentType", "docker-win-x64-md")
    }

    features {
        swabra {
            lockingProcesses = Swabra.LockingProcessPolicy.KILL
            verbose = true
        }
    commitStatusPublisher {
        vcsRootExtId = "Metalama_Metalama20252_MetalamaCompiler"
        publisher = github {
            githubUrl = "https://api.github.com"
            authType = personalToken {
                token = "%env.GITHUB_TOKEN%"
            }
        }
    }
pullRequests {
       vcsRootExtId = "Metalama_Metalama20252_MetalamaCompiler"
        provider = github {
            authType = token {
                token = "%env.GITHUB_TOKEN%"
            }
           filterTargetBranch = "+:refs/heads/develop/2025.2"
           filterAuthorRole = PullRequests.GitHubRoleFilter.EVERYBODY
       }
   }


    }

})

object PublicDeployment : BuildType({

    name = "Deploy [Public]"

    type = Type.DEPLOYMENT

    params {
        text("Publish.Arguments", "", label = "DockerBuild.ps1 Arguments", description = "Arguments to append to the 'Publish' build step.", allowEmpty = true)
        param("Publish.Timeout", "30")
    }

    vcs {
        root(AbsoluteId("Metalama_Metalama20252_MetalamaCompiler"))
    }

    steps {
        powerShell {
            name = "Prepare Docker image metalamacompiler-2025.2"
            id = "PrepareImage"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-BuildImage -ImageName metalamacompiler-2025.2"
        }
        powerShell {
            name = "Publish"
            id = "Publish"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-Script Build.ps1 -ImageName metalamacompiler-2025.2 -NoBuildImage publish --configuration Public %Publish.Arguments% --timeout %Publish.Timeout%"
        }
    }

    requirements {
        equals("env.BuildAgentType", "docker-win-x64-md")
    }

    features {
        swabra {
            lockingProcesses = Swabra.LockingProcessPolicy.KILL
            verbose = true
        }
    }

    dependencies {
        dependency(PublicBuild) {
            snapshot {
                     onDependencyFailure = FailureAction.FAIL_TO_START
            }

            artifacts {
                cleanDestination = true
                artifactRules = "+:artifacts/publish/public/**/*=>artifacts/publish/public\n+:artifacts/packages/Release/Shipping/**/*=>artifacts/packages/Release/Shipping"
            }
        }
     }

})

object DownstreamMerge : BuildType({

    name = "Downstream Merge"

    params {
        text("DownstreamMerge.Arguments", "", label = "DockerBuild.ps1 Arguments", description = "Arguments to append to the 'Merge downstream' build step.", allowEmpty = true)
        param("DownstreamMerge.Timeout", "15")
    }

    vcs {
        root(AbsoluteId("Metalama_Metalama20252_MetalamaCompiler"))
    }

    steps {
        powerShell {
            name = "Prepare Docker image metalamacompiler-2025.2"
            id = "PrepareImage"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-BuildImage -ImageName metalamacompiler-2025.2"
        }
        powerShell {
            name = "Merge downstream"
            id = "DownstreamMerge"
            scriptMode = file {
                path = "DockerBuild.ps1"
            }
            noProfile = false
            scriptArgs = "-Script Build.ps1 -ImageName metalamacompiler-2025.2 -NoBuildImage tools git merge-downstream %DownstreamMerge.Arguments% --timeout %DownstreamMerge.Timeout%"
        }
    }

    requirements {
        equals("env.BuildAgentType", "docker-win-x64-md")
    }

    features {
        swabra {
            lockingProcesses = Swabra.LockingProcessPolicy.KILL
            verbose = true
        }
    }

    triggers {
        vcs {
            watchChangesInDependencies = true
            branchFilter = "+:develop/2025.2"
            // Build will not trigger automatically if the commit message contains comment value.
            triggerRules = "-:comment=<<VERSION_BUMP>>|<<DEPENDENCIES_UPDATED>>:**"
        }
    }

    dependencies {
        dependency(DebugBuild) {
            snapshot {
                     onDependencyFailure = FailureAction.FAIL_TO_START
            }
        }
     }

})

