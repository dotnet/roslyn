trigger: none
pr: none

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

parameters:
- name: PRNumber
  type: number
- name: CommitSHA
  type: string
- name: VisualStudioBranchName
  type: string
  default: default
- name: OptionalTitlePrefix
  type: string
  default: '[PR Validation]'
- name: InsertToolset
  type: boolean
  default: true
- name: SkipApplyOptimizationData
  type: boolean
  default: false

variables:
  - group: DotNet-Roslyn-SDLValidation-Params
  - group: DotNet-Roslyn-Insertion-Variables
  - name: Codeql.Enabled
    value: false
  - name: Codeql.SkipTaskAutoInjection
    value: true

  # To retrieve OptProf data we need to authenticate to the VS drop storage.
  # If the pipeline is running in DevDiv, the account has access to the VS drop storage.
  # Get $AccessToken-dotnet-build-bot-public-repo from DotNet-GitHub-Versions-Repo-Write
  - group: DotNet-GitHub-Versions-Repo-Write
  - name: _DevDivDropAccessToken
    value: $(System.AccessToken)

extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      enableAllTools: false
    pool:
      name: VSEngSS-MicroBuild2022-1ES
      demands:
      - msbuild
      - visualstudio
      - DotNetFramework
    customBuildTags:
    - ES365AIMigrationTooling
    stages:

    - stage: build
      displayName: Build and Test

      jobs:
      - job: PRValidationBuild
        displayName: PR Validation Build
        timeoutInMinutes: 360
        templateContext:
          outputs:

          # Publish OptProf configuration files to the artifact service
          - output: artifactsDrop
            displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'
            condition: succeeded()
            dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
            buildNumber: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(SourceBranchName)/$(OriginalBuildNumber)'
            sourcePath: '$(Build.SourcesDirectory)\artifacts\OptProf\$(BuildConfiguration)\Data'
            toLowerCase: false
            usePat: true
            accessToken: $(_DevDivDropAccessToken)
            retentionDays: 90

          # Publish OptProf generated JSON files as a pipeline artifact. This allows for easy inspection from
          # a build execution.
          - output: pipelineArtifact
            displayName: 'Publish OptProf Data Files'
            condition: succeeded()
            targetPath: '$(Build.SourcesDirectory)\artifacts\OptProf\$(BuildConfiguration)\Data'
            artifactName: 'OptProf Data Files'

          - output: pipelineArtifact
            displayName: 'Publish Logs'
            condition: succeededOrFailed()
            targetPath: '$(Build.SourcesDirectory)\artifacts\log\$(BuildConfiguration)'
            artifactName: 'Build Diagnostic Files'
            publishLocation: Container

          - output: pipelineArtifact
            displayName: 'Publish Ngen Logs'
            condition: succeeded()
            targetPath: '$(Build.SourcesDirectory)\artifacts\log\$(BuildConfiguration)\ngen'
            artifactName: 'NGen Logs'
            publishLocation: Container

          # Publishes setup VSIXes to a drop.
          # Note: The insertion tool looks for the display name of this task in the logs.
          - output: microBuildVstsDrop
            displayName: Upload VSTS Drop
            condition: succeeded()
            dropFolder: 'artifacts\VSSetup\$(BuildConfiguration)\Insertion'
            dropName: $(VisualStudio.DropName)
            accessToken: $(_DevDivDropAccessToken)
            dropRetentionDays: 90

          # Publish insertion packages to CoreXT store.
          - output: nuget
            displayName: 'Publish CoreXT Packages'
            condition: succeeded()
            packageParentPath: '$(Build.SourcesDirectory)\artifacts\VSSetup\$(BuildConfiguration)\DevDivPackages'
            packagesToPush: '$(Build.SourcesDirectory)\artifacts\VSSetup\$(BuildConfiguration)\DevDivPackages\**\*.nupkg'
            allowPackageConflicts: true
            nuGetFeedType: internal
            publishVstsFeed: '97a41293-2972-4f48-8c0e-05493ae82010'

          # Publish an artifact that the RoslynInsertionTool is able to find by its name.
          - output: pipelineArtifact
            displayName: 'Publish Artifact VSSetup'
            condition: succeeded()
            targetPath: 'artifacts\VSSetup\$(BuildConfiguration)'
            artifactName: 'VSSetup'

          # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the
          # arcade templates depend on the name.
          - output: buildArtifacts
            displayName: 'Publish Artifact Packages'
            condition: succeeded()
            PathtoPublish: 'artifacts\packages\$(BuildConfiguration)'
            ArtifactName: 'PackageArtifacts'

          # Publish Asset Manifests for Build Asset Registry job
          - output: buildArtifacts
            displayName: 'Publish Asset Manifests'
            condition: succeeded()
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'
            ArtifactName: AssetManifests

        steps:
        - powershell: Write-Host "##vso[task.setvariable variable=OriginalBuildNumber;isreadonly=true]$('$(Build.BuildNumber)')"
          displayName: Setting OriginalBuildNumber variable
          condition: succeeded()

        - powershell: Write-Host "##vso[task.setvariable variable=SourceBranchName;isreadonly=true]$('$(Build.SourceBranch)'.Substring('refs/heads/'.Length))"
          displayName: Setting SourceBranchName variable
          condition: succeeded()

        - task: Powershell@2
          name: FancyBuild
          displayName: Setting FancyBuild.BuildNumber
          inputs:
            targetType: inline
            script: |
              $pull_request = Invoke-RestMethod -Uri "https://api.github.com/repos/dotnet/roslyn/pulls/${{ parameters.PRNumber }}" `
              -Headers @{
                "Accept" = "application/vnd.github+json";
                "X-GitHub-Api-Version" = "2022-11-28"
              }
              $buildNumberName = "$(OriginalBuildNumber) - $($pull_request.user.login) - '$($pull_request.title)'"
              $buildNumberName = $buildNumberName -replace '["/:<>\|?@*]','_'
              # Maximum buildnumber length is 255 chars and we are going to append to the end to ensure we have space.
              if ($buildNumberName.Length -GT 253) {
                $buildNumberName = $buildNumberName.Substring(0, 253)
              }
              # Avoid ever ending the BuildNumber with a `.` by always appending to it.
              $buildNumberName += ' #'
              Write-Host "##vso[task.setvariable variable=BuildNumber;isoutput=true;isreadonly=true]$buildNumberName"
              Write-Host "##vso[build.updatebuildnumber]$buildNumberName"

        - task: Powershell@2
          displayName: Tag PR validation build
          inputs:
            targetType: inline
            script: |
              Write-Host "##vso[build.addBuildTag]OfficialBuild"
              Write-Host "##vso[build.addBuildTag]${{ parameters.CommitSHA }}"
              Write-Host "##vso[build.addBuildTag]PRNumber${{ parameters.PRNumber }}"
          condition: succeeded()

        - task: PowerShell@2
          displayName: Setup branch for insertion validation
          inputs:
            filePath: 'eng\setup-pr-validation.ps1'
            arguments: '-sourceBranchName $(SourceBranchName) -prNumber ${{ parameters.PRNumber }} -commitSHA ${{ parameters.CommitSHA }}'
          condition: succeeded()

        - powershell: Write-Host "##vso[task.setvariable variable=VisualStudio.DropName]Products/$(System.TeamProject)/$(Build.Repository.Name)/$(SourceBranchName)/$(OriginalBuildNumber)"
          displayName: Setting VisualStudio.DropName variable

        - task: NuGetToolInstaller@0
          inputs:
            versionSpec: '4.9.2'

        # Authenticate with service connections to be able to publish packages to external nuget feeds.
        - task: NuGetAuthenticate@1
          inputs:
            nuGetServiceConnections: azure-public/vs-impl, azure-public/vssdk

        # Needed because the build fails the NuGet Tools restore without it
        - task: UseDotNet@2
          displayName: 'Use .NET Core sdk'
          inputs:
            packageType: sdk
            useGlobalJson: true
            workingDirectory: '$(Build.SourcesDirectory)'

        # Needed to restore the Microsoft.DevDiv.Optimization.Data.PowerShell package
        - task: NuGetCommand@2
          displayName: Restore internal tools
          inputs:
            command: restore
            feedsToUse: config
            restoreSolution: 'eng\common\internal\Tools.csproj'
            nugetConfigPath: 'NuGet.config'
            restoreDirectory: '$(Build.SourcesDirectory)\.packages'

        - task: MicroBuildSigningPlugin@4
          inputs:
            signType: $(SignType)
            zipSources: false
          condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))

        - task: PowerShell@2
          displayName: Build
          inputs:
            filePath: eng/build.ps1
            arguments: -ci
                       -prepareMachine
                       -restore
                       -build
                       -pack
                       -sign
                       -publish
                       -binaryLog
                       -configuration $(BuildConfiguration)
                       -officialBuildId $(OriginalBuildNumber)
                       -officialSkipTests $(SkipTests)
                       -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)
                       -officialSourceBranchName $(SourceBranchName)
                       -officialIbcDrop $(IbcDrop)
                       -officialVisualStudioDropAccessToken $(_DevDivDropAccessToken)
                       /p:RepositoryName=$(Build.Repository.Name)
                       /p:VisualStudioDropName=$(VisualStudio.DropName)
                       /p:DotNetSignType=$(SignType)
                       /p:DotnetPublishUsingPipelines=true
                       /p:IgnoreIbcMergeErrors=true
                       /p:GenerateSbom=true
                       /p:PreReleaseVersionLabel=pr-validation
          condition: succeeded()

        - template: /eng/common/templates-official/steps/generate-sbom.yml@self

        - task: PowerShell@2
          displayName: Publish Assets
          inputs:
            filePath: 'eng\publish-assets.ps1'
            arguments: '-configuration $(BuildConfiguration) -branchName "$(SourceBranchName)" -prValidation'
          condition: succeeded()

        - task: PublishTestResults@2
          displayName: Publish xUnit Test Results
          inputs:
            testRunner: XUnit
            testResultsFiles: '$(Build.SourcesDirectory)\artifacts\TestResults\$(BuildConfiguration)\*.xml'
            mergeTestResults: true
            testRunTitle: 'Unit Tests'
          condition: and(succeededOrFailed(), ne(variables['SkipTests'], 'true'))

        # We need to reset the BuildNumber before we pass off to Arcade
        - powershell: Write-Host "##vso[build.updatebuildnumber]$(OriginalBuildNumber)"
          displayName: Reset BuildNumber
          condition: succeeded()

      # Publish to Build Asset Registry
      - template: /eng/common/templates-official/job/publish-build-assets.yml@self
        parameters:
          publishUsingPipelines: true
          dependsOn:
          - PRValidationBuild
          pool:
            name: VSEngSS-MicroBuild2022-1ES

    - stage: insert
      dependsOn:
      - build
      - publish_using_darc
      displayName: Insert to VS

      jobs:
      - job: insert
        variables:
          FancyBuildNumber: $[stageDependencies.build.PRValidationBuild.outputs['FancyBuild.BuildNumber']]
        displayName: Insert to VS
        pool:
          name: VSEngSS-MicroBuild2022-1ES
        steps:
        - download: current
          artifact: VSSetup
        - powershell: |
            $branchName = "$(Build.SourceBranch)".Substring("refs/heads/".Length)
            Write-Host "##vso[task.setvariable variable=ComponentBranchName]$branchName"
          displayName: Get Branch Name
        - template: /eng/pipelines/insert.yml@self
          parameters:
            createDraftPR: true
            autoComplete: false
            insertToolset: ${{ parameters.InsertToolset }}
            buildUserName: "dn-bot@microsoft.com"
            buildPassword: $(dn-bot-devdiv-build-e-code-full-release-e-packaging-r)
            componentUserName: "dn-bot@microsoft.com"
            componentPassword: $(dn-bot-dnceng-build-e-code-full-release-e-packaging-r)
            vsBranchName: ${{ parameters.VisualStudioBranchName }}
            titlePrefix: ${{ parameters.OptionalTitlePrefix }}
            sourceBranch: $(ComponentBranchName)
            publishDataURI: "https://raw.githubusercontent.com/dotnet/roslyn/main/eng/config/PublishData.json"
            queueSpeedometerValidation: true
            dropPath: '$(Pipeline.Workspace)\VSSetup'
            retainInsertedBuild: false
        # Arcade is done so we can set BuildNumber back
        - powershell: Write-Host "##vso[build.updatebuildnumber]$(FancyBuildNumber)"
          displayName: Reset BuildNumber
          condition: succeeded()

    # Use post-build to publish symbol packages.
    - template: /eng/common/templates-official/post-build/post-build.yml@self
      parameters:
        publishingInfraVersion: 3
        # Symbol validation is not entirely reliable as of yet, so should be turned off until
        # https://github.com/dotnet/arcade/issues/2871 is resolved.
        enableSymbolValidation: false
        enableSourceLinkValidation: false
        SDLValidationParameters: false
