<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <!--
    Roslyn version
  -->
  <PropertyGroup>
    <MajorVersion>5</MajorVersion>
    <MinorVersion>0</MinorVersion>
    <PatchVersion>0</PatchVersion>
    <PreReleaseVersionLabel>1</PreReleaseVersionLabel>
    <VersionPrefix>$(MajorVersion).$(MinorVersion).$(PatchVersion)</VersionPrefix>
    <!--
      By default the assembly version in official builds is "$(MajorVersion).$(MinorVersion).0.0".
      Keep the setting conditional. The toolset sets the assembly version to 42.42.42.42 if not set explicitly.
    -->
    <AssemblyVersion Condition="'$(OfficialBuild)' == 'true' or '$(DotNetUseShippingVersions)' == 'true'">$(MajorVersion).$(MinorVersion).0.0</AssemblyVersion>
  </PropertyGroup>
  <!--
    The maintenance-packages dependency versions need to be conditionally selected:
    https://github.com/dotnet/sdk/issues/45155
  -->
  <PropertyGroup Condition="'$(DotNetBuildSourceOnly)' == 'true'">
    <MicrosoftIORedistVersion>6.1.3</MicrosoftIORedistVersion>
    <SystemBuffersVersion>4.6.1</SystemBuffersVersion>
    <SystemDataSqlClientVersion>4.9.0</SystemDataSqlClientVersion>
    <SystemMemoryVersion>4.6.3</SystemMemoryVersion>
    <SystemNumericsVectorsVersion>4.6.1</SystemNumericsVectorsVersion>
    <SystemRuntimeCompilerServicesUnsafeVersion>6.1.2</SystemRuntimeCompilerServicesUnsafeVersion>
    <SystemThreadingTasksExtensionsVersion>4.6.3</SystemThreadingTasksExtensionsVersion>
    <SystemValueTupleVersion>4.6.1</SystemValueTupleVersion>
  </PropertyGroup>
  <PropertyGroup Condition="'$(DotNetBuildSourceOnly)' != 'true'">
    <MicrosoftIORedistVersion>6.0.1</MicrosoftIORedistVersion>
    <SystemBuffersVersion>4.5.1</SystemBuffersVersion>
    <!--
    Microsoft.TeamFoundationServer.Client is referencing System.Data.SqlClient causing CG alert
    When it updates its referenced System.Data.SqlClient version this should be removed
    -->
    <SystemDataSqlClientVersion>4.8.6</SystemDataSqlClientVersion>
    <SystemMemoryVersion>4.5.5</SystemMemoryVersion>
    <SystemNumericsVectorsVersion>4.5.0</SystemNumericsVectorsVersion>
    <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
    <SystemThreadingTasksExtensionsVersion>4.5.4</SystemThreadingTasksExtensionsVersion>
    <SystemValueTupleVersion>4.5.0</SystemValueTupleVersion>
  </PropertyGroup>
  <!--
    Versions managed by Arcade (see Versions.Details.xml)
  -->
  <PropertyGroup>
    <SystemCommandLineVersion>2.0.0-beta4.24528.1</SystemCommandLineVersion>
    <SystemCompositionVersion>9.0.0</SystemCompositionVersion>
    <SystemConfigurationConfigurationManagerVersion>9.0.0</SystemConfigurationConfigurationManagerVersion>
    <SystemDiagnosticsEventLogVersion>9.0.0</SystemDiagnosticsEventLogVersion>
    <SystemCollectionsImmutableVersion>9.0.0</SystemCollectionsImmutableVersion>
    <SystemComponentModelCompositionVersion>9.0.0</SystemComponentModelCompositionVersion>
    <SystemDiagnosticsDiagnosticSourceVersion>9.0.0</SystemDiagnosticsDiagnosticSourceVersion>
    <SystemIOHashingVersion>9.0.0</SystemIOHashingVersion>
    <SystemIOPipelinesVersion>9.0.0</SystemIOPipelinesVersion>
    <SystemReflectionMetadataVersion>9.0.0</SystemReflectionMetadataVersion>
    <SystemResourcesExtensionsVersion>9.0.0</SystemResourcesExtensionsVersion>
    <SystemSecurityCryptographyProtectedDataVersion>9.0.0</SystemSecurityCryptographyProtectedDataVersion>
    <SystemSecurityPermissionsVersion>9.0.0</SystemSecurityPermissionsVersion>
    <SystemTextEncodingsWebVersion>9.0.0</SystemTextEncodingsWebVersion>
    <!-- Note: When updating SystemTextJsonVersion ensure that the version is no higher than what is used by MSBuild in VS (would lead to NGEN failures on insertion). -->
    <SystemTextJsonVersion>9.0.0</SystemTextJsonVersion>
    <SystemThreadingTasksDataflowVersion>9.0.0</SystemThreadingTasksDataflowVersion>
    <SystemWindowsExtensionsVersion>9.0.0</SystemWindowsExtensionsVersion>
    <MicrosoftBclAsyncInterfacesVersion>9.0.0</MicrosoftBclAsyncInterfacesVersion>
    <MicrosoftCodeAnalysisAnalyzersVersion>3.11.0</MicrosoftCodeAnalysisAnalyzersVersion>
    <MicrosoftCodeAnalysisAnalyzerUtilitiesVersion>3.3.0</MicrosoftCodeAnalysisAnalyzerUtilitiesVersion>
    <MicrosoftCodeAnalysisNetAnalyzersVersion>8.0.0-preview.23468.1</MicrosoftCodeAnalysisNetAnalyzersVersion>
    <MicrosoftDiaSymReaderVersion>2.0.0</MicrosoftDiaSymReaderVersion>
    <MicrosoftExtensionsConfigurationVersion>9.0.0</MicrosoftExtensionsConfigurationVersion>
    <MicrosoftExtensionsDependencyInjectionVersion>9.0.0</MicrosoftExtensionsDependencyInjectionVersion>
    <MicrosoftExtensionsFileSystemGlobbingVersion>8.0.0</MicrosoftExtensionsFileSystemGlobbingVersion>
    <MicrosoftExtensionsLoggingVersion>9.0.0</MicrosoftExtensionsLoggingVersion>
    <MicrosoftExtensionsLoggingAbstractionsVersion>9.0.0</MicrosoftExtensionsLoggingAbstractionsVersion>
    <MicrosoftExtensionsLoggingConsoleVersion>9.0.0</MicrosoftExtensionsLoggingConsoleVersion>
    <MicrosoftExtensionsOptionsConfigurationExtensionVersion>8.0.0</MicrosoftExtensionsOptionsConfigurationExtensionVersion>
    <MicrosoftExtensionsOptionsVersion>9.0.0</MicrosoftExtensionsOptionsVersion>
    <MicrosoftExtensionsPrimitivesVersion>9.0.0</MicrosoftExtensionsPrimitivesVersion>
    <MicrosoftVSSDKBuildToolsVersion>17.14.1043-preview2</MicrosoftVSSDKBuildToolsVersion>
    <vswhereVersion>2.4.1</vswhereVersion>
    <!--
      MicrosoftDevDivOptimizationDataPowerShellVersion and NewtonsoftJsonVersion are used in eng/InternalTools.props. The file is an extensibility port from eng/common/internal/Tools.csproj (managed by Arcade)
      So it's not affected by our central package management
    -->
    <MicrosoftIdentityClientVersion>4.61.3</MicrosoftIdentityClientVersion>
    <MicrosoftDevDivOptimizationDataPowerShellVersion>1.0.865</MicrosoftDevDivOptimizationDataPowerShellVersion>
    <MicrosoftIdentityModelJsonWebTokensVersion>6.34.0</MicrosoftIdentityModelJsonWebTokensVersion>
    <NewtonsoftJsonVersion>13.0.3</NewtonsoftJsonVersion>
    <SystemIdentityModelTokensJwtVersion>6.34.0</SystemIdentityModelTokensJwtVersion>
    <MicrosoftIdentityClientVersion>4.61.3</MicrosoftIdentityClientVersion>
    <SystemIdentityModelTokensJwtVersion>6.34.0</SystemIdentityModelTokensJwtVersion>
  </PropertyGroup>
  <!--
    Microsoft.CodeAnalysis.* versions used by the RoslynAnalyzers.
  -->
  <PropertyGroup>
    <!-- Microsoft.CodeAnalysis.* versions. Read this!
        This repo uses a wide variety of M.CA.* package versions. This is an atypical pattern in
        .NET's repositories but a necessary one for roslyn-analyzers.

        Some facts:
        - These versions are chosen on purpose.
        - They often represent the base required surface area of Microsoft.CA to support for a given feature or analyzer.
          This means that the analyzer would be supported in the widest array of C# compilation scenarios.
        - Most of these dependencies only represent target surface area. In some cases, the M.CA libraries are
          redistributed (tools) or used within the build.
        - Some of these versions are used for testing to ensure that analyzers built against older surface area
          still work against new implementations.
        - Linux source-build only builds a single implementation of M.CA.*.
        - Linux source-build does have some ability to provide surface area packages via the source-build-reference-packages repo.
          However, because these reference packages do not provide implementations, they cannot be used in any case
          where the package contents would be redisted or executed. An SBRP may not be created for a version that is used both
          as a reference assembly and redisted.

          In this repo, the MicrosoftCodeAnalysis property should **not** be set globally in this file. Instead, it should
          be set for each project, based on the properties below. When the project is executable, it should be
          set only for non-source build or repo-source build. Product source build will set an incoming MicrosoftCodeAnalysis property
          that will denote the available implementation version.

          Example of surface area usage:

          <MicrosoftCodeAnalysisVersion Condition="'$(MicrosoftCodeAnalysisVersion)' == ''">$(MicrosoftCodeAnalysisVersionForPerfSensitiveAnalyzers)</MicrosoftCodeAnalysisVersion>

          Example of executable usage:

          <MicrosoftCodeAnalysisVersion Condition="'$(MicrosoftCodeAnalysisVersion)' == ''">$(MicrosoftCodeAnalysisVersionForExecution)</MicrosoftCodeAnalysisVersion>
    -->
    <!-- Microsoft.CodeAnalysis versions for different purposes. -->
    <!-- Surface area that various projects compile against. These should have source-build reference packages -->
    <MicrosoftCodeAnalysisForRoslynDiagnosticsAnalyzersVersion>3.11.0</MicrosoftCodeAnalysisForRoslynDiagnosticsAnalyzersVersion>
    <MicrosoftCodeAnalysisVersionForPublicApiAnalyzers>1.2.1</MicrosoftCodeAnalysisVersionForPublicApiAnalyzers>
    <MicrosoftCodeAnalysisVersionForBannedApiAnalyzers>3.11.0</MicrosoftCodeAnalysisVersionForBannedApiAnalyzers>
    <MicrosoftCodeAnalysisVersionForPerfSensitiveAnalyzers>3.11.0</MicrosoftCodeAnalysisVersionForPerfSensitiveAnalyzers>
    <MicrosoftCodeAnalysisVersionForResxSourceGenerators>4.0.1</MicrosoftCodeAnalysisVersionForResxSourceGenerators>
    <MicrosoftCodeAnalysisVersionForNetAnalyzers>3.11.0</MicrosoftCodeAnalysisVersionForNetAnalyzers>
    <MicrosoftCodeAnalysisVersionForTextAnalyzers>3.11.0</MicrosoftCodeAnalysisVersionForTextAnalyzers>
    <MicrosoftCodeAnalysisVersionForCodeAnalysisAnalyzers>3.11.0</MicrosoftCodeAnalysisVersionForCodeAnalysisAnalyzers>
    <MicrosoftCodeAnalysisVersionForToolsAndUtilities>3.11.0</MicrosoftCodeAnalysisVersionForToolsAndUtilities>
    <MicrosoftCodeAnalysisVersionForMetrics>4.0.1</MicrosoftCodeAnalysisVersionForMetrics>
    <!-- Versions for tests and general utility execution. -->
    <!-- This version is for utility and executable assemblies. The version here should not overlap with any of the surface
         area versions. -->
    <MicrosoftCodeAnalysisVersionForTests>4.9.0-3.final</MicrosoftCodeAnalysisVersionForTests>
    <MicrosoftCodeAnalysisVersionForExecution>4.6.0-1.final</MicrosoftCodeAnalysisVersionForExecution>
  </PropertyGroup>
  <PropertyGroup>
    <UsingToolVSSDK Condition="$([MSBuild]::IsOSPlatform('Windows'))">true</UsingToolVSSDK>
    <UsingToolPdbConverter>false</UsingToolPdbConverter>
    <UsingToolSymbolUploader>true</UsingToolSymbolUploader>
    <UsingToolNuGetRepack>true</UsingToolNuGetRepack>
    <!-- Avoid attempting IBC on platforms where ngen won't work, or the IBC tooling won't work -->
    <UsingToolIbcOptimization Condition="$([MSBuild]::IsOSPlatform('Windows'))">true</UsingToolIbcOptimization>
    <UsingToolVisualStudioIbcTraining Condition="$([MSBuild]::IsOSPlatform('Windows'))">true</UsingToolVisualStudioIbcTraining>
    <UsingToolXliff>true</UsingToolXliff>
    <UsingToolXUnit>false</UsingToolXUnit>
    <UseVSTestRunner>true</UseVSTestRunner>
    <!-- Prohibit the usage of .NET Standard 1.x dependencies. -->
    <FlagNetStandard1XDependencies Condition="'$(DotNetBuildSourceOnly)' == 'true' and '$(DotNetBuildOrchestrator)' == 'true'">true</FlagNetStandard1XDependencies>
  </PropertyGroup>
  <PropertyGroup>
    <!--
      Test SDK should match the version of TestPlatform packages required by this repo and defined
      in Directory.Packages.props - Microsoft.TestPlatform.TranslationLayer and Microsoft.TestPlatform.ObjectModel.
      This version needs to match the Test SDK version consumed by Arcade.
    -->
    <MicrosoftNETTestSdkVersion>17.5.0</MicrosoftNETTestSdkVersion>
  </PropertyGroup>
</Project>
