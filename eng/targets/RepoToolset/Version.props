<?xml version="1.0" encoding="utf-8"?>
<!-- All Rights Reserved. Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <!--
    Specification: https://github.com/dotnet/arcade/blob/master/Documentation/Versioning.md

    Properties:
      SemanticVersioningV1  "true" if the Version needs to respect SemVer 1.0. Default is false, which means format following SemVer 2.0.

    Global settings:
      DotNetUseShippingVersions
        - "true" to produce shipping versions in non-official builds, instead of default fixed dummy version number (42.42.42.42).
        - A builds target that produces MSI shall fail if DotNetUseShippingVersions == false, since MSIs require increasing file versions to function properly.
  -->

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <!--
    The project can specify version either directly using the .NET SDK recognized property VersionPrefix,
    or using MajorVersion and MinorVersion properties.
  -->
  <PropertyGroup>
    <VersionPrefix Condition="'$(VersionPrefix)' == '' and '$(MajorVersion)' != '' and '$(MinorVersion)' != ''">$(MajorVersion).$(MinorVersion).0</VersionPrefix>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(OfficialBuild)' == 'true' or '$(DotNetUseShippingVersions)' == 'true'">
      <PropertyGroup>
        <!--
          Building MSIs from dev build requires file versions to be increasing.
          Use the current date in non-official builds. Note that this reduces the deterministic properties of the build
          and should only be enabled when it's necessary to test-install the MSIs produced by the build.
        -->
        <_BuildNumber>$(OfficialBuildId)</_BuildNumber>
        <_BuildNumber Condition="'$(OfficialBuildId)' == ''">$([System.DateTime]::Now.ToString(yyyyMMdd)).1</_BuildNumber>

        <!--
          Official build PackageVersion format: MAJOR.MINOR.PATCH-PRERELEASE.SHORTDATE.REVISION+SHORTSHA

          MAJOR.MINOR.PATCH is specified by the project in VersionPrefix property.
          PRERELEASE.SHORTDATE.REVISION is calculated here and stored in VersionSuffix property.
          SHORTSHA is appended when PackageVersion is calculated in a target.

          OfficialBuildId is assumed to have format "yyyyMMdd.r" (the assumption is checked later in a target).
          REVISION (VersionSuffixBuildOfTheDay) is set to r component of OfficialBuildId.
          SHORTDATE (VersionSuffixDateStamp) is set to yy * 1000 + mm * 50 + dd.
        -->
        <_BuildNumberYY>$(_BuildNumber.Substring($([System.Convert]::ToInt32(2)), $([System.Convert]::ToInt32(2))))</_BuildNumberYY>
        <_BuildNumberMM>$(_BuildNumber.Substring($([System.Convert]::ToInt32(4)), $([System.Convert]::ToInt32(2))))</_BuildNumberMM>
        <_BuildNumberDD>$(_BuildNumber.Substring($([System.Convert]::ToInt32(6)), $([System.Convert]::ToInt32(2))))</_BuildNumberDD>
        <_BuildNumberR>$(_BuildNumber.Substring($([System.Convert]::ToInt32(9))))</_BuildNumberR>

        <!-- yy * 1000 + mm * 50 + dd -->
        <VersionSuffixDateStamp>$([MSBuild]::Add($([MSBuild]::Add($([MSBuild]::Multiply($([System.Convert]::ToInt32($(_BuildNumberYY))), $([System.Convert]::ToInt32(1000)))), $([MSBuild]::Multiply($([System.Convert]::ToInt32($(_BuildNumberMM))), $([System.Convert]::ToInt32(50)))))), $([System.Convert]::ToInt32($(_BuildNumberDD)))))</VersionSuffixDateStamp>

        <VersionSuffixBuildOfTheDay>$([System.Convert]::ToInt32($(_BuildNumberR)))</VersionSuffixBuildOfTheDay>
        <VersionSuffixBuildOfTheDayPadded>$(VersionSuffixBuildOfTheDay.PadLeft($([System.Convert]::ToInt32(2)), $([System.Convert]::ToChar(`0`))))</VersionSuffixBuildOfTheDayPadded>

        <_BuildNumberSuffix Condition="'$(SemanticVersioningV1)' != 'true'">.$(VersionSuffixDateStamp).$(VersionSuffixBuildOfTheDay)</_BuildNumberSuffix>
        <_BuildNumberSuffix Condition="'$(SemanticVersioningV1)' == 'true'">-$(VersionSuffixDateStamp)-$(VersionSuffixBuildOfTheDayPadded)</_BuildNumberSuffix>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <VersionSuffixDateStamp/>
        <VersionSuffixBuildOfTheDay/>
        <VersionSuffixBuildOfTheDayPadded/>
        <_BuildNumberSuffix/>

        <!--
          Don't include a commit SHA to AssemblyInformationalVersion.
          It would reduce the possibility of sharing otherwise unchanged build artifacts across deterministic builds.
        -->
        <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <_PreReleaseLabel>$(PreReleaseVersionLabel)</_PreReleaseLabel>
    <_PreReleaseLabel Condition="'$(ContinuousIntegrationBuild)' == 'true' and '$(OfficialBuild)' != 'true'">ci</_PreReleaseLabel>
    <_PreReleaseLabel Condition="'$(ContinuousIntegrationBuild)' != 'true'">dev</_PreReleaseLabel>

    <!--
      If DotNetFinalVersionKind is specified, overrides the package version produced by the build like so:
        ""           1.2.3-beta.12345.67+sha
        "prerelease" 1.2.3-beta+sha
        "release"    1.2.3
    -->
    <VersionSuffix Condition="'$(DotNetFinalVersionKind)' == 'release'"/>
    <VersionSuffix Condition="'$(DotNetFinalVersionKind)' == 'prerelease' and '$(SemanticVersioningV1)' != 'true'">$(_PreReleaseLabel).final</VersionSuffix>
    <VersionSuffix Condition="'$(DotNetFinalVersionKind)' == 'prerelease' and '$(SemanticVersioningV1)' == 'true'">$(_PreReleaseLabel)-final</VersionSuffix>
    <VersionSuffix Condition="'$(DotNetFinalVersionKind)' == ''">$(_PreReleaseLabel)$(_BuildNumberSuffix)</VersionSuffix>

    <!--
      Some projects want to remain producing prerelease packages even if we are doing a final stable build because
      they don't ship or aren't ready to ship stable. Those projects can set BlockStable property to true.
    -->
    <VersionSuffix Condition="'$(BlockStable)' == 'true'">$(_PreReleaseLabel)$(_BuildNumberSuffix)</VersionSuffix>

    <!--
      Disable NuGet Pack warning that the version is SemVer 2.0.
      SemVer 2.0 is supported by NuGet since 3.0.0 (July 2015) in some capacity, and fully since 3.5.0 (October 2016).
    -->
    <NoWarn Condition="'$(SemanticVersioningV1)' != 'true'">$(NoWarn);NU5105</NoWarn>
  </PropertyGroup>

</Project>
