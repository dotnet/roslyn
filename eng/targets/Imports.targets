<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Import Project="VisualStudio.targets"/>
  <Import Project="XUnit.targets" Condition="'$(IsTestProject)' == 'true'" />

  <PropertyGroup>
    <FileAlignment>512</FileAlignment>

    <!-- Only generate our runtimeconfig.json files for net core apps. It's unnecessary in desktop projects
         but gets included in lots of output items like VSIX. -->
    <GenerateRuntimeConfigurationFiles Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">false</GenerateRuntimeConfigurationFiles>

    <!-- Place VS insertion (CoreXT) packages to a separate directory -->
    <PackageOutputPath Condition="'$(IsVisualStudioInsertionPackage)' == 'true'">$(DevDivPackagesDir)</PackageOutputPath>
  </PropertyGroup>

  <ItemGroup Condition="'$(Language)' == 'CSharp' and '$(TargetFramework)' == 'net20'">
    <_ExplicitReference Include="$(FrameworkPathOverride)\mscorlib.dll" />
  </ItemGroup>

  <!--
    If the project targets Framework 2.0 reference assemblies provided by Microsoft.NetFramework.ReferenceAssemblies nuget package.
    Use the latest Framework toolset to build, but set msbuild properties below
    so to avoid 4.5 specific artifacts to be added to the compilation (references, attributes).
  -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net20'">
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
    <NoStdLib>true</NoStdLib>
    <ResGenExecuteAsTool>false</ResGenExecuteAsTool>
    <GenerateResourceMSBuildRuntime>CurrentRuntime</GenerateResourceMSBuildRuntime>

    <!-- Bypass a check in msbuild that .NET Framework 3.5 is installed on the machine when targeting .NET < 4.0 -->
    <BypassFrameworkInstallChecks>true</BypassFrameworkInstallChecks>
  </PropertyGroup>

  <!-- Add the UnitTestContainer project capability -->
  <ItemGroup Condition="'$(IsTestProject)' == 'true'">
    <ProjectCapability Include="UnitTestContainer" />
  </ItemGroup>

  <!-- 
    Do not copy dependencies to the output directory of a library project, unless it's a unit test project.
  -->
  <ItemDefinitionGroup Condition="'$(OutputType)' == 'Library' and '$(IsVsixProject)' != 'true' and '$(IsTestProject)' != 'true'">
    <Reference>
      <Private>False</Private>
    </Reference>

    <ProjectReference>
      <Private>False</Private>
    </ProjectReference>
  </ItemDefinitionGroup>

  <PropertyGroup Condition="'$(ProduceReferenceAssembly)' == '' and (('$(OutputType)' == 'Library' and '$(IsVsixProject)' != 'true' and '$(IsTestProject)' != 'true') or '$(OutputType)' == 'Exe' or '$(OutputType)' == 'WinExe')">
    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>
  </PropertyGroup>

  <!-- Rulesets -->
  <PropertyGroup Condition="'$(CodeAnalysisRuleSet)' == ''">
    <CodeAnalysisRuleSet Condition="'$(IsShipping)' == 'true'">$(RepositoryEngineeringDir)config\rulesets\Shipping.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition="'$(IsShipping)' != 'true'">$(RepositoryEngineeringDir)config\rulesets\NonShipping.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>

  <!--
    Some dependencies bring in references to UIAutomationClient and UIAutomationTypes. These conflict with the faster
    UIAComWrapper implementation used by the Roslyn integration tests. This target sets the alias for the slower
    dependencies so they are not used unintentionally within the Roslyn code base.
  -->
  <Target Name="HideSlowAutomationAssemblies" BeforeTargets="FindReferenceAssembliesForReferences;ResolveReferences" >
    <ItemGroup>
      <ReferencePath Condition="'%(FileName)' == 'UIAutomationClient' OR
                                '%(FileName)' == 'UIAutomationTypes'">
        <Aliases>slowautomation</Aliases>
      </ReferencePath>
    </ItemGroup>
  </Target>

  <!--
    Chain before the .NET Core SDK GetAssemblyAttributes target to add the additional attribute.
  -->
  <Target Name="_AddCommitHashAttribute"
          DependsOnTargets="InitializeSourceControlInformation"
          BeforeTargets="GetAssemblyAttributes"
          Condition="'$(GenerateMicrosoftCodeAnalysisCommitHashAttribute)' == 'true'">
    <ItemGroup>
      <AssemblyAttribute Include="Microsoft.CodeAnalysis.CommitHashAttribute">
        <_Parameter1 Condition="'$(OfficialBuild)' == 'true'">$(SourceRevisionId)</_Parameter1>
        <_Parameter1 Condition="'$(OfficialBuild)' != 'true'">&lt;developer build&gt;</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <TargetFrameworkMonikerAssemblyAttributesPath>$(IntermediateOutputPath)$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)</TargetFrameworkMonikerAssemblyAttributesPath>
  </PropertyGroup>

  <Target Name="CheckBootstrapState" Condition="'$(BootstrapBuildPath)' != ''" AfterTargets="CoreCompile">
    <ValidateBootstrap BootstrapPath="$(BootstrapBuildPath)" />
  </Target>

  <!--
    When running our determinism tests we need to copy the diagnostic file from the intermediate directory
    to the location of the binary.  This ensures .dll and .dll.key are next to each other to be picked up
    by our test scripts
  -->
  <Target Name="CopyDeterministicBuildDiagnosticFile" Condition="'$(DebugDeterminism)' != ''" AfterTargets="CoreCompile">
    <Copy Condition="'$(IsWpfTempProject)' != 'true' and Exists(@(IntermediateAssembly -> '%(fullpath).key'))"
          SourceFiles="@(IntermediateAssembly -> '%(fullpath).key')"
          DestinationFolder="$(OutDir)" />
  </Target>

  <UsingTask TaskName="Microsoft.DotNet.Arcade.Sdk.CompareVersions" AssemblyFile="$(ArcadeSdkBuildTasksAssembly)" />
  <UsingTask TaskName="Microsoft.DotNet.Arcade.Sdk.SingleError" AssemblyFile="$(ArcadeSdkBuildTasksAssembly)" />

  <Target Name="_CheckRequiredMSBuildVersion" BeforeTargets="BeforeBuild">
    <CompareVersions Left="$(MSBuildVersion)" Right="$(MinimumMSBuildVersion)">
      <Output TaskParameter="Result" PropertyName="_VersionComparisonResult"/>
    </CompareVersions>
  
    <SingleError Text="The msbuild version $(MSBuildVersion) is below the minimum required version $(MinimumMSBuildVersion)"
                 Condition="$(_VersionComparisonResult) &lt; 0"/>
  </Target> 

  <Target Name="DisableAnalyzers"
          BeforeTargets="CoreCompile"
          Condition="'$(UseRoslynAnalyzers)' == 'false'">
    <!--
      Disable analyzers via an MSBuild property settable on the command line.
    -->
    <ItemGroup>
      <Analyzer Remove="@(Analyzer)" />
    </ItemGroup>
  </Target>

  <!-- 
    This target is used to copy referenced projects to a sub-directory vs. the direct output 
    directory of the build. Useful when the referenced project is an EXE and the referencing 
    project uses an incompatible TargetFramework (e.g. CommandLineTest -> csc/vbc)
  -->
  <Target Name="CopyReferencedProjectsToDependenciesDirectory" Condition="'@(RoslynReferenceToDependencyDirectory)' != ''" AfterTargets="ResolveProjectReferences">
    <PropertyGroup>
      <_RoslynReferenceOutputPath>@(RoslynReferenceToDependencyDirectory->'%(RootDir)%(Directory)')</_RoslynReferenceOutputPath>
    </PropertyGroup>
    <ItemGroup>
      <_RoslynReferenceContent Include="$(_RoslynReferenceOutputPath)*.*" />
      <Content Include="@(_RoslynReferenceContent)" Link="dependency\%(_RoslynReferenceContent.Filename)%(_RoslynReferenceContent.Extension)" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

  <!-- 
    Count PublicAPIs as AdditionalFiles to get them to analyzers. This is working around
    https://github.com/dotnet/project-system/issues/2160 where AdditionalFileItemNames
    isn't fully supported yet in the new project system. Removal of this hack is tracked
    by https://github.com/dotnet/roslyn/issues/19545. 
  -->
  <ItemGroup>
    <AdditionalFiles Include="@(PublicAPI)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Show launchSettings.json in the project if it exists. -->
    <None Include="$(AppDesignerFolder)\launchSettings.json" Condition="Exists('$(AppDesignerFolder)\launchSettings.json')" />
  </ItemGroup>

  <!-- CPS doesn't show these items by default, but we want to show them. -->
  <ItemGroup>
    <!-- XAML pages and resources -->
    <None Include="@(Page)" />
    <None Include="@(Resource)" />
  </ItemGroup>

  <!-- 
    Add ThirdPartyNotices.rtf to all shipping NuGet packages.
  -->
  <ItemGroup Condition="'$(IsPackable)' == 'true' and '$(IsShipping)' == 'true'">
    <None Include="$(ThirdPartyNoticesFilePath)" PackagePath="ThirdPartyNotices.rtf" Visible="false" Pack="true"/>
  </ItemGroup>

  <!--
    Append common text to package specific PackageDescription.
  -->
  <Target Name="_AppendCommonPackageDescription" 
          BeforeTargets="InitializeStandardNuspecProperties;GenerateNuspec" 
          DependsOnTargets="InitializeSourceControlInformation"
          Condition="'$(IsPackable)' == 'true'">
    <PropertyGroup>
      <PackageDescription>
      $(PackageDescription)
      More details at https://aka.ms/roslyn-packages
      This package was built from the source at $(PrivateRepositoryUrl)/commit/$(SourceRevisionId).
      </PackageDescription>
    </PropertyGroup>
  </Target>

  <!--
    Exclude private Visual Studio packages from dependencies of Roslyn packages.
  -->
  <ItemGroup Condition="'$(IsPackable)' == 'true'">
    <PackageReference Update="@(PrivateVisualStudioPackage)" PrivateAssets="all"/>
  </ItemGroup>

  <!--
    Default settings for analyzer packages.    
  -->
  <PropertyGroup Condition="'$(IsPackable)' == 'true' and '$(IsAnalyzer)' == 'true'">
    <DevelopmentDependency>true</DevelopmentDependency>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <IncludeContentInPack>false</IncludeContentInPack>
  </PropertyGroup>
  
  <ItemGroup Condition="'$(IsPackable)' == 'true' and '$(IsAnalyzer)' == 'true'">
    <!-- Analyzer packages should not have any dependencies. -->
    <PackageReference Update="@(PackageReference)" PrivateAssets="all"/>
    <ProjectReference Update="@(ProjectReference)" PrivateAssets="all"/>

    <!-- Analyzer packages should contain install scripts. -->
    <None Include="$(MSBuildThisFileDirectory)\..\..\src\Setup\PowerShell\install.ps1" PackagePath="tools\install.ps1" Visible="false" Pack="true"/>
    <None Include="$(MSBuildThisFileDirectory)\..\..\src\Setup\PowerShell\uninstall.ps1" PackagePath="tools\uninstall.ps1" Visible="false" Pack="true"/>
  </ItemGroup>

  <!--
    Ensure TargetFrameworkMonikerAssemblyAttributeText is treated as auto-generated
  -->
  <Target Name="TreatTargetFrameworkMonikerAssemblyAttributeTextAsGenerated"
          AfterTargets="_SetTargetFrameworkMonikerAttribute"
          Condition="'$(Language)' == 'VB'">
    <PropertyGroup>
      <TargetFrameworkMonikerAssemblyAttributeText>
        ' &lt;autogenerated/&gt;
        $(TargetFrameworkMonikerAssemblyAttributeText)
      </TargetFrameworkMonikerAssemblyAttributeText>
    </PropertyGroup>
  </Target>
</Project>
