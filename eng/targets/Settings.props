<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <PropertyGroup>
    <Copyright>$(CopyrightMicrosoft)</Copyright>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>

    <PackageTags>Roslyn CodeAnalysis Compiler CSharp VB VisualBasic Parser Scanner Lexer Emit CodeGeneration Metadata IL Compilation Scripting Syntax Semantics</PackageTags>
    <ThirdPartyNoticesFilePath>$(MSBuildThisFileDirectory)..\..\src\NuGet\ThirdPartyNotices.rtf</ThirdPartyNoticesFilePath>

    <VSSDKTargetPlatformRegRootSuffix>RoslynDev</VSSDKTargetPlatformRegRootSuffix>

    <CommonExtensionInstallationRoot>CommonExtensions</CommonExtensionInstallationRoot>
    <LanguageServicesExtensionInstallationFolder>Microsoft\VBCSharp\LanguageServices</LanguageServicesExtensionInstallationFolder>

    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>

    <!-- Disable the implicit nuget fallback folder as it makes it hard to locate and copy ref assemblies to the test output folder -->
    <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
    <ToolsetPackagesDir>$(RepoRoot)build\ToolsetPackages\</ToolsetPackagesDir>
    <UseSharedCompilation>true</UseSharedCompilation>

    <Features>strict</Features>
    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GenerateFullPaths>true</GenerateFullPaths>
    <EnableWindowsTargeting Condition="'$(DotNetBuildFromSource)' != 'true'">true</EnableWindowsTargeting>

    <!-- Set to non-existent file to prevent common targets from importing Microsoft.CodeAnalysis.targets -->
    <CodeAnalysisTargets>NON_EXISTENT_FILE</CodeAnalysisTargets>

    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">15.0</VisualStudioVersion>
    <VisualStudioReferenceMajorVersion Condition="'$(VisualStudioReferenceMajorVersion)' == ''">$(VisualStudioVersion.Substring($([System.Convert]::ToInt32(0)), $(VisualStudioVersion.IndexOf('.'))))</VisualStudioReferenceMajorVersion>
    <VisualStudioReferenceAssemblyVersion Condition="'$(VisualStudioReferenceAssemblyVersion)' == ''">$(VisualStudioReferenceMajorVersion).0.0.0</VisualStudioReferenceAssemblyVersion>
    <MinimumVisualStudioVersion>$(VisualStudioVersion)</MinimumVisualStudioVersion>
    <MinimumMSBuildVersion>15.7.0</MinimumMSBuildVersion>

    <!-- Disable AppX packaging for the Roslyn source. Not setting this to false has the side effect
         that any builds of portable projects end up in a sub folder of $(OutputPath). Search for this flag in
         Microsoft.Common.CurrentVersion.targets to see how it is consumed -->
    <WindowsAppContainer>false</WindowsAppContainer>

    <!-- Used to control the running of the GenerateSatelliteAssemblies and CoreGenerateSatelliteAssemblies targets -->
    <GenerateSatelliteAssemblies>true</GenerateSatelliteAssemblies>

    <EnableDefaultNoneItems>false</EnableDefaultNoneItems>
    <Nullable>enable</Nullable>
    <DiscoverEditorConfigFiles>true</DiscoverEditorConfigFiles>

    <!-- VS does not require Windows PDBs to be published anymore. -->
    <PublishWindowsPdb>false</PublishWindowsPdb>
    <EnforceExtendedAnalyzerRules>false</EnforceExtendedAnalyzerRules>
    <EnforceExtendedAnalyzerRules Condition="'$(IsAnalyzer)' == 'true'">true</EnforceExtendedAnalyzerRules>

    <!-- NPM packaging settings -->
    <NpmPackageOutputPath>$(ArtifactsDir)\packages\$(Configuration)\NPM\</NpmPackageOutputPath>
    <!-- By default don't attempt to do npm packaging during pack since it requires NPM to be installed -->
    <IsNpmPackable Condition="'$(IsNpmPackable)'==''">false</IsNpmPackable>
  </PropertyGroup>

  <!-- 
    There are effectively three modes that are needed for our source build TFMs and this is where
    we calculate them
  -->
  <Choose>
    <!-- 
      1. CI source build leg: this needs to build the current and previous source build TFM. Both are 
         necessary as the output of this leg is used in other CI source build legs. Those could be 
         targeting NetCurrent or NetPrevious hence we must produce both. 

        However the toolset package we produce must target NetPrevious. This package gets used as the 
        bootstrap toolset in other repos doing (1). Those can be using a NetPrevious runtime hence 
        the toolset must support that.
    -->
    <When Condition="'$(DotNetBuildFromSource)' == 'true' AND '$(DotNetBuildFromSourceFlavor)' != 'Product'">
      <PropertyGroup>
        <SourceBuildToolsetTargetFramework>$(NetPrevious)</SourceBuildToolsetTargetFramework>
        <SourceBuildToolsetTargetFrameworks>$(SourceBuildToolsetTargetFramework)</SourceBuildToolsetTargetFrameworks>
        <SourceBuildTargetFrameworks>$(NetCurrent);$(NetPrevious)</SourceBuildTargetFrameworks>
      </PropertyGroup>
    </When>

    <!--
      2. Source build the product: this is the all up build of the product which needs only NetCurrent
    -->
    <When Condition="'$(DotNetBuildFromSource)' == 'true' AND '$(DotNetBuildFromSourceFlavor)' == 'Product'">
      <PropertyGroup>
        <SourceBuildToolsetTargetFramework>$(NetCurrent)</SourceBuildToolsetTargetFramework>
        <SourceBuildToolsetTargetFrameworks>$(SourceBuildToolsetTargetFramework)</SourceBuildToolsetTargetFrameworks>
        <SourceBuildTargetFrameworks>$(NetCurrent)</SourceBuildTargetFrameworks>
      </PropertyGroup>
    </When>

    <!--
      3. Everything else including normal CI, developer machines and official builds. This brings in enough
         TFM that source build will go smoothly but doesn't bring in all source build TFMs to avoid adding
         too many extra compiles to our builds
    -->
    <Otherwise>
      <PropertyGroup>
        <SourceBuildToolsetTargetFramework>net6.0</SourceBuildToolsetTargetFramework>
        <SourceBuildToolsetTargetFrameworks>$(SourceBuildToolsetTargetFramework);net7.0</SourceBuildToolsetTargetFrameworks>
        <SourceBuildTargetFrameworks>$(SourceBuildToolsetTargetFrameworks)</SourceBuildTargetFrameworks>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!--
    Disable Source Link and Xliff in WPF temp projects to avoid generating non-deterministic file names to obj dir.
    The project name is non-deterministic and is included in the Source Link json file name and xlf directory names.
    It's also not necessary to generate these assets.
  -->
  <PropertyGroup Condition="'$(IsWpfTempProject)' == 'true'">
    <EnableSourceLink>false</EnableSourceLink>
    <DeterministicSourcePaths>false</DeterministicSourcePaths>
    <EnableXlfLocalization>false</EnableXlfLocalization>
  </PropertyGroup>
  
  <!--
    Disable Xliff if it's not necessary to generate satellite assemblies.
  -->
  <PropertyGroup Condition="'$(GenerateSatelliteAssemblies)' == 'false'">
    <EnableXlfLocalization>false</EnableXlfLocalization>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsTestProject)' == 'true'" >
    <!--
      Choose default target frameworks to use for testing on Mono and Core.
      These may be overridden by projects that need to be skipped.
    -->
    <TestTargetFrameworks Condition="'$(TestRuntime)' == 'Mono'">net46;net472</TestTargetFrameworks>
    <TestTargetFrameworks Condition="'$(TestRuntime)' == 'Core'">net6.0;net7.0</TestTargetFrameworks>

    <XUnitDesktopSettingsFile>$(MSBuildThisFileDirectory)..\config\xunit.runner.json</XUnitDesktopSettingsFile>
    <XUnitCoreSettingsFile>$(MSBuildThisFileDirectory)..\config\xunit.runner.json</XUnitCoreSettingsFile>
  </PropertyGroup>

  <!-- Keys used by InternalsVisibleTo attributes. -->
  <PropertyGroup>
    <MoqPublicKey>0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7</MoqPublicKey>
    <VisualStudioKey>002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293</VisualStudioKey>
    <RazorKey>0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb</RazorKey>
    <MicrosoftSharedPublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</MicrosoftSharedPublicKey>
    <AspNetCoreKey>$(RazorKey)</AspNetCoreKey>
    <IntelliCodeCSharpKey>$(MicrosoftSharedPublicKey)</IntelliCodeCSharpKey>
    <IntelliCodeKey>002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293</IntelliCodeKey>
    <FSharpKey>$(VisualStudioKey)</FSharpKey>
    <TypeScriptKey>$(VisualStudioKey)</TypeScriptKey>
    <VisualStudioDebuggerKey>$(VisualStudioKey)</VisualStudioDebuggerKey>
    <XamarinKey>002400000480000094000000060200000024000052534131000400000100010079159977d2d03a8e6bea7a2e74e8d1afcc93e8851974952bb480a12c9134474d04062447c37e0e68c080536fcf3c3fbe2ff9c979ce998475e506e8ce82dd5b0f350dc10e93bf2eeecf874b24770c5081dbea7447fddafa277b22de47d6ffea449674a4f9fccf84d15069089380284dbdd35f46cdff12a1bd78e4ef0065d016df</XamarinKey>
    <UnitTestingKey>$(VisualStudioKey)</UnitTestingKey>
    <OmniSharpKey>0024000004800000940000000602000000240000525341310004000001000100917302efc152e6464679d4625bd9989e12d4662a9eaadf284d04992881c0e7b16e756e63ef200a02c4054d4d31e21b9aa0b0b873bcefca8cd42ec583a3db509665c9b22318ceceec581663fc07e2422bb2135539ba8a517c209ac175fff07c5af10cef636e04cae91d28f51fcde5d14c1a9bfed06e096cf977fd0d60002a3ea6</OmniSharpKey>
    <UnitTestGeneratorKey>0024000004800000940000000602000000240000525341310004000001000100e1e4cc8a3ceffcaef02f890a17745185d807f26eae1d31b1b69b84f97a1f57812a999f0f8a624147378c09db1ca669e7f3717ef3710f8ded8067c3b83f24506fae54f18f4e18e1d0df0f21862b58d35aec0917873e92ce8d61ec6b72ba2ebfc418b9ae7da8aa41e0602d5ccc1cf63af0b6cebf3f14f7ca3553233dab3a5eaeab</UnitTestGeneratorKey>
    <MicrosoftCodeAnalysisLanguageServerKey>002400000480000094000000060200000024000052534131000400000100010009f3c8fcb7cb2592cc6e6d3646d4d9a2bda9e7a243d357bc17a5a06f50ed0dae74a343cd9538fe45bbc90a3f7cbecb23558205e3b246b69f7f7730e520460d560da1c68cda9e2256e3b801629e2dc1fd588b1681aaf4f2c98abcfc50086ecbcd55f76f7dbaf018e708527d8ae3a2714b3ec9b62bd9aaf56cf55b3ffc9eee31aa</MicrosoftCodeAnalysisLanguageServerKey>
    <MicrosoftCodeAnalysisCompilerDeveloperSDKKey>00240000048000009400000006020000002400005253413100040000010001005984d9e99e5722bb74ddbb59972bff1a2fd9e0ccb2d50e09ef85e39ec4a4e4bf2de896997de1af164be0558cdd5a50a283b9353fc4e5ccc1c87363e6e7d87af7bec8ca40281596fc8f5b5aad9904230f6f3892f8dde382cee7ba9854004d86ce93834a86b42ebdd0faf86d9fa6d935e05aed68cb4d828cea77df028739aaa9dc</MicrosoftCodeAnalysisCompilerDeveloperSDKKey>
    <CopilotKey>002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293</CopilotKey>
  </PropertyGroup>

  <!--
       Enable hard links for the build. This is not done by default due to fears about
       inadvertently corrupting the NuGet cache (hard links in the output directory will
       point into the cache). The build itself will not due this but a developer directly
       modifying this directory could cause it to happen.

       Developers who do not modify the output directory directly can enable this safely

       Related discussion in https://github.com/dotnet/roslyn/issues/30005
  -->
  <PropertyGroup Condition="'$(ROSLYNUSEHARDLINKS)' != ''">
    <CreateHardLinksForCopyFilesToOutputDirectoryIfPossible>true</CreateHardLinksForCopyFilesToOutputDirectoryIfPossible>
    <CreateHardLinksForCopyAdditionalFilesIfPossible>true</CreateHardLinksForCopyAdditionalFilesIfPossible>
    <CreateHardLinksForCopyLocalIfPossible>true</CreateHardLinksForCopyLocalIfPossible>
    <CreateHardLinksForPublishFilesIfPossible>true</CreateHardLinksForPublishFilesIfPossible>
  </PropertyGroup>

  <!-- Windows specific settings -->
  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <DeployExtension Condition="'$(VisualStudioVersion)' != '15.0' and '$(VisualStudioVersion)' != '16.0'">false</DeployExtension>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DevEnvDir)' == ''">
    <DevEnvDir>$([System.Environment]::ExpandEnvironmentVariables("%VS$(VisualStudioReferenceMajorVersion)0COMNTOOLS%"))</DevEnvDir>
    <DevEnvDir>$(DevEnvDir)\..\IDE</DevEnvDir>
    <DevEnvDir>$([System.IO.Path]::GetFullPath('$(DevEnvDir)'))</DevEnvDir>
  </PropertyGroup>

  <!--
    Bootstrapping compilers
  -->
  <Import Project="Bootstrap.props" Condition="'$(BootstrapBuildPath)' != ''" />

  <!--
    Analyzers
  -->
  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="$(MicrosoftCodeAnalysisNetAnalyzersVersion)" PrivateAssets="all" />
    <PackageReference Include="Roslyn.Diagnostics.Analyzers" Version="$(RoslynDiagnosticsAnalyzersVersion)" PrivateAssets="all" />
    <PackageReference Include="Microsoft.VisualStudio.Threading.Analyzers" Version="$(MicrosoftVisualStudioThreadingAnalyzersVersion)" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.PerformanceSensitiveAnalyzers" Version="$(MicrosoftCodeAnalysisPerformanceSensitiveAnalyzersVersion)" PrivateAssets="all" />
  </ItemGroup>

  <!-- Disable SDK supplied netanalyzers as we reference them from nugets instead -->
  <PropertyGroup>
    <EnableNetAnalyzers>false</EnableNetAnalyzers>
  </PropertyGroup>

  <!--
     Code indexing targets to help generating LSIF from indexing builds.
  -->
  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
    <PackageReference Include="RichCodeNav.EnvVarDump" Version="$(RichCodeNavEnvVarDumpVersion)" PrivateAssets="all" />
  </ItemGroup>

  <!--
    Don't inject PerformanceSensitiveAttribute source by default to avoid duplicate definitions caused by IVT.
    This needs to be set to true in projects at the root of IVT trees, in order for PerformanceSensitiveAnalyzers to work.
  -->
  <PropertyGroup Condition="'$(GeneratePerformanceSensitiveAttribute)' == ''">
    <GeneratePerformanceSensitiveAttribute>false</GeneratePerformanceSensitiveAttribute>
  </PropertyGroup>

  <!-- Language-specific analyzer packages -->
  <Choose>
    <When Condition="'$(Language)' == 'VB'">
      <ItemGroup Condition="'$(RoslynCheckCodeStyle)' == 'true'">
        <PackageReference Include="Microsoft.CodeAnalysis.VisualBasic.CodeStyle" Version="$(MicrosoftCodeAnalysisVisualBasicCodeStyleVersion)" PrivateAssets="all" />
      </ItemGroup>
    </When>

    <When Condition="'$(Language)' == 'C#'">
      <ItemGroup Condition="'$(RoslynCheckCodeStyle)' == 'true'">
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp.CodeStyle" Version="$(MicrosoftCodeAnalysisCSharpCodeStyleVersion)" PrivateAssets="all" />
      </ItemGroup>
    </When>
  </Choose>

  <PropertyGroup Condition="'$(RoslynEnforceCodeStyle)' != 'true'">
    <!-- Don't treat FormattingAnalyzer as an error, even when TreatWarningsAsErrors is specified. -->
    <WarningsNotAsErrors>$(WarningsNotAsErrors);IDE0055</WarningsNotAsErrors>
  </PropertyGroup>

  <!--
    Language specific settings
  -->
  <Choose>
    <!-- VB specific settings -->
    <When Condition="'$(Language)' == 'VB'">
      <PropertyGroup>
        <LangVersion>latest</LangVersion>
        <NoWarn>$(NoWarn);40057</NoWarn>
        <VBRuntime>Embed</VBRuntime>
      </PropertyGroup>
      <ItemGroup>
        <Import Include="Microsoft.VisualBasic" />
        <Import Include="System" />
        <Import Include="System.Collections" />
        <Import Include="System.Collections.Generic" />
        <Import Include="System.Diagnostics" />
        <Import Include="System.Linq" />
      </ItemGroup>
      <PropertyGroup>
        <DefineConstants Condition="'$(InitialDefineConstants)' != ''">$(InitialDefineConstants)</DefineConstants>
      </PropertyGroup>
    </When>

    <!-- C# specific settings -->
    <When Condition="'$(Language)' == 'C#'">
      <PropertyGroup>
        <LangVersion>preview</LangVersion>
        <WarningLevel>9999</WarningLevel>
        <ErrorReport>prompt</ErrorReport>

        <!-- Suppress the following warnings by default for C# projects
                1573: Suppressed in order to allow documentation for some but not all parameters.
                      A warning will still be reported if the documentation defines/references a
                      parameter which does not exist.
                1591: So far we've chosen to implicitly implement interfaces and as a consequence
                      the methods are public.  We don't want to duplicate documentation for them
                      and hence suppress this warning until we get closer to release and a more
                      thorough documentation story
        -->
        <NoWarn>$(NoWarn);1573;1591;1701</NoWarn>
      </PropertyGroup>
      <PropertyGroup>
        <DefineConstants Condition="'$(InitialDefineConstants)' != ''">$(DefineConstants);$(InitialDefineConstants)</DefineConstants>
      </PropertyGroup>
    </When>
  </Choose>

  <PropertyGroup Condition="'$(DotNetBuildFromSource)' == 'true'">
    <!-- https://github.com/dotnet/roslyn/issues/38433 Vbc does not like the extra semicolon -->
    <DefineConstants Condition="'$(DefineConstants)' != ''">DOTNET_BUILD_FROM_SOURCE;$(DefineConstants)</DefineConstants>
    <DefineConstants Condition="'$(DefineConstants)' == ''">DOTNET_BUILD_FROM_SOURCE</DefineConstants>
  </PropertyGroup>
</Project>
