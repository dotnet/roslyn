parameters:
  - name: poolName
    type: string
  - name: queueName
    type: string
  - name: configuration
    type: string
    default: 'Debug'
    values: [ 'Debug', 'Release' ] 
  - name: timeout
    type: number
  - name: testRuns
    type: object
    default:
      - oop64bit: true
        oopCoreClr: false
        lspEditor: false
        runName: 64

stages:
- stage: Windows_${{ parameters.configuration }}_Build
  dependsOn: []
  variables:
    # Set the build queue based on the queueName parameter.
    # The build does not run on helix, so the queue names are slightly different.
    - name: buildQueueName
      ${{ if contains(parameters.queueName, 'scout') }}:
        value: windows.vs2022preview.scout.amd64.open
      ${{ else }}:
        value: windows.vs2022preview.amd64.open
  jobs:
  - template: build-windows-job.yml
    parameters:
      jobName: Build_Windows_${{ parameters.configuration }}
      testArtifactName: Transport_Artifacts_Windows_${{ parameters.configuration }}
      configuration: ${{ parameters.configuration }}
      poolParameters: 
        name: ${{ parameters.poolName }}
        demands: ImageOverride -equals $(buildQueueName)
      restoreArguments: -msbuildEngine vs
      buildArguments: -msbuildEngine vs /p:Projects='"$(Build.Repository.LocalPath)\src\VisualStudio\IntegrationTest\IntegrationTestBuildProject.csproj"'

- stage: ${{ parameters.configuration }}_Integration
  dependsOn: Windows_${{ parameters.configuration }}_Build
  variables:
  - name: XUNIT_LOGS
    value: $(Build.SourcesDirectory)\artifacts\log\${{ parameters.configuration }}
  jobs:
  - ${{ each testParameters in parameters.testRuns }}:
    - job: ${{ testParameters.runName }}
      timeoutInMinutes: ${{ parameters.timeout }}
      pool:
        name: ${{ parameters.poolName }}
        # Note that when helix is enabled, the agent running this job is essentially
        # a thin client that kicks off a helix job and waits for it to complete.
        # Thus we don't use a helix queue to run the job here, and instead use the plentiful AzDO vmImages.
        demands: ImageOverride -equals 1es-windows-2022-open
        
      steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        displayName: Download Test Payload
        inputs:
          artifact: Transport_Artifacts_Windows_${{ parameters.configuration }}
          path: '$(Build.SourcesDirectory)'

      - task: BatchScript@1
        displayName: Rehydrate RunTests
        inputs:
          filename: ./artifacts/bin/RunTests/${{ parameters.configuration }}/net8.0/rehydrate.cmd
        env:
          HELIX_CORRELATION_PAYLOAD: '$(Build.SourcesDirectory)\.duplicate'

      - task: PowerShell@2
        displayName: Run Integration Tests
        inputs:
          filePath: eng/build.ps1
          arguments: -ci -helix -prepareMachine -testVsi -helixQueueName ${{ parameters.queueName }} -configuration ${{ parameters.configuration }} -oop64bit:$${{ testParameters.oop64bit }} -oopCoreClr:$${{ testParameters.oopCoreClr }} -collectDumps -lspEditor:$${{ testParameters.lspEditor }}
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)

      - task: PublishBuildArtifacts@1
        displayName: Publish Logs
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)\artifacts\log\${{ parameters.configuration }}'
          ArtifactName: '$(System.JobAttempt)-Logs ${{ parameters.configuration }} OOP64_${{ testParameters.oop64bit }} OOPCoreClr_${{ testParameters.oopCoreClr }} LspEditor_${{ testParameters.lspEditor }} $(Build.BuildNumber)'
          publishLocation: Container
        continueOnError: true
        condition: not(succeeded())
