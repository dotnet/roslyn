<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  DefaultTargets="BuildAndTest"
  ToolsVersion="12.0">

  <Import Project="$(MSBuildThisFileDirectory)build\Targets\Dependencies.props" />

  <!-- At the moment Jenkins runs on a machine without any build of Visual Studio 2015.  Hence we must
       use a 2013 compatible solution. -->
  <PropertyGroup>
    <RoslynSolution Condition="'$(RoslynSolution)' == ''">$(MSBuildThisFileDirectory)Roslyn.sln</RoslynSolution>
    <SamplesSolution>$(MSBuildThisFileDirectory)src\Samples\Samples.sln</SamplesSolution>
    <Configuration Condition="'$(Configuration)' ==''">Debug</Configuration>
    <RunTestArgs Condition="'$(ManualTest)' == ''">$(RunTestArgs) -xml</RunTestArgs>
    <RunTestArgs Condition="'$(Test64)' == 'true'">$(RunTestArgs) -test64</RunTestArgs>
    <RunTestArgs Condition="'$(TestVsi)' == 'true'">$(RunTestArgs) -testVsi</RunTestArgs>
    <RunTestArgs Condition="'$(Trait)' != ''">$(RunTestArgs) -trait:$(Trait)</RunTestArgs>
    <RunTestArgs Condition="'$(NoTrait)' != ''">$(RunTestArgs) -notrait:$(NoTrait)</RunTestArgs>
    <IncludePattern Condition="'$(IncludePattern)' == '' AND '$(TestVsi)' != 'true'">*.UnitTests.dll</IncludePattern>
    <IncludePattern Condition="'$(IncludePattern)' == '' AND '$(TestVsi)' == 'true'">*.IntegrationTests.dll</IncludePattern>
    <OutputDirectory>Binaries\$(Configuration)</OutputDirectory>
    <NuGetPackageRoot>$(UserProfile)\.nuget\packages</NuGetPackageRoot>
    <CoreClrTestDirectory>$(OutputDirectory)\CoreClrTest</CoreClrTestDirectory>
    <MSBuildCommonProperties>
      RestorePackages=false;
      TreatWarningsAsErrors=true;
    </MSBuildCommonProperties>
    <MSBuildCommonProperties Condition="'$(TestVsi)' != 'true'">
      $(MSBuildCommonProperties);
      DeployExtension=false;
    </MSBuildCommonProperties>
    <MSBuildCommonProperties Condition="'$(TestVsi)' == 'true'">
      $(MSBuildCommonProperties);
      DeployExtension=true;
    </MSBuildCommonProperties>
  </PropertyGroup>

  <Target Name="Build">
    <MSBuild BuildInParallel="true"
             Projects="$(RoslynSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Build"/>
    <MSBuild BuildInParallel="true"
             Condition="'$(ManualTest)' == ''"
             Projects="$(SamplesSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Build"/>
  </Target>

  <Target Name="Clean">
    <MSBuild BuildInParallel="true"
             Projects="$(RoslynSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Clean"/>
    <MSBuild BuildInParallel="true"
             Condition="'$(ManualTest)' == ''"
             Projects="$(SamplesSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Clean"/>
  </Target>

  <Target Name="Rebuild">
    <MSBuild BuildInParallel="true"
             Projects="$(RoslynSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Rebuild"/>
    <MSBuild BuildInParallel="true"
             Condition="'$(ManualTest)' == ''"
             Projects="$(SamplesSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Rebuild"/>
  </Target>

  <Target Name="Test">
    <ItemGroup>
      <AssembliesToCopyLocal Include="$(NuGetPackageRoot)\xunit\$(xunitVersion)\*.dll
        ;$(NuGetPackageRoot)\xunit.assert\$(xunitassertVersion)\lib\portable-net45+netcore45+wp8+wpa81\*.dll" />
    </ItemGroup>
    <!-- Copy xunit stuff to output directory -->
    <Copy SourceFiles="@(AssembliesToCopyLocal)"
          DestinationFolder="$(OutputDirectory)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="true" />

    <MakeDir Directories="$(CoreClrTestDirectory)\xUnitResults" />

    <ItemGroup>

      <!-- MakeConst unit tests tracked by https://github.com/dotnet/roslyn/issues/5918 -->
      <TestAssemblies Condition="'$(Test64)' != 'true'" 
                      Include="$(OutputDirectory)\UnitTests*\**\$(IncludePattern);" />

      <TestAssemblies Condition="'$(Test64)' == 'true'" 
                      Include="$(OutputDirectory)\UnitTests*\**\$(IncludePattern);"
                      Exclude="$(OutputDirectory)\UnitTests*\**\Roslyn.Interactive*" />

      <CoreTestAssemblies Include="$(CoreClrTestDirectory)\$(IncludePattern)" />
    </ItemGroup>

    <PropertyGroup>
      <CoreRunExe>$(CoreClrTestDirectory)\CoreRun.exe</CoreRunExe>
      <CoreRunArgs>$(CoreClrTestDirectory)\xunit.console.netcore.exe @(CoreTestAssemblies, ' ') -parallel all -xml $(CoreClrTestDirectory)\xUnitResults\TestResults.xml</CoreRunArgs>
      <RunTestsExe>Binaries\$(Configuration)\Exes\RunTests\RunTests.exe</RunTestsExe>
      <RunTestsArgs>$(NuGetPackageRoot)\xunit.runner.console\$(xunitrunnerconsoleVersion)\tools $(RunTestArgs) @(TestAssemblies, ' ')</RunTestsArgs>
    </PropertyGroup>
    
    <Exec Condition="'$(RunProcessWatchdog)' != 'true' AND '$(TestVsi)' != 'true'" Command="&quot;$(CoreRunExe)&quot; $(CoreRunArgs)" />

    <Exec Condition="'$(RunProcessWatchdog)' != 'true'" Command="&quot;$(RunTestsExe)&quot; $(RunTestsArgs)" />

    <PropertyGroup Condition="'$(RunProcessWatchdog)' == 'true'">
      <ProcessWatchDogExe>$(OutputDirectory)\ProcessWatchdog\ProcessWatchdog.exe</ProcessWatchDogExe>
      <ProcessWatchdogOutputDirectory Condition="'$(ProcessWatchdogOutputDirectory)' == ''">$(OutputDirectory)\ProcessWatchdogOutput</ProcessWatchdogOutputDirectory>
      <ProcDumpExe Condition="'$(ProcDumpExe)' == ''">C:\Sysinternals\Procdump.exe</ProcDumpExe>

      <!--
      The time reserved for the process watchdog to kill all test processes and obtain crash
      dumps from them, measure in seconds.
      -->
      <BufferTime>300</BufferTime>

      <!--
      The fully constructed command line which runs a PowerShell script that runs both the
      Core CLR unit tests and the desktop unit tests under the control of the process watchdog.
      -->
      <RunProcessWatchdogScriptCommand>PowerShell.exe -ExecutionPolicy RemoteSigned -NoProfile .\build\scripts\Run-TestsWithProcessWatchdog.ps1 -ProcessWatchDogExe $(ProcessWatchDogExe) -ProcessWatchdogOutputDirectory $(ProcessWatchdogOutputDirectory) -ProcDumpExe $(ProcDumpExe) -CoreRunExe '$(CoreRunExe)' -CoreRunArgs '$(CoreRunArgs)' -RunTestsExe '$(RunTestsExe)' -RunTestsArgs '$(RunTestsArgs)' -BuildStartTime $(BuildStartTime) -BuildTimeLimit $(BuildTimeLimit) -BufferTime $(BufferTime)</RunProcessWatchdogScriptCommand>
    </PropertyGroup>

    <Exec Condition="'$(RunProcessWatchdog)' == 'true'" Command="$(RunProcessWatchdogScriptCommand)" />

  </Target>

  <Target Name="BuildAndTest"
          DependsOnTargets="Build;Test" />

</Project>
