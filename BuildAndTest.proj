<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  DefaultTargets="BuildAndTest"
  ToolsVersion="12.0">

  <!-- At the moment Jenkins runs on a machine without any build of Visual Studio 2015.  Hence we must
       use a 2013 compatible solution. -->
  <PropertyGroup>
    <RoslynSolution Condition="'$(RoslynSolution)' == ''">$(MSBuildThisFileDirectory)Roslyn.sln</RoslynSolution>
    <SamplesSolution>$(MSBuildThisFileDirectory)src\Samples\Samples.sln</SamplesSolution>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <RunTestArgs Condition="'$(ManualTest)' == ''">$(RunTestArgs) -xml</RunTestArgs>
    <RunTestArgs Condition="'$(Test64)' == 'true'">$(RunTestArgs) -test64</RunTestArgs>
    <RunTestArgs Condition="'$(Trait)' != ''">$(RunTestArgs) -trait:$(Trait)</RunTestArgs>
    <RunTestArgs Condition="'$(NoTrait)' != ''">$(RunTestArgs) -notrait:$(NoTrait)</RunTestArgs>
    <IncludePattern Condition="'$(IncludePattern)' == ''">*.UnitTests*.dll</IncludePattern>
    <OutputDirectory>Binaries\$(Configuration)</OutputDirectory>
    <NuGetPackageRoot>$(UserProfile)\.nuget\packages</NuGetPackageRoot>
    <XunitVersion>2.1.0</XunitVersion>
    <CoreClrTestDirectory>$(OutputDirectory)\CoreClrTest</CoreClrTestDirectory>
    <MSBuildCommonProperties>
      RestorePackages=false;
      TreatWarningsAsErrors=true;
      DeployExtension=false;
    </MSBuildCommonProperties>
  </PropertyGroup>

  <Target Name="Build">
    <MSBuild BuildInParallel="true"
             Projects="$(RoslynSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Build"/>
    <MSBuild BuildInParallel="true"
             Condition="'$(ManualTest)' == ''"
             Projects="$(SamplesSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Build"/>
  </Target>

  <Target Name="Clean">
    <MSBuild BuildInParallel="true"
             Projects="$(RoslynSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Clean"/>
    <MSBuild BuildInParallel="true"
             Condition="'$(ManualTest)' == ''"
             Projects="$(SamplesSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Clean"/>
  </Target>

  <Target Name="Rebuild">
    <MSBuild BuildInParallel="true"
             Projects="$(RoslynSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Rebuild"/>
    <MSBuild BuildInParallel="true"
             Condition="'$(ManualTest)' == ''"
             Projects="$(SamplesSolution)"
             Properties="$(MSBuildCommonProperties)"
             Targets="Rebuild"/>
  </Target>

  <Target Name="Test">
    <ItemGroup>
      <AssembliesToCopyLocal Include="$(NuGetPackageRoot)\xunit\$(XunitVersion)\*.dll
        ;$(NuGetPackageRoot)\xunit.assert\$(XunitVersion)\lib\portable-net45+netcore45+wp8+wpa81\*.dll" />
    </ItemGroup>
    <!-- Copy xunit stuff to output directory -->
    <Copy SourceFiles="@(AssembliesToCopyLocal)"
          DestinationFolder="$(OutputDirectory)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="true" />

    <MakeDir Directories="$(CoreClrTestDirectory)\xUnitResults" />

    <ItemGroup>

      <!-- MakeConst unit tests tracked by https://github.com/dotnet/roslyn/issues/5918 -->
      <TestAssemblies Condition="'$(Test64)' != 'true'" 
                      Include="$(OutputDirectory)\$(IncludePattern)" />

      <TestAssemblies Condition="'$(Test64)' == 'true'" 
                      Include="$(OutputDirectory)\$(IncludePattern)" 
                      Exclude="$(OutputDirectory)\Roslyn.Interactive*" />

      <CoreTestAssemblies Include="$(CoreClrTestDirectory)\$(IncludePattern)" />

      <MisplacedTestAssemblies Include="$(OutputDirectory)\**\$(IncludePattern)"
                               Exclude="$(OutputDirectory)\$(IncludePattern);@(CoreTestAssemblies)" />
    </ItemGroup>

    <Error Condition="'@(MisplacedTestAssemblies->Count())' &gt; 0"
        Text="Found test assemblies outside a well-known test directory: 
@(MisplacedTestAssemblies, '%0a')" />

    <PropertyGroup>
      <CoreRunExe>$(CoreClrTestDirectory)\CoreRun.exe</CoreRunExe>
      <CoreRunArgs>$(CoreClrTestDirectory)\xunit.console.netcore.exe @(CoreTestAssemblies, ' ') -parallel all -xml $(CoreClrTestDirectory)\xUnitResults\TestResults.xml</CoreRunArgs>

      <RunTestsExe>Binaries\$(Configuration)\RunTests\RunTests.exe</RunTestsExe>
      <RunTestsArgs>$(NuGetPackageRoot)\xunit.runner.console\$(XunitVersion)\tools $(RunTestArgs) @(TestAssemblies, ' ')</RunTestsArgs>
    </PropertyGroup>
    
    <Exec Condition="'$(RunProcessWatchdog)' == ''" Command="$(CoreRunExe) $(CoreRunArgs)" />
    <Exec Condition="'$(RunProcessWatchdog)' == ''" Command="$(RunTestsExe) $(RunTestsArgs)" />

    <PropertyGroup Condition="'$(RunProcessWatchdog)' != ''">
      <!--
      We use the ProcessWatchdog to ensure that the tests complete in the remaining
      time available to the Jenkins job. If they don't complete in that time, the
      ProcessWatchdog will take a screenshot, obtain a memory dump of the test process
      and any processes it has spawned, and then terminate those processes.

      The time available for the tests to run is:

        buildTimeLimit - (currentTime - buildStartTime) - buffer

      where "buffer" is a short amount of time to make sure that ProcessWatchdog has
      time to take the screenshot and the memory dumps before Jenkins shuts the whole
      build process down.
      -->
      <ProcessWatchdogExe Condition="'$(ProcessWatchdogExe)' == ''">$(OutputDirectory)\ProcessWatchdog\ProcessWatchdog.exe</ProcessWatchdogExe>
      <ProcessWatchdogOutputDirectory Condition="'$(ProcessWatchdogOutputDirectory)' == ''">$(OutputDirectory)\ProcessWatchdogOutput</ProcessWatchdogOutputDirectory>
      <ProcDumpPath Condition="'$(ProcDumpPath)' == ''">C:\Sysinternals\Procdump.exe</ProcDumpPath>
      <ProcessWatchdogArgs>--output-folder $(ProcessWatchdogOutputDirectory) --screenshot --procdump-path "$(ProcDumpPath)"</ProcessWatchdogArgs>
      <BufferSeconds>300</BufferSeconds>

      <!--
      We'd have liked to extract these constants from DateTime, for example,
          $([System.DateTime]::TicksPerSecond)
      but MSBuild won't let you do that.
      -->
      <TicksPerSecond>10000000</TicksPerSecond>
      <TicksPerMinute>$([MSBuild]::Multiply($(TicksPerSecond), 60))</TicksPerMinute>

      <StartTicks>$([System.DateTime]::Parse($(BuildStartTime)).Ticks)</StartTicks>
      <NowTicks>$([System.DateTime]::Now.Ticks)</NowTicks>
      <TimeSinceStartTicks>$([MSBuild]::Subtract($(NowTicks), $(StartTicks)))</TimeSinceStartTicks>
      <BuildTimeLimitTicks>$([MSBuild]::Multiply($(BuildTimeLimit), $(TicksPerMinute)))</BuildTimeLimitTicks>
      <BufferTicks>$([MSBuild]::Multiply($(BufferSeconds), $(TicksPerSecond)))</BufferTicks>
      <RemainingTimeTicks>$([MSBuild]::Subtract($([MSBuild]::Subtract($(BuildTimeLimitTicks), $(TimeSinceStartTicks))), $(BufferTicks)))</RemainingTimeTicks>
      <RemainingTimeSeconds>$([MSBuild]::Divide($(RemainingTimeTicks), $(TicksPerSecond)))</RemainingTimeSeconds>
    </PropertyGroup>
    
    <Error Condition="'$(RunProcessWatchdog)' != '' And $(RemainingTimeSeconds) &lt;= 0" Text="There is no time remaining to run the tests." />
    <Message Condition="'$(RunProcessWatchdog)' != ''" Importance="high" Text="Time remaining to run tests = $(RemainingTimeSeconds) seconds." />

    <Exec Condition="'$(RunProcessWatchdog)' != ''" Command='$(ProcessWatchdogExe) --executable $(CoreRunExe) --arguments "$(CoreRunArgs)" --time-limit $(RemainingTimeSeconds) $(ProcessWatchdogArgs)' />

    <!-- Recalculate the remaining time after the first set of tests. -->
    <PropertyGroup Condition="'$(RunProcessWatchdog)' != ''">
      <NowTicks>$([System.DateTime]::Now.Ticks)</NowTicks>
      <TimeSinceStartTicks>$([MSBuild]::Subtract($(NowTicks), $(StartTicks)))</TimeSinceStartTicks>
      <BuildTimeLimitTicks>$([MSBuild]::Multiply($(BuildTimeLimit), $(TicksPerMinute)))</BuildTimeLimitTicks>
      <BufferTicks>$([MSBuild]::Multiply($(BufferSeconds), $(TicksPerSecond)))</BufferTicks>
      <RemainingTimeTicks>$([MSBuild]::Subtract($([MSBuild]::Subtract($(BuildTimeLimitTicks), $(TimeSinceStartTicks))), $(BufferTicks)))</RemainingTimeTicks>
      <RemainingTimeSeconds>$([MSBuild]::Divide($(RemainingTimeTicks), $(TicksPerSecond)))</RemainingTimeSeconds>
    </PropertyGroup>
    
    <Error Condition="'$(RunProcessWatchdog)' != '' And $(RemainingTimeSeconds) &lt;= 0" Text="There is no time remaining to run the tests." />
    <Message Condition="'$(RunProcessWatchdog)' != ''" Importance="high" Text="Time remaining to run tests = $(RemainingTimeSeconds) seconds." />
   
    <Exec Condition="'$(RunProcessWatchdog)' != ''" Command='$(ProcessWatchdogExe) --executable $(RunTestsExe) --arguments "$(RunTestsArgs)" --time-limit $(RemainingTimeSeconds) $(ProcessWatchdogArgs)' />

  </Target>

  <Target Name="BuildAndTest"
          DependsOnTargets="Build;Test" />

</Project>
