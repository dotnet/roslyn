jobs:
- job: Windows_Desktop_Unit_Tests
  pool: dotnet-external-temp
  strategy:
    maxParallel: 4
    matrix:
      debug_32:
        _configuration: Debug
        _testKind: Test32
      debug_64:
        _configuration: Debug
        _testKind: Test64
      release_32:
        _configuration: Release
        _testKind: Test32
      release_64:
        _configuration: Release
        _testKind: Test64
  timeoutInMinutes: 90

  steps:
    - script: build/scripts/cibuild.cmd -configuration $(_configuration) -testDesktop -$(_testKind)
      displayName: Build and Test

    - task: PublishTestResults@1
      inputs:
        testRunner: XUnit
        testResultsFiles: '$(Build.SourcesDirectory)\Binaries\TestResults\$(_configuration)\*.xml'
        mergeTestResults: true
        testRunTitle: 'Windows Desktop $(_configuration) $(_testKind)'
      condition: always()

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\Binaries\$(_configuration)\Logs'
        ArtifactName: 'Windows Desktop $(_configuration) $(_testKind)' 
        publishLocation: Container
      continueOnError: true
      condition: not(succeeded())

- job: Windows_Desktop_Spanish_Unit_Tests
  pool: dnceng-windows-spanish-external-temp
  timeoutInMinutes: 90

  steps:
    - script: build/scripts/cibuild.cmd -configuration Debug -testDesktop
      displayName: Build and Test

    - task: PublishTestResults@1
      inputs:
        testRunner: XUnit
        testResultsFiles: '**/xUnitResults/*.xml'
        mergeTestResults: true
        testRunTitle: 'Windows Desktop Spanish'
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\Binaries\$(_configuration)\Logs'
        ArtifactName: 'Windows Desktop Spanish' 
        publishLocation: Container
      continueOnError: true
      condition: failed()

- job: Windows_CoreClr_Unit_Tests
  pool: dotnet-external-temp
  strategy:
    maxParallel: 2
    matrix:
      debug:
        _configuration: Debug
      release:
        _configuration: Release
  timeoutInMinutes: 90

  steps:
    - script: build/scripts/cibuild.cmd -configuration $(_configuration) -testCoreClr -buildCoreClr
      displayName: Build and Test

    - task: PublishTestResults@1
      inputs:
        testRunner: XUnit
        testResultsFiles: '$(Build.SourcesDirectory)\Binaries\TestResults\$(_configuration)\*.xml'
        mergeTestResults: true
        testRunTitle: 'Windows CoreClr $(_configuration)'
      condition: always()

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\Binaries\$(_configuration)\Logs'
        ArtifactName: 'Windows CoreClr $(_configuration)'
        publishLocation: Container
      continueOnError: true
      condition: not(succeeded())
           
- job: Windows_Determinism_Test
  pool: dotnet-external-temp
  timeoutInMinutes: 90
  steps:
    - script: build/scripts/cibuild.cmd -testDeterminism
      displayName: Build - Validate determinism

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\Binaries\Debug\Logs'
        ArtifactName: 'Build Determinism Files'
        publishLocation: Container
      continueOnError: true
      condition: not(succeeded())

- job: Windows_Correctness_Test
  pool: dotnet-external-temp
  timeoutInMinutes: 90
  steps:
    - script: build/scripts/test-build-correctness.cmd -configuration Release -cibuild
      displayName: Build - Validate correctness

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\Binaries\Release\Logs'
        ArtifactName: 'Build Correctness Files'
        publishLocation: Container
      continueOnError: true
      condition: not(succeeded())

- job: Linux_Test
  pool: DotNetCore-Linux                     
  strategy:
    maxParallel: 2
    matrix:
      coreclr:
        _args: --configuration Debug
        _name: CoreClr
        _configuration: Debug
      mono:
        _args: --configuration Debug --docker --mono
        _name: Mono
  timeoutInMinutes: 90
  steps:
    - script: ./build/scripts/cibuild.sh $(_args)
      displayName: Build and Test
    - script: ./build/scripts/dockerstop.sh
      displayName: Stop Docker
      condition: eq(variables['_name'], 'Mono')
    - task: PublishTestResults@1
      inputs:
        testRunner: XUnit
        testResultsFiles: '$(Build.SourcesDirectory)/Binaries/TestResults/$(_configuration)/*.xml'
        mergeTestResults: true
        testRunTitle: 'Linux $(_name)'
      condition: always()

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/Binaries/Debug/Logs'
        ArtifactName: 'Linux $(_name)'
        publishLocation: Container
      continueOnError: true
      condition: not(succeeded())

