# escape=`

# This file is auto-generated by PostSharp.Engineering.

FROM mcr.microsoft.com/windows/servercore:ltsc2025

# The initial shell is PowerShell Desktop.
SHELL ["powershell", "-Command"]

# Prepare environment
ENV PSExecutionPolicyPreference=Bypass
ENV POWERSHELL_UPDATECHECK=Off
ENV TEMP=C:\Temp
ENV TMP=C:\Temp
ENV RUNNING_IN_DOCKER=TRUE

# Enable long path support
RUN Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem' -Name 'LongPathsEnabled' -Value 1



# Install Git
RUN Invoke-WebRequest -Uri https://github.com/git-for-windows/git/releases/download/v2.50.0.windows.1/MinGit-2.50.0-64-bit.zip -OutFile MinGit.zip; `
    Expand-Archive c:\\MinGit.zip -DestinationPath C:\\git; `
    Remove-Item C:\\MinGit.zip; `
    $pathsToAdd = @('C:\git\cmd', 'C:\git\bin', 'C:\git\usr\bin'); `
    $newPath = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';' + ($pathsToAdd -join ';'); `
    [Environment]::SetEnvironmentVariable('PATH', $newPath, 'Machine');


# Install PowerShell 7
RUN Invoke-WebRequest -Uri https://github.com/PowerShell/PowerShell/releases/download/v7.5.2/PowerShell-7.5.2-win-x64.msi -OutFile PowerShell.msi; `
    $process = Start-Process msiexec.exe -Wait -PassThru -ArgumentList '/I PowerShell.msi /quiet'; `
    if ($process.ExitCode -ne 0) { exit $process.ExitCode }; `
    Remove-Item PowerShell.msi; `
    $pathsToAdd = @('C:\Program Files\PowerShell\7'); `
    $newPath = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';' + ($pathsToAdd -join ';'); `
    [Environment]::SetEnvironmentVariable('PATH', $newPath, 'Machine');


# Download .NET Installer
RUN Invoke-WebRequest -Uri https://dot.net/v1/dotnet-install.ps1 -OutFile dotnet-install.ps1; `
    $pathsToAdd = @('C:\Program Files\dotnet'); `
    $newPath = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';' + ($pathsToAdd -join ';'); `
    [Environment]::SetEnvironmentVariable('PATH', $newPath, 'Machine'); 


# Install .NET Sdk 9.0.201
RUN powershell -ExecutionPolicy Bypass -File dotnet-install.ps1 -Version 9.0.201 -InstallDir 'C:\Program Files\dotnet'; 


# Install VS Build Tools
COPY VisualStudio.17.14.15.Release.chman /VisualStudio.17.14.15.Release.chman
RUN Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vs_buildtools.exe -OutFile vs_buildtools.exe; `
    $process = Start-Process .\vs_buildtools.exe -NoNewWindow -Wait -PassThru `
        -ArgumentList  "--quiet", "--wait", "--norestart", "--nocache",  "--installPath", "C:\BuildTools", "--installChannelUri", "c:\VisualStudio.17.14.15.Release.chman", "--installCatalogUri", "https://download.visualstudio.microsoft.com/download/pr/eb5f7427-d28f-4e06-95cc-093f6c2070c8/3480d7a528bad877857c92843bb1e9ce8ebd48a2bffcee366a98a7343f4d32fb/VisualStudio.vsman", "--productId", "Microsoft.VisualStudio.Product.BuildTools", "--add", "Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools", "--add", "Microsoft.VisualStudio.Workload.NetCoreBuildTools", "--add", "Microsoft.VisualStudio.Workload.MSBuildTools", "--add", "Microsoft.Net.Component.4.7.2.TargetingPack", "--add", "Microsoft.Net.Component.4.7.2.SDK", "--add", "Microsoft.NetCore.Component.SDK"; `        
    if ($process.ExitCode -ne 0) { `
     Get-ChildItem "$env:TEMP\dd_*.log" -ErrorAction SilentlyContinue | ForEach-Object { `
        Write-Host "=== Contents of $($_.Name) ==="; `
        Get-Content $_.FullName; `
        Write-Host "=== End of $($_.Name) ===" `
        }; `
     exit $process.ExitCode; `
     }; `
    Remove-Item C:\\vs_buildtools.exe;
RUN New-Item -ItemType Directory -Path 'C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages' -Force | Out-Null"; `
    New-Item -ItemType Directory -Path 'C:\Program Files\dotnet\sdk\NuGetFallbackFolder' -Force | Out-Null


# Epilogue
# Create directories for mountpoints
ARG MOUNTPOINTS
RUN if ($env:MOUNTPOINTS) { `
        $mounts = $env:MOUNTPOINTS -split ';'; `
        foreach ($dir in $mounts) { `
            if ($dir) { `
                Write-Host "Creating directory $dir`."; `
                New-Item -ItemType Directory -Path $dir -Force | Out-Null; `
            } `
        } `
    }

# Import environment variables
COPY ReadEnvironmentVariables.ps1 c:\ReadEnvironmentVariables.ps1    
COPY env.g.json c:\env.g.json
RUN c:\ReadEnvironmentVariables.ps1 c:\env.g.json   

# Configure NuGet
ENV NUGET_PACKAGES=c:\packages

# Configure .NET SDK
ENV DOTNET_NOLOGO=1

# Configure git
ARG GITDIRS
RUN if ($env:GITDIRS) { `
        $gitdirs = $env:GITDIRS -split ';'; `
        foreach ($dir in $gitdirs) { `
            if ($dir) { `
                git config --global --add safe.directory $dir/; `
            } `
        } `
    }
RUN if ( $env:GIT_USER_NAME ) { git config --global user.name $env:GIT_USER_NAME } `
    if ( $env:GIT_USER_EMAIL ) { git config --global user.email $env:GIT_USER_EMAIL }
